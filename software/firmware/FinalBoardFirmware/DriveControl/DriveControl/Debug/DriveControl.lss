
DriveControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00802010  00802010  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ea0  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fc  00000000  00000000  00002752  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008db  00000000  00000000  0000314e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  00003a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bcf  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d9a  00000000  00000000  000048c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000565d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_25>
  68:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_26>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	ee eb       	ldi	r30, 0xBE	; 190
 180:	f6 e0       	ldi	r31, 0x06	; 6
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	a0 31       	cpi	r26, 0x10	; 16
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	a0 e1       	ldi	r26, 0x10	; 16
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a6 32       	cpi	r26, 0x26	; 38
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
 1a2:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <main>:
//////////////////////////////////////////////////////
///// Add in buffer flush for initialization to get rid of nonsense data
/////////////////////////////////

int main(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	64 97       	sbiw	r28, 0x14	; 20
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	de bf       	out	0x3e, r29	; 62
	SetXMEGA32MhzCalibrated();									//Set XMega to user 32Mhz internal oscillator with 32Khz crystal calibration
 1b8:	0e 94 0b 02 	call	0x416	; 0x416 <_Z23SetXMEGA32MhzCalibratedv>
	
	///////Setup Inputs and Outputs///////
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm | PIN3_bm);		//Sets outputs on port C
 1bc:	e0 e4       	ldi	r30, 0x40	; 64
 1be:	f6 e0       	ldi	r31, 0x06	; 6
 1c0:	88 ee       	ldi	r24, 0xE8	; 232
 1c2:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;										//Sets inputs on PORT C
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIRCLR = XBEEDIO0;									//Sets inputs on PORTA
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f6 e0       	ldi	r31, 0x06	; 6
 1ce:	82 83       	std	Z+2, r24	; 0x02
	
	
	///////Initialize Serial Communcations///////
	SetupPCComms();												//Initializes PC Communications at 9600 baud0
 1d0:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z12SetupPCCommsv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	83 ed       	ldi	r24, 0xD3	; 211
 1d8:	90 e3       	ldi	r25, 0x30	; 48
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x30>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x3a>
 1e4:	00 00       	nop
	_delay_ms(500);												//Delay to make sabertooth initialize
	Sabertooth DriveSaber(&USARTD0, &PORTD);					//Initializes Sabertooth Communications at 9600 Baud
 1e6:	40 e6       	ldi	r20, 0x60	; 96
 1e8:	56 e0       	ldi	r21, 0x06	; 6
 1ea:	60 ea       	ldi	r22, 0xA0	; 160
 1ec:	79 e0       	ldi	r23, 0x09	; 9
 1ee:	ce 01       	movw	r24, r28
 1f0:	41 96       	adiw	r24, 0x11	; 17
 1f2:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	sei();														//Enables global interrupts so the interrupt serial can work
 1f6:	78 94       	sei
	
	////Semi-global vars//////
	unsigned char BufferIdx = 0;
	const char XMegaID[] = "ID: MainDrive\r\n";
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	e0 e0       	ldi	r30, 0x00	; 0
 1fc:	f0 e2       	ldi	r31, 0x20	; 32
 1fe:	de 01       	movw	r26, r28
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	8a 95       	dec	r24
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x58>
	enum MicroState{
		WaitForHost,
		Driving	
	}XMegaState = WaitForHost;
 20a:	b1 2c       	mov	r11, r1
	Sabertooth DriveSaber(&USARTD0, &PORTD);					//Initializes Sabertooth Communications at 9600 Baud
	
	sei();														//Enables global interrupts so the interrupt serial can work
	
	////Semi-global vars//////
	unsigned char BufferIdx = 0;
 20c:	a1 2c       	mov	r10, r1
				}
				_delay_ms(500);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					if(USART_RXBuffer_GetByte(&USART_PC_Data) == 'r'){
						XMegaState = Driving;
						USART_PutChar(&USARTC0, 'r');
 20e:	00 ea       	ldi	r16, 0xA0	; 160
 210:	18 e0       	ldi	r17, 0x08	; 8
 212:	0f 2e       	mov	r0, r31
 214:	f2 e7       	ldi	r31, 0x72	; 114
 216:	8f 2e       	mov	r8, r31
 218:	f0 2d       	mov	r31, r0
		
				if(!IsRoving){
					DriveSaber.StopAll();
				}
			
				if((PORTA.IN & XBEEDIO0)){
 21a:	0f 2e       	mov	r0, r31
 21c:	e1 2c       	mov	r14, r1
 21e:	f6 e0       	ldi	r31, 0x06	; 6
 220:	ff 2e       	mov	r15, r31
 222:	f0 2d       	mov	r31, r0
					PORTC.OUTSET = (PIN5_bm | PIN6_bm | PIN7_bm);
					IsRoving = true;
				}else if((!(PORTA.IN & XBEEDIO0))){
					PORTC.OUTCLR = (PIN5_bm | PIN6_bm | PIN7_bm);
 224:	0f 2e       	mov	r0, r31
 226:	f0 e4       	ldi	r31, 0x40	; 64
 228:	cf 2e       	mov	r12, r31
 22a:	f6 e0       	ldi	r31, 0x06	; 6
 22c:	df 2e       	mov	r13, r31
 22e:	f0 2d       	mov	r31, r0
 230:	0f 2e       	mov	r0, r31
 232:	f0 ee       	ldi	r31, 0xE0	; 224
 234:	9f 2e       	mov	r9, r31
 236:	f0 2d       	mov	r31, r0
				}
			
				if(BufferIdx == RECEIVE_PACKET_SIZE){
					FlushSerialBuffer(&USART_PC_Data);
					if(IsRoving){
						if(receiveArray[4] == PCComsChecksum(receiveArray[1], receiveArray[2], receiveArray[3])){
 238:	0f 2e       	mov	r0, r31
 23a:	f3 e2       	ldi	r31, 0x23	; 35
 23c:	2f 2e       	mov	r2, r31
 23e:	f0 e2       	ldi	r31, 0x20	; 32
 240:	3f 2e       	mov	r3, r31
 242:	f0 2d       	mov	r31, r0
 244:	0f 2e       	mov	r0, r31
 246:	f2 e2       	ldi	r31, 0x22	; 34
 248:	4f 2e       	mov	r4, r31
 24a:	f0 e2       	ldi	r31, 0x20	; 32
 24c:	5f 2e       	mov	r5, r31
 24e:	f0 2d       	mov	r31, r0
 250:	0f 2e       	mov	r0, r31
 252:	f1 e2       	ldi	r31, 0x21	; 33
 254:	6f 2e       	mov	r6, r31
 256:	f0 e2       	ldi	r31, 0x20	; 32
 258:	7f 2e       	mov	r7, r31
 25a:	f0 2d       	mov	r31, r0
		Driving	
	}XMegaState = WaitForHost;

	while(1){
		
		switch(XMegaState){
 25c:	bb 20       	and	r11, r11
 25e:	21 f0       	breq	.+8      	; 0x268 <main+0xbe>
 260:	a1 e0       	ldi	r26, 0x01	; 1
 262:	ba 16       	cp	r11, r26
 264:	51 f1       	breq	.+84     	; 0x2ba <main+0x110>
 266:	fa cf       	rjmp	.-12     	; 0x25c <main+0xb2>
			case WaitForHost:
				for(int i = 0 ; XMegaID[i] != '\0'; i++){
 268:	99 81       	ldd	r25, Y+1	; 0x01
 26a:	99 23       	and	r25, r25
 26c:	61 f0       	breq	.+24     	; 0x286 <main+0xdc>
 26e:	fe 01       	movw	r30, r28
 270:	32 96       	adiw	r30, 0x02	; 2
					while(!USART_IsTXDataRegisterEmpty(&USARTC0));
 272:	d8 01       	movw	r26, r16
 274:	11 96       	adiw	r26, 0x01	; 1
 276:	8c 91       	ld	r24, X
 278:	11 97       	sbiw	r26, 0x01	; 1
 27a:	85 ff       	sbrs	r24, 5
 27c:	fa cf       	rjmp	.-12     	; 0x272 <main+0xc8>
					USART_PutChar(&USARTC0, XMegaID[i]);
 27e:	9c 93       	st	X, r25

	while(1){
		
		switch(XMegaState){
			case WaitForHost:
				for(int i = 0 ; XMegaID[i] != '\0'; i++){
 280:	91 91       	ld	r25, Z+
 282:	91 11       	cpse	r25, r1
 284:	f6 cf       	rjmp	.-20     	; 0x272 <main+0xc8>
 286:	bf ef       	ldi	r27, 0xFF	; 255
 288:	e3 ed       	ldi	r30, 0xD3	; 211
 28a:	f0 e3       	ldi	r31, 0x30	; 48
 28c:	b1 50       	subi	r27, 0x01	; 1
 28e:	e0 40       	sbci	r30, 0x00	; 0
 290:	f0 40       	sbci	r31, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0xe2>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0xec>
 296:	00 00       	nop
					while(!USART_IsTXDataRegisterEmpty(&USARTC0));
					USART_PutChar(&USARTC0, XMegaID[i]);
				}
				_delay_ms(500);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 298:	81 e1       	ldi	r24, 0x11	; 17
 29a:	90 e2       	ldi	r25, 0x20	; 32
 29c:	0e 94 1a 03 	call	0x634	; 0x634 <USART_RXBufferData_Available>
 2a0:	88 23       	and	r24, r24
 2a2:	e1 f2       	breq	.-72     	; 0x25c <main+0xb2>
					if(USART_RXBuffer_GetByte(&USART_PC_Data) == 'r'){
 2a4:	81 e1       	ldi	r24, 0x11	; 17
 2a6:	90 e2       	ldi	r25, 0x20	; 32
 2a8:	0e 94 22 03 	call	0x644	; 0x644 <USART_RXBuffer_GetByte>
 2ac:	82 37       	cpi	r24, 0x72	; 114
 2ae:	b1 f6       	brne	.-84     	; 0x25c <main+0xb2>
						XMegaState = Driving;
						USART_PutChar(&USARTC0, 'r');
 2b0:	d8 01       	movw	r26, r16
 2b2:	8c 92       	st	X, r8
					USART_PutChar(&USARTC0, XMegaID[i]);
				}
				_delay_ms(500);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					if(USART_RXBuffer_GetByte(&USART_PC_Data) == 'r'){
						XMegaState = Driving;
 2b4:	bb 24       	eor	r11, r11
 2b6:	b3 94       	inc	r11
 2b8:	d1 cf       	rjmp	.-94     	; 0x25c <main+0xb2>
					}
				}
				break;	
				
			case Driving:
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 2ba:	81 e1       	ldi	r24, 0x11	; 17
 2bc:	90 e2       	ldi	r25, 0x20	; 32
 2be:	0e 94 1a 03 	call	0x634	; 0x634 <USART_RXBufferData_Available>
 2c2:	88 23       	and	r24, r24
 2c4:	51 f0       	breq	.+20     	; 0x2da <main+0x130>
					receiveArray[BufferIdx] = USART_RXBuffer_GetByte(&USART_PC_Data);
 2c6:	81 e1       	ldi	r24, 0x11	; 17
 2c8:	90 e2       	ldi	r25, 0x20	; 32
 2ca:	0e 94 22 03 	call	0x644	; 0x644 <USART_RXBuffer_GetByte>
 2ce:	ea 2d       	mov	r30, r10
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e0 5e       	subi	r30, 0xE0	; 224
 2d4:	ff 4d       	sbci	r31, 0xDF	; 223
 2d6:	80 83       	st	Z, r24
					BufferIdx++;
 2d8:	a3 94       	inc	r10
				}
			
				if(BufferIdx == RECEIVE_PACKET_SIZE){
 2da:	b6 e0       	ldi	r27, 0x06	; 6
 2dc:	ab 12       	cpse	r10, r27
 2de:	32 c0       	rjmp	.+100    	; 0x344 <main+0x19a>
					FlushSerialBuffer(&USART_PC_Data);
 2e0:	81 e1       	ldi	r24, 0x11	; 17
 2e2:	90 e2       	ldi	r25, 0x20	; 32
 2e4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z17FlushSerialBufferP16Usart_and_buffer>
					if(IsRoving){
 2e8:	80 91 10 20 	lds	r24, 0x2010
 2ec:	88 23       	and	r24, r24
 2ee:	19 f1       	breq	.+70     	; 0x336 <main+0x18c>
						if(receiveArray[4] == PCComsChecksum(receiveArray[1], receiveArray[2], receiveArray[3])){
 2f0:	e4 e2       	ldi	r30, 0x24	; 36
 2f2:	f0 e2       	ldi	r31, 0x20	; 32
 2f4:	a0 80       	ld	r10, Z
 2f6:	d1 01       	movw	r26, r2
 2f8:	4c 91       	ld	r20, X
 2fa:	f2 01       	movw	r30, r4
 2fc:	60 81       	ld	r22, Z
 2fe:	d3 01       	movw	r26, r6
 300:	8c 91       	ld	r24, X
 302:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z14PCComsChecksumhhh>
 306:	a8 12       	cpse	r10, r24
 308:	09 c0       	rjmp	.+18     	; 0x31c <main+0x172>
							DriveSaber.ParsePacket(receiveArray[2], receiveArray[3]);
 30a:	f1 01       	movw	r30, r2
 30c:	40 81       	ld	r20, Z
 30e:	d2 01       	movw	r26, r4
 310:	6c 91       	ld	r22, X
 312:	ce 01       	movw	r24, r28
 314:	41 96       	adiw	r24, 0x11	; 17
 316:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN10Sabertooth11ParsePacketEhh>
 31a:	0d c0       	rjmp	.+26     	; 0x336 <main+0x18c>
					}else if(!IsRoving){
 31c:	80 91 10 20 	lds	r24, 0x2010
 320:	81 11       	cpse	r24, r1
 322:	09 c0       	rjmp	.+18     	; 0x336 <main+0x18c>
 324:	bf ef       	ldi	r27, 0xFF	; 255
 326:	e9 ef       	ldi	r30, 0xF9	; 249
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	b1 50       	subi	r27, 0x01	; 1
 32c:	e0 40       	sbci	r30, 0x00	; 0
 32e:	f0 40       	sbci	r31, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x180>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x18a>
 334:	00 00       	nop
						_delay_ms(10);
					}
				}					
					BufferIdx = 0;
					SendDriveControlStatus(&USARTC0, IsRoving, false);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	60 91 10 20 	lds	r22, 0x2010
 33c:	c8 01       	movw	r24, r16
 33e:	0e 94 56 02 	call	0x4ac	; 0x4ac <_Z22SendDriveControlStatusP12USART_structbb>
							DriveSaber.ParsePacket(receiveArray[2], receiveArray[3]);
					}else if(!IsRoving){
						_delay_ms(10);
					}
				}					
					BufferIdx = 0;
 342:	a1 2c       	mov	r10, r1
					SendDriveControlStatus(&USARTC0, IsRoving, false);
				}
		
				if(!IsRoving){
 344:	80 91 10 20 	lds	r24, 0x2010
 348:	81 11       	cpse	r24, r1
 34a:	04 c0       	rjmp	.+8      	; 0x354 <main+0x1aa>
					DriveSaber.StopAll();
 34c:	ce 01       	movw	r24, r28
 34e:	41 96       	adiw	r24, 0x11	; 17
 350:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN10Sabertooth7StopAllEv>
				}
			
				if((PORTA.IN & XBEEDIO0)){
 354:	d7 01       	movw	r26, r14
 356:	18 96       	adiw	r26, 0x08	; 8
 358:	8c 91       	ld	r24, X
 35a:	85 ff       	sbrs	r24, 5
 35c:	06 c0       	rjmp	.+12     	; 0x36a <main+0x1c0>
					PORTC.OUTSET = (PIN5_bm | PIN6_bm | PIN7_bm);
 35e:	f6 01       	movw	r30, r12
 360:	95 82       	std	Z+5, r9	; 0x05
					IsRoving = true;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 10 20 	sts	0x2010, r24
 368:	79 cf       	rjmp	.-270    	; 0x25c <main+0xb2>
				}else if((!(PORTA.IN & XBEEDIO0))){
 36a:	d7 01       	movw	r26, r14
 36c:	18 96       	adiw	r26, 0x08	; 8
 36e:	8c 91       	ld	r24, X
 370:	85 fd       	sbrc	r24, 5
 372:	74 cf       	rjmp	.-280    	; 0x25c <main+0xb2>
					PORTC.OUTCLR = (PIN5_bm | PIN6_bm | PIN7_bm);
 374:	f6 01       	movw	r30, r12
 376:	96 82       	std	Z+6, r9	; 0x06
					IsRoving = false;
 378:	10 92 10 20 	sts	0x2010, r1
 37c:	6f cf       	rjmp	.-290    	; 0x25c <main+0xb2>

0000037e <__vector_25>:
		};	
	}
}

ISR(USARTC0_RXC_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
 3a0:	81 e1       	ldi	r24, 0x11	; 17
 3a2:	90 e2       	ldi	r25, 0x20	; 32
 3a4:	0e 94 2e 03 	call	0x65c	; 0x65c <USART_RXComplete>
}
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	7f 91       	pop	r23
 3b6:	6f 91       	pop	r22
 3b8:	5f 91       	pop	r21
 3ba:	4f 91       	pop	r20
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_26>:


ISR(USARTC0_DRE_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
 3ec:	81 e1       	ldi	r24, 0x11	; 17
 3ee:	90 e2       	ldi	r25, 0x20	; 32
 3f0:	0e 94 43 03 	call	0x686	; 0x686 <USART_DataRegEmpty>
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <_Z23SetXMEGA32MhzCalibratedv>:
 */ 
#include "Misc.h"
#include <avr/io.h>

void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 416:	88 ed       	ldi	r24, 0xD8	; 216
 418:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
 420:	e0 e5       	ldi	r30, 0x50	; 80
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	81 81       	ldd	r24, Z+1	; 0x01
 426:	81 ff       	sbrs	r24, 1
 428:	fd cf       	rjmp	.-6      	; 0x424 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
 42a:	88 ed       	ldi	r24, 0xD8	; 216
 42c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 434:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
 436:	e0 e5       	ldi	r30, 0x50	; 80
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
 440:	81 81       	ldd	r24, Z+1	; 0x01
 442:	82 ff       	sbrs	r24, 2
 444:	fd cf       	rjmp	.-6      	; 0x440 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
 446:	e0 e5       	ldi	r30, 0x50	; 80
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	86 81       	ldd	r24, Z+6	; 0x06
 44c:	8d 7f       	andi	r24, 0xFD	; 253
 44e:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
 450:	e0 e6       	ldi	r30, 0x60	; 96
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	81 60       	ori	r24, 0x01	; 1
 458:	80 83       	st	Z, r24
 45a:	08 95       	ret

0000045c <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	60 ea       	ldi	r22, 0xA0	; 160
 460:	78 e0       	ldi	r23, 0x08	; 8
 462:	81 e1       	ldi	r24, 0x11	; 17
 464:	90 e2       	ldi	r25, 0x20	; 32
 466:	0e 94 11 03 	call	0x622	; 0x622 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 46a:	e0 91 11 20 	lds	r30, 0x2011
 46e:	f0 91 12 20 	lds	r31, 0x2012
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	8f 7c       	andi	r24, 0xCF	; 207
 47a:	80 61       	ori	r24, 0x10	; 16
 47c:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 47e:	a0 ea       	ldi	r26, 0xA0	; 160
 480:	b8 e0       	ldi	r27, 0x08	; 8
 482:	8f ec       	ldi	r24, 0xCF	; 207
 484:	16 96       	adiw	r26, 0x06	; 6
 486:	8c 93       	st	X, r24
 488:	16 97       	sbiw	r26, 0x06	; 6
 48a:	17 96       	adiw	r26, 0x07	; 7
 48c:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
 48e:	84 81       	ldd	r24, Z+4	; 0x04
 490:	80 61       	ori	r24, 0x10	; 16
 492:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
 494:	84 81       	ldd	r24, Z+4	; 0x04
 496:	88 60       	ori	r24, 0x08	; 8
 498:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
 49a:	e0 ea       	ldi	r30, 0xA0	; 160
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	82 81       	ldd	r24, Z+2	; 0x02
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	82 83       	std	Z+2, r24	; 0x02
 4a4:	08 95       	ret

000004a6 <_Z14PCComsChecksumhhh>:
}

unsigned char PCComsChecksum(unsigned char command, unsigned char left, unsigned char right){
	return (command ^ left ^ right);
 4a6:	64 27       	eor	r22, r20
	
}
 4a8:	86 27       	eor	r24, r22
 4aa:	08 95       	ret

000004ac <_Z22SendDriveControlStatusP12USART_structbb>:

void SendDriveControlStatus(USART_t *PCComs, bool IsRoving, bool Checksum){
 4ac:	fc 01       	movw	r30, r24
	while(!USART_IsTXDataRegisterEmpty(PCComs));
 4ae:	81 81       	ldd	r24, Z+1	; 0x01
 4b0:	85 ff       	sbrs	r24, 5
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <_Z22SendDriveControlStatusP12USART_structbb+0x2>
	USART_PutChar(PCComs, 255);
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(PCComs));
 4b8:	81 81       	ldd	r24, Z+1	; 0x01
 4ba:	85 ff       	sbrs	r24, 5
 4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <_Z22SendDriveControlStatusP12USART_structbb+0xc>
	USART_PutChar(PCComs, ((IsRoving << 0) | (Checksum << 1)));
 4be:	44 0f       	add	r20, r20
 4c0:	64 2b       	or	r22, r20
 4c2:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(PCComs));
 4c4:	81 81       	ldd	r24, Z+1	; 0x01
 4c6:	85 ff       	sbrs	r24, 5
 4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <_Z22SendDriveControlStatusP12USART_structbb+0x18>
	USART_PutChar(PCComs, 255);
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	80 83       	st	Z, r24
 4ce:	08 95       	ret

000004d0 <_Z17FlushSerialBufferP16Usart_and_buffer>:
}

void FlushSerialBuffer(USART_data_t *UsartBuffer){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
 4d8:	ce 01       	movw	r24, r28
 4da:	0e 94 22 03 	call	0x644	; 0x644 <USART_RXBuffer_GetByte>
	while(!USART_IsTXDataRegisterEmpty(PCComs));
	USART_PutChar(PCComs, 255);
}

void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
 4de:	ce 01       	movw	r24, r28
 4e0:	0e 94 1a 03 	call	0x634	; 0x634 <USART_RXBufferData_Available>
 4e4:	81 11       	cpse	r24, r1
 4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
 4ee:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
 4f0:	ed 91       	ld	r30, X+
 4f2:	fc 91       	ld	r31, X
 4f4:	11 97       	sbiw	r26, 0x01	; 1
 4f6:	81 81       	ldd	r24, Z+1	; 0x01
 4f8:	85 ff       	sbrs	r24, 5
 4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
 500:	ed 91       	ld	r30, X+
 502:	fc 91       	ld	r31, X
 504:	11 97       	sbiw	r26, 0x01	; 1
 506:	81 81       	ldd	r24, Z+1	; 0x01
 508:	85 ff       	sbrs	r24, 5
 50a:	fd cf       	rjmp	.-6      	; 0x506 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
 50c:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
 50e:	ed 91       	ld	r30, X+
 510:	fc 91       	ld	r31, X
 512:	11 97       	sbiw	r26, 0x01	; 1
 514:	81 81       	ldd	r24, Z+1	; 0x01
 516:	85 ff       	sbrs	r24, 5
 518:	fd cf       	rjmp	.-6      	; 0x514 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
 51a:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
 51c:	ed 91       	ld	r30, X+
 51e:	fc 91       	ld	r31, X
 520:	81 81       	ldd	r24, Z+1	; 0x01
 522:	85 ff       	sbrs	r24, 5
 524:	fd cf       	rjmp	.-6      	; 0x520 <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
 526:	64 0f       	add	r22, r20
 528:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
 52a:	60 83       	st	Z, r22
 52c:	08 95       	ret

0000052e <_ZN10Sabertooth11ParsePacketEhh>:
			_delay_ms(30);
		}
		
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	ec 01       	movw	r28, r24
 538:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
 53a:	6f 37       	cpi	r22, 0x7F	; 127
 53c:	61 f0       	breq	.+24     	; 0x556 <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
 53e:	6f 37       	cpi	r22, 0x7F	; 127
 540:	20 f4       	brcc	.+8      	; 0x54a <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
 542:	4f e7       	ldi	r20, 0x7F	; 127
 544:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	0b c0       	rjmp	.+22     	; 0x560 <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
 54a:	66 23       	and	r22, r22
 54c:	3c f4       	brge	.+14     	; 0x55c <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
 54e:	41 e8       	ldi	r20, 0x81	; 129
 550:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	05 c0       	rjmp	.+10     	; 0x560 <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
 556:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <_ZN10Sabertooth11ParsePacketEhh+0x32>
		
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
 55c:	40 e0       	ldi	r20, 0x00	; 0
		}
		
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
 55e:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
 560:	8f 37       	cpi	r24, 0x7F	; 127
 562:	61 f0       	breq	.+24     	; 0x57c <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
 564:	8f 37       	cpi	r24, 0x7F	; 127
 566:	20 f4       	brcc	.+8      	; 0x570 <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
 568:	0f e7       	ldi	r16, 0x7F	; 127
 56a:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
 56c:	15 e0       	ldi	r17, 0x05	; 5
 56e:	0b c0       	rjmp	.+22     	; 0x586 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
 570:	88 23       	and	r24, r24
 572:	3c f4       	brge	.+14     	; 0x582 <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
 574:	01 e8       	ldi	r16, 0x81	; 129
 576:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
 578:	14 e0       	ldi	r17, 0x04	; 4
 57a:	05 c0       	rjmp	.+10     	; 0x586 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
 57c:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
 57e:	14 e0       	ldi	r17, 0x04	; 4
 580:	02 c0       	rjmp	.+4      	; 0x586 <_ZN10Sabertooth11ParsePacketEhh+0x58>

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
 582:	00 e0       	ldi	r16, 0x00	; 0
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
 584:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
 586:	ce 01       	movw	r24, r28
 588:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
 58c:	40 2f       	mov	r20, r16
 58e:	61 2f       	mov	r22, r17
 590:	ce 01       	movw	r24, r28
 592:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN10Sabertooth12SendDriveCmdEcc>
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	64 e0       	ldi	r22, 0x04	; 4
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN10Sabertooth12SendDriveCmdEcc>
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:

#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>

Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
 5c4:	68 83       	st	Y, r22
 5c6:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
 5c8:	4a 83       	std	Y+2, r20	; 0x02
 5ca:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
 5cc:	88 e0       	ldi	r24, 0x08	; 8
 5ce:	fa 01       	movw	r30, r20
 5d0:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
 5d2:	e8 81       	ld	r30, Y
 5d4:	f9 81       	ldd	r31, Y+1	; 0x01
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
 5da:	e8 81       	ld	r30, Y
 5dc:	f9 81       	ldd	r31, Y+1	; 0x01
 5de:	8f ec       	ldi	r24, 0xCF	; 207
 5e0:	86 83       	std	Z+6, r24	; 0x06
 5e2:	e8 81       	ld	r30, Y
 5e4:	f9 81       	ldd	r31, Y+1	; 0x01
 5e6:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
 5e8:	e8 81       	ld	r30, Y
 5ea:	f9 81       	ldd	r31, Y+1	; 0x01
 5ec:	84 81       	ldd	r24, Z+4	; 0x04
 5ee:	88 60       	ori	r24, 0x08	; 8
 5f0:	84 83       	std	Z+4, r24	; 0x04
 5f2:	ff ef       	ldi	r31, 0xFF	; 255
 5f4:	23 ec       	ldi	r18, 0xC3	; 195
 5f6:	89 e0       	ldi	r24, 0x09	; 9
 5f8:	f1 50       	subi	r31, 0x01	; 1
 5fa:	20 40       	sbci	r18, 0x00	; 0
 5fc:	80 40       	sbci	r24, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
 600:	00 c0       	rjmp	.+0      	; 0x602 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
 602:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
 604:	e8 81       	ld	r30, Y
 606:	f9 81       	ldd	r31, Y+1	; 0x01
 608:	8a ea       	ldi	r24, 0xAA	; 170
 60a:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
 60c:	44 e1       	ldi	r20, 0x14	; 20
 60e:	6e e0       	ldi	r22, 0x0E	; 14
 610:	ce 01       	movw	r24, r28
 612:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
 616:	ce 01       	movw	r24, r28
 618:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN10Sabertooth7StopAllEv>
}
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 622:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 624:	60 83       	st	Z, r22
 626:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 628:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 62a:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 62c:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 62e:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 630:	15 86       	std	Z+13, r1	; 0x0d
 632:	08 95       	ret

00000634 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 634:	fc 01       	movw	r30, r24
 636:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 638:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	29 13       	cpse	r18, r25
 63e:	01 c0       	rjmp	.+2      	; 0x642 <USART_RXBufferData_Available+0xe>
 640:	80 e0       	ldi	r24, 0x00	; 0
}
 642:	08 95       	ret

00000644 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 644:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 646:	84 85       	ldd	r24, Z+12	; 0x0c
 648:	df 01       	movw	r26, r30
 64a:	a8 0f       	add	r26, r24
 64c:	b1 1d       	adc	r27, r1
 64e:	13 96       	adiw	r26, 0x03	; 3
 650:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 652:	94 85       	ldd	r25, Z+12	; 0x0c
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	93 70       	andi	r25, 0x03	; 3
 658:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 65a:	08 95       	ret

0000065c <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 65c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 65e:	83 85       	ldd	r24, Z+11	; 0x0b
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 664:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 666:	a0 81       	ld	r26, Z
 668:	b1 81       	ldd	r27, Z+1	; 0x01
 66a:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 66c:	89 17       	cp	r24, r25
 66e:	49 f0       	breq	.+18     	; 0x682 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 670:	93 85       	ldd	r25, Z+11	; 0x0b
 672:	df 01       	movw	r26, r30
 674:	a9 0f       	add	r26, r25
 676:	b1 1d       	adc	r27, r1
 678:	13 96       	adiw	r26, 0x03	; 3
 67a:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 67c:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 682:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 684:	08 95       	ret

00000686 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 686:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 688:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 68a:	95 85       	ldd	r25, Z+13	; 0x0d
 68c:	98 13       	cpse	r25, r24
 68e:	07 c0       	rjmp	.+14     	; 0x69e <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 690:	01 90       	ld	r0, Z+
 692:	f0 81       	ld	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 698:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 69a:	83 83       	std	Z+3, r24	; 0x03
 69c:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 69e:	86 85       	ldd	r24, Z+14	; 0x0e
 6a0:	df 01       	movw	r26, r30
 6a2:	a8 0f       	add	r26, r24
 6a4:	b1 1d       	adc	r27, r1
 6a6:	17 96       	adiw	r26, 0x07	; 7
 6a8:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 6aa:	a0 81       	ld	r26, Z
 6ac:	b1 81       	ldd	r27, Z+1	; 0x01
 6ae:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 6b0:	86 85       	ldd	r24, Z+14	; 0x0e
 6b2:	8f 5f       	subi	r24, 0xFF	; 255
 6b4:	83 70       	andi	r24, 0x03	; 3
 6b6:	86 87       	std	Z+14, r24	; 0x0e
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
