
DriveControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  0000081a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00802010  00802010  000008be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025b6  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a56  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000916  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000032c  00000000  00000000  00004340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000010a7  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e90  00000000  00000000  00005713  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000065a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_14>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_25>
  68:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_26>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_77>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	ea e1       	ldi	r30, 0x1A	; 26
 180:	f8 e0       	ldi	r31, 0x08	; 8
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	a0 31       	cpi	r26, 0x10	; 16
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	a0 e1       	ldi	r26, 0x10	; 16
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	ae 32       	cpi	r26, 0x2E	; 46
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
 1a2:	0c 94 0b 04 	jmp	0x816	; 0x816 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <main>:

volatile long unsigned int TimeSinceInit = 0;
long unsigned int TimePrevious = 0;

int main(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	64 97       	sbiw	r28, 0x14	; 20
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	de bf       	out	0x3e, r29	; 62
	SetXMEGA32MhzCalibrated();									//Set XMega to user 32Mhz internal oscillator with 32Khz crystal calibration
 1b8:	0e 94 b9 02 	call	0x572	; 0x572 <_Z23SetXMEGA32MhzCalibratedv>
	
	///////Setup Inputs and Outputs///////
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm | PIN3_bm);		//Sets outputs on port C
 1bc:	e0 e4       	ldi	r30, 0x40	; 64
 1be:	f6 e0       	ldi	r31, 0x06	; 6
 1c0:	88 ee       	ldi	r24, 0xE8	; 232
 1c2:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;										//Sets inputs on PORT C
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIRCLR = XBEEDIO0;
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f6 e0       	ldi	r31, 0x06	; 6
 1ce:	82 83       	std	Z+2, r24	; 0x02
	PORTE.DIRSET = PIN3_bm;									//Sets inputs on PORTA
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	e0 e8       	ldi	r30, 0x80	; 128
 1d4:	f6 e0       	ldi	r31, 0x06	; 6
 1d6:	81 83       	std	Z+1, r24	; 0x01
	
	
	///////Initialize Serial Communcations///////
	SetupPCComms();												//Initializes PC Communications at 9600 baud0
 1d8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_Z12SetupPCCommsv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	83 ed       	ldi	r24, 0xD3	; 211
 1e0:	90 e3       	ldi	r25, 0x30	; 48
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x38>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x42>
 1ec:	00 00       	nop
	_delay_ms(500);												//Delay to make sabertooth initialize
	Sabertooth DriveSaber(&USARTD0, &PORTD);					//Initializes Sabertooth Communications at 9600 Baud
 1ee:	40 e6       	ldi	r20, 0x60	; 96
 1f0:	56 e0       	ldi	r21, 0x06	; 6
 1f2:	60 ea       	ldi	r22, 0xA0	; 160
 1f4:	79 e0       	ldi	r23, 0x09	; 9
 1f6:	ce 01       	movw	r24, r28
 1f8:	41 96       	adiw	r24, 0x11	; 17
 1fa:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	
	//////////////////Timers///////////////
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc; //31250 counts per second with 32Mhz Processor
 1fe:	e0 e0       	ldi	r30, 0x00	; 0
 200:	f8 e0       	ldi	r31, 0x08	; 8
 202:	37 e0       	ldi	r19, 0x07	; 7
 204:	30 83       	st	Z, r19
	TCC0.CTRLB = TC_WGMODE_NORMAL_gc;
 206:	11 82       	std	Z+1, r1	; 0x01
	TCC0.PER = 15625;
 208:	89 e0       	ldi	r24, 0x09	; 9
 20a:	9d e3       	ldi	r25, 0x3D	; 61
 20c:	86 a3       	std	Z+38, r24	; 0x26
 20e:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	26 83       	std	Z+6, r18	; 0x06
	
	TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; //31250 counts per second with 32Mhz Processor
 214:	e0 e0       	ldi	r30, 0x00	; 0
 216:	f9 e0       	ldi	r31, 0x09	; 9
 218:	30 83       	st	Z, r19
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 21a:	11 82       	std	Z+1, r1	; 0x01
	TCD0.PER = 31250;
 21c:	82 e1       	ldi	r24, 0x12	; 18
 21e:	9a e7       	ldi	r25, 0x7A	; 122
 220:	86 a3       	std	Z+38, r24	; 0x26
 222:	97 a3       	std	Z+39, r25	; 0x27
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 224:	26 83       	std	Z+6, r18	; 0x06
	///////////////////Timers//////////////
	
	sei();														//Enables global interrupts so the interrupt serial can work
 226:	78 94       	sei
	
	////Semi-global vars//////
	unsigned char BufferIdx = 0;
	const char XMegaID[] = "ID: MainDrive\r\n";
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f0 e2       	ldi	r31, 0x20	; 32
 22e:	de 01       	movw	r26, r28
 230:	11 96       	adiw	r26, 0x01	; 1
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	8a 95       	dec	r24
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x88>
	enum MicroState{
		WaitForHost,
		Driving	
	}XMegaState = WaitForHost;
 23a:	b1 2c       	mov	r11, r1
	///////////////////Timers//////////////
	
	sei();														//Enables global interrupts so the interrupt serial can work
	
	////Semi-global vars//////
	unsigned char BufferIdx = 0;
 23c:	91 2c       	mov	r9, r1
				}
				_delay_ms(500);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					if(USART_RXBuffer_GetByte(&USART_PC_Data) == 'r'){
						XMegaState = Driving;
						USART_PutChar(&USARTC0, 'r');
 23e:	00 ea       	ldi	r16, 0xA0	; 160
 240:	18 e0       	ldi	r17, 0x08	; 8
 242:	0f 2e       	mov	r0, r31
 244:	f2 e7       	ldi	r31, 0x72	; 114
 246:	8f 2e       	mov	r8, r31
 248:	f0 2d       	mov	r31, r0
				}
			
				if(BufferIdx == RECEIVE_PACKET_SIZE){
					FlushSerialBuffer(&USART_PC_Data);
					if(IsRoving){
						if(receiveArray[4] == PCComsChecksum(receiveArray[1], receiveArray[2], receiveArray[3])){
 24a:	0f 2e       	mov	r0, r31
 24c:	fb e2       	ldi	r31, 0x2B	; 43
 24e:	2f 2e       	mov	r2, r31
 250:	f0 e2       	ldi	r31, 0x20	; 32
 252:	3f 2e       	mov	r3, r31
 254:	f0 2d       	mov	r31, r0
 256:	0f 2e       	mov	r0, r31
 258:	fa e2       	ldi	r31, 0x2A	; 42
 25a:	4f 2e       	mov	r4, r31
 25c:	f0 e2       	ldi	r31, 0x20	; 32
 25e:	5f 2e       	mov	r5, r31
 260:	f0 2d       	mov	r31, r0
 262:	0f 2e       	mov	r0, r31
 264:	f9 e2       	ldi	r31, 0x29	; 41
 266:	6f 2e       	mov	r6, r31
 268:	f0 e2       	ldi	r31, 0x20	; 32
 26a:	7f 2e       	mov	r7, r31
 26c:	f0 2d       	mov	r31, r0
	
		if(!IsRoving){
			DriveSaber.StopAll();
		}
	
		if((PORTA.IN & XBEEDIO0)){
 26e:	0f 2e       	mov	r0, r31
 270:	e1 2c       	mov	r14, r1
 272:	f6 e0       	ldi	r31, 0x06	; 6
 274:	ff 2e       	mov	r15, r31
 276:	f0 2d       	mov	r31, r0
			ERROR_CLR();
			IsRoving = true;
		}else if((!(PORTA.IN & XBEEDIO0))){
			ERROR_SET();
 278:	0f 2e       	mov	r0, r31
 27a:	f0 e4       	ldi	r31, 0x40	; 64
 27c:	cf 2e       	mov	r12, r31
 27e:	f6 e0       	ldi	r31, 0x06	; 6
 280:	df 2e       	mov	r13, r31
 282:	f0 2d       	mov	r31, r0
 284:	68 94       	set
 286:	aa 24       	eor	r10, r10
 288:	a7 f8       	bld	r10, 7
		Driving	
	}XMegaState = WaitForHost;

	while(1){
		
		switch(XMegaState){
 28a:	bb 20       	and	r11, r11
 28c:	21 f0       	breq	.+8      	; 0x296 <main+0xec>
 28e:	a1 e0       	ldi	r26, 0x01	; 1
 290:	ba 16       	cp	r11, r26
 292:	d1 f1       	breq	.+116    	; 0x308 <main+0x15e>
 294:	bb c0       	rjmp	.+374    	; 0x40c <main+0x262>
			case WaitForHost:
				for(int i = 0 ; XMegaID[i] != '\0'; i++){
 296:	99 81       	ldd	r25, Y+1	; 0x01
 298:	99 23       	and	r25, r25
 29a:	61 f0       	breq	.+24     	; 0x2b4 <main+0x10a>
 29c:	fe 01       	movw	r30, r28
 29e:	32 96       	adiw	r30, 0x02	; 2
					while(!USART_IsTXDataRegisterEmpty(&USARTC0));
 2a0:	d8 01       	movw	r26, r16
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	8c 91       	ld	r24, X
 2a6:	11 97       	sbiw	r26, 0x01	; 1
 2a8:	85 ff       	sbrs	r24, 5
 2aa:	fa cf       	rjmp	.-12     	; 0x2a0 <main+0xf6>
					USART_PutChar(&USARTC0, XMegaID[i]);
 2ac:	9c 93       	st	X, r25

	while(1){
		
		switch(XMegaState){
			case WaitForHost:
				for(int i = 0 ; XMegaID[i] != '\0'; i++){
 2ae:	91 91       	ld	r25, Z+
 2b0:	91 11       	cpse	r25, r1
 2b2:	f6 cf       	rjmp	.-20     	; 0x2a0 <main+0xf6>
 2b4:	bf ef       	ldi	r27, 0xFF	; 255
 2b6:	e3 ed       	ldi	r30, 0xD3	; 211
 2b8:	f0 e3       	ldi	r31, 0x30	; 48
 2ba:	b1 50       	subi	r27, 0x01	; 1
 2bc:	e0 40       	sbci	r30, 0x00	; 0
 2be:	f0 40       	sbci	r31, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x110>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x11a>
 2c4:	00 00       	nop
					while(!USART_IsTXDataRegisterEmpty(&USARTC0));
					USART_PutChar(&USARTC0, XMegaID[i]);
				}
				_delay_ms(500);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 2c6:	89 e1       	ldi	r24, 0x19	; 25
 2c8:	90 e2       	ldi	r25, 0x20	; 32
 2ca:	0e 94 c8 03 	call	0x790	; 0x790 <USART_RXBufferData_Available>
 2ce:	88 23       	and	r24, r24
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <main+0x13c>
					if(USART_RXBuffer_GetByte(&USART_PC_Data) == 'r'){
 2d2:	89 e1       	ldi	r24, 0x19	; 25
 2d4:	90 e2       	ldi	r25, 0x20	; 32
 2d6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <USART_RXBuffer_GetByte>
 2da:	82 37       	cpi	r24, 0x72	; 114
 2dc:	21 f4       	brne	.+8      	; 0x2e6 <main+0x13c>
						XMegaState = Driving;
						USART_PutChar(&USARTC0, 'r');
 2de:	d8 01       	movw	r26, r16
 2e0:	8c 92       	st	X, r8
					USART_PutChar(&USARTC0, XMegaID[i]);
				}
				_delay_ms(500);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					if(USART_RXBuffer_GetByte(&USART_PC_Data) == 'r'){
						XMegaState = Driving;
 2e2:	bb 24       	eor	r11, r11
 2e4:	b3 94       	inc	r11
						USART_PutChar(&USARTC0, 'r');
					}
				}
				TimePrevious = TimeSinceInit;
 2e6:	80 91 14 20 	lds	r24, 0x2014
 2ea:	90 91 15 20 	lds	r25, 0x2015
 2ee:	a0 91 16 20 	lds	r26, 0x2016
 2f2:	b0 91 17 20 	lds	r27, 0x2017
 2f6:	80 93 10 20 	sts	0x2010, r24
 2fa:	90 93 11 20 	sts	0x2011, r25
 2fe:	a0 93 12 20 	sts	0x2012, r26
 302:	b0 93 13 20 	sts	0x2013, r27
				break;	
 306:	82 c0       	rjmp	.+260    	; 0x40c <main+0x262>
				
			case Driving:
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 308:	89 e1       	ldi	r24, 0x19	; 25
 30a:	90 e2       	ldi	r25, 0x20	; 32
 30c:	0e 94 c8 03 	call	0x790	; 0x790 <USART_RXBufferData_Available>
 310:	88 23       	and	r24, r24
 312:	51 f0       	breq	.+20     	; 0x328 <main+0x17e>
					receiveArray[BufferIdx] = USART_RXBuffer_GetByte(&USART_PC_Data);
 314:	89 e1       	ldi	r24, 0x19	; 25
 316:	90 e2       	ldi	r25, 0x20	; 32
 318:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <USART_RXBuffer_GetByte>
 31c:	e9 2d       	mov	r30, r9
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	e8 5d       	subi	r30, 0xD8	; 216
 322:	ff 4d       	sbci	r31, 0xDF	; 223
 324:	80 83       	st	Z, r24
					BufferIdx++;
 326:	93 94       	inc	r9
				}
			
				if(BufferIdx == RECEIVE_PACKET_SIZE){
 328:	b6 e0       	ldi	r27, 0x06	; 6
 32a:	9b 12       	cpse	r9, r27
 32c:	42 c0       	rjmp	.+132    	; 0x3b2 <main+0x208>
					FlushSerialBuffer(&USART_PC_Data);
 32e:	89 e1       	ldi	r24, 0x19	; 25
 330:	90 e2       	ldi	r25, 0x20	; 32
 332:	0e 94 16 03 	call	0x62c	; 0x62c <_Z17FlushSerialBufferP16Usart_and_buffer>
					if(IsRoving){
 336:	80 91 18 20 	lds	r24, 0x2018
 33a:	88 23       	and	r24, r24
 33c:	19 f1       	breq	.+70     	; 0x384 <main+0x1da>
						if(receiveArray[4] == PCComsChecksum(receiveArray[1], receiveArray[2], receiveArray[3])){
 33e:	ec e2       	ldi	r30, 0x2C	; 44
 340:	f0 e2       	ldi	r31, 0x20	; 32
 342:	90 80       	ld	r9, Z
 344:	d1 01       	movw	r26, r2
 346:	4c 91       	ld	r20, X
 348:	f2 01       	movw	r30, r4
 34a:	60 81       	ld	r22, Z
 34c:	d3 01       	movw	r26, r6
 34e:	8c 91       	ld	r24, X
 350:	0e 94 01 03 	call	0x602	; 0x602 <_Z14PCComsChecksumhhh>
 354:	98 12       	cpse	r9, r24
 356:	09 c0       	rjmp	.+18     	; 0x36a <main+0x1c0>
							DriveSaber.ParsePacket(receiveArray[2], receiveArray[3]);
 358:	f1 01       	movw	r30, r2
 35a:	40 81       	ld	r20, Z
 35c:	d2 01       	movw	r26, r4
 35e:	6c 91       	ld	r22, X
 360:	ce 01       	movw	r24, r28
 362:	41 96       	adiw	r24, 0x11	; 17
 364:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN10Sabertooth11ParsePacketEhh>
 368:	0d c0       	rjmp	.+26     	; 0x384 <main+0x1da>
					}else if(!IsRoving){
 36a:	80 91 18 20 	lds	r24, 0x2018
 36e:	81 11       	cpse	r24, r1
 370:	09 c0       	rjmp	.+18     	; 0x384 <main+0x1da>
 372:	bf ef       	ldi	r27, 0xFF	; 255
 374:	e9 ef       	ldi	r30, 0xF9	; 249
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	b1 50       	subi	r27, 0x01	; 1
 37a:	e0 40       	sbci	r30, 0x00	; 0
 37c:	f0 40       	sbci	r31, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x1ce>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x1d8>
 382:	00 00       	nop
						_delay_ms(10);
					}
				}					
					BufferIdx = 0;
					SendDriveControlStatus(&USARTC0, IsRoving, false);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	60 91 18 20 	lds	r22, 0x2018
 38a:	c8 01       	movw	r24, r16
 38c:	0e 94 04 03 	call	0x608	; 0x608 <_Z22SendDriveControlStatusP12USART_structbb>
					TimePrevious = TimeSinceInit;
 390:	80 91 14 20 	lds	r24, 0x2014
 394:	90 91 15 20 	lds	r25, 0x2015
 398:	a0 91 16 20 	lds	r26, 0x2016
 39c:	b0 91 17 20 	lds	r27, 0x2017
 3a0:	80 93 10 20 	sts	0x2010, r24
 3a4:	90 93 11 20 	sts	0x2011, r25
 3a8:	a0 93 12 20 	sts	0x2012, r26
 3ac:	b0 93 13 20 	sts	0x2013, r27
							DriveSaber.ParsePacket(receiveArray[2], receiveArray[3]);
					}else if(!IsRoving){
						_delay_ms(10);
					}
				}					
					BufferIdx = 0;
 3b0:	91 2c       	mov	r9, r1
					SendDriveControlStatus(&USARTC0, IsRoving, false);
					TimePrevious = TimeSinceInit;
				}
				
				if((TimeSinceInit - TimePrevious) > TIMEOUTMAX){
 3b2:	80 91 14 20 	lds	r24, 0x2014
 3b6:	90 91 15 20 	lds	r25, 0x2015
 3ba:	a0 91 16 20 	lds	r26, 0x2016
 3be:	b0 91 17 20 	lds	r27, 0x2017
 3c2:	40 91 10 20 	lds	r20, 0x2010
 3c6:	50 91 11 20 	lds	r21, 0x2011
 3ca:	60 91 12 20 	lds	r22, 0x2012
 3ce:	70 91 13 20 	lds	r23, 0x2013
 3d2:	84 1b       	sub	r24, r20
 3d4:	95 0b       	sbc	r25, r21
 3d6:	a6 0b       	sbc	r26, r22
 3d8:	b7 0b       	sbc	r27, r23
 3da:	06 97       	sbiw	r24, 0x06	; 6
 3dc:	a1 05       	cpc	r26, r1
 3de:	b1 05       	cpc	r27, r1
 3e0:	a8 f0       	brcs	.+42     	; 0x40c <main+0x262>
					DriveSaber.StopAll();
 3e2:	ce 01       	movw	r24, r28
 3e4:	41 96       	adiw	r24, 0x11	; 17
 3e6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN10Sabertooth7StopAllEv>
					XMegaState = WaitForHost;
					TimePrevious = TimeSinceInit;
 3ea:	80 91 14 20 	lds	r24, 0x2014
 3ee:	90 91 15 20 	lds	r25, 0x2015
 3f2:	a0 91 16 20 	lds	r26, 0x2016
 3f6:	b0 91 17 20 	lds	r27, 0x2017
 3fa:	80 93 10 20 	sts	0x2010, r24
 3fe:	90 93 11 20 	sts	0x2011, r25
 402:	a0 93 12 20 	sts	0x2012, r26
 406:	b0 93 13 20 	sts	0x2013, r27
					TimePrevious = TimeSinceInit;
				}
				
				if((TimeSinceInit - TimePrevious) > TIMEOUTMAX){
					DriveSaber.StopAll();
					XMegaState = WaitForHost;
 40a:	b1 2c       	mov	r11, r1
				}
				break;
				
		};	
	
		if(!IsRoving){
 40c:	80 91 18 20 	lds	r24, 0x2018
 410:	81 11       	cpse	r24, r1
 412:	04 c0       	rjmp	.+8      	; 0x41c <main+0x272>
			DriveSaber.StopAll();
 414:	ce 01       	movw	r24, r28
 416:	41 96       	adiw	r24, 0x11	; 17
 418:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN10Sabertooth7StopAllEv>
		}
	
		if((PORTA.IN & XBEEDIO0)){
 41c:	d7 01       	movw	r26, r14
 41e:	18 96       	adiw	r26, 0x08	; 8
 420:	8c 91       	ld	r24, X
 422:	85 ff       	sbrs	r24, 5
 424:	06 c0       	rjmp	.+12     	; 0x432 <main+0x288>
			ERROR_CLR();
 426:	f6 01       	movw	r30, r12
 428:	a6 82       	std	Z+6, r10	; 0x06
			IsRoving = true;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 18 20 	sts	0x2018, r24
 430:	2c cf       	rjmp	.-424    	; 0x28a <main+0xe0>
		}else if((!(PORTA.IN & XBEEDIO0))){
 432:	d7 01       	movw	r26, r14
 434:	18 96       	adiw	r26, 0x08	; 8
 436:	8c 91       	ld	r24, X
 438:	85 fd       	sbrc	r24, 5
 43a:	27 cf       	rjmp	.-434    	; 0x28a <main+0xe0>
			ERROR_SET();
 43c:	f6 01       	movw	r30, r12
 43e:	a5 82       	std	Z+5, r10	; 0x05
			IsRoving = false;
 440:	10 92 18 20 	sts	0x2018, r1
 444:	22 cf       	rjmp	.-444    	; 0x28a <main+0xe0>

00000446 <__vector_25>:
	
	}
}


ISR(USARTC0_RXC_vect){
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
 468:	89 e1       	ldi	r24, 0x19	; 25
 46a:	90 e2       	ldi	r25, 0x20	; 32
 46c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <USART_RXComplete>
}
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_26>:


ISR(USARTC0_DRE_vect){
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
 4b4:	89 e1       	ldi	r24, 0x19	; 25
 4b6:	90 e2       	ldi	r25, 0x20	; 32
 4b8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <USART_DataRegEmpty>
} 
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <__vector_14>:

ISR(TCC0_OVF_vect){
 4de:	1f 92       	push	r1
 4e0:	0f 92       	push	r0
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	0f 92       	push	r0
 4e6:	11 24       	eor	r1, r1
 4e8:	8f 93       	push	r24
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	if(IsRoving){
 4ee:	80 91 18 20 	lds	r24, 0x2018
 4f2:	88 23       	and	r24, r24
 4f4:	29 f0       	breq	.+10     	; 0x500 <__vector_14+0x22>
		JUDGELED_TOGGLE();	
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	f6 e0       	ldi	r31, 0x06	; 6
 4fc:	87 83       	std	Z+7, r24	; 0x07
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <__vector_14+0x2a>
	}else if(!IsRoving){
		JUDGELED_SET();
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	e0 e8       	ldi	r30, 0x80	; 128
 504:	f6 e0       	ldi	r31, 0x06	; 6
 506:	85 83       	std	Z+5, r24	; 0x05
	}
	
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_77>:

ISR(TCD0_OVF_vect){
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
	STATUS2_TOGGLE();
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	e0 e4       	ldi	r30, 0x40	; 64
 532:	f6 e0       	ldi	r31, 0x06	; 6
 534:	87 83       	std	Z+7, r24	; 0x07
	TimeSinceInit++;
 536:	80 91 14 20 	lds	r24, 0x2014
 53a:	90 91 15 20 	lds	r25, 0x2015
 53e:	a0 91 16 20 	lds	r26, 0x2016
 542:	b0 91 17 20 	lds	r27, 0x2017
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	a1 1d       	adc	r26, r1
 54a:	b1 1d       	adc	r27, r1
 54c:	80 93 14 20 	sts	0x2014, r24
 550:	90 93 15 20 	sts	0x2015, r25
 554:	a0 93 16 20 	sts	0x2016, r26
 558:	b0 93 17 20 	sts	0x2017, r27
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <_Z23SetXMEGA32MhzCalibratedv>:
 */ 
#include "Misc.h"
#include <avr/io.h>

void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 572:	88 ed       	ldi	r24, 0xD8	; 216
 574:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
 57c:	e0 e5       	ldi	r30, 0x50	; 80
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	81 81       	ldd	r24, Z+1	; 0x01
 582:	81 ff       	sbrs	r24, 1
 584:	fd cf       	rjmp	.-6      	; 0x580 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
 586:	88 ed       	ldi	r24, 0xD8	; 216
 588:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 590:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
 592:	e0 e5       	ldi	r30, 0x50	; 80
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	84 60       	ori	r24, 0x04	; 4
 59a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
 59c:	81 81       	ldd	r24, Z+1	; 0x01
 59e:	82 ff       	sbrs	r24, 2
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
 5a2:	e0 e5       	ldi	r30, 0x50	; 80
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	86 81       	ldd	r24, Z+6	; 0x06
 5a8:	8d 7f       	andi	r24, 0xFD	; 253
 5aa:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
 5ac:	e0 e6       	ldi	r30, 0x60	; 96
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	80 83       	st	Z, r24
 5b6:	08 95       	ret

000005b8 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	60 ea       	ldi	r22, 0xA0	; 160
 5bc:	78 e0       	ldi	r23, 0x08	; 8
 5be:	89 e1       	ldi	r24, 0x19	; 25
 5c0:	90 e2       	ldi	r25, 0x20	; 32
 5c2:	0e 94 bf 03 	call	0x77e	; 0x77e <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 5c6:	e0 91 19 20 	lds	r30, 0x2019
 5ca:	f0 91 1a 20 	lds	r31, 0x201A
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	8f 7c       	andi	r24, 0xCF	; 207
 5d6:	80 61       	ori	r24, 0x10	; 16
 5d8:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 5da:	a0 ea       	ldi	r26, 0xA0	; 160
 5dc:	b8 e0       	ldi	r27, 0x08	; 8
 5de:	8f ec       	ldi	r24, 0xCF	; 207
 5e0:	16 96       	adiw	r26, 0x06	; 6
 5e2:	8c 93       	st	X, r24
 5e4:	16 97       	sbiw	r26, 0x06	; 6
 5e6:	17 96       	adiw	r26, 0x07	; 7
 5e8:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
 5ea:	84 81       	ldd	r24, Z+4	; 0x04
 5ec:	80 61       	ori	r24, 0x10	; 16
 5ee:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
 5f0:	84 81       	ldd	r24, Z+4	; 0x04
 5f2:	88 60       	ori	r24, 0x08	; 8
 5f4:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
 5f6:	e0 ea       	ldi	r30, 0xA0	; 160
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	82 81       	ldd	r24, Z+2	; 0x02
 5fc:	81 60       	ori	r24, 0x01	; 1
 5fe:	82 83       	std	Z+2, r24	; 0x02
 600:	08 95       	ret

00000602 <_Z14PCComsChecksumhhh>:
}

unsigned char PCComsChecksum(unsigned char command, unsigned char left, unsigned char right){
	return (command ^ left ^ right);
 602:	64 27       	eor	r22, r20
	
}
 604:	86 27       	eor	r24, r22
 606:	08 95       	ret

00000608 <_Z22SendDriveControlStatusP12USART_structbb>:

void SendDriveControlStatus(USART_t *PCComs, bool IsRoving, bool Checksum){
 608:	fc 01       	movw	r30, r24
	while(!USART_IsTXDataRegisterEmpty(PCComs));
 60a:	81 81       	ldd	r24, Z+1	; 0x01
 60c:	85 ff       	sbrs	r24, 5
 60e:	fd cf       	rjmp	.-6      	; 0x60a <_Z22SendDriveControlStatusP12USART_structbb+0x2>
	USART_PutChar(PCComs, 255);
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(PCComs));
 614:	81 81       	ldd	r24, Z+1	; 0x01
 616:	85 ff       	sbrs	r24, 5
 618:	fd cf       	rjmp	.-6      	; 0x614 <_Z22SendDriveControlStatusP12USART_structbb+0xc>
	USART_PutChar(PCComs, ((IsRoving << 0) | (Checksum << 1)));
 61a:	44 0f       	add	r20, r20
 61c:	64 2b       	or	r22, r20
 61e:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(PCComs));
 620:	81 81       	ldd	r24, Z+1	; 0x01
 622:	85 ff       	sbrs	r24, 5
 624:	fd cf       	rjmp	.-6      	; 0x620 <_Z22SendDriveControlStatusP12USART_structbb+0x18>
	USART_PutChar(PCComs, 255);
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	80 83       	st	Z, r24
 62a:	08 95       	ret

0000062c <_Z17FlushSerialBufferP16Usart_and_buffer>:
}

void FlushSerialBuffer(USART_data_t *UsartBuffer){
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
 632:	03 c0       	rjmp	.+6      	; 0x63a <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
 634:	ce 01       	movw	r24, r28
 636:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <USART_RXBuffer_GetByte>
	while(!USART_IsTXDataRegisterEmpty(PCComs));
	USART_PutChar(PCComs, 255);
}

void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
 63a:	ce 01       	movw	r24, r28
 63c:	0e 94 c8 03 	call	0x790	; 0x790 <USART_RXBufferData_Available>
 640:	81 11       	cpse	r24, r1
 642:	f8 cf       	rjmp	.-16     	; 0x634 <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <_ZN10Sabertooth12SendDriveCmdEcc>:
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

 64a:	dc 01       	movw	r26, r24
void Sabertooth::SendDriveCmd(char command, char value){
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
 64c:	ed 91       	ld	r30, X+
 64e:	fc 91       	ld	r31, X
 650:	11 97       	sbiw	r26, 0x01	; 1
 652:	81 81       	ldd	r24, Z+1	; 0x01
 654:	85 ff       	sbrs	r24, 5
 656:	fd cf       	rjmp	.-6      	; 0x652 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
 658:	80 e8       	ldi	r24, 0x80	; 128
 65a:	80 83       	st	Z, r24
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
 65c:	ed 91       	ld	r30, X+
 65e:	fc 91       	ld	r31, X
 660:	11 97       	sbiw	r26, 0x01	; 1
 662:	81 81       	ldd	r24, Z+1	; 0x01
 664:	85 ff       	sbrs	r24, 5
 666:	fd cf       	rjmp	.-6      	; 0x662 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
 668:	60 83       	st	Z, r22
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
 66a:	ed 91       	ld	r30, X+
 66c:	fc 91       	ld	r31, X
 66e:	11 97       	sbiw	r26, 0x01	; 1
 670:	81 81       	ldd	r24, Z+1	; 0x01
 672:	85 ff       	sbrs	r24, 5
 674:	fd cf       	rjmp	.-6      	; 0x670 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
 676:	40 83       	st	Z, r20
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
 678:	ed 91       	ld	r30, X+
 67a:	fc 91       	ld	r31, X
 67c:	81 81       	ldd	r24, Z+1	; 0x01
 67e:	85 ff       	sbrs	r24, 5
 680:	fd cf       	rjmp	.-6      	; 0x67c <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
void Sabertooth::StopAll(){
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
 682:	64 0f       	add	r22, r20
 684:	6f 77       	andi	r22, 0x7F	; 127
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
 686:	60 83       	st	Z, r22
 688:	08 95       	ret

0000068a <_ZN10Sabertooth11ParsePacketEhh>:
			SendDriveCmd(RIGHT_BACK, i);
			_delay_ms(30);
		}
		
}

 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	84 2f       	mov	r24, r20
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
 696:	6f 37       	cpi	r22, 0x7F	; 127
 698:	61 f0       	breq	.+24     	; 0x6b2 <_ZN10Sabertooth11ParsePacketEhh+0x28>
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
 69a:	6f 37       	cpi	r22, 0x7F	; 127
 69c:	20 f4       	brcc	.+8      	; 0x6a6 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
	}else if(left < 127){
		command_left = LEFT_BACK;
 69e:	4f e7       	ldi	r20, 0x7F	; 127
 6a0:	46 1b       	sub	r20, r22
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	0b c0       	rjmp	.+22     	; 0x6bc <_ZN10Sabertooth11ParsePacketEhh+0x32>
		command_left = LEFT_BACK;
		value_left = (127-left);
 6a6:	66 23       	and	r22, r22
 6a8:	3c f4       	brge	.+14     	; 0x6b8 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
	}else if(left > 127){
		command_left = LEFT_FORWARD;
 6aa:	41 e8       	ldi	r20, 0x81	; 129
 6ac:	46 0f       	add	r20, r22
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
 6b2:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <_ZN10Sabertooth11ParsePacketEhh+0x32>
		}
		
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
 6b8:	40 e0       	ldi	r20, 0x00	; 0
			_delay_ms(30);
		}
		
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
 6ba:	60 e0       	ldi	r22, 0x00	; 0
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
 6bc:	8f 37       	cpi	r24, 0x7F	; 127
 6be:	61 f0       	breq	.+24     	; 0x6d8 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
 6c0:	8f 37       	cpi	r24, 0x7F	; 127
 6c2:	20 f4       	brcc	.+8      	; 0x6cc <_ZN10Sabertooth11ParsePacketEhh+0x42>
		}else if(right < 127){
		command_right = RIGHT_BACK;
 6c4:	0f e7       	ldi	r16, 0x7F	; 127
 6c6:	08 1b       	sub	r16, r24
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
 6c8:	15 e0       	ldi	r17, 0x05	; 5
 6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		command_right = RIGHT_BACK;
		value_right = (127-right);
 6cc:	88 23       	and	r24, r24
 6ce:	3c f4       	brge	.+14     	; 0x6de <_ZN10Sabertooth11ParsePacketEhh+0x54>
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
 6d0:	01 e8       	ldi	r16, 0x81	; 129
 6d2:	08 0f       	add	r16, r24
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
 6d4:	14 e0       	ldi	r17, 0x04	; 4
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
 6d8:	00 e0       	ldi	r16, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
 6da:	14 e0       	ldi	r17, 0x04	; 4
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <_ZN10Sabertooth11ParsePacketEhh+0x58>
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
 6de:	00 e0       	ldi	r16, 0x00	; 0
		
}

void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
 6e0:	14 e0       	ldi	r17, 0x04	; 4
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
 6e2:	ce 01       	movw	r24, r28
 6e4:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_left, value_left);
 6e8:	40 2f       	mov	r20, r16
 6ea:	61 2f       	mov	r22, r17
 6ec:	ce 01       	movw	r24, r28
 6ee:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	08 95       	ret

000006fc <_ZN10Sabertooth7StopAllEv>:
}

 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	ec 01       	movw	r28, r24
void Sabertooth::StopAll(){
 702:	40 e0       	ldi	r20, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(LEFT_FORWARD, 0);
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	64 e0       	ldi	r22, 0x04	; 4
 70e:	ce 01       	movw	r24, r28
 710:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:

#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	ec 01       	movw	r28, r24
Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
{
 720:	68 83       	st	Y, r22
 722:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
 724:	4a 83       	std	Y+2, r20	; 0x02
 726:	5b 83       	std	Y+3, r21	; 0x03
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
	
 728:	88 e0       	ldi	r24, 0x08	; 8
 72a:	fa 01       	movw	r30, r20
 72c:	81 83       	std	Z+1, r24	; 0x01
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
 72e:	e8 81       	ld	r30, Y
 730:	f9 81       	ldd	r31, Y+1	; 0x01
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	85 83       	std	Z+5, r24	; 0x05
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
 736:	e8 81       	ld	r30, Y
 738:	f9 81       	ldd	r31, Y+1	; 0x01
 73a:	8f ec       	ldi	r24, 0xCF	; 207
 73c:	86 83       	std	Z+6, r24	; 0x06
 73e:	e8 81       	ld	r30, Y
 740:	f9 81       	ldd	r31, Y+1	; 0x01
 742:	17 82       	std	Z+7, r1	; 0x07
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
 744:	e8 81       	ld	r30, Y
 746:	f9 81       	ldd	r31, Y+1	; 0x01
 748:	84 81       	ldd	r24, Z+4	; 0x04
 74a:	88 60       	ori	r24, 0x08	; 8
 74c:	84 83       	std	Z+4, r24	; 0x04
 74e:	ff ef       	ldi	r31, 0xFF	; 255
 750:	23 ec       	ldi	r18, 0xC3	; 195
 752:	89 e0       	ldi	r24, 0x09	; 9
 754:	f1 50       	subi	r31, 0x01	; 1
 756:	20 40       	sbci	r18, 0x00	; 0
 758:	80 40       	sbci	r24, 0x00	; 0
 75a:	e1 f7       	brne	.-8      	; 0x754 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
 75e:	00 00       	nop
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
	_delay_ms(100);										//Delay to let things settle
	
 760:	e8 81       	ld	r30, Y
 762:	f9 81       	ldd	r31, Y+1	; 0x01
 764:	8a ea       	ldi	r24, 0xAA	; 170
 766:	80 83       	st	Z, r24
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
 768:	44 e1       	ldi	r20, 0x14	; 20
 76a:	6e e0       	ldi	r22, 0x0E	; 14
 76c:	ce 01       	movw	r24, r28
 76e:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
 772:	ce 01       	movw	r24, r28
 774:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN10Sabertooth7StopAllEv>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 77e:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 780:	60 83       	st	Z, r22
 782:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 784:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 786:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 788:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 78a:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 78c:	15 86       	std	Z+13, r1	; 0x0d
 78e:	08 95       	ret

00000790 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 790:	fc 01       	movw	r30, r24
 792:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 794:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	29 13       	cpse	r18, r25
 79a:	01 c0       	rjmp	.+2      	; 0x79e <USART_RXBufferData_Available+0xe>
 79c:	80 e0       	ldi	r24, 0x00	; 0
}
 79e:	08 95       	ret

000007a0 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 7a0:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 7a2:	84 85       	ldd	r24, Z+12	; 0x0c
 7a4:	df 01       	movw	r26, r30
 7a6:	a8 0f       	add	r26, r24
 7a8:	b1 1d       	adc	r27, r1
 7aa:	13 96       	adiw	r26, 0x03	; 3
 7ac:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 7ae:	94 85       	ldd	r25, Z+12	; 0x0c
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	93 70       	andi	r25, 0x03	; 3
 7b4:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 7b6:	08 95       	ret

000007b8 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 7b8:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 7ba:	83 85       	ldd	r24, Z+11	; 0x0b
 7bc:	8f 5f       	subi	r24, 0xFF	; 255
 7be:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 7c0:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 7c2:	a0 81       	ld	r26, Z
 7c4:	b1 81       	ldd	r27, Z+1	; 0x01
 7c6:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 7c8:	89 17       	cp	r24, r25
 7ca:	49 f0       	breq	.+18     	; 0x7de <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 7cc:	93 85       	ldd	r25, Z+11	; 0x0b
 7ce:	df 01       	movw	r26, r30
 7d0:	a9 0f       	add	r26, r25
 7d2:	b1 1d       	adc	r27, r1
 7d4:	13 96       	adiw	r26, 0x03	; 3
 7d6:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 7d8:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 7de:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 7e0:	08 95       	ret

000007e2 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 7e2:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 7e4:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 7e6:	95 85       	ldd	r25, Z+13	; 0x0d
 7e8:	98 13       	cpse	r25, r24
 7ea:	07 c0       	rjmp	.+14     	; 0x7fa <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 7ec:	01 90       	ld	r0, Z+
 7ee:	f0 81       	ld	r31, Z
 7f0:	e0 2d       	mov	r30, r0
 7f2:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 7f4:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 7f6:	83 83       	std	Z+3, r24	; 0x03
 7f8:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 7fa:	86 85       	ldd	r24, Z+14	; 0x0e
 7fc:	df 01       	movw	r26, r30
 7fe:	a8 0f       	add	r26, r24
 800:	b1 1d       	adc	r27, r1
 802:	17 96       	adiw	r26, 0x07	; 7
 804:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 806:	a0 81       	ld	r26, Z
 808:	b1 81       	ldd	r27, Z+1	; 0x01
 80a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 80c:	86 85       	ldd	r24, Z+14	; 0x0e
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	83 70       	andi	r24, 0x03	; 3
 812:	86 87       	std	Z+14, r24	; 0x0e
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
