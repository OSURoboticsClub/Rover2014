
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00802000  00001784  00001818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00802016  00802016  0000182e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  0000188a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003996  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001175  00000000  00000000  00005430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fe5  00000000  00000000  000065a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  0000758c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001705  00000000  00000000  00007a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001640  00000000  00000000  00009121  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000a761  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      68:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	c7 04       	cpc	r12, r7

0000016e <__ctors_end>:
     16e:	d8 04       	cpc	r13, r8

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	e4 e8       	ldi	r30, 0x84	; 132
     184:	f7 e1       	ldi	r31, 0x17	; 23
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a6 31       	cpi	r26, 0x16	; 22
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a6 e1       	ldi	r26, 0x16	; 22
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a5 36       	cpi	r26, 0x65	; 101
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <main>
     1bc:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1d0:	1c 92       	st	X, r1
	return Result;
}
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1f8:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     22c:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <_Z23SetXMEGA32MhzCalibratedv>:
#define GRIP 0
#define RELEASE 1


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     264:	88 ed       	ldi	r24, 0xD8	; 216
     266:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     26e:	e0 e5       	ldi	r30, 0x50	; 80
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	81 81       	ldd	r24, Z+1	; 0x01
     274:	81 ff       	sbrs	r24, 1
     276:	fd cf       	rjmp	.-6      	; 0x272 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     278:	88 ed       	ldi	r24, 0xD8	; 216
     27a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     282:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     284:	e0 e5       	ldi	r30, 0x50	; 80
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	84 60       	ori	r24, 0x04	; 4
     28c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     28e:	81 81       	ldd	r24, Z+1	; 0x01
     290:	82 ff       	sbrs	r24, 2
     292:	fd cf       	rjmp	.-6      	; 0x28e <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     294:	e0 e5       	ldi	r30, 0x50	; 80
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	86 81       	ldd	r24, Z+6	; 0x06
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     29e:	e0 e6       	ldi	r30, 0x60	; 96
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	81 60       	ori	r24, 0x01	; 1
     2a6:	80 83       	st	Z, r24
     2a8:	08 95       	ret

000002aa <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     2aa:	e0 e4       	ldi	r30, 0x40	; 64
     2ac:	f6 e0       	ldi	r31, 0x06	; 6
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	60 ea       	ldi	r22, 0xA0	; 160
     2ba:	78 e0       	ldi	r23, 0x08	; 8
     2bc:	86 e5       	ldi	r24, 0x56	; 86
     2be:	90 e2       	ldi	r25, 0x20	; 32
     2c0:	0e 94 9c 06 	call	0xd38	; 0xd38 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     2c4:	e0 91 56 20 	lds	r30, 0x2056
     2c8:	f0 91 57 20 	lds	r31, 0x2057
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     2d0:	83 81       	ldd	r24, Z+3	; 0x03
     2d2:	8f 7c       	andi	r24, 0xCF	; 207
     2d4:	80 61       	ori	r24, 0x10	; 16
     2d6:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     2d8:	a0 ea       	ldi	r26, 0xA0	; 160
     2da:	b8 e0       	ldi	r27, 0x08	; 8
     2dc:	8f ec       	ldi	r24, 0xCF	; 207
     2de:	16 96       	adiw	r26, 0x06	; 6
     2e0:	8c 93       	st	X, r24
     2e2:	16 97       	sbiw	r26, 0x06	; 6
     2e4:	17 96       	adiw	r26, 0x07	; 7
     2e6:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     2e8:	84 81       	ldd	r24, Z+4	; 0x04
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     2ee:	84 81       	ldd	r24, Z+4	; 0x04
     2f0:	88 60       	ori	r24, 0x08	; 8
     2f2:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     2f4:	e0 ea       	ldi	r30, 0xA0	; 160
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	82 81       	ldd	r24, Z+2	; 0x02
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	82 83       	std	Z+2, r24	; 0x02
     2fe:	08 95       	ret

00000300 <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     304:	0e 94 32 01 	call	0x264	; 0x264 <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     308:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z12SetupPCCommsv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     30c:	80 ee       	ldi	r24, 0xE0	; 224
     30e:	e0 e4       	ldi	r30, 0x40	; 64
     310:	f6 e0       	ldi	r31, 0x06	; 6
     312:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     314:	e0 e6       	ldi	r30, 0x60	; 96
     316:	f6 e0       	ldi	r31, 0x06	; 6
     318:	9f ef       	ldi	r25, 0xFF	; 255
     31a:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b6 e0       	ldi	r27, 0x06	; 6
     320:	11 96       	adiw	r26, 0x01	; 1
     322:	8c 93       	st	X, r24
     324:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     326:	c0 e2       	ldi	r28, 0x20	; 32
     328:	d6 e0       	ldi	r29, 0x06	; 6
     32a:	87 e0       	ldi	r24, 0x07	; 7
     32c:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	12 96       	adiw	r26, 0x02	; 2
     332:	8c 93       	st	X, r24
     334:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     336:	98 e0       	ldi	r25, 0x08	; 8
     338:	12 96       	adiw	r26, 0x02	; 2
     33a:	9c 93       	st	X, r25
     33c:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit	
     33e:	9a 83       	std	Y+2, r25	; 0x02
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_DISABLE();
     340:	20 e4       	ldi	r18, 0x40	; 64
     342:	25 83       	std	Z+5, r18	; 0x05
	
	//Setup Microstepping
	MD1_M0_CLR();
     344:	90 e2       	ldi	r25, 0x20	; 32
     346:	16 96       	adiw	r26, 0x06	; 6
     348:	9c 93       	st	X, r25
     34a:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     34c:	16 96       	adiw	r26, 0x06	; 6
     34e:	2c 93       	st	X, r18
     350:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_CLR();
     352:	20 e8       	ldi	r18, 0x80	; 128
     354:	16 96       	adiw	r26, 0x06	; 6
     356:	2c 93       	st	X, r18
	
	MD1_DIR_CLR();
     358:	20 e1       	ldi	r18, 0x10	; 16
     35a:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     35c:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     35e:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_CLR();
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	9e 83       	std	Y+6, r25	; 0x06
	MD2_M2_CLR();
     368:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     36a:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     36c:	96 83       	std	Z+6, r25	; 0x06
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <_Z12SendStringPCPc>:

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     374:	fc 01       	movw	r30, r24
     376:	20 81       	ld	r18, Z
     378:	22 23       	and	r18, r18
     37a:	59 f0       	breq	.+22     	; 0x392 <_Z12SendStringPCPc+0x1e>
     37c:	dc 01       	movw	r26, r24
     37e:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     380:	e0 ea       	ldi	r30, 0xA0	; 160
     382:	f8 e0       	ldi	r31, 0x08	; 8
     384:	81 81       	ldd	r24, Z+1	; 0x01
     386:	85 ff       	sbrs	r24, 5
     388:	fd cf       	rjmp	.-6      	; 0x384 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);	
     38a:	20 83       	st	Z, r18
	MD2_DIR_CLR();
	MD2_STEP_CLR();
}

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     38c:	2d 91       	ld	r18, X+
     38e:	21 11       	cpse	r18, r1
     390:	f9 cf       	rjmp	.-14     	; 0x384 <_Z12SendStringPCPc+0x10>
     392:	08 95       	ret

00000394 <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	8c 01       	movw	r16, r24
     3a2:	c7 e0       	ldi	r28, 0x07	; 7
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     3a6:	e1 2c       	mov	r14, r1
     3a8:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     3aa:	01 15       	cp	r16, r1
     3ac:	11 05       	cpc	r17, r1
     3ae:	39 f4       	brne	.+14     	; 0x3be <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     3b8:	e8 0e       	add	r14, r24
     3ba:	f9 1e       	adc	r15, r25
     3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     3be:	01 30       	cpi	r16, 0x01	; 1
     3c0:	11 05       	cpc	r17, r1
     3c2:	31 f4       	brne	.+12     	; 0x3d0 <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     3cc:	e8 0e       	add	r14, r24
     3ce:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	8f e3       	ldi	r24, 0x3F	; 63
     3d2:	9f e1       	ldi	r25, 0x1F	; 31
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <_Z9smoothADCi+0x40>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <_Z9smoothADCi+0x46>
     3da:	00 00       	nop
     3dc:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     3de:	20 97       	sbiw	r28, 0x00	; 0
     3e0:	21 f7       	brne	.-56     	; 0x3aa <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     3e2:	c7 01       	movw	r24, r14
     3e4:	67 e0       	ldi	r22, 0x07	; 7
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divmodhi4>
     3ec:	cb 01       	movw	r24, r22
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     404:	20 91 52 20 	lds	r18, 0x2052
     408:	30 91 53 20 	lds	r19, 0x2053
     40c:	40 91 54 20 	lds	r20, 0x2054
     410:	50 91 55 20 	lds	r21, 0x2055
     414:	60 91 4e 20 	lds	r22, 0x204E
     418:	70 91 4f 20 	lds	r23, 0x204F
     41c:	80 91 50 20 	lds	r24, 0x2050
     420:	90 91 51 20 	lds	r25, 0x2051
     424:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__subsf3>
     428:	6b 01       	movw	r12, r22
     42a:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	a9 01       	movw	r20, r18
     432:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     436:	18 16       	cp	r1, r24
     438:	24 f0       	brlt	.+8      	; 0x442 <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     43a:	f7 fa       	bst	r15, 7
     43c:	f0 94       	com	r15
     43e:	f7 f8       	bld	r15, 7
     440:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     442:	a7 01       	movw	r20, r14
     444:	96 01       	movw	r18, r12
     446:	60 91 42 20 	lds	r22, 0x2042
     44a:	70 91 43 20 	lds	r23, 0x2043
     44e:	80 91 44 20 	lds	r24, 0x2044
     452:	90 91 45 20 	lds	r25, 0x2045
     456:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     45a:	18 16       	cp	r1, r24
     45c:	44 f4       	brge	.+16     	; 0x46e <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     45e:	e0 e4       	ldi	r30, 0x40	; 64
     460:	f0 e2       	ldi	r31, 0x20	; 32
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	80 83       	st	Z, r24
     46a:	91 83       	std	Z+1, r25	; 0x01
     46c:	04 c0       	rjmp	.+8      	; 0x476 <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     46e:	10 92 40 20 	sts	0x2040, r1
     472:	10 92 41 20 	sts	0x2041, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     476:	20 91 3a 20 	lds	r18, 0x203A
     47a:	30 91 3b 20 	lds	r19, 0x203B
     47e:	40 91 3c 20 	lds	r20, 0x203C
     482:	50 91 3d 20 	lds	r21, 0x203D
     486:	60 91 36 20 	lds	r22, 0x2036
     48a:	70 91 37 20 	lds	r23, 0x2037
     48e:	80 91 38 20 	lds	r24, 0x2038
     492:	90 91 39 20 	lds	r25, 0x2039
     496:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__subsf3>
     49a:	6b 01       	movw	r12, r22
     49c:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	a9 01       	movw	r20, r18
     4a4:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     4a8:	18 16       	cp	r1, r24
     4aa:	24 f0       	brlt	.+8      	; 0x4b4 <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     4ac:	f7 fa       	bst	r15, 7
     4ae:	f0 94       	com	r15
     4b0:	f7 f8       	bld	r15, 7
     4b2:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     4b4:	a7 01       	movw	r20, r14
     4b6:	96 01       	movw	r18, r12
     4b8:	60 91 2a 20 	lds	r22, 0x202A
     4bc:	70 91 2b 20 	lds	r23, 0x202B
     4c0:	80 91 2c 20 	lds	r24, 0x202C
     4c4:	90 91 2d 20 	lds	r25, 0x202D
     4c8:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     4cc:	18 16       	cp	r1, r24
     4ce:	44 f4       	brge	.+16     	; 0x4e0 <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     4d0:	e8 e2       	ldi	r30, 0x28	; 40
     4d2:	f0 e2       	ldi	r31, 0x20	; 32
     4d4:	80 81       	ld	r24, Z
     4d6:	91 81       	ldd	r25, Z+1	; 0x01
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	80 83       	st	Z, r24
     4dc:	91 83       	std	Z+1, r25	; 0x01
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     4e0:	10 92 28 20 	sts	0x2028, r1
     4e4:	10 92 29 20 	sts	0x2029, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     4e8:	20 91 28 20 	lds	r18, 0x2028
     4ec:	30 91 29 20 	lds	r19, 0x2029
     4f0:	80 91 26 20 	lds	r24, 0x2026
     4f4:	90 91 27 20 	lds	r25, 0x2027
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	24 f0       	brlt	.+8      	; 0x506 <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     4fe:	86 e2       	ldi	r24, 0x26	; 38
     500:	90 e2       	ldi	r25, 0x20	; 32
     502:	0e 94 08 05 	call	0xa10	; 0xa10 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     506:	20 91 40 20 	lds	r18, 0x2040
     50a:	30 91 41 20 	lds	r19, 0x2041
     50e:	80 91 26 20 	lds	r24, 0x2026
     512:	90 91 27 20 	lds	r25, 0x2027
     516:	28 17       	cp	r18, r24
     518:	39 07       	cpc	r19, r25
     51a:	24 f0       	brlt	.+8      	; 0x524 <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     51c:	8e e3       	ldi	r24, 0x3E	; 62
     51e:	90 e2       	ldi	r25, 0x20	; 32
     520:	0e 94 08 05 	call	0xa10	; 0xa10 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 ca 01 	call	0x394	; 0x394 <_Z9smoothADCi>
     52c:	bc 01       	movw	r22, r24
     52e:	88 27       	eor	r24, r24
     530:	77 fd       	sbrc	r23, 7
     532:	80 95       	com	r24
     534:	98 2f       	mov	r25, r24
     536:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__floatsisf>
     53a:	2f e1       	ldi	r18, 0x1F	; 31
     53c:	35 e8       	ldi	r19, 0x85	; 133
     53e:	48 e6       	ldi	r20, 0x68	; 104
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	0e 94 0a 07 	call	0xe14	; 0xe14 <__divsf3>
     546:	25 e8       	ldi	r18, 0x85	; 133
     548:	3b ee       	ldi	r19, 0xEB	; 235
     54a:	41 ed       	ldi	r20, 0xD1	; 209
     54c:	5e e3       	ldi	r21, 0x3E	; 62
     54e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__subsf3>
     552:	60 93 4e 20 	sts	0x204E, r22
     556:	70 93 4f 20 	sts	0x204F, r23
     55a:	80 93 50 20 	sts	0x2050, r24
     55e:	90 93 51 20 	sts	0x2051, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 ca 01 	call	0x394	; 0x394 <_Z9smoothADCi>
     56a:	bc 01       	movw	r22, r24
     56c:	88 27       	eor	r24, r24
     56e:	77 fd       	sbrc	r23, 7
     570:	80 95       	com	r24
     572:	98 2f       	mov	r25, r24
     574:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__floatsisf>
     578:	2f e1       	ldi	r18, 0x1F	; 31
     57a:	35 e8       	ldi	r19, 0x85	; 133
     57c:	48 e6       	ldi	r20, 0x68	; 104
     57e:	52 e4       	ldi	r21, 0x42	; 66
     580:	0e 94 0a 07 	call	0xe14	; 0xe14 <__divsf3>
     584:	25 e8       	ldi	r18, 0x85	; 133
     586:	3b ee       	ldi	r19, 0xEB	; 235
     588:	41 ed       	ldi	r20, 0xD1	; 209
     58a:	5e e3       	ldi	r21, 0x3E	; 62
     58c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__subsf3>
     590:	60 93 36 20 	sts	0x2036, r22
     594:	70 93 37 20 	sts	0x2037, r23
     598:	80 93 38 20 	sts	0x2038, r24
     59c:	90 93 39 20 	sts	0x2039, r25
}
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	08 95       	ret

000005aa <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
		
	if(act == LOWER){
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <_Z13getMotorSpeedi+0x16>
     5be:	56 c0       	rjmp	.+172    	; 0x66c <_Z13getMotorSpeedi+0xc2>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     5c0:	20 91 52 20 	lds	r18, 0x2052
     5c4:	30 91 53 20 	lds	r19, 0x2053
     5c8:	40 91 54 20 	lds	r20, 0x2054
     5cc:	50 91 55 20 	lds	r21, 0x2055
     5d0:	60 91 4e 20 	lds	r22, 0x204E
     5d4:	70 91 4f 20 	lds	r23, 0x204F
     5d8:	80 91 50 20 	lds	r24, 0x2050
     5dc:	90 91 51 20 	lds	r25, 0x2051
     5e0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__subsf3>
     5e4:	6b 01       	movw	r12, r22
     5e6:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     5f2:	18 16       	cp	r1, r24
     5f4:	24 f0       	brlt	.+8      	; 0x5fe <_Z13getMotorSpeedi+0x54>
		return input;
	else
		return input * -1;
     5f6:	f7 fa       	bst	r15, 7
     5f8:	f0 94       	com	r15
     5fa:	f7 f8       	bld	r15, 7
     5fc:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     5fe:	80 90 46 20 	lds	r8, 0x2046
     602:	90 90 47 20 	lds	r9, 0x2047
     606:	a0 90 48 20 	lds	r10, 0x2048
     60a:	b0 90 49 20 	lds	r11, 0x2049
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	5f e3       	ldi	r21, 0x3F	; 63
     616:	c5 01       	movw	r24, r10
     618:	b4 01       	movw	r22, r8
     61a:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3>
     61e:	a7 01       	movw	r20, r14
     620:	96 01       	movw	r18, r12
     622:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     626:	18 16       	cp	r1, r24
     628:	54 f4       	brge	.+20     	; 0x63e <_Z13getMotorSpeedi+0x94>
			return lowerAct.speed / 3;
     62a:	80 91 4a 20 	lds	r24, 0x204A
     62e:	90 91 4b 20 	lds	r25, 0x204B
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divmodhi4>
     63a:	cb 01       	movw	r24, r22
     63c:	72 c0       	rjmp	.+228    	; 0x722 <_Z13getMotorSpeedi+0x178>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     63e:	a7 01       	movw	r20, r14
     640:	96 01       	movw	r18, r12
     642:	c5 01       	movw	r24, r10
     644:	b4 01       	movw	r22, r8
     646:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     64a:	18 16       	cp	r1, r24
     64c:	54 f4       	brge	.+20     	; 0x662 <_Z13getMotorSpeedi+0xb8>
			return lowerAct.speed / 2;
     64e:	80 91 4a 20 	lds	r24, 0x204A
     652:	90 91 4b 20 	lds	r25, 0x204B
     656:	99 23       	and	r25, r25
     658:	0c f4       	brge	.+2      	; 0x65c <_Z13getMotorSpeedi+0xb2>
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	95 95       	asr	r25
     65e:	87 95       	ror	r24
     660:	60 c0       	rjmp	.+192    	; 0x722 <_Z13getMotorSpeedi+0x178>
		else
			return lowerAct.speed;
     662:	80 91 4a 20 	lds	r24, 0x204A
     666:	90 91 4b 20 	lds	r25, 0x204B
     66a:	5b c0       	rjmp	.+182    	; 0x722 <_Z13getMotorSpeedi+0x178>
	}
	else if (act == UPPER){
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	09 f0       	breq	.+2      	; 0x672 <_Z13getMotorSpeedi+0xc8>
     670:	56 c0       	rjmp	.+172    	; 0x71e <_Z13getMotorSpeedi+0x174>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     672:	20 91 3a 20 	lds	r18, 0x203A
     676:	30 91 3b 20 	lds	r19, 0x203B
     67a:	40 91 3c 20 	lds	r20, 0x203C
     67e:	50 91 3d 20 	lds	r21, 0x203D
     682:	60 91 36 20 	lds	r22, 0x2036
     686:	70 91 37 20 	lds	r23, 0x2037
     68a:	80 91 38 20 	lds	r24, 0x2038
     68e:	90 91 39 20 	lds	r25, 0x2039
     692:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__subsf3>
     696:	6b 01       	movw	r12, r22
     698:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	a9 01       	movw	r20, r18
     6a0:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     6a4:	18 16       	cp	r1, r24
     6a6:	24 f0       	brlt	.+8      	; 0x6b0 <_Z13getMotorSpeedi+0x106>
		return input;
	else
		return input * -1;
     6a8:	f7 fa       	bst	r15, 7
     6aa:	f0 94       	com	r15
     6ac:	f7 f8       	bld	r15, 7
     6ae:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     6b0:	80 90 2e 20 	lds	r8, 0x202E
     6b4:	90 90 2f 20 	lds	r9, 0x202F
     6b8:	a0 90 30 20 	lds	r10, 0x2030
     6bc:	b0 90 31 20 	lds	r11, 0x2031
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	c5 01       	movw	r24, r10
     6ca:	b4 01       	movw	r22, r8
     6cc:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3>
     6d0:	a7 01       	movw	r20, r14
     6d2:	96 01       	movw	r18, r12
     6d4:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     6d8:	18 16       	cp	r1, r24
     6da:	54 f4       	brge	.+20     	; 0x6f0 <_Z13getMotorSpeedi+0x146>
			return upperAct.speed / 3;
     6dc:	80 91 32 20 	lds	r24, 0x2032
     6e0:	90 91 33 20 	lds	r25, 0x2033
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divmodhi4>
     6ec:	cb 01       	movw	r24, r22
     6ee:	19 c0       	rjmp	.+50     	; 0x722 <_Z13getMotorSpeedi+0x178>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     6f0:	a7 01       	movw	r20, r14
     6f2:	96 01       	movw	r18, r12
     6f4:	c5 01       	movw	r24, r10
     6f6:	b4 01       	movw	r22, r8
     6f8:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	54 f4       	brge	.+20     	; 0x714 <_Z13getMotorSpeedi+0x16a>
			return upperAct.speed / 2;
     700:	80 91 32 20 	lds	r24, 0x2032
     704:	90 91 33 20 	lds	r25, 0x2033
     708:	99 23       	and	r25, r25
     70a:	0c f4       	brge	.+2      	; 0x70e <_Z13getMotorSpeedi+0x164>
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	95 95       	asr	r25
     710:	87 95       	ror	r24
     712:	07 c0       	rjmp	.+14     	; 0x722 <_Z13getMotorSpeedi+0x178>
		else
			return upperAct.speed;
     714:	80 91 32 20 	lds	r24, 0x2032
     718:	90 91 33 20 	lds	r25, 0x2033
     71c:	02 c0       	rjmp	.+4      	; 0x722 <_Z13getMotorSpeedi+0x178>
	}
	
	
	////////
	return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
}
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	08 95       	ret

00000734 <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	f1 f4       	brne	.+60     	; 0x774 <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     738:	80 91 4c 20 	lds	r24, 0x204C
     73c:	90 91 4d 20 	lds	r25, 0x204D
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	09 f4       	brne	.+2      	; 0x746 <_Z11getMotorDiri+0x12>
     744:	3e c0       	rjmp	.+124    	; 0x7c2 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     746:	20 91 52 20 	lds	r18, 0x2052
     74a:	30 91 53 20 	lds	r19, 0x2053
     74e:	40 91 54 20 	lds	r20, 0x2054
     752:	50 91 55 20 	lds	r21, 0x2055
     756:	60 91 4e 20 	lds	r22, 0x204E
     75a:	70 91 4f 20 	lds	r23, 0x204F
     75e:	80 91 50 20 	lds	r24, 0x2050
     762:	90 91 51 20 	lds	r25, 0x2051
     766:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     76a:	18 16       	cp	r1, r24
     76c:	14 f5       	brge	.+68     	; 0x7b2 <_Z11getMotorDiri+0x7e>
			return -1;
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	01 f5       	brne	.+64     	; 0x7b8 <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     778:	80 91 34 20 	lds	r24, 0x2034
     77c:	90 91 35 20 	lds	r25, 0x2035
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	f9 f0       	breq	.+62     	; 0x7c2 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     784:	20 91 3a 20 	lds	r18, 0x203A
     788:	30 91 3b 20 	lds	r19, 0x203B
     78c:	40 91 3c 20 	lds	r20, 0x203C
     790:	50 91 3d 20 	lds	r21, 0x203D
     794:	60 91 36 20 	lds	r22, 0x2036
     798:	70 91 37 20 	lds	r23, 0x2037
     79c:	80 91 38 20 	lds	r24, 0x2038
     7a0:	90 91 39 20 	lds	r25, 0x2039
     7a4:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	4c f4       	brge	.+18     	; 0x7be <_Z11getMotorDiri+0x8a>
			return -1;
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	9f ef       	ldi	r25, 0xFF	; 255
     7b0:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     7c2:	08 95       	ret

000007c4 <main>:

int main(void)
{
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	cc 5c       	subi	r28, 0xCC	; 204
     7ce:	d1 09       	sbc	r29, r1
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	de bf       	out	0x3e, r29	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     7d4:	0e 94 80 01 	call	0x300	; 0x300 <_Z25DemInitThingsYouBeenDoingv>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	87 ea       	ldi	r24, 0xA7	; 167
     7dc:	91 e6       	ldi	r25, 0x61	; 97
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	80 40       	sbci	r24, 0x00	; 0
     7e2:	90 40       	sbci	r25, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <main+0x1a>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <main+0x24>
     7e8:	00 00       	nop
	_delay_ms(1000);
	char SendBuffer[200];
	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     7ea:	40 e6       	ldi	r20, 0x60	; 96
     7ec:	56 e0       	ldi	r21, 0x06	; 6
     7ee:	60 ea       	ldi	r22, 0xA0	; 160
     7f0:	79 e0       	ldi	r23, 0x09	; 9
     7f2:	ce 01       	movw	r24, r28
     7f4:	87 53       	subi	r24, 0x37	; 55
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
		
	//- retract outer, retract inner
	
	
	
	upperAct.desiredPos = 2;
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	a0 e0       	ldi	r26, 0x00	; 0
     802:	b0 e4       	ldi	r27, 0x40	; 64
     804:	80 93 3a 20 	sts	0x203A, r24
     808:	90 93 3b 20 	sts	0x203B, r25
     80c:	a0 93 3c 20 	sts	0x203C, r26
     810:	b0 93 3d 20 	sts	0x203D, r27
	lowerAct.desiredPos = 3.5;
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a0 e6       	ldi	r26, 0x60	; 96
     81a:	b0 e4       	ldi	r27, 0x40	; 64
     81c:	80 93 52 20 	sts	0x2052, r24
     820:	90 93 53 20 	sts	0x2053, r25
     824:	a0 93 54 20 	sts	0x2054, r26
     828:	b0 93 55 20 	sts	0x2055, r27
	
//	lowerAct.enable();
//	upperAct.enable();
	
	baseStepper.calibrateBase();
     82c:	86 e1       	ldi	r24, 0x16	; 22
     82e:	90 e2       	ldi	r25, 0x20	; 32
     830:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN13rotateStepper13calibrateBaseEv>
	
	MD2_DIR_CLR();
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	e0 e6       	ldi	r30, 0x60	; 96
     838:	f6 e0       	ldi	r31, 0x06	; 6
     83a:	86 83       	std	Z+6, r24	; 0x06
	
	baseStepper.rotateBase(90);
     83c:	6a e5       	ldi	r22, 0x5A	; 90
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	90 e2       	ldi	r25, 0x20	; 32
     844:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN13rotateStepper10rotateBaseEi>
     848:	ef ef       	ldi	r30, 0xFF	; 255
     84a:	ff e4       	ldi	r31, 0x4F	; 79
     84c:	23 ec       	ldi	r18, 0xC3	; 195
     84e:	e1 50       	subi	r30, 0x01	; 1
     850:	f0 40       	sbci	r31, 0x00	; 0
     852:	20 40       	sbci	r18, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <main+0x8a>
     856:	00 c0       	rjmp	.+0      	; 0x858 <main+0x94>
     858:	00 00       	nop
	
	_delay_ms(2000);

	baseStepper.rotateBase(45);
     85a:	6d e2       	ldi	r22, 0x2D	; 45
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	86 e1       	ldi	r24, 0x16	; 22
     860:	90 e2       	ldi	r25, 0x20	; 32
     862:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN13rotateStepper10rotateBaseEi>
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f e4       	ldi	r25, 0x4F	; 79
     86a:	e3 ec       	ldi	r30, 0xC3	; 195
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	90 40       	sbci	r25, 0x00	; 0
     870:	e0 40       	sbci	r30, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <main+0xa8>
     874:	00 c0       	rjmp	.+0      	; 0x876 <main+0xb2>
     876:	00 00       	nop
	
	_delay_ms(2000);
	
	baseStepper.rotateBase(0);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	86 e1       	ldi	r24, 0x16	; 22
     87e:	90 e2       	ldi	r25, 0x20	; 32
     880:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN13rotateStepper10rotateBaseEi>
     884:	ff ef       	ldi	r31, 0xFF	; 255
     886:	2f e4       	ldi	r18, 0x4F	; 79
     888:	83 ec       	ldi	r24, 0xC3	; 195
     88a:	f1 50       	subi	r31, 0x01	; 1
     88c:	20 40       	sbci	r18, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	e1 f7       	brne	.-8      	; 0x88a <main+0xc6>
     892:	00 c0       	rjmp	.+0      	; 0x894 <main+0xd0>
     894:	00 00       	nop
	
	_delay_ms(2000);
	
	baseStepper.rotateBase(180);
     896:	64 eb       	ldi	r22, 0xB4	; 180
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	86 e1       	ldi	r24, 0x16	; 22
     89c:	90 e2       	ldi	r25, 0x20	; 32
     89e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN13rotateStepper10rotateBaseEi>
		_delay_ms(10);
	}
	
	*/

	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
     8a2:	60 91 16 20 	lds	r22, 0x2016
     8a6:	70 91 17 20 	lds	r23, 0x2017
     8aa:	80 91 18 20 	lds	r24, 0x2018
     8ae:	90 91 19 20 	lds	r25, 0x2019
     8b2:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixsfsi>
     8b6:	7f 93       	push	r23
     8b8:	6f 93       	push	r22
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e2       	ldi	r25, 0x20	; 32
     8be:	9f 93       	push	r25
     8c0:	8f 93       	push	r24
     8c2:	8e 01       	movw	r16, r28
     8c4:	0f 5f       	subi	r16, 0xFF	; 255
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
     8c8:	1f 93       	push	r17
     8ca:	0f 93       	push	r16
     8cc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <sprintf>
	SendStringPC(SendBuffer);								//Send Dem Strings
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 ba 01 	call	0x374	; 0x374 <_Z12SendStringPCPc>
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0

		//sprintf(SendBuffer, "LowerAct Enabled: %d \r\n UpperAct Enabled: %d \r\n  \r\n", lowerAct.enabled, upperAct.enabled);
		
		
		
		if(lowerAct.enabled || upperAct.enabled){
     8e2:	0c e4       	ldi	r16, 0x4C	; 76
     8e4:	10 e2       	ldi	r17, 0x20	; 32
     8e6:	0f 2e       	mov	r0, r31
     8e8:	f4 e3       	ldi	r31, 0x34	; 52
     8ea:	ef 2e       	mov	r14, r31
     8ec:	f0 e2       	ldi	r31, 0x20	; 32
     8ee:	ff 2e       	mov	r15, r31
     8f0:	f0 2d       	mov	r31, r0
			DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));
		}
		else {
			ERROR_SET();
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f0 e4       	ldi	r31, 0x40	; 64
     8f6:	cf 2e       	mov	r12, r31
     8f8:	f6 e0       	ldi	r31, 0x06	; 6
     8fa:	df 2e       	mov	r13, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	68 94       	set
     900:	99 24       	eor	r9, r9
     902:	97 f8       	bld	r9, 7
		DemStuffYouBeenDoingBefore();						   //Your stepper code
		//int resultPA0 = 0;     //ReadADC(0,1);
		//int resultPA1 = smoothADC(LOWER);     //ReadADC(1,1);  //Lower Act
		
		
		checkActPosition();
     904:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_Z16checkActPositionv>

		//sprintf(SendBuffer, "LowerAct Enabled: %d \r\n UpperAct Enabled: %d \r\n  \r\n", lowerAct.enabled, upperAct.enabled);
		
		
		
		if(lowerAct.enabled || upperAct.enabled){
     908:	f8 01       	movw	r30, r16
     90a:	80 81       	ld	r24, Z
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	89 2b       	or	r24, r25
     910:	29 f4       	brne	.+10     	; 0x91c <main+0x158>
     912:	f7 01       	movw	r30, r14
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	89 2b       	or	r24, r25
     91a:	e9 f0       	breq	.+58     	; 0x956 <main+0x192>
			DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_Z13getMotorSpeedi>
     924:	b8 2e       	mov	r11, r24
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 9a 03 	call	0x734	; 0x734 <_Z11getMotorDiri>
     92e:	a8 2e       	mov	r10, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 9a 03 	call	0x734	; 0x734 <_Z11getMotorDiri>
     938:	ba 9c       	mul	r11, r10
     93a:	40 2d       	mov	r20, r0
     93c:	11 24       	eor	r1, r1
     93e:	41 58       	subi	r20, 0x81	; 129
     940:	b8 9e       	mul	r11, r24
     942:	80 2d       	mov	r24, r0
     944:	11 24       	eor	r1, r1
     946:	6f e7       	ldi	r22, 0x7F	; 127
     948:	68 0f       	add	r22, r24
     94a:	ce 01       	movw	r24, r28
     94c:	87 53       	subi	r24, 0x37	; 55
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN10Sabertooth11ParsePacketEhh>
     954:	09 c0       	rjmp	.+18     	; 0x968 <main+0x1a4>
		}
		else {
			ERROR_SET();
     956:	f6 01       	movw	r30, r12
     958:	95 82       	std	Z+5, r9	; 0x05
			DriveSaber.ParsePacket(127,127);  //This line should only be executed once
     95a:	4f e7       	ldi	r20, 0x7F	; 127
     95c:	6f e7       	ldi	r22, 0x7F	; 127
     95e:	ce 01       	movw	r24, r28
     960:	87 53       	subi	r24, 0x37	; 55
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN10Sabertooth11ParsePacketEhh>
     968:	ff ef       	ldi	r31, 0xFF	; 255
     96a:	29 e6       	ldi	r18, 0x69	; 105
     96c:	88 e1       	ldi	r24, 0x18	; 24
     96e:	f1 50       	subi	r31, 0x01	; 1
     970:	20 40       	sbci	r18, 0x00	; 0
     972:	80 40       	sbci	r24, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <main+0x1aa>
     976:	00 c0       	rjmp	.+0      	; 0x978 <main+0x1b4>
     978:	00 00       	nop
     97a:	9f ef       	ldi	r25, 0xFF	; 255
     97c:	e9 ef       	ldi	r30, 0xF9	; 249
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	91 50       	subi	r25, 0x01	; 1
     982:	e0 40       	sbci	r30, 0x00	; 0
     984:	f0 40       	sbci	r31, 0x00	; 0
     986:	e1 f7       	brne	.-8      	; 0x980 <main+0x1bc>
     988:	00 c0       	rjmp	.+0      	; 0x98a <main+0x1c6>
     98a:	00 00       	nop
     98c:	bb cf       	rjmp	.-138    	; 0x904 <main+0x140>

0000098e <_GLOBAL__sub_I_swap>:
#include "rotateStepper.h"

int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
     98e:	8e e3       	ldi	r24, 0x3E	; 62
     990:	90 e2       	ldi	r25, 0x20	; 32
     992:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     996:	86 e2       	ldi	r24, 0x26	; 38
     998:	90 e2       	ldi	r25, 0x20	; 32
     99a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     99e:	80 e2       	ldi	r24, 0x20	; 32
     9a0:	90 e2       	ldi	r25, 0x20	; 32
     9a2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     9a6:	86 e1       	ldi	r24, 0x16	; 22
     9a8:	90 e2       	ldi	r25, 0x20	; 32
     9aa:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13rotateStepperC1Ev>
     9ae:	08 95       	ret

000009b0 <_GLOBAL__sub_D_swap>:
     9b0:	86 e1       	ldi	r24, 0x16	; 22
     9b2:	90 e2       	ldi	r25, 0x20	; 32
     9b4:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN13rotateStepperD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	90 e2       	ldi	r25, 0x20	; 32
     9bc:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN11stepperInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
motorInfo upperAct;
     9c0:	86 e2       	ldi	r24, 0x26	; 38
     9c2:	90 e2       	ldi	r25, 0x20	; 32
     9c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN9motorInfoD1Ev>
#include "rotateStepper.h"

int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
     9c8:	8e e3       	ldi	r24, 0x3E	; 62
     9ca:	90 e2       	ldi	r25, 0x20	; 32
     9cc:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN9motorInfoD1Ev>
     9d0:	08 95       	ret

000009d2 <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     9d2:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     9d4:	12 82       	std	Z+2, r1	; 0x02
     9d6:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	80 83       	st	Z, r24
     9de:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .1;  //Needs calibration
     9e0:	4d ec       	ldi	r20, 0xCD	; 205
     9e2:	5c ec       	ldi	r21, 0xCC	; 204
     9e4:	6c ec       	ldi	r22, 0xCC	; 204
     9e6:	7d e3       	ldi	r23, 0x3D	; 61
     9e8:	44 83       	std	Z+4, r20	; 0x04
     9ea:	55 83       	std	Z+5, r21	; 0x05
     9ec:	66 83       	std	Z+6, r22	; 0x06
     9ee:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e4       	ldi	r22, 0x40	; 64
     9f6:	7f e3       	ldi	r23, 0x3F	; 63
     9f8:	40 87       	std	Z+8, r20	; 0x08
     9fa:	51 87       	std	Z+9, r21	; 0x09
     9fc:	62 87       	std	Z+10, r22	; 0x0a
     9fe:	73 87       	std	Z+11, r23	; 0x0b
	speed = 50;
     a00:	82 e3       	ldi	r24, 0x32	; 50
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	84 87       	std	Z+12, r24	; 0x0c
     a06:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     a08:	16 86       	std	Z+14, r1	; 0x0e
     a0a:	17 86       	std	Z+15, r1	; 0x0f
     a0c:	08 95       	ret

00000a0e <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     a0e:	08 95       	ret

00000a10 <_ZN9motorInfo7disableEv>:
void motorInfo::enable(){
	enabled = 1;
}

void motorInfo::disable(){
	enabled = 0;
     a10:	fc 01       	movw	r30, r24
     a12:	16 86       	std	Z+14, r1	; 0x0e
     a14:	17 86       	std	Z+15, r1	; 0x0f
     a16:	08 95       	ret

00000a18 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     a18:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     a1a:	45 e8       	ldi	r20, 0x85	; 133
     a1c:	5b e2       	ldi	r21, 0x2B	; 43
     a1e:	61 e8       	ldi	r22, 0x81	; 129
     a20:	73 e4       	ldi	r23, 0x43	; 67
     a22:	44 83       	std	Z+4, r20	; 0x04
     a24:	55 83       	std	Z+5, r21	; 0x05
     a26:	66 83       	std	Z+6, r22	; 0x06
     a28:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	7f eb       	ldi	r23, 0xBF	; 191
     a32:	40 83       	st	Z, r20
     a34:	51 83       	std	Z+1, r21	; 0x01
     a36:	62 83       	std	Z+2, r22	; 0x02
     a38:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     a3a:	10 86       	std	Z+8, r1	; 0x08
     a3c:	11 86       	std	Z+9, r1	; 0x09
     a3e:	08 95       	ret

00000a40 <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     a40:	08 95       	ret

00000a42 <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	e0 e6       	ldi	r30, 0x60	; 96
     a4c:	f6 e0       	ldi	r31, 0x06	; 6
     a4e:	86 83       	std	Z+6, r24	; 0x06
	bool calFirstPress = false;
	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     a54:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b6 e0       	ldi	r27, 0x06	; 6

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     a5a:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     a5c:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     a5e:	18 96       	adiw	r26, 0x08	; 8
     a60:	8c 91       	ld	r24, X
     a62:	18 97       	sbiw	r26, 0x08	; 8

		if(calButtonState && !calFirstPress){
     a64:	82 ff       	sbrs	r24, 2
     a66:	0e c0       	rjmp	.+28     	; 0xa84 <_ZN13rotateStepper13calibrateBaseEv+0x42>
     a68:	21 11       	cpse	r18, r1
     a6a:	0e c0       	rjmp	.+28     	; 0xa88 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     a6c:	35 83       	std	Z+5, r19	; 0x05
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	43 ec       	ldi	r20, 0xC3	; 195
     a72:	89 e0       	ldi	r24, 0x09	; 9
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	40 40       	sbci	r20, 0x00	; 0
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <_ZN13rotateStepper13calibrateBaseEv+0x32>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     a7e:	00 00       	nop
	
	while (calInProgress){
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
     a80:	23 2f       	mov	r18, r19
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(100);  //For gracefulness
		}
		
		if(calFirstPress == true)
     a84:	22 23       	and	r18, r18
     a86:	51 f0       	breq	.+20     	; 0xa9c <_ZN13rotateStepper13calibrateBaseEv+0x5a>
			++stepCount;
     a88:	6f 5f       	subi	r22, 0xFF	; 255
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
     a8c:	67 39       	cpi	r22, 0x97	; 151
     a8e:	71 05       	cpc	r23, r1
     a90:	2c f0       	brlt	.+10     	; 0xa9c <_ZN13rotateStepper13calibrateBaseEv+0x5a>
     a92:	18 96       	adiw	r26, 0x08	; 8
     a94:	8c 91       	ld	r24, X
     a96:	18 97       	sbiw	r26, 0x08	; 8
     a98:	82 fd       	sbrc	r24, 2
     a9a:	12 c0       	rjmp	.+36     	; 0xac0 <_ZN13rotateStepper13calibrateBaseEv+0x7e>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     a9c:	56 83       	std	Z+6, r21	; 0x06
     a9e:	8f e3       	ldi	r24, 0x3F	; 63
     aa0:	9f e1       	ldi	r25, 0x1F	; 31
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <_ZN13rotateStepper13calibrateBaseEv+0x60>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <_ZN13rotateStepper13calibrateBaseEv+0x66>
     aa8:	00 00       	nop
		_delay_ms(1);
		MD2_STEP_SET();
     aaa:	55 83       	std	Z+5, r21	; 0x05
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	49 ef       	ldi	r20, 0xF9	; 249
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	40 40       	sbci	r20, 0x00	; 0
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <_ZN13rotateStepper13calibrateBaseEv+0x70>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <_ZN13rotateStepper13calibrateBaseEv+0x7a>
     abc:	00 00       	nop
     abe:	cf cf       	rjmp	.-98     	; 0xa5e <_ZN13rotateStepper13calibrateBaseEv+0x1c>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	e0 e6       	ldi	r30, 0x60	; 96
     ac4:	f6 e0       	ldi	r31, 0x06	; 6
     ac6:	86 83       	std	Z+6, r24	; 0x06
     ac8:	8f e3       	ldi	r24, 0x3F	; 63
     aca:	9f e1       	ldi	r25, 0x1F	; 31
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <_ZN13rotateStepper13calibrateBaseEv+0x8a>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <_ZN13rotateStepper13calibrateBaseEv+0x90>
     ad2:	00 00       	nop
		_delay_ms(1);
		MD2_STEP_SET();
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	85 83       	std	Z+5, r24	; 0x05
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	29 ef       	ldi	r18, 0xF9	; 249
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	91 50       	subi	r25, 0x01	; 1
     ae0:	20 40       	sbci	r18, 0x00	; 0
     ae2:	40 40       	sbci	r20, 0x00	; 0
     ae4:	e1 f7       	brne	.-8      	; 0xade <_ZN13rotateStepper13calibrateBaseEv+0x9c>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <_ZN13rotateStepper13calibrateBaseEv+0xa6>
     ae8:	00 00       	nop
		_delay_ms(10);
	}
	
	multiplier = stepCount / calSpan;
     aea:	88 27       	eor	r24, r24
     aec:	77 fd       	sbrc	r23, 7
     aee:	80 95       	com	r24
     af0:	98 2f       	mov	r25, r24
     af2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__floatsisf>
     af6:	2c 81       	ldd	r18, Y+4	; 0x04
     af8:	3d 81       	ldd	r19, Y+5	; 0x05
     afa:	4e 81       	ldd	r20, Y+6	; 0x06
     afc:	5f 81       	ldd	r21, Y+7	; 0x07
     afe:	0e 94 0a 07 	call	0xe14	; 0xe14 <__divsf3>
     b02:	68 83       	st	Y, r22
     b04:	79 83       	std	Y+1, r23	; 0x01
     b06:	8a 83       	std	Y+2, r24	; 0x02
     b08:	9b 83       	std	Y+3, r25	; 0x03
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
     b16:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
     b18:	18 16       	cp	r1, r24
     b1a:	19 06       	cpc	r1, r25
     b1c:	2c f4       	brge	.+10     	; 0xb28 <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	e0 e6       	ldi	r30, 0x60	; 96
     b22:	f6 e0       	ldi	r31, 0x06	; 6
     b24:	26 83       	std	Z+6, r18	; 0x06
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
     b28:	21 e0       	ldi	r18, 0x01	; 1
     b2a:	e0 e6       	ldi	r30, 0x60	; 96
     b2c:	f6 e0       	ldi	r31, 0x06	; 6
     b2e:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
     b30:	bc 01       	movw	r22, r24
     b32:	99 23       	and	r25, r25
     b34:	24 f4       	brge	.+8      	; 0xb3e <_ZN13rotateStepper8moveBaseEi+0x2e>
     b36:	66 27       	eor	r22, r22
     b38:	77 27       	eor	r23, r23
     b3a:	68 1b       	sub	r22, r24
     b3c:	79 0b       	sbc	r23, r25
     b3e:	88 27       	eor	r24, r24
     b40:	77 fd       	sbrc	r23, 7
     b42:	80 95       	com	r24
     b44:	98 2f       	mov	r25, r24
     b46:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__floatsisf>
     b4a:	28 81       	ld	r18, Y
     b4c:	39 81       	ldd	r19, Y+1	; 0x01
     b4e:	4a 81       	ldd	r20, Y+2	; 0x02
     b50:	5b 81       	ldd	r21, Y+3	; 0x03
     b52:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3>
     b56:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
     b5a:	16 16       	cp	r1, r22
     b5c:	17 06       	cpc	r1, r23
     b5e:	d4 f4       	brge	.+52     	; 0xb94 <_ZN13rotateStepper8moveBaseEi+0x84>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
		MD2_STEP_CLR();
     b64:	e0 e6       	ldi	r30, 0x60	; 96
     b66:	f6 e0       	ldi	r31, 0x06	; 6
     b68:	22 e0       	ldi	r18, 0x02	; 2
     b6a:	26 83       	std	Z+6, r18	; 0x06
     b6c:	af e3       	ldi	r26, 0x3F	; 63
     b6e:	bf e1       	ldi	r27, 0x1F	; 31
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <_ZN13rotateStepper8moveBaseEi+0x60>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <_ZN13rotateStepper8moveBaseEi+0x66>
     b76:	00 00       	nop
		_delay_ms(1);
		MD2_STEP_SET();
     b78:	25 83       	std	Z+5, r18	; 0x05
     b7a:	bf ef       	ldi	r27, 0xFF	; 255
     b7c:	39 ef       	ldi	r19, 0xF9	; 249
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	b1 50       	subi	r27, 0x01	; 1
     b82:	30 40       	sbci	r19, 0x00	; 0
     b84:	40 40       	sbci	r20, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <_ZN13rotateStepper8moveBaseEi+0x70>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <_ZN13rotateStepper8moveBaseEi+0x7a>
     b8a:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	86 17       	cp	r24, r22
     b90:	97 07       	cpc	r25, r23
     b92:	59 f7       	brne	.-42     	; 0xb6a <_ZN13rotateStepper8moveBaseEi+0x5a>
		_delay_ms(1);
		MD2_STEP_SET();
		_delay_ms(10);
	}
	
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
     ba8:	88 27       	eor	r24, r24
     baa:	77 fd       	sbrc	r23, 7
     bac:	80 95       	com	r24
     bae:	98 2f       	mov	r25, r24
     bb0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__floatsisf>
     bb4:	2b e7       	ldi	r18, 0x7B	; 123
     bb6:	34 e1       	ldi	r19, 0x14	; 20
     bb8:	48 e0       	ldi	r20, 0x08	; 8
     bba:	52 e4       	ldi	r21, 0x42	; 66
     bbc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__addsf3>
     bc0:	0e 94 72 07 	call	0xee4	; 0xee4 <__fixsfsi>
     bc4:	6b 01       	movw	r12, r22
     bc6:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
     bc8:	88 85       	ldd	r24, Y+8	; 0x08
     bca:	99 85       	ldd	r25, Y+9	; 0x09
     bcc:	b6 01       	movw	r22, r12
     bce:	68 1b       	sub	r22, r24
     bd0:	79 0b       	sbc	r23, r25
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
     bd8:	c8 86       	std	Y+8, r12	; 0x08
     bda:	d9 86       	std	Y+9, r13	; 0x09
	
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	08 95       	ret

00000bea <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
     bea:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	81 81       	ldd	r24, Z+1	; 0x01
     bf4:	85 ff       	sbrs	r24, 5
     bf6:	fd cf       	rjmp	.-6      	; 0xbf2 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
     bf8:	80 e8       	ldi	r24, 0x80	; 128
     bfa:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	81 81       	ldd	r24, Z+1	; 0x01
     c04:	85 ff       	sbrs	r24, 5
     c06:	fd cf       	rjmp	.-6      	; 0xc02 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
     c08:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     c0a:	ed 91       	ld	r30, X+
     c0c:	fc 91       	ld	r31, X
     c0e:	11 97       	sbiw	r26, 0x01	; 1
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	85 ff       	sbrs	r24, 5
     c14:	fd cf       	rjmp	.-6      	; 0xc10 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
     c16:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     c18:	ed 91       	ld	r30, X+
     c1a:	fc 91       	ld	r31, X
     c1c:	81 81       	ldd	r24, Z+1	; 0x01
     c1e:	85 ff       	sbrs	r24, 5
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
     c22:	64 0f       	add	r22, r20
     c24:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
     c26:	60 83       	st	Z, r22
     c28:	08 95       	ret

00000c2a <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	ec 01       	movw	r28, r24
     c34:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
     c36:	6f 37       	cpi	r22, 0x7F	; 127
     c38:	61 f0       	breq	.+24     	; 0xc52 <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
     c3a:	6f 37       	cpi	r22, 0x7F	; 127
     c3c:	20 f4       	brcc	.+8      	; 0xc46 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
     c3e:	4f e7       	ldi	r20, 0x7F	; 127
     c40:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
     c46:	66 23       	and	r22, r22
     c48:	3c f4       	brge	.+14     	; 0xc58 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
     c4a:	41 e8       	ldi	r20, 0x81	; 129
     c4c:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
     c52:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
     c58:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
     c5a:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
     c5c:	8f 37       	cpi	r24, 0x7F	; 127
     c5e:	61 f0       	breq	.+24     	; 0xc78 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
     c60:	8f 37       	cpi	r24, 0x7F	; 127
     c62:	20 f4       	brcc	.+8      	; 0xc6c <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
     c64:	0f e7       	ldi	r16, 0x7F	; 127
     c66:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
     c68:	15 e0       	ldi	r17, 0x05	; 5
     c6a:	0b c0       	rjmp	.+22     	; 0xc82 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
     c6c:	88 23       	and	r24, r24
     c6e:	3c f4       	brge	.+14     	; 0xc7e <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
     c70:	01 e8       	ldi	r16, 0x81	; 129
     c72:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
     c74:	14 e0       	ldi	r17, 0x04	; 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
     c78:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
     c7a:	14 e0       	ldi	r17, 0x04	; 4
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
     c7e:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
     c80:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
     c88:	40 2f       	mov	r20, r16
     c8a:	61 2f       	mov	r22, r17
     c8c:	ce 01       	movw	r24, r28
     c8e:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN10Sabertooth12SendDriveCmdEcc>
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	64 e0       	ldi	r22, 0x04	; 4
     cae:	ce 01       	movw	r24, r28
     cb0:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN10Sabertooth12SendDriveCmdEcc>
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
     cc0:	68 83       	st	Y, r22
     cc2:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
     cc4:	4a 83       	std	Y+2, r20	; 0x02
     cc6:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
     cc8:	88 e0       	ldi	r24, 0x08	; 8
     cca:	fa 01       	movw	r30, r20
     ccc:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
     cce:	e8 81       	ld	r30, Y
     cd0:	f9 81       	ldd	r31, Y+1	; 0x01
     cd2:	83 e0       	ldi	r24, 0x03	; 3
     cd4:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
     cd6:	e8 81       	ld	r30, Y
     cd8:	f9 81       	ldd	r31, Y+1	; 0x01
     cda:	8f ec       	ldi	r24, 0xCF	; 207
     cdc:	86 83       	std	Z+6, r24	; 0x06
     cde:	e8 81       	ld	r30, Y
     ce0:	f9 81       	ldd	r31, Y+1	; 0x01
     ce2:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
     ce4:	e8 81       	ld	r30, Y
     ce6:	f9 81       	ldd	r31, Y+1	; 0x01
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	88 60       	ori	r24, 0x08	; 8
     cec:	84 83       	std	Z+4, r24	; 0x04
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	23 ec       	ldi	r18, 0xC3	; 195
     cf2:	89 e0       	ldi	r24, 0x09	; 9
     cf4:	f1 50       	subi	r31, 0x01	; 1
     cf6:	20 40       	sbci	r18, 0x00	; 0
     cf8:	80 40       	sbci	r24, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
     cfe:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
     d00:	e8 81       	ld	r30, Y
     d02:	f9 81       	ldd	r31, Y+1	; 0x01
     d04:	8a ea       	ldi	r24, 0xAA	; 170
     d06:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
     d08:	44 e1       	ldi	r20, 0x14	; 20
     d0a:	6e e0       	ldi	r22, 0x0E	; 14
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
     d12:	ce 01       	movw	r24, r28
     d14:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_ZN10Sabertooth7StopAllEv>
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <_ZN11stepperInfoC1Ev>:
	#include "usart_driver.h"
};


// default constructor
stepperInfo::stepperInfo() {
     d1e:	fc 01       	movw	r30, r24
	enabled = 0;
     d20:	10 82       	st	Z, r1
     d22:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	9f ef       	ldi	r25, 0xFF	; 255
     d28:	82 83       	std	Z+2, r24	; 0x02
     d2a:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	84 83       	std	Z+4, r24	; 0x04
     d32:	95 83       	std	Z+5, r25	; 0x05
     d34:	08 95       	ret

00000d36 <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
     d36:	08 95       	ret

00000d38 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     d38:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     d3a:	60 83       	st	Z, r22
     d3c:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     d3e:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     d40:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
     d42:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
     d44:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
     d46:	15 86       	std	Z+13, r1	; 0x0d
     d48:	08 95       	ret

00000d4a <__subsf3>:
     d4a:	50 58       	subi	r21, 0x80	; 128

00000d4c <__addsf3>:
     d4c:	bb 27       	eor	r27, r27
     d4e:	aa 27       	eor	r26, r26
     d50:	0e d0       	rcall	.+28     	; 0xd6e <__addsf3x>
     d52:	4d c1       	rjmp	.+666    	; 0xfee <__fp_round>
     d54:	3e d1       	rcall	.+636    	; 0xfd2 <__fp_pscA>
     d56:	30 f0       	brcs	.+12     	; 0xd64 <__addsf3+0x18>
     d58:	43 d1       	rcall	.+646    	; 0xfe0 <__fp_pscB>
     d5a:	20 f0       	brcs	.+8      	; 0xd64 <__addsf3+0x18>
     d5c:	31 f4       	brne	.+12     	; 0xd6a <__addsf3+0x1e>
     d5e:	9f 3f       	cpi	r25, 0xFF	; 255
     d60:	11 f4       	brne	.+4      	; 0xd66 <__addsf3+0x1a>
     d62:	1e f4       	brtc	.+6      	; 0xd6a <__addsf3+0x1e>
     d64:	33 c1       	rjmp	.+614    	; 0xfcc <__fp_nan>
     d66:	0e f4       	brtc	.+2      	; 0xd6a <__addsf3+0x1e>
     d68:	e0 95       	com	r30
     d6a:	e7 fb       	bst	r30, 7
     d6c:	29 c1       	rjmp	.+594    	; 0xfc0 <__fp_inf>

00000d6e <__addsf3x>:
     d6e:	e9 2f       	mov	r30, r25
     d70:	4f d1       	rcall	.+670    	; 0x1010 <__fp_split3>
     d72:	80 f3       	brcs	.-32     	; 0xd54 <__addsf3+0x8>
     d74:	ba 17       	cp	r27, r26
     d76:	62 07       	cpc	r22, r18
     d78:	73 07       	cpc	r23, r19
     d7a:	84 07       	cpc	r24, r20
     d7c:	95 07       	cpc	r25, r21
     d7e:	18 f0       	brcs	.+6      	; 0xd86 <__addsf3x+0x18>
     d80:	71 f4       	brne	.+28     	; 0xd9e <__addsf3x+0x30>
     d82:	9e f5       	brtc	.+102    	; 0xdea <__addsf3x+0x7c>
     d84:	67 c1       	rjmp	.+718    	; 0x1054 <__fp_zero>
     d86:	0e f4       	brtc	.+2      	; 0xd8a <__addsf3x+0x1c>
     d88:	e0 95       	com	r30
     d8a:	0b 2e       	mov	r0, r27
     d8c:	ba 2f       	mov	r27, r26
     d8e:	a0 2d       	mov	r26, r0
     d90:	0b 01       	movw	r0, r22
     d92:	b9 01       	movw	r22, r18
     d94:	90 01       	movw	r18, r0
     d96:	0c 01       	movw	r0, r24
     d98:	ca 01       	movw	r24, r20
     d9a:	a0 01       	movw	r20, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	ff 27       	eor	r31, r31
     da0:	59 1b       	sub	r21, r25
     da2:	99 f0       	breq	.+38     	; 0xdca <__addsf3x+0x5c>
     da4:	59 3f       	cpi	r21, 0xF9	; 249
     da6:	50 f4       	brcc	.+20     	; 0xdbc <__addsf3x+0x4e>
     da8:	50 3e       	cpi	r21, 0xE0	; 224
     daa:	68 f1       	brcs	.+90     	; 0xe06 <__addsf3x+0x98>
     dac:	1a 16       	cp	r1, r26
     dae:	f0 40       	sbci	r31, 0x00	; 0
     db0:	a2 2f       	mov	r26, r18
     db2:	23 2f       	mov	r18, r19
     db4:	34 2f       	mov	r19, r20
     db6:	44 27       	eor	r20, r20
     db8:	58 5f       	subi	r21, 0xF8	; 248
     dba:	f3 cf       	rjmp	.-26     	; 0xda2 <__addsf3x+0x34>
     dbc:	46 95       	lsr	r20
     dbe:	37 95       	ror	r19
     dc0:	27 95       	ror	r18
     dc2:	a7 95       	ror	r26
     dc4:	f0 40       	sbci	r31, 0x00	; 0
     dc6:	53 95       	inc	r21
     dc8:	c9 f7       	brne	.-14     	; 0xdbc <__addsf3x+0x4e>
     dca:	7e f4       	brtc	.+30     	; 0xdea <__addsf3x+0x7c>
     dcc:	1f 16       	cp	r1, r31
     dce:	ba 0b       	sbc	r27, r26
     dd0:	62 0b       	sbc	r22, r18
     dd2:	73 0b       	sbc	r23, r19
     dd4:	84 0b       	sbc	r24, r20
     dd6:	ba f0       	brmi	.+46     	; 0xe06 <__addsf3x+0x98>
     dd8:	91 50       	subi	r25, 0x01	; 1
     dda:	a1 f0       	breq	.+40     	; 0xe04 <__addsf3x+0x96>
     ddc:	ff 0f       	add	r31, r31
     dde:	bb 1f       	adc	r27, r27
     de0:	66 1f       	adc	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	88 1f       	adc	r24, r24
     de6:	c2 f7       	brpl	.-16     	; 0xdd8 <__addsf3x+0x6a>
     de8:	0e c0       	rjmp	.+28     	; 0xe06 <__addsf3x+0x98>
     dea:	ba 0f       	add	r27, r26
     dec:	62 1f       	adc	r22, r18
     dee:	73 1f       	adc	r23, r19
     df0:	84 1f       	adc	r24, r20
     df2:	48 f4       	brcc	.+18     	; 0xe06 <__addsf3x+0x98>
     df4:	87 95       	ror	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f7 95       	ror	r31
     dfe:	9e 3f       	cpi	r25, 0xFE	; 254
     e00:	08 f0       	brcs	.+2      	; 0xe04 <__addsf3x+0x96>
     e02:	b3 cf       	rjmp	.-154    	; 0xd6a <__addsf3+0x1e>
     e04:	93 95       	inc	r25
     e06:	88 0f       	add	r24, r24
     e08:	08 f0       	brcs	.+2      	; 0xe0c <__addsf3x+0x9e>
     e0a:	99 27       	eor	r25, r25
     e0c:	ee 0f       	add	r30, r30
     e0e:	97 95       	ror	r25
     e10:	87 95       	ror	r24
     e12:	08 95       	ret

00000e14 <__divsf3>:
     e14:	0c d0       	rcall	.+24     	; 0xe2e <__divsf3x>
     e16:	eb c0       	rjmp	.+470    	; 0xfee <__fp_round>
     e18:	e3 d0       	rcall	.+454    	; 0xfe0 <__fp_pscB>
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <__divsf3+0x18>
     e1c:	da d0       	rcall	.+436    	; 0xfd2 <__fp_pscA>
     e1e:	30 f0       	brcs	.+12     	; 0xe2c <__divsf3+0x18>
     e20:	21 f4       	brne	.+8      	; 0xe2a <__divsf3+0x16>
     e22:	5f 3f       	cpi	r21, 0xFF	; 255
     e24:	19 f0       	breq	.+6      	; 0xe2c <__divsf3+0x18>
     e26:	cc c0       	rjmp	.+408    	; 0xfc0 <__fp_inf>
     e28:	51 11       	cpse	r21, r1
     e2a:	15 c1       	rjmp	.+554    	; 0x1056 <__fp_szero>
     e2c:	cf c0       	rjmp	.+414    	; 0xfcc <__fp_nan>

00000e2e <__divsf3x>:
     e2e:	f0 d0       	rcall	.+480    	; 0x1010 <__fp_split3>
     e30:	98 f3       	brcs	.-26     	; 0xe18 <__divsf3+0x4>

00000e32 <__divsf3_pse>:
     e32:	99 23       	and	r25, r25
     e34:	c9 f3       	breq	.-14     	; 0xe28 <__divsf3+0x14>
     e36:	55 23       	and	r21, r21
     e38:	b1 f3       	breq	.-20     	; 0xe26 <__divsf3+0x12>
     e3a:	95 1b       	sub	r25, r21
     e3c:	55 0b       	sbc	r21, r21
     e3e:	bb 27       	eor	r27, r27
     e40:	aa 27       	eor	r26, r26
     e42:	62 17       	cp	r22, r18
     e44:	73 07       	cpc	r23, r19
     e46:	84 07       	cpc	r24, r20
     e48:	38 f0       	brcs	.+14     	; 0xe58 <__divsf3_pse+0x26>
     e4a:	9f 5f       	subi	r25, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	44 1f       	adc	r20, r20
     e54:	aa 1f       	adc	r26, r26
     e56:	a9 f3       	breq	.-22     	; 0xe42 <__divsf3_pse+0x10>
     e58:	33 d0       	rcall	.+102    	; 0xec0 <__divsf3_pse+0x8e>
     e5a:	0e 2e       	mov	r0, r30
     e5c:	3a f0       	brmi	.+14     	; 0xe6c <__divsf3_pse+0x3a>
     e5e:	e0 e8       	ldi	r30, 0x80	; 128
     e60:	30 d0       	rcall	.+96     	; 0xec2 <__divsf3_pse+0x90>
     e62:	91 50       	subi	r25, 0x01	; 1
     e64:	50 40       	sbci	r21, 0x00	; 0
     e66:	e6 95       	lsr	r30
     e68:	00 1c       	adc	r0, r0
     e6a:	ca f7       	brpl	.-14     	; 0xe5e <__divsf3_pse+0x2c>
     e6c:	29 d0       	rcall	.+82     	; 0xec0 <__divsf3_pse+0x8e>
     e6e:	fe 2f       	mov	r31, r30
     e70:	27 d0       	rcall	.+78     	; 0xec0 <__divsf3_pse+0x8e>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	bb 1f       	adc	r27, r27
     e7a:	26 17       	cp	r18, r22
     e7c:	37 07       	cpc	r19, r23
     e7e:	48 07       	cpc	r20, r24
     e80:	ab 07       	cpc	r26, r27
     e82:	b0 e8       	ldi	r27, 0x80	; 128
     e84:	09 f0       	breq	.+2      	; 0xe88 <__divsf3_pse+0x56>
     e86:	bb 0b       	sbc	r27, r27
     e88:	80 2d       	mov	r24, r0
     e8a:	bf 01       	movw	r22, r30
     e8c:	ff 27       	eor	r31, r31
     e8e:	93 58       	subi	r25, 0x83	; 131
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	2a f0       	brmi	.+10     	; 0xe9e <__divsf3_pse+0x6c>
     e94:	9e 3f       	cpi	r25, 0xFE	; 254
     e96:	51 05       	cpc	r21, r1
     e98:	68 f0       	brcs	.+26     	; 0xeb4 <__divsf3_pse+0x82>
     e9a:	92 c0       	rjmp	.+292    	; 0xfc0 <__fp_inf>
     e9c:	dc c0       	rjmp	.+440    	; 0x1056 <__fp_szero>
     e9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ea0:	ec f3       	brlt	.-6      	; 0xe9c <__divsf3_pse+0x6a>
     ea2:	98 3e       	cpi	r25, 0xE8	; 232
     ea4:	dc f3       	brlt	.-10     	; 0xe9c <__divsf3_pse+0x6a>
     ea6:	86 95       	lsr	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b7 95       	ror	r27
     eae:	f7 95       	ror	r31
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <__divsf3_pse+0x74>
     eb4:	88 0f       	add	r24, r24
     eb6:	91 1d       	adc	r25, r1
     eb8:	96 95       	lsr	r25
     eba:	87 95       	ror	r24
     ebc:	97 f9       	bld	r25, 7
     ebe:	08 95       	ret
     ec0:	e1 e0       	ldi	r30, 0x01	; 1
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	bb 1f       	adc	r27, r27
     eca:	62 17       	cp	r22, r18
     ecc:	73 07       	cpc	r23, r19
     ece:	84 07       	cpc	r24, r20
     ed0:	ba 07       	cpc	r27, r26
     ed2:	20 f0       	brcs	.+8      	; 0xedc <__divsf3_pse+0xaa>
     ed4:	62 1b       	sub	r22, r18
     ed6:	73 0b       	sbc	r23, r19
     ed8:	84 0b       	sbc	r24, r20
     eda:	ba 0b       	sbc	r27, r26
     edc:	ee 1f       	adc	r30, r30
     ede:	88 f7       	brcc	.-30     	; 0xec2 <__divsf3_pse+0x90>
     ee0:	e0 95       	com	r30
     ee2:	08 95       	ret

00000ee4 <__fixsfsi>:
     ee4:	04 d0       	rcall	.+8      	; 0xeee <__fixunssfsi>
     ee6:	68 94       	set
     ee8:	b1 11       	cpse	r27, r1
     eea:	b5 c0       	rjmp	.+362    	; 0x1056 <__fp_szero>
     eec:	08 95       	ret

00000eee <__fixunssfsi>:
     eee:	98 d0       	rcall	.+304    	; 0x1020 <__fp_splitA>
     ef0:	88 f0       	brcs	.+34     	; 0xf14 <__fixunssfsi+0x26>
     ef2:	9f 57       	subi	r25, 0x7F	; 127
     ef4:	90 f0       	brcs	.+36     	; 0xf1a <__fixunssfsi+0x2c>
     ef6:	b9 2f       	mov	r27, r25
     ef8:	99 27       	eor	r25, r25
     efa:	b7 51       	subi	r27, 0x17	; 23
     efc:	a0 f0       	brcs	.+40     	; 0xf26 <__fixunssfsi+0x38>
     efe:	d1 f0       	breq	.+52     	; 0xf34 <__fixunssfsi+0x46>
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	1a f0       	brmi	.+6      	; 0xf10 <__fixunssfsi+0x22>
     f0a:	ba 95       	dec	r27
     f0c:	c9 f7       	brne	.-14     	; 0xf00 <__fixunssfsi+0x12>
     f0e:	12 c0       	rjmp	.+36     	; 0xf34 <__fixunssfsi+0x46>
     f10:	b1 30       	cpi	r27, 0x01	; 1
     f12:	81 f0       	breq	.+32     	; 0xf34 <__fixunssfsi+0x46>
     f14:	9f d0       	rcall	.+318    	; 0x1054 <__fp_zero>
     f16:	b1 e0       	ldi	r27, 0x01	; 1
     f18:	08 95       	ret
     f1a:	9c c0       	rjmp	.+312    	; 0x1054 <__fp_zero>
     f1c:	67 2f       	mov	r22, r23
     f1e:	78 2f       	mov	r23, r24
     f20:	88 27       	eor	r24, r24
     f22:	b8 5f       	subi	r27, 0xF8	; 248
     f24:	39 f0       	breq	.+14     	; 0xf34 <__fixunssfsi+0x46>
     f26:	b9 3f       	cpi	r27, 0xF9	; 249
     f28:	cc f3       	brlt	.-14     	; 0xf1c <__fixunssfsi+0x2e>
     f2a:	86 95       	lsr	r24
     f2c:	77 95       	ror	r23
     f2e:	67 95       	ror	r22
     f30:	b3 95       	inc	r27
     f32:	d9 f7       	brne	.-10     	; 0xf2a <__fixunssfsi+0x3c>
     f34:	3e f4       	brtc	.+14     	; 0xf44 <__fixunssfsi+0x56>
     f36:	90 95       	com	r25
     f38:	80 95       	com	r24
     f3a:	70 95       	com	r23
     f3c:	61 95       	neg	r22
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	8f 4f       	sbci	r24, 0xFF	; 255
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <__floatunsisf>:
     f46:	e8 94       	clt
     f48:	09 c0       	rjmp	.+18     	; 0xf5c <__floatsisf+0x12>

00000f4a <__floatsisf>:
     f4a:	97 fb       	bst	r25, 7
     f4c:	3e f4       	brtc	.+14     	; 0xf5c <__floatsisf+0x12>
     f4e:	90 95       	com	r25
     f50:	80 95       	com	r24
     f52:	70 95       	com	r23
     f54:	61 95       	neg	r22
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	99 23       	and	r25, r25
     f5e:	a9 f0       	breq	.+42     	; 0xf8a <__floatsisf+0x40>
     f60:	f9 2f       	mov	r31, r25
     f62:	96 e9       	ldi	r25, 0x96	; 150
     f64:	bb 27       	eor	r27, r27
     f66:	93 95       	inc	r25
     f68:	f6 95       	lsr	r31
     f6a:	87 95       	ror	r24
     f6c:	77 95       	ror	r23
     f6e:	67 95       	ror	r22
     f70:	b7 95       	ror	r27
     f72:	f1 11       	cpse	r31, r1
     f74:	f8 cf       	rjmp	.-16     	; 0xf66 <__floatsisf+0x1c>
     f76:	fa f4       	brpl	.+62     	; 0xfb6 <__floatsisf+0x6c>
     f78:	bb 0f       	add	r27, r27
     f7a:	11 f4       	brne	.+4      	; 0xf80 <__floatsisf+0x36>
     f7c:	60 ff       	sbrs	r22, 0
     f7e:	1b c0       	rjmp	.+54     	; 0xfb6 <__floatsisf+0x6c>
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	8f 4f       	sbci	r24, 0xFF	; 255
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	16 c0       	rjmp	.+44     	; 0xfb6 <__floatsisf+0x6c>
     f8a:	88 23       	and	r24, r24
     f8c:	11 f0       	breq	.+4      	; 0xf92 <__floatsisf+0x48>
     f8e:	96 e9       	ldi	r25, 0x96	; 150
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <__floatsisf+0x6a>
     f92:	77 23       	and	r23, r23
     f94:	21 f0       	breq	.+8      	; 0xf9e <__floatsisf+0x54>
     f96:	9e e8       	ldi	r25, 0x8E	; 142
     f98:	87 2f       	mov	r24, r23
     f9a:	76 2f       	mov	r23, r22
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <__floatsisf+0x5e>
     f9e:	66 23       	and	r22, r22
     fa0:	71 f0       	breq	.+28     	; 0xfbe <__floatsisf+0x74>
     fa2:	96 e8       	ldi	r25, 0x86	; 134
     fa4:	86 2f       	mov	r24, r22
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	2a f0       	brmi	.+10     	; 0xfb6 <__floatsisf+0x6c>
     fac:	9a 95       	dec	r25
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	da f7       	brpl	.-10     	; 0xfac <__floatsisf+0x62>
     fb6:	88 0f       	add	r24, r24
     fb8:	96 95       	lsr	r25
     fba:	87 95       	ror	r24
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret

00000fc0 <__fp_inf>:
     fc0:	97 f9       	bld	r25, 7
     fc2:	9f 67       	ori	r25, 0x7F	; 127
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	08 95       	ret

00000fcc <__fp_nan>:
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	80 ec       	ldi	r24, 0xC0	; 192
     fd0:	08 95       	ret

00000fd2 <__fp_pscA>:
     fd2:	00 24       	eor	r0, r0
     fd4:	0a 94       	dec	r0
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	18 06       	cpc	r1, r24
     fdc:	09 06       	cpc	r0, r25
     fde:	08 95       	ret

00000fe0 <__fp_pscB>:
     fe0:	00 24       	eor	r0, r0
     fe2:	0a 94       	dec	r0
     fe4:	12 16       	cp	r1, r18
     fe6:	13 06       	cpc	r1, r19
     fe8:	14 06       	cpc	r1, r20
     fea:	05 06       	cpc	r0, r21
     fec:	08 95       	ret

00000fee <__fp_round>:
     fee:	09 2e       	mov	r0, r25
     ff0:	03 94       	inc	r0
     ff2:	00 0c       	add	r0, r0
     ff4:	11 f4       	brne	.+4      	; 0xffa <__fp_round+0xc>
     ff6:	88 23       	and	r24, r24
     ff8:	52 f0       	brmi	.+20     	; 0x100e <__fp_round+0x20>
     ffa:	bb 0f       	add	r27, r27
     ffc:	40 f4       	brcc	.+16     	; 0x100e <__fp_round+0x20>
     ffe:	bf 2b       	or	r27, r31
    1000:	11 f4       	brne	.+4      	; 0x1006 <__fp_round+0x18>
    1002:	60 ff       	sbrs	r22, 0
    1004:	04 c0       	rjmp	.+8      	; 0x100e <__fp_round+0x20>
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__fp_split3>:
    1010:	57 fd       	sbrc	r21, 7
    1012:	90 58       	subi	r25, 0x80	; 128
    1014:	44 0f       	add	r20, r20
    1016:	55 1f       	adc	r21, r21
    1018:	59 f0       	breq	.+22     	; 0x1030 <__fp_splitA+0x10>
    101a:	5f 3f       	cpi	r21, 0xFF	; 255
    101c:	71 f0       	breq	.+28     	; 0x103a <__fp_splitA+0x1a>
    101e:	47 95       	ror	r20

00001020 <__fp_splitA>:
    1020:	88 0f       	add	r24, r24
    1022:	97 fb       	bst	r25, 7
    1024:	99 1f       	adc	r25, r25
    1026:	61 f0       	breq	.+24     	; 0x1040 <__fp_splitA+0x20>
    1028:	9f 3f       	cpi	r25, 0xFF	; 255
    102a:	79 f0       	breq	.+30     	; 0x104a <__fp_splitA+0x2a>
    102c:	87 95       	ror	r24
    102e:	08 95       	ret
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	55 1f       	adc	r21, r21
    1038:	f2 cf       	rjmp	.-28     	; 0x101e <__fp_split3+0xe>
    103a:	46 95       	lsr	r20
    103c:	f1 df       	rcall	.-30     	; 0x1020 <__fp_splitA>
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <__fp_splitA+0x30>
    1040:	16 16       	cp	r1, r22
    1042:	17 06       	cpc	r1, r23
    1044:	18 06       	cpc	r1, r24
    1046:	99 1f       	adc	r25, r25
    1048:	f1 cf       	rjmp	.-30     	; 0x102c <__fp_splitA+0xc>
    104a:	86 95       	lsr	r24
    104c:	71 05       	cpc	r23, r1
    104e:	61 05       	cpc	r22, r1
    1050:	08 94       	sec
    1052:	08 95       	ret

00001054 <__fp_zero>:
    1054:	e8 94       	clt

00001056 <__fp_szero>:
    1056:	bb 27       	eor	r27, r27
    1058:	66 27       	eor	r22, r22
    105a:	77 27       	eor	r23, r23
    105c:	cb 01       	movw	r24, r22
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__gesf2>:
    1062:	66 d0       	rcall	.+204    	; 0x1130 <__fp_cmp>
    1064:	08 f4       	brcc	.+2      	; 0x1068 <__gesf2+0x6>
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	08 95       	ret

0000106a <__mulsf3>:
    106a:	0b d0       	rcall	.+22     	; 0x1082 <__mulsf3x>
    106c:	c0 cf       	rjmp	.-128    	; 0xfee <__fp_round>
    106e:	b1 df       	rcall	.-158    	; 0xfd2 <__fp_pscA>
    1070:	28 f0       	brcs	.+10     	; 0x107c <__mulsf3+0x12>
    1072:	b6 df       	rcall	.-148    	; 0xfe0 <__fp_pscB>
    1074:	18 f0       	brcs	.+6      	; 0x107c <__mulsf3+0x12>
    1076:	95 23       	and	r25, r21
    1078:	09 f0       	breq	.+2      	; 0x107c <__mulsf3+0x12>
    107a:	a2 cf       	rjmp	.-188    	; 0xfc0 <__fp_inf>
    107c:	a7 cf       	rjmp	.-178    	; 0xfcc <__fp_nan>
    107e:	11 24       	eor	r1, r1
    1080:	ea cf       	rjmp	.-44     	; 0x1056 <__fp_szero>

00001082 <__mulsf3x>:
    1082:	c6 df       	rcall	.-116    	; 0x1010 <__fp_split3>
    1084:	a0 f3       	brcs	.-24     	; 0x106e <__mulsf3+0x4>

00001086 <__mulsf3_pse>:
    1086:	95 9f       	mul	r25, r21
    1088:	d1 f3       	breq	.-12     	; 0x107e <__mulsf3+0x14>
    108a:	95 0f       	add	r25, r21
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	55 1f       	adc	r21, r21
    1090:	62 9f       	mul	r22, r18
    1092:	f0 01       	movw	r30, r0
    1094:	72 9f       	mul	r23, r18
    1096:	bb 27       	eor	r27, r27
    1098:	f0 0d       	add	r31, r0
    109a:	b1 1d       	adc	r27, r1
    109c:	63 9f       	mul	r22, r19
    109e:	aa 27       	eor	r26, r26
    10a0:	f0 0d       	add	r31, r0
    10a2:	b1 1d       	adc	r27, r1
    10a4:	aa 1f       	adc	r26, r26
    10a6:	64 9f       	mul	r22, r20
    10a8:	66 27       	eor	r22, r22
    10aa:	b0 0d       	add	r27, r0
    10ac:	a1 1d       	adc	r26, r1
    10ae:	66 1f       	adc	r22, r22
    10b0:	82 9f       	mul	r24, r18
    10b2:	22 27       	eor	r18, r18
    10b4:	b0 0d       	add	r27, r0
    10b6:	a1 1d       	adc	r26, r1
    10b8:	62 1f       	adc	r22, r18
    10ba:	73 9f       	mul	r23, r19
    10bc:	b0 0d       	add	r27, r0
    10be:	a1 1d       	adc	r26, r1
    10c0:	62 1f       	adc	r22, r18
    10c2:	83 9f       	mul	r24, r19
    10c4:	a0 0d       	add	r26, r0
    10c6:	61 1d       	adc	r22, r1
    10c8:	22 1f       	adc	r18, r18
    10ca:	74 9f       	mul	r23, r20
    10cc:	33 27       	eor	r19, r19
    10ce:	a0 0d       	add	r26, r0
    10d0:	61 1d       	adc	r22, r1
    10d2:	23 1f       	adc	r18, r19
    10d4:	84 9f       	mul	r24, r20
    10d6:	60 0d       	add	r22, r0
    10d8:	21 1d       	adc	r18, r1
    10da:	82 2f       	mov	r24, r18
    10dc:	76 2f       	mov	r23, r22
    10de:	6a 2f       	mov	r22, r26
    10e0:	11 24       	eor	r1, r1
    10e2:	9f 57       	subi	r25, 0x7F	; 127
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	8a f0       	brmi	.+34     	; 0x110a <__mulsf3_pse+0x84>
    10e8:	e1 f0       	breq	.+56     	; 0x1122 <__mulsf3_pse+0x9c>
    10ea:	88 23       	and	r24, r24
    10ec:	4a f0       	brmi	.+18     	; 0x1100 <__mulsf3_pse+0x7a>
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	bb 1f       	adc	r27, r27
    10f4:	66 1f       	adc	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	91 50       	subi	r25, 0x01	; 1
    10fc:	50 40       	sbci	r21, 0x00	; 0
    10fe:	a9 f7       	brne	.-22     	; 0x10ea <__mulsf3_pse+0x64>
    1100:	9e 3f       	cpi	r25, 0xFE	; 254
    1102:	51 05       	cpc	r21, r1
    1104:	70 f0       	brcs	.+28     	; 0x1122 <__mulsf3_pse+0x9c>
    1106:	5c cf       	rjmp	.-328    	; 0xfc0 <__fp_inf>
    1108:	a6 cf       	rjmp	.-180    	; 0x1056 <__fp_szero>
    110a:	5f 3f       	cpi	r21, 0xFF	; 255
    110c:	ec f3       	brlt	.-6      	; 0x1108 <__mulsf3_pse+0x82>
    110e:	98 3e       	cpi	r25, 0xE8	; 232
    1110:	dc f3       	brlt	.-10     	; 0x1108 <__mulsf3_pse+0x82>
    1112:	86 95       	lsr	r24
    1114:	77 95       	ror	r23
    1116:	67 95       	ror	r22
    1118:	b7 95       	ror	r27
    111a:	f7 95       	ror	r31
    111c:	e7 95       	ror	r30
    111e:	9f 5f       	subi	r25, 0xFF	; 255
    1120:	c1 f7       	brne	.-16     	; 0x1112 <__mulsf3_pse+0x8c>
    1122:	fe 2b       	or	r31, r30
    1124:	88 0f       	add	r24, r24
    1126:	91 1d       	adc	r25, r1
    1128:	96 95       	lsr	r25
    112a:	87 95       	ror	r24
    112c:	97 f9       	bld	r25, 7
    112e:	08 95       	ret

00001130 <__fp_cmp>:
    1130:	99 0f       	add	r25, r25
    1132:	00 08       	sbc	r0, r0
    1134:	55 0f       	add	r21, r21
    1136:	aa 0b       	sbc	r26, r26
    1138:	e0 e8       	ldi	r30, 0x80	; 128
    113a:	fe ef       	ldi	r31, 0xFE	; 254
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	e8 07       	cpc	r30, r24
    1142:	f9 07       	cpc	r31, r25
    1144:	c0 f0       	brcs	.+48     	; 0x1176 <__fp_cmp+0x46>
    1146:	12 16       	cp	r1, r18
    1148:	13 06       	cpc	r1, r19
    114a:	e4 07       	cpc	r30, r20
    114c:	f5 07       	cpc	r31, r21
    114e:	98 f0       	brcs	.+38     	; 0x1176 <__fp_cmp+0x46>
    1150:	62 1b       	sub	r22, r18
    1152:	73 0b       	sbc	r23, r19
    1154:	84 0b       	sbc	r24, r20
    1156:	95 0b       	sbc	r25, r21
    1158:	39 f4       	brne	.+14     	; 0x1168 <__fp_cmp+0x38>
    115a:	0a 26       	eor	r0, r26
    115c:	61 f0       	breq	.+24     	; 0x1176 <__fp_cmp+0x46>
    115e:	23 2b       	or	r18, r19
    1160:	24 2b       	or	r18, r20
    1162:	25 2b       	or	r18, r21
    1164:	21 f4       	brne	.+8      	; 0x116e <__fp_cmp+0x3e>
    1166:	08 95       	ret
    1168:	0a 26       	eor	r0, r26
    116a:	09 f4       	brne	.+2      	; 0x116e <__fp_cmp+0x3e>
    116c:	a1 40       	sbci	r26, 0x01	; 1
    116e:	a6 95       	lsr	r26
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	81 1d       	adc	r24, r1
    1174:	81 1d       	adc	r24, r1
    1176:	08 95       	ret

00001178 <__divmodhi4>:
    1178:	97 fb       	bst	r25, 7
    117a:	07 2e       	mov	r0, r23
    117c:	16 f4       	brtc	.+4      	; 0x1182 <__divmodhi4+0xa>
    117e:	00 94       	com	r0
    1180:	07 d0       	rcall	.+14     	; 0x1190 <__divmodhi4_neg1>
    1182:	77 fd       	sbrc	r23, 7
    1184:	09 d0       	rcall	.+18     	; 0x1198 <__divmodhi4_neg2>
    1186:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__udivmodhi4>
    118a:	07 fc       	sbrc	r0, 7
    118c:	05 d0       	rcall	.+10     	; 0x1198 <__divmodhi4_neg2>
    118e:	3e f4       	brtc	.+14     	; 0x119e <__divmodhi4_exit>

00001190 <__divmodhi4_neg1>:
    1190:	90 95       	com	r25
    1192:	81 95       	neg	r24
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	08 95       	ret

00001198 <__divmodhi4_neg2>:
    1198:	70 95       	com	r23
    119a:	61 95       	neg	r22
    119c:	7f 4f       	sbci	r23, 0xFF	; 255

0000119e <__divmodhi4_exit>:
    119e:	08 95       	ret

000011a0 <__udivmodhi4>:
    11a0:	aa 1b       	sub	r26, r26
    11a2:	bb 1b       	sub	r27, r27
    11a4:	51 e1       	ldi	r21, 0x11	; 17
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <__udivmodhi4_ep>

000011a8 <__udivmodhi4_loop>:
    11a8:	aa 1f       	adc	r26, r26
    11aa:	bb 1f       	adc	r27, r27
    11ac:	a6 17       	cp	r26, r22
    11ae:	b7 07       	cpc	r27, r23
    11b0:	10 f0       	brcs	.+4      	; 0x11b6 <__udivmodhi4_ep>
    11b2:	a6 1b       	sub	r26, r22
    11b4:	b7 0b       	sbc	r27, r23

000011b6 <__udivmodhi4_ep>:
    11b6:	88 1f       	adc	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	5a 95       	dec	r21
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <__udivmodhi4_loop>
    11be:	80 95       	com	r24
    11c0:	90 95       	com	r25
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	08 95       	ret

000011c8 <__tablejump2__>:
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31

000011cc <__tablejump__>:
    11cc:	05 90       	lpm	r0, Z+
    11ce:	f4 91       	lpm	r31, Z
    11d0:	e0 2d       	mov	r30, r0
    11d2:	09 94       	ijmp

000011d4 <sprintf>:
    11d4:	ae e0       	ldi	r26, 0x0E	; 14
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e0 ef       	ldi	r30, 0xF0	; 240
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__prologue_saves__+0x1c>
    11e0:	0d 89       	ldd	r16, Y+21	; 0x15
    11e2:	1e 89       	ldd	r17, Y+22	; 0x16
    11e4:	86 e0       	ldi	r24, 0x06	; 6
    11e6:	8c 83       	std	Y+4, r24	; 0x04
    11e8:	09 83       	std	Y+1, r16	; 0x01
    11ea:	1a 83       	std	Y+2, r17	; 0x02
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	9f e7       	ldi	r25, 0x7F	; 127
    11f0:	8d 83       	std	Y+5, r24	; 0x05
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	ae 01       	movw	r20, r28
    11f6:	47 5e       	subi	r20, 0xE7	; 231
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	6f 89       	ldd	r22, Y+23	; 0x17
    11fc:	78 8d       	ldd	r23, Y+24	; 0x18
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	0e 94 0c 09 	call	0x1218	; 0x1218 <vfprintf>
    1206:	ef 81       	ldd	r30, Y+7	; 0x07
    1208:	f8 85       	ldd	r31, Y+8	; 0x08
    120a:	e0 0f       	add	r30, r16
    120c:	f1 1f       	adc	r31, r17
    120e:	10 82       	st	Z, r1
    1210:	2e 96       	adiw	r28, 0x0e	; 14
    1212:	e4 e0       	ldi	r30, 0x04	; 4
    1214:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__epilogue_restores__+0x1c>

00001218 <vfprintf>:
    1218:	ac e0       	ldi	r26, 0x0C	; 12
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e1       	ldi	r30, 0x12	; 18
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__prologue_saves__>
    1224:	7c 01       	movw	r14, r24
    1226:	6b 01       	movw	r12, r22
    1228:	8a 01       	movw	r16, r20
    122a:	fc 01       	movw	r30, r24
    122c:	16 82       	std	Z+6, r1	; 0x06
    122e:	17 82       	std	Z+7, r1	; 0x07
    1230:	83 81       	ldd	r24, Z+3	; 0x03
    1232:	81 ff       	sbrs	r24, 1
    1234:	bd c1       	rjmp	.+890    	; 0x15b0 <vfprintf+0x398>
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	4c 01       	movw	r8, r24
    123c:	f7 01       	movw	r30, r14
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	f6 01       	movw	r30, r12
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	6f 01       	movw	r12, r30
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <vfprintf+0x3a>
    1250:	ab c1       	rjmp	.+854    	; 0x15a8 <vfprintf+0x390>
    1252:	85 32       	cpi	r24, 0x25	; 37
    1254:	39 f4       	brne	.+14     	; 0x1264 <vfprintf+0x4c>
    1256:	93 fd       	sbrc	r25, 3
    1258:	85 91       	lpm	r24, Z+
    125a:	93 ff       	sbrs	r25, 3
    125c:	81 91       	ld	r24, Z+
    125e:	6f 01       	movw	r12, r30
    1260:	85 32       	cpi	r24, 0x25	; 37
    1262:	29 f4       	brne	.+10     	; 0x126e <vfprintf+0x56>
    1264:	b7 01       	movw	r22, r14
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    126c:	e7 cf       	rjmp	.-50     	; 0x123c <vfprintf+0x24>
    126e:	51 2c       	mov	r5, r1
    1270:	31 2c       	mov	r3, r1
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	20 32       	cpi	r18, 0x20	; 32
    1276:	a0 f4       	brcc	.+40     	; 0x12a0 <vfprintf+0x88>
    1278:	8b 32       	cpi	r24, 0x2B	; 43
    127a:	69 f0       	breq	.+26     	; 0x1296 <vfprintf+0x7e>
    127c:	30 f4       	brcc	.+12     	; 0x128a <vfprintf+0x72>
    127e:	80 32       	cpi	r24, 0x20	; 32
    1280:	59 f0       	breq	.+22     	; 0x1298 <vfprintf+0x80>
    1282:	83 32       	cpi	r24, 0x23	; 35
    1284:	69 f4       	brne	.+26     	; 0x12a0 <vfprintf+0x88>
    1286:	20 61       	ori	r18, 0x10	; 16
    1288:	2c c0       	rjmp	.+88     	; 0x12e2 <vfprintf+0xca>
    128a:	8d 32       	cpi	r24, 0x2D	; 45
    128c:	39 f0       	breq	.+14     	; 0x129c <vfprintf+0x84>
    128e:	80 33       	cpi	r24, 0x30	; 48
    1290:	39 f4       	brne	.+14     	; 0x12a0 <vfprintf+0x88>
    1292:	21 60       	ori	r18, 0x01	; 1
    1294:	26 c0       	rjmp	.+76     	; 0x12e2 <vfprintf+0xca>
    1296:	22 60       	ori	r18, 0x02	; 2
    1298:	24 60       	ori	r18, 0x04	; 4
    129a:	23 c0       	rjmp	.+70     	; 0x12e2 <vfprintf+0xca>
    129c:	28 60       	ori	r18, 0x08	; 8
    129e:	21 c0       	rjmp	.+66     	; 0x12e2 <vfprintf+0xca>
    12a0:	27 fd       	sbrc	r18, 7
    12a2:	27 c0       	rjmp	.+78     	; 0x12f2 <vfprintf+0xda>
    12a4:	30 ed       	ldi	r19, 0xD0	; 208
    12a6:	38 0f       	add	r19, r24
    12a8:	3a 30       	cpi	r19, 0x0A	; 10
    12aa:	78 f4       	brcc	.+30     	; 0x12ca <vfprintf+0xb2>
    12ac:	26 ff       	sbrs	r18, 6
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <vfprintf+0xa4>
    12b0:	fa e0       	ldi	r31, 0x0A	; 10
    12b2:	5f 9e       	mul	r5, r31
    12b4:	30 0d       	add	r19, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	53 2e       	mov	r5, r19
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <vfprintf+0xca>
    12bc:	8a e0       	ldi	r24, 0x0A	; 10
    12be:	38 9e       	mul	r3, r24
    12c0:	30 0d       	add	r19, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	33 2e       	mov	r3, r19
    12c6:	20 62       	ori	r18, 0x20	; 32
    12c8:	0c c0       	rjmp	.+24     	; 0x12e2 <vfprintf+0xca>
    12ca:	8e 32       	cpi	r24, 0x2E	; 46
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <vfprintf+0xbe>
    12ce:	26 fd       	sbrc	r18, 6
    12d0:	6b c1       	rjmp	.+726    	; 0x15a8 <vfprintf+0x390>
    12d2:	20 64       	ori	r18, 0x40	; 64
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0xca>
    12d6:	8c 36       	cpi	r24, 0x6C	; 108
    12d8:	11 f4       	brne	.+4      	; 0x12de <vfprintf+0xc6>
    12da:	20 68       	ori	r18, 0x80	; 128
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <vfprintf+0xca>
    12de:	88 36       	cpi	r24, 0x68	; 104
    12e0:	41 f4       	brne	.+16     	; 0x12f2 <vfprintf+0xda>
    12e2:	f6 01       	movw	r30, r12
    12e4:	93 fd       	sbrc	r25, 3
    12e6:	85 91       	lpm	r24, Z+
    12e8:	93 ff       	sbrs	r25, 3
    12ea:	81 91       	ld	r24, Z+
    12ec:	6f 01       	movw	r12, r30
    12ee:	81 11       	cpse	r24, r1
    12f0:	c1 cf       	rjmp	.-126    	; 0x1274 <vfprintf+0x5c>
    12f2:	98 2f       	mov	r25, r24
    12f4:	9f 7d       	andi	r25, 0xDF	; 223
    12f6:	95 54       	subi	r25, 0x45	; 69
    12f8:	93 30       	cpi	r25, 0x03	; 3
    12fa:	28 f4       	brcc	.+10     	; 0x1306 <vfprintf+0xee>
    12fc:	0c 5f       	subi	r16, 0xFC	; 252
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	ff e3       	ldi	r31, 0x3F	; 63
    1302:	f9 83       	std	Y+1, r31	; 0x01
    1304:	0d c0       	rjmp	.+26     	; 0x1320 <vfprintf+0x108>
    1306:	83 36       	cpi	r24, 0x63	; 99
    1308:	31 f0       	breq	.+12     	; 0x1316 <vfprintf+0xfe>
    130a:	83 37       	cpi	r24, 0x73	; 115
    130c:	71 f0       	breq	.+28     	; 0x132a <vfprintf+0x112>
    130e:	83 35       	cpi	r24, 0x53	; 83
    1310:	09 f0       	breq	.+2      	; 0x1314 <vfprintf+0xfc>
    1312:	5b c0       	rjmp	.+182    	; 0x13ca <vfprintf+0x1b2>
    1314:	22 c0       	rjmp	.+68     	; 0x135a <vfprintf+0x142>
    1316:	f8 01       	movw	r30, r16
    1318:	80 81       	ld	r24, Z
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	0e 5f       	subi	r16, 0xFE	; 254
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	44 24       	eor	r4, r4
    1322:	43 94       	inc	r4
    1324:	51 2c       	mov	r5, r1
    1326:	54 01       	movw	r10, r8
    1328:	15 c0       	rjmp	.+42     	; 0x1354 <vfprintf+0x13c>
    132a:	38 01       	movw	r6, r16
    132c:	f2 e0       	ldi	r31, 0x02	; 2
    132e:	6f 0e       	add	r6, r31
    1330:	71 1c       	adc	r7, r1
    1332:	f8 01       	movw	r30, r16
    1334:	a0 80       	ld	r10, Z
    1336:	b1 80       	ldd	r11, Z+1	; 0x01
    1338:	26 ff       	sbrs	r18, 6
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <vfprintf+0x12a>
    133c:	65 2d       	mov	r22, r5
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <vfprintf+0x12e>
    1342:	6f ef       	ldi	r22, 0xFF	; 255
    1344:	7f ef       	ldi	r23, 0xFF	; 255
    1346:	c5 01       	movw	r24, r10
    1348:	2c 87       	std	Y+12, r18	; 0x0c
    134a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <strnlen>
    134e:	2c 01       	movw	r4, r24
    1350:	83 01       	movw	r16, r6
    1352:	2c 85       	ldd	r18, Y+12	; 0x0c
    1354:	2f 77       	andi	r18, 0x7F	; 127
    1356:	22 2e       	mov	r2, r18
    1358:	17 c0       	rjmp	.+46     	; 0x1388 <vfprintf+0x170>
    135a:	38 01       	movw	r6, r16
    135c:	f2 e0       	ldi	r31, 0x02	; 2
    135e:	6f 0e       	add	r6, r31
    1360:	71 1c       	adc	r7, r1
    1362:	f8 01       	movw	r30, r16
    1364:	a0 80       	ld	r10, Z
    1366:	b1 80       	ldd	r11, Z+1	; 0x01
    1368:	26 ff       	sbrs	r18, 6
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <vfprintf+0x15a>
    136c:	65 2d       	mov	r22, r5
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <vfprintf+0x15e>
    1372:	6f ef       	ldi	r22, 0xFF	; 255
    1374:	7f ef       	ldi	r23, 0xFF	; 255
    1376:	c5 01       	movw	r24, r10
    1378:	2c 87       	std	Y+12, r18	; 0x0c
    137a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <strnlen_P>
    137e:	2c 01       	movw	r4, r24
    1380:	2c 85       	ldd	r18, Y+12	; 0x0c
    1382:	20 68       	ori	r18, 0x80	; 128
    1384:	22 2e       	mov	r2, r18
    1386:	83 01       	movw	r16, r6
    1388:	23 fc       	sbrc	r2, 3
    138a:	1b c0       	rjmp	.+54     	; 0x13c2 <vfprintf+0x1aa>
    138c:	83 2d       	mov	r24, r3
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	48 16       	cp	r4, r24
    1392:	59 06       	cpc	r5, r25
    1394:	b0 f4       	brcc	.+44     	; 0x13c2 <vfprintf+0x1aa>
    1396:	b7 01       	movw	r22, r14
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    13a0:	3a 94       	dec	r3
    13a2:	f4 cf       	rjmp	.-24     	; 0x138c <vfprintf+0x174>
    13a4:	f5 01       	movw	r30, r10
    13a6:	27 fc       	sbrc	r2, 7
    13a8:	85 91       	lpm	r24, Z+
    13aa:	27 fe       	sbrs	r2, 7
    13ac:	81 91       	ld	r24, Z+
    13ae:	5f 01       	movw	r10, r30
    13b0:	b7 01       	movw	r22, r14
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    13b8:	31 10       	cpse	r3, r1
    13ba:	3a 94       	dec	r3
    13bc:	f1 e0       	ldi	r31, 0x01	; 1
    13be:	4f 1a       	sub	r4, r31
    13c0:	51 08       	sbc	r5, r1
    13c2:	41 14       	cp	r4, r1
    13c4:	51 04       	cpc	r5, r1
    13c6:	71 f7       	brne	.-36     	; 0x13a4 <vfprintf+0x18c>
    13c8:	e5 c0       	rjmp	.+458    	; 0x1594 <vfprintf+0x37c>
    13ca:	84 36       	cpi	r24, 0x64	; 100
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <vfprintf+0x1ba>
    13ce:	89 36       	cpi	r24, 0x69	; 105
    13d0:	39 f5       	brne	.+78     	; 0x1420 <vfprintf+0x208>
    13d2:	f8 01       	movw	r30, r16
    13d4:	27 ff       	sbrs	r18, 7
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <vfprintf+0x1ce>
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	0c 5f       	subi	r16, 0xFC	; 252
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <vfprintf+0x1de>
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	88 27       	eor	r24, r24
    13ec:	77 fd       	sbrc	r23, 7
    13ee:	80 95       	com	r24
    13f0:	98 2f       	mov	r25, r24
    13f2:	0e 5f       	subi	r16, 0xFE	; 254
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	2f 76       	andi	r18, 0x6F	; 111
    13f8:	b2 2e       	mov	r11, r18
    13fa:	97 ff       	sbrs	r25, 7
    13fc:	09 c0       	rjmp	.+18     	; 0x1410 <vfprintf+0x1f8>
    13fe:	90 95       	com	r25
    1400:	80 95       	com	r24
    1402:	70 95       	com	r23
    1404:	61 95       	neg	r22
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	20 68       	ori	r18, 0x80	; 128
    140e:	b2 2e       	mov	r11, r18
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	a4 01       	movw	r20, r8
    1416:	0e 94 26 0b 	call	0x164c	; 0x164c <__ultoa_invert>
    141a:	a8 2e       	mov	r10, r24
    141c:	a8 18       	sub	r10, r8
    141e:	44 c0       	rjmp	.+136    	; 0x14a8 <vfprintf+0x290>
    1420:	85 37       	cpi	r24, 0x75	; 117
    1422:	29 f4       	brne	.+10     	; 0x142e <vfprintf+0x216>
    1424:	2f 7e       	andi	r18, 0xEF	; 239
    1426:	b2 2e       	mov	r11, r18
    1428:	2a e0       	ldi	r18, 0x0A	; 10
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	25 c0       	rjmp	.+74     	; 0x1478 <vfprintf+0x260>
    142e:	f2 2f       	mov	r31, r18
    1430:	f9 7f       	andi	r31, 0xF9	; 249
    1432:	bf 2e       	mov	r11, r31
    1434:	8f 36       	cpi	r24, 0x6F	; 111
    1436:	c1 f0       	breq	.+48     	; 0x1468 <vfprintf+0x250>
    1438:	18 f4       	brcc	.+6      	; 0x1440 <vfprintf+0x228>
    143a:	88 35       	cpi	r24, 0x58	; 88
    143c:	79 f0       	breq	.+30     	; 0x145c <vfprintf+0x244>
    143e:	b4 c0       	rjmp	.+360    	; 0x15a8 <vfprintf+0x390>
    1440:	80 37       	cpi	r24, 0x70	; 112
    1442:	19 f0       	breq	.+6      	; 0x144a <vfprintf+0x232>
    1444:	88 37       	cpi	r24, 0x78	; 120
    1446:	21 f0       	breq	.+8      	; 0x1450 <vfprintf+0x238>
    1448:	af c0       	rjmp	.+350    	; 0x15a8 <vfprintf+0x390>
    144a:	2f 2f       	mov	r18, r31
    144c:	20 61       	ori	r18, 0x10	; 16
    144e:	b2 2e       	mov	r11, r18
    1450:	b4 fe       	sbrs	r11, 4
    1452:	0d c0       	rjmp	.+26     	; 0x146e <vfprintf+0x256>
    1454:	8b 2d       	mov	r24, r11
    1456:	84 60       	ori	r24, 0x04	; 4
    1458:	b8 2e       	mov	r11, r24
    145a:	09 c0       	rjmp	.+18     	; 0x146e <vfprintf+0x256>
    145c:	24 ff       	sbrs	r18, 4
    145e:	0a c0       	rjmp	.+20     	; 0x1474 <vfprintf+0x25c>
    1460:	9f 2f       	mov	r25, r31
    1462:	96 60       	ori	r25, 0x06	; 6
    1464:	b9 2e       	mov	r11, r25
    1466:	06 c0       	rjmp	.+12     	; 0x1474 <vfprintf+0x25c>
    1468:	28 e0       	ldi	r18, 0x08	; 8
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <vfprintf+0x260>
    146e:	20 e1       	ldi	r18, 0x10	; 16
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x260>
    1474:	20 e1       	ldi	r18, 0x10	; 16
    1476:	32 e0       	ldi	r19, 0x02	; 2
    1478:	f8 01       	movw	r30, r16
    147a:	b7 fe       	sbrs	r11, 7
    147c:	07 c0       	rjmp	.+14     	; 0x148c <vfprintf+0x274>
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	0c 5f       	subi	r16, 0xFC	; 252
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <vfprintf+0x280>
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 5f       	subi	r16, 0xFE	; 254
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	a4 01       	movw	r20, r8
    149a:	0e 94 26 0b 	call	0x164c	; 0x164c <__ultoa_invert>
    149e:	a8 2e       	mov	r10, r24
    14a0:	a8 18       	sub	r10, r8
    14a2:	fb 2d       	mov	r31, r11
    14a4:	ff 77       	andi	r31, 0x7F	; 127
    14a6:	bf 2e       	mov	r11, r31
    14a8:	b6 fe       	sbrs	r11, 6
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <vfprintf+0x2aa>
    14ac:	2b 2d       	mov	r18, r11
    14ae:	2e 7f       	andi	r18, 0xFE	; 254
    14b0:	a5 14       	cp	r10, r5
    14b2:	50 f4       	brcc	.+20     	; 0x14c8 <vfprintf+0x2b0>
    14b4:	b4 fe       	sbrs	r11, 4
    14b6:	0a c0       	rjmp	.+20     	; 0x14cc <vfprintf+0x2b4>
    14b8:	b2 fc       	sbrc	r11, 2
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <vfprintf+0x2b4>
    14bc:	2b 2d       	mov	r18, r11
    14be:	2e 7e       	andi	r18, 0xEE	; 238
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <vfprintf+0x2b4>
    14c2:	7a 2c       	mov	r7, r10
    14c4:	2b 2d       	mov	r18, r11
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <vfprintf+0x2b6>
    14c8:	7a 2c       	mov	r7, r10
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <vfprintf+0x2b6>
    14cc:	75 2c       	mov	r7, r5
    14ce:	24 ff       	sbrs	r18, 4
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <vfprintf+0x2d4>
    14d2:	fe 01       	movw	r30, r28
    14d4:	ea 0d       	add	r30, r10
    14d6:	f1 1d       	adc	r31, r1
    14d8:	80 81       	ld	r24, Z
    14da:	80 33       	cpi	r24, 0x30	; 48
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <vfprintf+0x2ca>
    14de:	29 7e       	andi	r18, 0xE9	; 233
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <vfprintf+0x2dc>
    14e2:	22 ff       	sbrs	r18, 2
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <vfprintf+0x2da>
    14e6:	73 94       	inc	r7
    14e8:	73 94       	inc	r7
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <vfprintf+0x2dc>
    14ec:	82 2f       	mov	r24, r18
    14ee:	86 78       	andi	r24, 0x86	; 134
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <vfprintf+0x2dc>
    14f2:	73 94       	inc	r7
    14f4:	23 fd       	sbrc	r18, 3
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <vfprintf+0x306>
    14f8:	20 ff       	sbrs	r18, 0
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <vfprintf+0x2f0>
    14fc:	5a 2c       	mov	r5, r10
    14fe:	73 14       	cp	r7, r3
    1500:	18 f4       	brcc	.+6      	; 0x1508 <vfprintf+0x2f0>
    1502:	53 0c       	add	r5, r3
    1504:	57 18       	sub	r5, r7
    1506:	73 2c       	mov	r7, r3
    1508:	73 14       	cp	r7, r3
    150a:	68 f4       	brcc	.+26     	; 0x1526 <vfprintf+0x30e>
    150c:	b7 01       	movw	r22, r14
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	2c 87       	std	Y+12, r18	; 0x0c
    1514:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    1518:	73 94       	inc	r7
    151a:	2c 85       	ldd	r18, Y+12	; 0x0c
    151c:	f5 cf       	rjmp	.-22     	; 0x1508 <vfprintf+0x2f0>
    151e:	73 14       	cp	r7, r3
    1520:	10 f4       	brcc	.+4      	; 0x1526 <vfprintf+0x30e>
    1522:	37 18       	sub	r3, r7
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <vfprintf+0x310>
    1526:	31 2c       	mov	r3, r1
    1528:	24 ff       	sbrs	r18, 4
    152a:	12 c0       	rjmp	.+36     	; 0x1550 <vfprintf+0x338>
    152c:	b7 01       	movw	r22, r14
    152e:	80 e3       	ldi	r24, 0x30	; 48
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	2c 87       	std	Y+12, r18	; 0x0c
    1534:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    1538:	2c 85       	ldd	r18, Y+12	; 0x0c
    153a:	22 ff       	sbrs	r18, 2
    153c:	17 c0       	rjmp	.+46     	; 0x156c <vfprintf+0x354>
    153e:	21 ff       	sbrs	r18, 1
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <vfprintf+0x330>
    1542:	88 e5       	ldi	r24, 0x58	; 88
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x334>
    1548:	88 e7       	ldi	r24, 0x78	; 120
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	b7 01       	movw	r22, r14
    154e:	0c c0       	rjmp	.+24     	; 0x1568 <vfprintf+0x350>
    1550:	82 2f       	mov	r24, r18
    1552:	86 78       	andi	r24, 0x86	; 134
    1554:	59 f0       	breq	.+22     	; 0x156c <vfprintf+0x354>
    1556:	21 fd       	sbrc	r18, 1
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x346>
    155a:	80 e2       	ldi	r24, 0x20	; 32
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <vfprintf+0x348>
    155e:	8b e2       	ldi	r24, 0x2B	; 43
    1560:	27 fd       	sbrc	r18, 7
    1562:	8d e2       	ldi	r24, 0x2D	; 45
    1564:	b7 01       	movw	r22, r14
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    156c:	a5 14       	cp	r10, r5
    156e:	38 f4       	brcc	.+14     	; 0x157e <vfprintf+0x366>
    1570:	b7 01       	movw	r22, r14
    1572:	80 e3       	ldi	r24, 0x30	; 48
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    157a:	5a 94       	dec	r5
    157c:	f7 cf       	rjmp	.-18     	; 0x156c <vfprintf+0x354>
    157e:	aa 94       	dec	r10
    1580:	f4 01       	movw	r30, r8
    1582:	ea 0d       	add	r30, r10
    1584:	f1 1d       	adc	r31, r1
    1586:	80 81       	ld	r24, Z
    1588:	b7 01       	movw	r22, r14
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    1590:	a1 10       	cpse	r10, r1
    1592:	f5 cf       	rjmp	.-22     	; 0x157e <vfprintf+0x366>
    1594:	33 20       	and	r3, r3
    1596:	09 f4       	brne	.+2      	; 0x159a <vfprintf+0x382>
    1598:	51 ce       	rjmp	.-862    	; 0x123c <vfprintf+0x24>
    159a:	b7 01       	movw	r22, r14
    159c:	80 e2       	ldi	r24, 0x20	; 32
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <fputc>
    15a4:	3a 94       	dec	r3
    15a6:	f6 cf       	rjmp	.-20     	; 0x1594 <vfprintf+0x37c>
    15a8:	f7 01       	movw	r30, r14
    15aa:	86 81       	ldd	r24, Z+6	; 0x06
    15ac:	97 81       	ldd	r25, Z+7	; 0x07
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x39c>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    15b4:	2c 96       	adiw	r28, 0x0c	; 12
    15b6:	e2 e1       	ldi	r30, 0x12	; 18
    15b8:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__epilogue_restores__>

000015bc <strnlen_P>:
    15bc:	fc 01       	movw	r30, r24
    15be:	05 90       	lpm	r0, Z+
    15c0:	61 50       	subi	r22, 0x01	; 1
    15c2:	70 40       	sbci	r23, 0x00	; 0
    15c4:	01 10       	cpse	r0, r1
    15c6:	d8 f7       	brcc	.-10     	; 0x15be <strnlen_P+0x2>
    15c8:	80 95       	com	r24
    15ca:	90 95       	com	r25
    15cc:	8e 0f       	add	r24, r30
    15ce:	9f 1f       	adc	r25, r31
    15d0:	08 95       	ret

000015d2 <strnlen>:
    15d2:	fc 01       	movw	r30, r24
    15d4:	61 50       	subi	r22, 0x01	; 1
    15d6:	70 40       	sbci	r23, 0x00	; 0
    15d8:	01 90       	ld	r0, Z+
    15da:	01 10       	cpse	r0, r1
    15dc:	d8 f7       	brcc	.-10     	; 0x15d4 <strnlen+0x2>
    15de:	80 95       	com	r24
    15e0:	90 95       	com	r25
    15e2:	8e 0f       	add	r24, r30
    15e4:	9f 1f       	adc	r25, r31
    15e6:	08 95       	ret

000015e8 <fputc>:
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	18 2f       	mov	r17, r24
    15f2:	09 2f       	mov	r16, r25
    15f4:	eb 01       	movw	r28, r22
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	81 fd       	sbrc	r24, 1
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <fputc+0x1a>
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	9f ef       	ldi	r25, 0xFF	; 255
    1600:	20 c0       	rjmp	.+64     	; 0x1642 <fputc+0x5a>
    1602:	82 ff       	sbrs	r24, 2
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <fputc+0x3e>
    1606:	4e 81       	ldd	r20, Y+6	; 0x06
    1608:	5f 81       	ldd	r21, Y+7	; 0x07
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	42 17       	cp	r20, r18
    1610:	53 07       	cpc	r21, r19
    1612:	7c f4       	brge	.+30     	; 0x1632 <fputc+0x4a>
    1614:	e8 81       	ld	r30, Y
    1616:	f9 81       	ldd	r31, Y+1	; 0x01
    1618:	9f 01       	movw	r18, r30
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	28 83       	st	Y, r18
    1620:	39 83       	std	Y+1, r19	; 0x01
    1622:	10 83       	st	Z, r17
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <fputc+0x4a>
    1626:	e8 85       	ldd	r30, Y+8	; 0x08
    1628:	f9 85       	ldd	r31, Y+9	; 0x09
    162a:	81 2f       	mov	r24, r17
    162c:	09 95       	icall
    162e:	89 2b       	or	r24, r25
    1630:	29 f7       	brne	.-54     	; 0x15fc <fputc+0x14>
    1632:	2e 81       	ldd	r18, Y+6	; 0x06
    1634:	3f 81       	ldd	r19, Y+7	; 0x07
    1636:	2f 5f       	subi	r18, 0xFF	; 255
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	2e 83       	std	Y+6, r18	; 0x06
    163c:	3f 83       	std	Y+7, r19	; 0x07
    163e:	81 2f       	mov	r24, r17
    1640:	90 2f       	mov	r25, r16
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <__ultoa_invert>:
    164c:	fa 01       	movw	r30, r20
    164e:	aa 27       	eor	r26, r26
    1650:	28 30       	cpi	r18, 0x08	; 8
    1652:	51 f1       	breq	.+84     	; 0x16a8 <__ultoa_invert+0x5c>
    1654:	20 31       	cpi	r18, 0x10	; 16
    1656:	81 f1       	breq	.+96     	; 0x16b8 <__ultoa_invert+0x6c>
    1658:	e8 94       	clt
    165a:	6f 93       	push	r22
    165c:	6e 7f       	andi	r22, 0xFE	; 254
    165e:	6e 5f       	subi	r22, 0xFE	; 254
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	8f 4f       	sbci	r24, 0xFF	; 255
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	af 4f       	sbci	r26, 0xFF	; 255
    1668:	b1 e0       	ldi	r27, 0x01	; 1
    166a:	3e d0       	rcall	.+124    	; 0x16e8 <__ultoa_invert+0x9c>
    166c:	b4 e0       	ldi	r27, 0x04	; 4
    166e:	3c d0       	rcall	.+120    	; 0x16e8 <__ultoa_invert+0x9c>
    1670:	67 0f       	add	r22, r23
    1672:	78 1f       	adc	r23, r24
    1674:	89 1f       	adc	r24, r25
    1676:	9a 1f       	adc	r25, r26
    1678:	a1 1d       	adc	r26, r1
    167a:	68 0f       	add	r22, r24
    167c:	79 1f       	adc	r23, r25
    167e:	8a 1f       	adc	r24, r26
    1680:	91 1d       	adc	r25, r1
    1682:	a1 1d       	adc	r26, r1
    1684:	6a 0f       	add	r22, r26
    1686:	71 1d       	adc	r23, r1
    1688:	81 1d       	adc	r24, r1
    168a:	91 1d       	adc	r25, r1
    168c:	a1 1d       	adc	r26, r1
    168e:	20 d0       	rcall	.+64     	; 0x16d0 <__ultoa_invert+0x84>
    1690:	09 f4       	brne	.+2      	; 0x1694 <__ultoa_invert+0x48>
    1692:	68 94       	set
    1694:	3f 91       	pop	r19
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	26 9f       	mul	r18, r22
    169a:	11 24       	eor	r1, r1
    169c:	30 19       	sub	r19, r0
    169e:	30 5d       	subi	r19, 0xD0	; 208
    16a0:	31 93       	st	Z+, r19
    16a2:	de f6       	brtc	.-74     	; 0x165a <__ultoa_invert+0xe>
    16a4:	cf 01       	movw	r24, r30
    16a6:	08 95       	ret
    16a8:	46 2f       	mov	r20, r22
    16aa:	47 70       	andi	r20, 0x07	; 7
    16ac:	40 5d       	subi	r20, 0xD0	; 208
    16ae:	41 93       	st	Z+, r20
    16b0:	b3 e0       	ldi	r27, 0x03	; 3
    16b2:	0f d0       	rcall	.+30     	; 0x16d2 <__ultoa_invert+0x86>
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <__ultoa_invert+0x5c>
    16b6:	f6 cf       	rjmp	.-20     	; 0x16a4 <__ultoa_invert+0x58>
    16b8:	46 2f       	mov	r20, r22
    16ba:	4f 70       	andi	r20, 0x0F	; 15
    16bc:	40 5d       	subi	r20, 0xD0	; 208
    16be:	4a 33       	cpi	r20, 0x3A	; 58
    16c0:	18 f0       	brcs	.+6      	; 0x16c8 <__ultoa_invert+0x7c>
    16c2:	49 5d       	subi	r20, 0xD9	; 217
    16c4:	31 fd       	sbrc	r19, 1
    16c6:	40 52       	subi	r20, 0x20	; 32
    16c8:	41 93       	st	Z+, r20
    16ca:	02 d0       	rcall	.+4      	; 0x16d0 <__ultoa_invert+0x84>
    16cc:	a9 f7       	brne	.-22     	; 0x16b8 <__ultoa_invert+0x6c>
    16ce:	ea cf       	rjmp	.-44     	; 0x16a4 <__ultoa_invert+0x58>
    16d0:	b4 e0       	ldi	r27, 0x04	; 4
    16d2:	a6 95       	lsr	r26
    16d4:	97 95       	ror	r25
    16d6:	87 95       	ror	r24
    16d8:	77 95       	ror	r23
    16da:	67 95       	ror	r22
    16dc:	ba 95       	dec	r27
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__ultoa_invert+0x86>
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	61 05       	cpc	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	08 95       	ret
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	0a 2e       	mov	r0, r26
    16ee:	06 94       	lsr	r0
    16f0:	57 95       	ror	r21
    16f2:	47 95       	ror	r20
    16f4:	37 95       	ror	r19
    16f6:	27 95       	ror	r18
    16f8:	ba 95       	dec	r27
    16fa:	c9 f7       	brne	.-14     	; 0x16ee <__ultoa_invert+0xa2>
    16fc:	62 0f       	add	r22, r18
    16fe:	73 1f       	adc	r23, r19
    1700:	84 1f       	adc	r24, r20
    1702:	95 1f       	adc	r25, r21
    1704:	a0 1d       	adc	r26, r0
    1706:	08 95       	ret

00001708 <__prologue_saves__>:
    1708:	2f 92       	push	r2
    170a:	3f 92       	push	r3
    170c:	4f 92       	push	r4
    170e:	5f 92       	push	r5
    1710:	6f 92       	push	r6
    1712:	7f 92       	push	r7
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	ca 1b       	sub	r28, r26
    1732:	db 0b       	sbc	r29, r27
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	09 94       	ijmp

0000173a <__epilogue_restores__>:
    173a:	2a 88       	ldd	r2, Y+18	; 0x12
    173c:	39 88       	ldd	r3, Y+17	; 0x11
    173e:	48 88       	ldd	r4, Y+16	; 0x10
    1740:	5f 84       	ldd	r5, Y+15	; 0x0f
    1742:	6e 84       	ldd	r6, Y+14	; 0x0e
    1744:	7d 84       	ldd	r7, Y+13	; 0x0d
    1746:	8c 84       	ldd	r8, Y+12	; 0x0c
    1748:	9b 84       	ldd	r9, Y+11	; 0x0b
    174a:	aa 84       	ldd	r10, Y+10	; 0x0a
    174c:	b9 84       	ldd	r11, Y+9	; 0x09
    174e:	c8 84       	ldd	r12, Y+8	; 0x08
    1750:	df 80       	ldd	r13, Y+7	; 0x07
    1752:	ee 80       	ldd	r14, Y+6	; 0x06
    1754:	fd 80       	ldd	r15, Y+5	; 0x05
    1756:	0c 81       	ldd	r16, Y+4	; 0x04
    1758:	1b 81       	ldd	r17, Y+3	; 0x03
    175a:	aa 81       	ldd	r26, Y+2	; 0x02
    175c:	b9 81       	ldd	r27, Y+1	; 0x01
    175e:	ce 0f       	add	r28, r30
    1760:	d1 1d       	adc	r29, r1
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	ed 01       	movw	r28, r26
    1768:	08 95       	ret

0000176a <__do_global_dtors>:
    176a:	11 e0       	ldi	r17, 0x01	; 1
    176c:	ce e6       	ldi	r28, 0x6E	; 110
    176e:	d1 e0       	ldi	r29, 0x01	; 1
    1770:	04 c0       	rjmp	.+8      	; 0x177a <__do_global_dtors+0x10>
    1772:	fe 01       	movw	r30, r28
    1774:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__tablejump__>
    1778:	22 96       	adiw	r28, 0x02	; 2
    177a:	c0 37       	cpi	r28, 0x70	; 112
    177c:	d1 07       	cpc	r29, r17
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__do_global_dtors+0x8>
    1780:	f8 94       	cli

00001782 <__stop_program>:
    1782:	ff cf       	rjmp	.-2      	; 0x1782 <__stop_program>
