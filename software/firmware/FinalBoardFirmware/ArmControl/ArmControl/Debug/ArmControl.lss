
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00001778  0000180c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00802012  00802012  0000181e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000435b  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001228  00000000  00000000  00005dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000109d  00000000  00000000  00007001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a4  00000000  00000000  000080a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bbc  00000000  00000000  00008644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018de  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0000bade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_25>
      68:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_26>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_77>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	d3 06       	cpc	r13, r19

0000016e <__ctors_end>:
     16e:	e4 06       	cpc	r14, r20

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	e8 e7       	ldi	r30, 0x78	; 120
     184:	f7 e1       	ldi	r31, 0x17	; 23
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 31       	cpi	r26, 0x12	; 18
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a2 e1       	ldi	r26, 0x12	; 18
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a9 37       	cpi	r26, 0x79	; 121
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <main>
     1bc:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1d0:	1c 92       	st	X, r1
	return Result;
}
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1f8:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     22c:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <_Z15SetupResetTimerv>:
	WaitForHost,
	ARMControl
} CurrentState = WaitForHost;

void SetupResetTimer(){
	TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; //31250 counts per second with 32Mhz Processor
     264:	e0 e0       	ldi	r30, 0x00	; 0
     266:	f9 e0       	ldi	r31, 0x09	; 9
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	80 83       	st	Z, r24
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
     26c:	11 82       	std	Z+1, r1	; 0x01
	TCD0.PER = 31250;
     26e:	82 e1       	ldi	r24, 0x12	; 18
     270:	9a e7       	ldi	r25, 0x7A	; 122
     272:	86 a3       	std	Z+38, r24	; 0x26
     274:	97 a3       	std	Z+39, r25	; 0x27
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	08 95       	ret

0000027c <_Z17FlushSerialBufferP16Usart_and_buffer>:
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
     282:	03 c0       	rjmp	.+6      	; 0x28a <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
     284:	ce 01       	movw	r24, r28
     286:	0e 94 2f 09 	call	0x125e	; 0x125e <USART_RXBuffer_GetByte>
	TCD0.PER = 31250;
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 27 09 	call	0x124e	; 0x124e <USART_RXBufferData_Available>
     290:	81 11       	cpse	r24, r1
     292:	f8 cf       	rjmp	.-16     	; 0x284 <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <__vector_25>:

ISR(USARTC0_RXC_vect){
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
     2c0:	8a e6       	ldi	r24, 0x6A	; 106
     2c2:	90 e2       	ldi	r25, 0x20	; 32
     2c4:	0e 94 3b 09 	call	0x1276	; 0x1276 <USART_RXComplete>
	
	if(USART_RXBufferData_Available(&USART_PC_Data)){
     2c8:	8a e6       	ldi	r24, 0x6A	; 106
     2ca:	90 e2       	ldi	r25, 0x20	; 32
     2cc:	0e 94 27 09 	call	0x124e	; 0x124e <USART_RXBufferData_Available>
     2d0:	88 23       	and	r24, r24
     2d2:	79 f0       	breq	.+30     	; 0x2f2 <__vector_25+0x58>
		recieveBuffer[bufferIndex] = USART_RXBuffer_GetByte(&USART_PC_Data);
     2d4:	c0 91 25 20 	lds	r28, 0x2025
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	8a e6       	ldi	r24, 0x6A	; 106
     2dc:	90 e2       	ldi	r25, 0x20	; 32
     2de:	0e 94 2f 09 	call	0x125e	; 0x125e <USART_RXBuffer_GetByte>
     2e2:	cd 5e       	subi	r28, 0xED	; 237
     2e4:	df 4d       	sbci	r29, 0xDF	; 223
     2e6:	88 83       	st	Y, r24
		bufferIndex++;
     2e8:	80 91 25 20 	lds	r24, 0x2025
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	80 93 25 20 	sts	0x2025, r24
	}
	
	if((bufferIndex == PACKETSIZE)){
     2f2:	80 91 25 20 	lds	r24, 0x2025
     2f6:	8a 30       	cpi	r24, 0x0A	; 10
     2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_25+0x62>
     2fa:	87 c0       	rjmp	.+270    	; 0x40a <__vector_25+0x170>
		FlushSerialBuffer(&USART_PC_Data);
     2fc:	8a e6       	ldi	r24, 0x6A	; 106
     2fe:	90 e2       	ldi	r25, 0x20	; 32
     300:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17FlushSerialBufferP16Usart_and_buffer>
		if(recieveBuffer[8] == (recieveBuffer[1] ^ recieveBuffer[2] ^ recieveBuffer[3] ^ recieveBuffer[4] ^ recieveBuffer[5] ^ recieveBuffer[6] ^ recieveBuffer[7])){
     304:	90 91 1b 20 	lds	r25, 0x201B
     308:	80 91 14 20 	lds	r24, 0x2014
     30c:	70 91 15 20 	lds	r23, 0x2015
     310:	60 91 16 20 	lds	r22, 0x2016
     314:	50 91 17 20 	lds	r21, 0x2017
     318:	40 91 18 20 	lds	r20, 0x2018
     31c:	30 91 19 20 	lds	r19, 0x2019
     320:	20 91 1a 20 	lds	r18, 0x201A
     324:	87 27       	eor	r24, r23
     326:	86 27       	eor	r24, r22
     328:	85 27       	eor	r24, r21
     32a:	84 27       	eor	r24, r20
     32c:	83 27       	eor	r24, r19
     32e:	82 27       	eor	r24, r18
     330:	98 13       	cpse	r25, r24
     332:	48 c0       	rjmp	.+144    	; 0x3c4 <__vector_25+0x12a>
			//if(recieveBuffer[1] == 2){
			//sprintf(SendBuffer)
			gripStepper.desiredGripState = !(recieveBuffer[1] & GRIP_BM_SERIAL); //0b00000010	
     334:	80 91 14 20 	lds	r24, 0x2014
     338:	c1 e0       	ldi	r28, 0x01	; 1
     33a:	86 95       	lsr	r24
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	8c 27       	eor	r24, r28
     340:	80 93 39 20 	sts	0x2039, r24
			//}else if(recieveBuffer[1] != 2){
				
				//STATUS1_CLR();
			//}

			baseStepper.desiredPos = (recieveBuffer[3]+recieveBuffer[2]);
     344:	20 91 16 20 	lds	r18, 0x2016
     348:	80 91 15 20 	lds	r24, 0x2015
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	82 0f       	add	r24, r18
     350:	91 1d       	adc	r25, r1
     352:	80 93 31 20 	sts	0x2031, r24
     356:	90 93 32 20 	sts	0x2032, r25
			lowerAct.setDesired((double(recieveBuffer[5]+recieveBuffer[4]) / double(100)));
     35a:	80 91 18 20 	lds	r24, 0x2018
     35e:	60 91 17 20 	lds	r22, 0x2017
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	68 0f       	add	r22, r24
     366:	71 1d       	adc	r23, r1
     368:	88 27       	eor	r24, r24
     36a:	77 fd       	sbrc	r23, 7
     36c:	80 95       	com	r24
     36e:	98 2f       	mov	r25, r24
     370:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	48 ec       	ldi	r20, 0xC8	; 200
     37a:	52 e4       	ldi	r21, 0x42	; 66
     37c:	0e 94 cf 09 	call	0x139e	; 0x139e <__divsf3>
     380:	ab 01       	movw	r20, r22
     382:	bc 01       	movw	r22, r24
     384:	82 e5       	ldi	r24, 0x52	; 82
     386:	90 e2       	ldi	r25, 0x20	; 32
     388:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN9motorInfo10setDesiredEf>
			upperAct.setDesired((double(recieveBuffer[7]+recieveBuffer[6]) / double(100)));
     38c:	80 91 1a 20 	lds	r24, 0x201A
     390:	60 91 19 20 	lds	r22, 0x2019
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	68 0f       	add	r22, r24
     398:	71 1d       	adc	r23, r1
     39a:	88 27       	eor	r24, r24
     39c:	77 fd       	sbrc	r23, 7
     39e:	80 95       	com	r24
     3a0:	98 2f       	mov	r25, r24
     3a2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	48 ec       	ldi	r20, 0xC8	; 200
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	0e 94 cf 09 	call	0x139e	; 0x139e <__divsf3>
     3b2:	ab 01       	movw	r20, r22
     3b4:	bc 01       	movw	r22, r24
     3b6:	8a e3       	ldi	r24, 0x3A	; 58
     3b8:	90 e2       	ldi	r25, 0x20	; 32
     3ba:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN9motorInfo10setDesiredEf>
			IsPacketToParse = true;
     3be:	c0 93 26 20 	sts	0x2026, r28
     3c2:	23 c0       	rjmp	.+70     	; 0x40a <__vector_25+0x170>
		}else{
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3c4:	e0 ea       	ldi	r30, 0xA0	; 160
     3c6:	f8 e0       	ldi	r31, 0x08	; 8
     3c8:	81 81       	ldd	r24, Z+1	; 0x01
     3ca:	85 ff       	sbrs	r24, 5
     3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <__vector_25+0x12e>
			USART_PutChar(&USARTC0, 255);
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	80 93 a0 08 	sts	0x08A0, r24
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3d4:	e0 ea       	ldi	r30, 0xA0	; 160
     3d6:	f8 e0       	ldi	r31, 0x08	; 8
     3d8:	81 81       	ldd	r24, Z+1	; 0x01
     3da:	85 ff       	sbrs	r24, 5
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <__vector_25+0x13e>
			USART_PutChar(&USARTC0,'r');
     3de:	82 e7       	ldi	r24, 0x72	; 114
     3e0:	80 93 a0 08 	sts	0x08A0, r24
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3e4:	e0 ea       	ldi	r30, 0xA0	; 160
     3e6:	f8 e0       	ldi	r31, 0x08	; 8
     3e8:	81 81       	ldd	r24, Z+1	; 0x01
     3ea:	85 ff       	sbrs	r24, 5
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <__vector_25+0x14e>
			USART_PutChar(&USARTC0,255);
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	80 93 a0 08 	sts	0x08A0, r24
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3f4:	e0 ea       	ldi	r30, 0xA0	; 160
     3f6:	f8 e0       	ldi	r31, 0x08	; 8
     3f8:	81 81       	ldd	r24, Z+1	; 0x01
     3fa:	85 ff       	sbrs	r24, 5
     3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <__vector_25+0x15e>
			USART_PutChar(&USARTC0,recieveBuffer[0]);
     3fe:	80 91 13 20 	lds	r24, 0x2013
     402:	80 93 a0 08 	sts	0x08A0, r24
			bufferIndex = 0;	
     406:	10 92 25 20 	sts	0x2025, r1
		}
		
	}

}
     40a:	ff 91       	pop	r31
     40c:	ef 91       	pop	r30
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	bf 91       	pop	r27
     414:	af 91       	pop	r26
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	7f 91       	pop	r23
     41c:	6f 91       	pop	r22
     41e:	5f 91       	pop	r21
     420:	4f 91       	pop	r20
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <__vector_26>:

ISR(USARTC0_DRE_vect){
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	5f 93       	push	r21
     442:	6f 93       	push	r22
     444:	7f 93       	push	r23
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
     452:	8a e6       	ldi	r24, 0x6A	; 106
     454:	90 e2       	ldi	r25, 0x20	; 32
     456:	0e 94 50 09 	call	0x12a0	; 0x12a0 <USART_DataRegEmpty>
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <_Z23SetXMEGA32MhzCalibratedv>:


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     47c:	88 ed       	ldi	r24, 0xD8	; 216
     47e:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     486:	e0 e5       	ldi	r30, 0x50	; 80
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	81 81       	ldd	r24, Z+1	; 0x01
     48c:	81 ff       	sbrs	r24, 1
     48e:	fd cf       	rjmp	.-6      	; 0x48a <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     490:	88 ed       	ldi	r24, 0xD8	; 216
     492:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     49a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     49c:	e0 e5       	ldi	r30, 0x50	; 80
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	84 60       	ori	r24, 0x04	; 4
     4a4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     4a6:	81 81       	ldd	r24, Z+1	; 0x01
     4a8:	82 ff       	sbrs	r24, 2
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     4ac:	e0 e5       	ldi	r30, 0x50	; 80
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	86 81       	ldd	r24, Z+6	; 0x06
     4b2:	8d 7f       	andi	r24, 0xFD	; 253
     4b4:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     4b6:	e0 e6       	ldi	r30, 0x60	; 96
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	81 60       	ori	r24, 0x01	; 1
     4be:	80 83       	st	Z, r24
     4c0:	08 95       	ret

000004c2 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     4c2:	e0 e4       	ldi	r30, 0x40	; 64
     4c4:	f6 e0       	ldi	r31, 0x06	; 6
     4c6:	88 e0       	ldi	r24, 0x08	; 8
     4c8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     4ca:	84 e0       	ldi	r24, 0x04	; 4
     4cc:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	60 ea       	ldi	r22, 0xA0	; 160
     4d2:	78 e0       	ldi	r23, 0x08	; 8
     4d4:	8a e6       	ldi	r24, 0x6A	; 106
     4d6:	90 e2       	ldi	r25, 0x20	; 32
     4d8:	0e 94 1e 09 	call	0x123c	; 0x123c <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     4dc:	e0 91 6a 20 	lds	r30, 0x206A
     4e0:	f0 91 6b 20 	lds	r31, 0x206B
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     4e8:	83 81       	ldd	r24, Z+3	; 0x03
     4ea:	8f 7c       	andi	r24, 0xCF	; 207
     4ec:	80 61       	ori	r24, 0x10	; 16
     4ee:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     4f0:	a0 ea       	ldi	r26, 0xA0	; 160
     4f2:	b8 e0       	ldi	r27, 0x08	; 8
     4f4:	8f ec       	ldi	r24, 0xCF	; 207
     4f6:	16 96       	adiw	r26, 0x06	; 6
     4f8:	8c 93       	st	X, r24
     4fa:	16 97       	sbiw	r26, 0x06	; 6
     4fc:	17 96       	adiw	r26, 0x07	; 7
     4fe:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     500:	84 81       	ldd	r24, Z+4	; 0x04
     502:	80 61       	ori	r24, 0x10	; 16
     504:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     506:	84 81       	ldd	r24, Z+4	; 0x04
     508:	88 60       	ori	r24, 0x08	; 8
     50a:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     50c:	e0 ea       	ldi	r30, 0xA0	; 160
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	82 81       	ldd	r24, Z+2	; 0x02
     512:	81 60       	ori	r24, 0x01	; 1
     514:	82 83       	std	Z+2, r24	; 0x02
     516:	08 95       	ret

00000518 <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     51c:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     520:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z12SetupPCCommsv>
	SetupResetTimer();
     524:	0e 94 32 01 	call	0x264	; 0x264 <_Z15SetupResetTimerv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     528:	80 ee       	ldi	r24, 0xE0	; 224
     52a:	e0 e4       	ldi	r30, 0x40	; 64
     52c:	f6 e0       	ldi	r31, 0x06	; 6
     52e:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     530:	e0 e6       	ldi	r30, 0x60	; 96
     532:	f6 e0       	ldi	r31, 0x06	; 6
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     538:	a0 e0       	ldi	r26, 0x00	; 0
     53a:	b6 e0       	ldi	r27, 0x06	; 6
     53c:	11 96       	adiw	r26, 0x01	; 1
     53e:	8c 93       	st	X, r24
     540:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     542:	c0 e2       	ldi	r28, 0x20	; 32
     544:	d6 e0       	ldi	r29, 0x06	; 6
     546:	87 e0       	ldi	r24, 0x07	; 7
     548:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     54a:	84 e0       	ldi	r24, 0x04	; 4
     54c:	12 96       	adiw	r26, 0x02	; 2
     54e:	8c 93       	st	X, r24
     550:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     552:	98 e0       	ldi	r25, 0x08	; 8
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	9c 93       	st	X, r25
     558:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit	
     55a:	9a 83       	std	Y+2, r25	; 0x02
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_ENABLE();
     55c:	20 e4       	ldi	r18, 0x40	; 64
     55e:	26 83       	std	Z+6, r18	; 0x06
	
	//Setup Microstepping
	MD1_M0_CLR();
     560:	90 e2       	ldi	r25, 0x20	; 32
     562:	16 96       	adiw	r26, 0x06	; 6
     564:	9c 93       	st	X, r25
     566:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     568:	16 96       	adiw	r26, 0x06	; 6
     56a:	2c 93       	st	X, r18
     56c:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_SET();
     56e:	20 e8       	ldi	r18, 0x80	; 128
     570:	15 96       	adiw	r26, 0x05	; 5
     572:	2c 93       	st	X, r18
	
	MD1_DIR_CLR();
     574:	20 e1       	ldi	r18, 0x10	; 16
     576:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     578:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     57a:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_SET();
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	9d 83       	std	Y+5, r25	; 0x05
	MD2_M2_CLR();
     584:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     586:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     588:	96 83       	std	Z+6, r25	; 0x06
	
	sei();
     58a:	78 94       	sei
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <_Z12SendStringPCPc>:

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     592:	fc 01       	movw	r30, r24
     594:	20 81       	ld	r18, Z
     596:	22 23       	and	r18, r18
     598:	59 f0       	breq	.+22     	; 0x5b0 <_Z12SendStringPCPc+0x1e>
     59a:	dc 01       	movw	r26, r24
     59c:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     59e:	e0 ea       	ldi	r30, 0xA0	; 160
     5a0:	f8 e0       	ldi	r31, 0x08	; 8
     5a2:	81 81       	ldd	r24, Z+1	; 0x01
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);	
     5a8:	20 83       	st	Z, r18
	
	sei();
}

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     5aa:	2d 91       	ld	r18, X+
     5ac:	21 11       	cpse	r18, r1
     5ae:	f9 cf       	rjmp	.-14     	; 0x5a2 <_Z12SendStringPCPc+0x10>
     5b0:	08 95       	ret

000005b2 <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	8c 01       	movw	r16, r24
     5c0:	c7 e0       	ldi	r28, 0x07	; 7
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     5c4:	e1 2c       	mov	r14, r1
     5c6:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     5c8:	01 15       	cp	r16, r1
     5ca:	11 05       	cpc	r17, r1
     5cc:	39 f4       	brne	.+14     	; 0x5dc <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5d6:	e8 0e       	add	r14, r24
     5d8:	f9 1e       	adc	r15, r25
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     5dc:	01 30       	cpi	r16, 0x01	; 1
     5de:	11 05       	cpc	r17, r1
     5e0:	31 f4       	brne	.+12     	; 0x5ee <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5ea:	e8 0e       	add	r14, r24
     5ec:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ee:	8f e3       	ldi	r24, 0x3F	; 63
     5f0:	9f e1       	ldi	r25, 0x1F	; 31
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <_Z9smoothADCi+0x40>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <_Z9smoothADCi+0x46>
     5f8:	00 00       	nop
     5fa:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     5fc:	20 97       	sbiw	r28, 0x00	; 0
     5fe:	21 f7       	brne	.-56     	; 0x5c8 <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     600:	c7 01       	movw	r24, r14
     602:	67 e0       	ldi	r22, 0x07	; 7
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 81 0b 	call	0x1702	; 0x1702 <__divmodhi4>
     60a:	cb 01       	movw	r24, r22
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	08 95       	ret

0000061a <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     622:	20 91 66 20 	lds	r18, 0x2066
     626:	30 91 67 20 	lds	r19, 0x2067
     62a:	40 91 68 20 	lds	r20, 0x2068
     62e:	50 91 69 20 	lds	r21, 0x2069
     632:	60 91 62 20 	lds	r22, 0x2062
     636:	70 91 63 20 	lds	r23, 0x2063
     63a:	80 91 64 20 	lds	r24, 0x2064
     63e:	90 91 65 20 	lds	r25, 0x2065
     642:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	a9 01       	movw	r20, r18
     650:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     654:	18 16       	cp	r1, r24
     656:	24 f0       	brlt	.+8      	; 0x660 <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     658:	f7 fa       	bst	r15, 7
     65a:	f0 94       	com	r15
     65c:	f7 f8       	bld	r15, 7
     65e:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     660:	a7 01       	movw	r20, r14
     662:	96 01       	movw	r18, r12
     664:	60 91 56 20 	lds	r22, 0x2056
     668:	70 91 57 20 	lds	r23, 0x2057
     66c:	80 91 58 20 	lds	r24, 0x2058
     670:	90 91 59 20 	lds	r25, 0x2059
     674:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     678:	18 16       	cp	r1, r24
     67a:	44 f4       	brge	.+16     	; 0x68c <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     67c:	e4 e5       	ldi	r30, 0x54	; 84
     67e:	f0 e2       	ldi	r31, 0x20	; 32
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	80 83       	st	Z, r24
     688:	91 83       	std	Z+1, r25	; 0x01
     68a:	04 c0       	rjmp	.+8      	; 0x694 <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     68c:	10 92 54 20 	sts	0x2054, r1
     690:	10 92 55 20 	sts	0x2055, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     694:	20 91 4e 20 	lds	r18, 0x204E
     698:	30 91 4f 20 	lds	r19, 0x204F
     69c:	40 91 50 20 	lds	r20, 0x2050
     6a0:	50 91 51 20 	lds	r21, 0x2051
     6a4:	60 91 4a 20 	lds	r22, 0x204A
     6a8:	70 91 4b 20 	lds	r23, 0x204B
     6ac:	80 91 4c 20 	lds	r24, 0x204C
     6b0:	90 91 4d 20 	lds	r25, 0x204D
     6b4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     6b8:	6b 01       	movw	r12, r22
     6ba:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	a9 01       	movw	r20, r18
     6c2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	24 f0       	brlt	.+8      	; 0x6d2 <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     6ca:	f7 fa       	bst	r15, 7
     6cc:	f0 94       	com	r15
     6ce:	f7 f8       	bld	r15, 7
     6d0:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     6d2:	a7 01       	movw	r20, r14
     6d4:	96 01       	movw	r18, r12
     6d6:	60 91 3e 20 	lds	r22, 0x203E
     6da:	70 91 3f 20 	lds	r23, 0x203F
     6de:	80 91 40 20 	lds	r24, 0x2040
     6e2:	90 91 41 20 	lds	r25, 0x2041
     6e6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	44 f4       	brge	.+16     	; 0x6fe <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     6ee:	ec e3       	ldi	r30, 0x3C	; 60
     6f0:	f0 e2       	ldi	r31, 0x20	; 32
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	80 83       	st	Z, r24
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     6fe:	10 92 3c 20 	sts	0x203C, r1
     702:	10 92 3d 20 	sts	0x203D, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     706:	20 91 3c 20 	lds	r18, 0x203C
     70a:	30 91 3d 20 	lds	r19, 0x203D
     70e:	80 91 3a 20 	lds	r24, 0x203A
     712:	90 91 3b 20 	lds	r25, 0x203B
     716:	28 17       	cp	r18, r24
     718:	39 07       	cpc	r19, r25
     71a:	24 f0       	brlt	.+8      	; 0x724 <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     71c:	8a e3       	ldi	r24, 0x3A	; 58
     71e:	90 e2       	ldi	r25, 0x20	; 32
     720:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     724:	20 91 54 20 	lds	r18, 0x2054
     728:	30 91 55 20 	lds	r19, 0x2055
     72c:	80 91 3a 20 	lds	r24, 0x203A
     730:	90 91 3b 20 	lds	r25, 0x203B
     734:	28 17       	cp	r18, r24
     736:	39 07       	cpc	r19, r25
     738:	24 f0       	brlt	.+8      	; 0x742 <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     73a:	82 e5       	ldi	r24, 0x52	; 82
     73c:	90 e2       	ldi	r25, 0x20	; 32
     73e:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Z9smoothADCi>
     74a:	bc 01       	movw	r22, r24
     74c:	88 27       	eor	r24, r24
     74e:	77 fd       	sbrc	r23, 7
     750:	80 95       	com	r24
     752:	98 2f       	mov	r25, r24
     754:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     758:	2f e1       	ldi	r18, 0x1F	; 31
     75a:	35 e8       	ldi	r19, 0x85	; 133
     75c:	48 e6       	ldi	r20, 0x68	; 104
     75e:	52 e4       	ldi	r21, 0x42	; 66
     760:	0e 94 cf 09 	call	0x139e	; 0x139e <__divsf3>
     764:	25 e8       	ldi	r18, 0x85	; 133
     766:	3b ee       	ldi	r19, 0xEB	; 235
     768:	41 ed       	ldi	r20, 0xD1	; 209
     76a:	5e e3       	ldi	r21, 0x3E	; 62
     76c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     770:	60 93 62 20 	sts	0x2062, r22
     774:	70 93 63 20 	sts	0x2063, r23
     778:	80 93 64 20 	sts	0x2064, r24
     77c:	90 93 65 20 	sts	0x2065, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Z9smoothADCi>
     788:	bc 01       	movw	r22, r24
     78a:	88 27       	eor	r24, r24
     78c:	77 fd       	sbrc	r23, 7
     78e:	80 95       	com	r24
     790:	98 2f       	mov	r25, r24
     792:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     796:	2f e1       	ldi	r18, 0x1F	; 31
     798:	35 e8       	ldi	r19, 0x85	; 133
     79a:	48 e6       	ldi	r20, 0x68	; 104
     79c:	52 e4       	ldi	r21, 0x42	; 66
     79e:	0e 94 cf 09 	call	0x139e	; 0x139e <__divsf3>
     7a2:	25 e8       	ldi	r18, 0x85	; 133
     7a4:	3b ee       	ldi	r19, 0xEB	; 235
     7a6:	41 ed       	ldi	r20, 0xD1	; 209
     7a8:	5e e3       	ldi	r21, 0x3E	; 62
     7aa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     7ae:	60 93 4a 20 	sts	0x204A, r22
     7b2:	70 93 4b 20 	sts	0x204B, r23
     7b6:	80 93 4c 20 	sts	0x204C, r24
     7ba:	90 93 4d 20 	sts	0x204D, r25
}
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	08 95       	ret

000007c8 <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     7c8:	4f 92       	push	r4
     7ca:	5f 92       	push	r5
     7cc:	6f 92       	push	r6
     7ce:	7f 92       	push	r7
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
		
	if(act == LOWER){
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <_Z13getMotorSpeedi+0x1e>
     7e4:	71 c0       	rjmp	.+226    	; 0x8c8 <_Z13getMotorSpeedi+0x100>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     7e6:	40 90 62 20 	lds	r4, 0x2062
     7ea:	50 90 63 20 	lds	r5, 0x2063
     7ee:	60 90 64 20 	lds	r6, 0x2064
     7f2:	70 90 65 20 	lds	r7, 0x2065
     7f6:	20 91 66 20 	lds	r18, 0x2066
     7fa:	30 91 67 20 	lds	r19, 0x2067
     7fe:	40 91 68 20 	lds	r20, 0x2068
     802:	50 91 69 20 	lds	r21, 0x2069
     806:	c3 01       	movw	r24, r6
     808:	b2 01       	movw	r22, r4
     80a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     80e:	6b 01       	movw	r12, r22
     810:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	a9 01       	movw	r20, r18
     818:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     81c:	18 16       	cp	r1, r24
     81e:	24 f0       	brlt	.+8      	; 0x828 <_Z13getMotorSpeedi+0x60>
		return input;
	else
		return input * -1;
     820:	f7 fa       	bst	r15, 7
     822:	f0 94       	com	r15
     824:	f7 f8       	bld	r15, 7
     826:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     828:	80 90 5a 20 	lds	r8, 0x205A
     82c:	90 90 5b 20 	lds	r9, 0x205B
     830:	a0 90 5c 20 	lds	r10, 0x205C
     834:	b0 90 5d 20 	lds	r11, 0x205D
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	c5 01       	movw	r24, r10
     842:	b4 01       	movw	r22, r8
     844:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__mulsf3>
     848:	a7 01       	movw	r20, r14
     84a:	96 01       	movw	r18, r12
     84c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	54 f4       	brge	.+20     	; 0x868 <_Z13getMotorSpeedi+0xa0>
			return lowerAct.speed / 3;
     854:	80 91 5e 20 	lds	r24, 0x205E
     858:	90 91 5f 20 	lds	r25, 0x205F
     85c:	63 e0       	ldi	r22, 0x03	; 3
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	0e 94 81 0b 	call	0x1702	; 0x1702 <__divmodhi4>
     864:	cb 01       	movw	r24, r22
     866:	a6 c0       	rjmp	.+332    	; 0x9b4 <_Z13getMotorSpeedi+0x1ec>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     868:	20 91 66 20 	lds	r18, 0x2066
     86c:	30 91 67 20 	lds	r19, 0x2067
     870:	40 91 68 20 	lds	r20, 0x2068
     874:	50 91 69 20 	lds	r21, 0x2069
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a9 01       	movw	r20, r18
     88a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	24 f0       	brlt	.+8      	; 0x89a <_Z13getMotorSpeedi+0xd2>
		return input;
	else
		return input * -1;
     892:	f7 fa       	bst	r15, 7
     894:	f0 94       	com	r15
     896:	f7 f8       	bld	r15, 7
     898:	f0 94       	com	r15
int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
			return lowerAct.speed / 3;
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     89a:	a7 01       	movw	r20, r14
     89c:	96 01       	movw	r18, r12
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	54 f4       	brge	.+20     	; 0x8be <_Z13getMotorSpeedi+0xf6>
			return lowerAct.speed / 2;
     8aa:	80 91 5e 20 	lds	r24, 0x205E
     8ae:	90 91 5f 20 	lds	r25, 0x205F
     8b2:	99 23       	and	r25, r25
     8b4:	0c f4       	brge	.+2      	; 0x8b8 <_Z13getMotorSpeedi+0xf0>
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	95 95       	asr	r25
     8ba:	87 95       	ror	r24
     8bc:	7b c0       	rjmp	.+246    	; 0x9b4 <_Z13getMotorSpeedi+0x1ec>
		else
			return lowerAct.speed;
     8be:	80 91 5e 20 	lds	r24, 0x205E
     8c2:	90 91 5f 20 	lds	r25, 0x205F
     8c6:	76 c0       	rjmp	.+236    	; 0x9b4 <_Z13getMotorSpeedi+0x1ec>
	}
	else if (act == UPPER){
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <_Z13getMotorSpeedi+0x106>
     8cc:	71 c0       	rjmp	.+226    	; 0x9b0 <_Z13getMotorSpeedi+0x1e8>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     8ce:	40 90 4a 20 	lds	r4, 0x204A
     8d2:	50 90 4b 20 	lds	r5, 0x204B
     8d6:	60 90 4c 20 	lds	r6, 0x204C
     8da:	70 90 4d 20 	lds	r7, 0x204D
     8de:	20 91 4e 20 	lds	r18, 0x204E
     8e2:	30 91 4f 20 	lds	r19, 0x204F
     8e6:	40 91 50 20 	lds	r20, 0x2050
     8ea:	50 91 51 20 	lds	r21, 0x2051
     8ee:	c3 01       	movw	r24, r6
     8f0:	b2 01       	movw	r22, r4
     8f2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     8f6:	6b 01       	movw	r12, r22
     8f8:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	a9 01       	movw	r20, r18
     900:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     904:	18 16       	cp	r1, r24
     906:	24 f0       	brlt	.+8      	; 0x910 <_Z13getMotorSpeedi+0x148>
		return input;
	else
		return input * -1;
     908:	f7 fa       	bst	r15, 7
     90a:	f0 94       	com	r15
     90c:	f7 f8       	bld	r15, 7
     90e:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     910:	80 90 42 20 	lds	r8, 0x2042
     914:	90 90 43 20 	lds	r9, 0x2043
     918:	a0 90 44 20 	lds	r10, 0x2044
     91c:	b0 90 45 20 	lds	r11, 0x2045
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	5f e3       	ldi	r21, 0x3F	; 63
     928:	c5 01       	movw	r24, r10
     92a:	b4 01       	movw	r22, r8
     92c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__mulsf3>
     930:	a7 01       	movw	r20, r14
     932:	96 01       	movw	r18, r12
     934:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     938:	18 16       	cp	r1, r24
     93a:	54 f4       	brge	.+20     	; 0x950 <_Z13getMotorSpeedi+0x188>
			return upperAct.speed / 3;
     93c:	80 91 46 20 	lds	r24, 0x2046
     940:	90 91 47 20 	lds	r25, 0x2047
     944:	63 e0       	ldi	r22, 0x03	; 3
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 81 0b 	call	0x1702	; 0x1702 <__divmodhi4>
     94c:	cb 01       	movw	r24, r22
     94e:	32 c0       	rjmp	.+100    	; 0x9b4 <_Z13getMotorSpeedi+0x1ec>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     950:	20 91 4e 20 	lds	r18, 0x204E
     954:	30 91 4f 20 	lds	r19, 0x204F
     958:	40 91 50 20 	lds	r20, 0x2050
     95c:	50 91 51 20 	lds	r21, 0x2051
     960:	c3 01       	movw	r24, r6
     962:	b2 01       	movw	r22, r4
     964:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__subsf3>
     968:	6b 01       	movw	r12, r22
     96a:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	a9 01       	movw	r20, r18
     972:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     976:	18 16       	cp	r1, r24
     978:	24 f0       	brlt	.+8      	; 0x982 <_Z13getMotorSpeedi+0x1ba>
		return input;
	else
		return input * -1;
     97a:	f7 fa       	bst	r15, 7
     97c:	f0 94       	com	r15
     97e:	f7 f8       	bld	r15, 7
     980:	f0 94       	com	r15
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
			return upperAct.speed / 3;
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     982:	a7 01       	movw	r20, r14
     984:	96 01       	movw	r18, r12
     986:	c5 01       	movw	r24, r10
     988:	b4 01       	movw	r22, r8
     98a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     98e:	18 16       	cp	r1, r24
     990:	54 f4       	brge	.+20     	; 0x9a6 <_Z13getMotorSpeedi+0x1de>
			return upperAct.speed / 2;
     992:	80 91 46 20 	lds	r24, 0x2046
     996:	90 91 47 20 	lds	r25, 0x2047
     99a:	99 23       	and	r25, r25
     99c:	0c f4       	brge	.+2      	; 0x9a0 <_Z13getMotorSpeedi+0x1d8>
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	95 95       	asr	r25
     9a2:	87 95       	ror	r24
     9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <_Z13getMotorSpeedi+0x1ec>
		else
			return upperAct.speed;
     9a6:	80 91 46 20 	lds	r24, 0x2046
     9aa:	90 91 47 20 	lds	r25, 0x2047
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <_Z13getMotorSpeedi+0x1ec>
	}
	
	
	////////
	return 0;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
}
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	8f 90       	pop	r8
     9c4:	7f 90       	pop	r7
     9c6:	6f 90       	pop	r6
     9c8:	5f 90       	pop	r5
     9ca:	4f 90       	pop	r4
     9cc:	08 95       	ret

000009ce <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	f1 f4       	brne	.+60     	; 0xa0e <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     9d2:	80 91 60 20 	lds	r24, 0x2060
     9d6:	90 91 61 20 	lds	r25, 0x2061
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <_Z11getMotorDiri+0x12>
     9de:	3e c0       	rjmp	.+124    	; 0xa5c <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     9e0:	20 91 66 20 	lds	r18, 0x2066
     9e4:	30 91 67 20 	lds	r19, 0x2067
     9e8:	40 91 68 20 	lds	r20, 0x2068
     9ec:	50 91 69 20 	lds	r21, 0x2069
     9f0:	60 91 62 20 	lds	r22, 0x2062
     9f4:	70 91 63 20 	lds	r23, 0x2063
     9f8:	80 91 64 20 	lds	r24, 0x2064
     9fc:	90 91 65 20 	lds	r25, 0x2065
     a00:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	14 f5       	brge	.+68     	; 0xa4c <_Z11getMotorDiri+0x7e>
			return -1;
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	9f ef       	ldi	r25, 0xFF	; 255
     a0c:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	01 f5       	brne	.+64     	; 0xa52 <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     a12:	80 91 48 20 	lds	r24, 0x2048
     a16:	90 91 49 20 	lds	r25, 0x2049
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	f9 f0       	breq	.+62     	; 0xa5c <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     a1e:	20 91 4e 20 	lds	r18, 0x204E
     a22:	30 91 4f 20 	lds	r19, 0x204F
     a26:	40 91 50 20 	lds	r20, 0x2050
     a2a:	50 91 51 20 	lds	r21, 0x2051
     a2e:	60 91 4a 20 	lds	r22, 0x204A
     a32:	70 91 4b 20 	lds	r23, 0x204B
     a36:	80 91 4c 20 	lds	r24, 0x204C
     a3a:	90 91 4d 20 	lds	r25, 0x204D
     a3e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__gesf2>
     a42:	18 16       	cp	r1, r24
     a44:	4c f4       	brge	.+18     	; 0xa58 <_Z11getMotorDiri+0x8a>
			return -1;
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     a5c:	08 95       	ret

00000a5e <main>:

int main(void)
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	00 d0       	rcall	.+0      	; 0xa64 <main+0x6>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <main+0x8>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     a6a:	0e 94 8c 02 	call	0x518	; 0x518 <_Z25DemInitThingsYouBeenDoingv>
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	87 ea       	ldi	r24, 0xA7	; 167
     a72:	91 e6       	ldi	r25, 0x61	; 97
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <main+0x16>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0x20>
     a7e:	00 00       	nop
	_delay_ms(1000);

	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     a80:	40 e6       	ldi	r20, 0x60	; 96
     a82:	56 e0       	ldi	r21, 0x06	; 6
     a84:	60 ea       	ldi	r22, 0xA0	; 160
     a86:	79 e0       	ldi	r23, 0x09	; 9
     a88:	ce 01       	movw	r24, r28
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 3.0;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e4       	ldi	r26, 0x40	; 64
     a96:	b0 e4       	ldi	r27, 0x40	; 64
     a98:	80 93 4e 20 	sts	0x204E, r24
     a9c:	90 93 4f 20 	sts	0x204F, r25
     aa0:	a0 93 50 20 	sts	0x2050, r26
     aa4:	b0 93 51 20 	sts	0x2051, r27
	lowerAct.desiredPos = 3.5;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	a0 e6       	ldi	r26, 0x60	; 96
     aae:	b0 e4       	ldi	r27, 0x40	; 64
     ab0:	80 93 66 20 	sts	0x2066, r24
     ab4:	90 93 67 20 	sts	0x2067, r25
     ab8:	a0 93 68 20 	sts	0x2068, r26
     abc:	b0 93 69 20 	sts	0x2069, r27
	
	lowerAct.enable();
     ac0:	82 e5       	ldi	r24, 0x52	; 82
     ac2:	90 e2       	ldi	r25, 0x20	; 32
     ac4:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN9motorInfo6enableEv>
	upperAct.enable();
     ac8:	8a e3       	ldi	r24, 0x3A	; 58
     aca:	90 e2       	ldi	r25, 0x20	; 32
     acc:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN9motorInfo6enableEv>
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while(lowerAct.enabled || upperAct.enabled){
     ad0:	0f 2e       	mov	r0, r31
     ad2:	f0 e6       	ldi	r31, 0x60	; 96
     ad4:	ef 2e       	mov	r14, r31
     ad6:	f0 e2       	ldi	r31, 0x20	; 32
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	08 e4       	ldi	r16, 0x48	; 72
     ade:	10 e2       	ldi	r17, 0x20	; 32
     ae0:	22 c0       	rjmp	.+68     	; 0xb26 <main+0xc8>
		checkActPosition();
     ae2:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z16checkActPositionv>
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z13getMotorSpeedi>
     aee:	c8 2e       	mov	r12, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z11getMotorDiri>
     af8:	b8 2e       	mov	r11, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z13getMotorSpeedi>
     b02:	d8 2e       	mov	r13, r24
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z11getMotorDiri>
     b0c:	bc 9c       	mul	r11, r12
     b0e:	40 2d       	mov	r20, r0
     b10:	11 24       	eor	r1, r1
     b12:	41 58       	subi	r20, 0x81	; 129
     b14:	8d 9d       	mul	r24, r13
     b16:	80 2d       	mov	r24, r0
     b18:	11 24       	eor	r1, r1
     b1a:	6f e7       	ldi	r22, 0x7F	; 127
     b1c:	68 0f       	add	r22, r24
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN10Sabertooth11ParsePacketEhh>
	lowerAct.enable();
	upperAct.enable();
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while(lowerAct.enabled || upperAct.enabled){
     b26:	f7 01       	movw	r30, r14
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	89 2b       	or	r24, r25
     b2e:	c9 f6       	brne	.-78     	; 0xae2 <main+0x84>
     b30:	f8 01       	movw	r30, r16
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	89 2b       	or	r24, r25
     b38:	a1 f6       	brne	.-88     	; 0xae2 <main+0x84>
		checkActPosition();
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
	}

	baseStepper.calibrateBase();
     b3a:	87 e2       	ldi	r24, 0x27	; 39
     b3c:	90 e2       	ldi	r25, 0x20	; 32
     b3e:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN13rotateStepper13calibrateBaseEv>
	MD2_DIR_CLR();
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	e0 e6       	ldi	r30, 0x60	; 96
     b46:	f6 e0       	ldi	r31, 0x06	; 6
     b48:	86 83       	std	Z+6, r24	; 0x06
	baseStepper.rotateBase(0);  //Note that this function takes an angle relative
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	87 e2       	ldi	r24, 0x27	; 39
     b50:	90 e2       	ldi	r25, 0x20	; 32
     b52:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN13rotateStepper10rotateBaseEi>
	
	
	gripStepper.enable();							 //to the absolute 0 on the robot
     b56:	83 e3       	ldi	r24, 0x33	; 51
     b58:	90 e2       	ldi	r25, 0x20	; 32
     b5a:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN11stepperInfo6enableEv>
	gripStepper.processCommand(RELEASE);
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	90 e2       	ldi	r25, 0x20	; 32
     b66:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN11stepperInfo14processCommandEi>
				TimePrevious = TimeSinceInit;
			}
			bufferIndex = 0;
		}else if(CurrentState == ARMControl){
			if(IsPacketToParse){
				ERROR_SET();									//Show light when done with actuators
     b6a:	0f 2e       	mov	r0, r31
     b6c:	f0 e4       	ldi	r31, 0x40	; 64
     b6e:	8f 2e       	mov	r8, r31
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	9f 2e       	mov	r9, r31
     b74:	f0 2d       	mov	r31, r0
     b76:	68 94       	set
     b78:	33 24       	eor	r3, r3
     b7a:	37 f8       	bld	r3, 7
				upperAct.enable();						//Re-enabled lower actuator

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
				checkActPosition();								//Check once to avoid loop is possible
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f0 e6       	ldi	r31, 0x60	; 96
     b80:	ef 2e       	mov	r14, r31
     b82:	f0 e2       	ldi	r31, 0x20	; 32
     b84:	ff 2e       	mov	r15, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	0f 2e       	mov	r0, r31
     b8a:	f8 e4       	ldi	r31, 0x48	; 72
     b8c:	af 2e       	mov	r10, r31
     b8e:	f0 e2       	ldi	r31, 0x20	; 32
     b90:	bf 2e       	mov	r11, r31
     b92:	f0 2d       	mov	r31, r0
				}
				
				
				IsPacketToParse = false;
				ERROR_CLR();
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     b94:	00 ea       	ldi	r16, 0xA0	; 160
     b96:	18 e0       	ldi	r17, 0x08	; 8
				USART_PutChar(&USARTC0, 255);
     b98:	44 24       	eor	r4, r4
     b9a:	4a 94       	dec	r4
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
				USART_PutChar(&USARTC0,'r');
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
				USART_PutChar(&USARTC0,255);
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
				USART_PutChar(&USARTC0,recieveBuffer[0]);
     b9c:	0f 2e       	mov	r0, r31
     b9e:	f3 e1       	ldi	r31, 0x13	; 19
     ba0:	cf 2e       	mov	r12, r31
     ba2:	f0 e2       	ldi	r31, 0x20	; 32
     ba4:	df 2e       	mov	r13, r31
     ba6:	f0 2d       	mov	r31, r0
	/////////////Initial Calibration and Default Positions//////////////////////

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	while(1){
		if(CurrentState == WaitForHost){
     ba8:	80 91 12 20 	lds	r24, 0x2012
     bac:	81 11       	cpse	r24, r1
     bae:	2d c0       	rjmp	.+90     	; 0xc0a <main+0x1ac>
			SendStringPC("ID: ArmControl\r\n");
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e2       	ldi	r25, 0x20	; 32
     bb4:	0e 94 c9 02 	call	0x592	; 0x592 <_Z12SendStringPCPc>
     bb8:	ff ef       	ldi	r31, 0xFF	; 255
     bba:	23 ed       	ldi	r18, 0xD3	; 211
     bbc:	80 e3       	ldi	r24, 0x30	; 48
     bbe:	f1 50       	subi	r31, 0x01	; 1
     bc0:	20 40       	sbci	r18, 0x00	; 0
     bc2:	80 40       	sbci	r24, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <main+0x160>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <main+0x16a>
     bc8:	00 00       	nop
			_delay_ms(500);
			if(recieveBuffer[0] == 'r'){
     bca:	f6 01       	movw	r30, r12
     bcc:	80 81       	ld	r24, Z
     bce:	82 37       	cpi	r24, 0x72	; 114
     bd0:	c9 f4       	brne	.+50     	; 0xc04 <main+0x1a6>
				CurrentState = ARMControl;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 12 20 	sts	0x2012, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     bd8:	f8 01       	movw	r30, r16
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	85 ff       	sbrs	r24, 5
     bde:	fc cf       	rjmp	.-8      	; 0xbd8 <main+0x17a>
				USART_PutChar(&USARTC0, 'r');
     be0:	82 e7       	ldi	r24, 0x72	; 114
     be2:	80 83       	st	Z, r24
				TimePrevious = TimeSinceInit;
     be4:	80 91 21 20 	lds	r24, 0x2021
     be8:	90 91 22 20 	lds	r25, 0x2022
     bec:	a0 91 23 20 	lds	r26, 0x2023
     bf0:	b0 91 24 20 	lds	r27, 0x2024
     bf4:	80 93 1d 20 	sts	0x201D, r24
     bf8:	90 93 1e 20 	sts	0x201E, r25
     bfc:	a0 93 1f 20 	sts	0x201F, r26
     c00:	b0 93 20 20 	sts	0x2020, r27
			}
			bufferIndex = 0;
     c04:	10 92 25 20 	sts	0x2025, r1
     c08:	cf cf       	rjmp	.-98     	; 0xba8 <main+0x14a>
		}else if(CurrentState == ARMControl){
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	69 f6       	brne	.-102    	; 0xba8 <main+0x14a>
			if(IsPacketToParse){
     c0e:	80 91 26 20 	lds	r24, 0x2026
     c12:	88 23       	and	r24, r24
     c14:	09 f4       	brne	.+2      	; 0xc18 <main+0x1ba>
     c16:	84 c0       	rjmp	.+264    	; 0xd20 <main+0x2c2>
				ERROR_SET();									//Show light when done with actuators
     c18:	f4 01       	movw	r30, r8
     c1a:	35 82       	std	Z+5, r3	; 0x05
				lowerAct.enable();						//Re-enable lower actuator
     c1c:	82 e5       	ldi	r24, 0x52	; 82
     c1e:	90 e2       	ldi	r25, 0x20	; 32
     c20:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN9motorInfo6enableEv>
				upperAct.enable();						//Re-enabled lower actuator
     c24:	8a e3       	ldi	r24, 0x3A	; 58
     c26:	90 e2       	ldi	r25, 0x20	; 32
     c28:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN9motorInfo6enableEv>

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
     c2c:	e1 e3       	ldi	r30, 0x31	; 49
     c2e:	f0 e2       	ldi	r31, 0x20	; 32
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	87 e2       	ldi	r24, 0x27	; 39
     c36:	90 e2       	ldi	r25, 0x20	; 32
     c38:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN13rotateStepper10rotateBaseEi>
					
				checkActPosition();								//Check once to avoid loop is possible
     c3c:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z16checkActPositionv>
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     c40:	22 c0       	rjmp	.+68     	; 0xc86 <main+0x228>
					checkActPosition();							//Check positions
     c42:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z16checkActPositionv>
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z13getMotorSpeedi>
     c4e:	68 2e       	mov	r6, r24
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z11getMotorDiri>
     c58:	58 2e       	mov	r5, r24
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z13getMotorSpeedi>
     c62:	78 2e       	mov	r7, r24
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z11getMotorDiri>
     c6c:	56 9c       	mul	r5, r6
     c6e:	40 2d       	mov	r20, r0
     c70:	11 24       	eor	r1, r1
     c72:	41 58       	subi	r20, 0x81	; 129
     c74:	87 9d       	mul	r24, r7
     c76:	80 2d       	mov	r24, r0
     c78:	11 24       	eor	r1, r1
     c7a:	6f e7       	ldi	r22, 0x7F	; 127
     c7c:	68 0f       	add	r22, r24
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN10Sabertooth11ParsePacketEhh>
				upperAct.enable();						//Re-enabled lower actuator

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
				checkActPosition();								//Check once to avoid loop is possible
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     c86:	f7 01       	movw	r30, r14
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	89 2b       	or	r24, r25
     c8e:	c9 f6       	brne	.-78     	; 0xc42 <main+0x1e4>
     c90:	f5 01       	movw	r30, r10
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	89 2b       	or	r24, r25
     c98:	a1 f6       	brne	.-88     	; 0xc42 <main+0x1e4>
					checkActPosition();							//Check positions
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
				}												//Exit when done moving
					

				DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more
     c9a:	4f e7       	ldi	r20, 0x7F	; 127
     c9c:	6f e7       	ldi	r22, 0x7F	; 127
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN10Sabertooth11ParsePacketEhh>

				
				
				if(gripStepper.desiredGripState == GRIP){
     ca6:	e9 e3       	ldi	r30, 0x39	; 57
     ca8:	f0 e2       	ldi	r31, 0x20	; 32
     caa:	80 81       	ld	r24, Z
     cac:	81 11       	cpse	r24, r1
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <main+0x268>
					gripStepper.enable();
     cb0:	83 e3       	ldi	r24, 0x33	; 51
     cb2:	90 e2       	ldi	r25, 0x20	; 32
     cb4:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN11stepperInfo6enableEv>
					gripStepper.processCommand(GRIP);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	83 e3       	ldi	r24, 0x33	; 51
     cbe:	90 e2       	ldi	r25, 0x20	; 32
     cc0:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN11stepperInfo14processCommandEi>
     cc4:	0f c0       	rjmp	.+30     	; 0xce4 <main+0x286>
				}else if(gripStepper.desiredGripState == RELEASE){
     cc6:	e9 e3       	ldi	r30, 0x39	; 57
     cc8:	f0 e2       	ldi	r31, 0x20	; 32
     cca:	80 81       	ld	r24, Z
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	51 f4       	brne	.+20     	; 0xce4 <main+0x286>
					gripStepper.enable();
     cd0:	83 e3       	ldi	r24, 0x33	; 51
     cd2:	90 e2       	ldi	r25, 0x20	; 32
     cd4:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN11stepperInfo6enableEv>
					gripStepper.processCommand(RELEASE);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	83 e3       	ldi	r24, 0x33	; 51
     cde:	90 e2       	ldi	r25, 0x20	; 32
     ce0:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN11stepperInfo14processCommandEi>

				}
				
				
				IsPacketToParse = false;
     ce4:	10 92 26 20 	sts	0x2026, r1
				ERROR_CLR();
     ce8:	f4 01       	movw	r30, r8
     cea:	36 82       	std	Z+6, r3	; 0x06
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     cec:	f8 01       	movw	r30, r16
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	85 ff       	sbrs	r24, 5
     cf2:	fc cf       	rjmp	.-8      	; 0xcec <main+0x28e>
				USART_PutChar(&USARTC0, 255);
     cf4:	40 82       	st	Z, r4
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     cf6:	f8 01       	movw	r30, r16
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	85 ff       	sbrs	r24, 5
     cfc:	fc cf       	rjmp	.-8      	; 0xcf6 <main+0x298>
				USART_PutChar(&USARTC0,'r');
     cfe:	82 e7       	ldi	r24, 0x72	; 114
     d00:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     d02:	f8 01       	movw	r30, r16
     d04:	81 81       	ldd	r24, Z+1	; 0x01
     d06:	85 ff       	sbrs	r24, 5
     d08:	fc cf       	rjmp	.-8      	; 0xd02 <main+0x2a4>
				USART_PutChar(&USARTC0,255);
     d0a:	40 82       	st	Z, r4
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     d0c:	f8 01       	movw	r30, r16
     d0e:	81 81       	ldd	r24, Z+1	; 0x01
     d10:	85 ff       	sbrs	r24, 5
     d12:	fc cf       	rjmp	.-8      	; 0xd0c <main+0x2ae>
				USART_PutChar(&USARTC0,recieveBuffer[0]);
     d14:	f6 01       	movw	r30, r12
     d16:	80 81       	ld	r24, Z
     d18:	f8 01       	movw	r30, r16
     d1a:	80 83       	st	Z, r24
				bufferIndex = 0;
     d1c:	10 92 25 20 	sts	0x2025, r1
			}
			
			if((TimePrevious - TimeSinceInit) > MAXTIMEOUT){
     d20:	40 91 21 20 	lds	r20, 0x2021
     d24:	50 91 22 20 	lds	r21, 0x2022
     d28:	60 91 23 20 	lds	r22, 0x2023
     d2c:	70 91 24 20 	lds	r23, 0x2024
     d30:	80 91 1d 20 	lds	r24, 0x201D
     d34:	90 91 1e 20 	lds	r25, 0x201E
     d38:	a0 91 1f 20 	lds	r26, 0x201F
     d3c:	b0 91 20 20 	lds	r27, 0x2020
     d40:	84 1b       	sub	r24, r20
     d42:	95 0b       	sbc	r25, r21
     d44:	a6 0b       	sbc	r26, r22
     d46:	b7 0b       	sbc	r27, r23
     d48:	06 97       	sbiw	r24, 0x06	; 6
     d4a:	a1 05       	cpc	r26, r1
     d4c:	b1 05       	cpc	r27, r1
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <main+0x2f4>
     d50:	2b cf       	rjmp	.-426    	; 0xba8 <main+0x14a>
				CurrentState = WaitForHost;
     d52:	10 92 12 20 	sts	0x2012, r1
				bufferIndex = 0;
     d56:	10 92 25 20 	sts	0x2025, r1
     d5a:	26 cf       	rjmp	.-436    	; 0xba8 <main+0x14a>

00000d5c <__vector_77>:
		}
	}

}

ISR(TCD0_OVF_vect){
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
	TimeSinceInit++;
     d6e:	80 91 21 20 	lds	r24, 0x2021
     d72:	90 91 22 20 	lds	r25, 0x2022
     d76:	a0 91 23 20 	lds	r26, 0x2023
     d7a:	b0 91 24 20 	lds	r27, 0x2024
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	a1 1d       	adc	r26, r1
     d82:	b1 1d       	adc	r27, r1
     d84:	80 93 21 20 	sts	0x2021, r24
     d88:	90 93 22 20 	sts	0x2022, r25
     d8c:	a0 93 23 20 	sts	0x2023, r26
     d90:	b0 93 24 20 	sts	0x2024, r27
}
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <_GLOBAL__sub_I_swap>:

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     da6:	82 e5       	ldi	r24, 0x52	; 82
     da8:	90 e2       	ldi	r25, 0x20	; 32
     daa:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     dae:	8a e3       	ldi	r24, 0x3A	; 58
     db0:	90 e2       	ldi	r25, 0x20	; 32
     db2:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     db6:	83 e3       	ldi	r24, 0x33	; 51
     db8:	90 e2       	ldi	r25, 0x20	; 32
     dba:	0e 94 9e 08 	call	0x113c	; 0x113c <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     dbe:	87 e2       	ldi	r24, 0x27	; 39
     dc0:	90 e2       	ldi	r25, 0x20	; 32
     dc2:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN13rotateStepperC1Ev>
     dc6:	08 95       	ret

00000dc8 <_GLOBAL__sub_D_swap>:
     dc8:	87 e2       	ldi	r24, 0x27	; 39
     dca:	90 e2       	ldi	r25, 0x20	; 32
     dcc:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13rotateStepperD1Ev>
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     dd0:	83 e3       	ldi	r24, 0x33	; 51
     dd2:	90 e2       	ldi	r25, 0x20	; 32
     dd4:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN11stepperInfoD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
     dd8:	8a e3       	ldi	r24, 0x3A	; 58
     dda:	90 e2       	ldi	r25, 0x20	; 32
     ddc:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN9motorInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     de0:	82 e5       	ldi	r24, 0x52	; 82
     de2:	90 e2       	ldi	r25, 0x20	; 32
     de4:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN9motorInfoD1Ev>
     de8:	08 95       	ret

00000dea <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     dea:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     dec:	12 82       	std	Z+2, r1	; 0x02
     dee:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .2;  //Needs calibration
     df8:	4d ec       	ldi	r20, 0xCD	; 205
     dfa:	5c ec       	ldi	r21, 0xCC	; 204
     dfc:	6c e4       	ldi	r22, 0x4C	; 76
     dfe:	7e e3       	ldi	r23, 0x3E	; 62
     e00:	44 83       	std	Z+4, r20	; 0x04
     e02:	55 83       	std	Z+5, r21	; 0x05
     e04:	66 83       	std	Z+6, r22	; 0x06
     e06:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	60 e4       	ldi	r22, 0x40	; 64
     e0e:	7f e3       	ldi	r23, 0x3F	; 63
     e10:	40 87       	std	Z+8, r20	; 0x08
     e12:	51 87       	std	Z+9, r21	; 0x09
     e14:	62 87       	std	Z+10, r22	; 0x0a
     e16:	73 87       	std	Z+11, r23	; 0x0b
	speed = 100;
     e18:	84 e6       	ldi	r24, 0x64	; 100
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	84 87       	std	Z+12, r24	; 0x0c
     e1e:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     e20:	16 86       	std	Z+14, r1	; 0x0e
     e22:	17 86       	std	Z+15, r1	; 0x0f
     e24:	08 95       	ret

00000e26 <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     e26:	08 95       	ret

00000e28 <_ZN9motorInfo6enableEv>:
	
} //~motorInfo


void motorInfo::enable(){
	enabled = 1;
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	26 87       	std	Z+14, r18	; 0x0e
     e30:	37 87       	std	Z+15, r19	; 0x0f
     e32:	08 95       	ret

00000e34 <_ZN9motorInfo7disableEv>:
}

void motorInfo::disable(){
	enabled = 0;
     e34:	fc 01       	movw	r30, r24
     e36:	16 86       	std	Z+14, r1	; 0x0e
     e38:	17 86       	std	Z+15, r1	; 0x0f
     e3a:	08 95       	ret

00000e3c <_ZN9motorInfo10setDesiredEf>:
}


void motorInfo::setDesired(float desired){
	desiredPos = desired; //Mutate desiredPos
     e3c:	fc 01       	movw	r30, r24
     e3e:	44 8b       	std	Z+20, r20	; 0x14
     e40:	55 8b       	std	Z+21, r21	; 0x15
     e42:	66 8b       	std	Z+22, r22	; 0x16
     e44:	77 8b       	std	Z+23, r23	; 0x17
     e46:	08 95       	ret

00000e48 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     e48:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     e4a:	45 e8       	ldi	r20, 0x85	; 133
     e4c:	5b e2       	ldi	r21, 0x2B	; 43
     e4e:	61 e8       	ldi	r22, 0x81	; 129
     e50:	73 e4       	ldi	r23, 0x43	; 67
     e52:	44 83       	std	Z+4, r20	; 0x04
     e54:	55 83       	std	Z+5, r21	; 0x05
     e56:	66 83       	std	Z+6, r22	; 0x06
     e58:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	60 e8       	ldi	r22, 0x80	; 128
     e60:	7f eb       	ldi	r23, 0xBF	; 191
     e62:	40 83       	st	Z, r20
     e64:	51 83       	std	Z+1, r21	; 0x01
     e66:	62 83       	std	Z+2, r22	; 0x02
     e68:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     e6a:	10 86       	std	Z+8, r1	; 0x08
     e6c:	11 86       	std	Z+9, r1	; 0x09
     e6e:	08 95       	ret

00000e70 <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     e70:	08 95       	ret

00000e72 <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	e0 e6       	ldi	r30, 0x60	; 96
     e7c:	f6 e0       	ldi	r31, 0x06	; 6
     e7e:	86 83       	std	Z+6, r24	; 0x06
	bool calFirstPress = false;
	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     e84:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b6 e0       	ldi	r27, 0x06	; 6

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     e8a:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     e8c:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     e8e:	18 96       	adiw	r26, 0x08	; 8
     e90:	8c 91       	ld	r24, X
     e92:	18 97       	sbiw	r26, 0x08	; 8

		if(calButtonState && !calFirstPress){
     e94:	82 ff       	sbrs	r24, 2
     e96:	0e c0       	rjmp	.+28     	; 0xeb4 <_ZN13rotateStepper13calibrateBaseEv+0x42>
     e98:	21 11       	cpse	r18, r1
     e9a:	0e c0       	rjmp	.+28     	; 0xeb8 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     e9c:	35 83       	std	Z+5, r19	; 0x05
     e9e:	2f ef       	ldi	r18, 0xFF	; 255
     ea0:	43 ec       	ldi	r20, 0xC3	; 195
     ea2:	89 e0       	ldi	r24, 0x09	; 9
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	40 40       	sbci	r20, 0x00	; 0
     ea8:	80 40       	sbci	r24, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <_ZN13rotateStepper13calibrateBaseEv+0x32>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     eae:	00 00       	nop
	
	while (calInProgress){
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
     eb0:	23 2f       	mov	r18, r19
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(100);  //For gracefulness
		}
		
		if(calFirstPress == true)
     eb4:	22 23       	and	r18, r18
     eb6:	51 f0       	breq	.+20     	; 0xecc <_ZN13rotateStepper13calibrateBaseEv+0x5a>
			++stepCount;
     eb8:	6f 5f       	subi	r22, 0xFF	; 255
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
     ebc:	67 39       	cpi	r22, 0x97	; 151
     ebe:	71 05       	cpc	r23, r1
     ec0:	2c f0       	brlt	.+10     	; 0xecc <_ZN13rotateStepper13calibrateBaseEv+0x5a>
     ec2:	18 96       	adiw	r26, 0x08	; 8
     ec4:	8c 91       	ld	r24, X
     ec6:	18 97       	sbiw	r26, 0x08	; 8
     ec8:	82 fd       	sbrc	r24, 2
     eca:	0f c0       	rjmp	.+30     	; 0xeea <_ZN13rotateStepper13calibrateBaseEv+0x78>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     ecc:	56 83       	std	Z+6, r21	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	98 e1       	ldi	r25, 0x18	; 24
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <_ZN13rotateStepper13calibrateBaseEv+0x60>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <_ZN13rotateStepper13calibrateBaseEv+0x66>
     ed8:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
     eda:	55 83       	std	Z+5, r21	; 0x05
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	98 e1       	ldi	r25, 0x18	; 24
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <_ZN13rotateStepper13calibrateBaseEv+0x6e>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <_ZN13rotateStepper13calibrateBaseEv+0x74>
     ee6:	00 00       	nop
     ee8:	d2 cf       	rjmp	.-92     	; 0xe8e <_ZN13rotateStepper13calibrateBaseEv+0x1c>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	e0 e6       	ldi	r30, 0x60	; 96
     eee:	f6 e0       	ldi	r31, 0x06	; 6
     ef0:	86 83       	std	Z+6, r24	; 0x06
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	98 e1       	ldi	r25, 0x18	; 24
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <_ZN13rotateStepper13calibrateBaseEv+0x84>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <_ZN13rotateStepper13calibrateBaseEv+0x8a>
     efc:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	85 83       	std	Z+5, r24	; 0x05
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	98 e1       	ldi	r25, 0x18	; 24
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <_ZN13rotateStepper13calibrateBaseEv+0x94>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <_ZN13rotateStepper13calibrateBaseEv+0x9a>
     f0c:	00 00       	nop
		_delay_us(800);	
		
	}	
	multiplier = stepCount / calSpan;
     f0e:	88 27       	eor	r24, r24
     f10:	77 fd       	sbrc	r23, 7
     f12:	80 95       	com	r24
     f14:	98 2f       	mov	r25, r24
     f16:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     f1a:	2c 81       	ldd	r18, Y+4	; 0x04
     f1c:	3d 81       	ldd	r19, Y+5	; 0x05
     f1e:	4e 81       	ldd	r20, Y+6	; 0x06
     f20:	5f 81       	ldd	r21, Y+7	; 0x07
     f22:	0e 94 cf 09 	call	0x139e	; 0x139e <__divsf3>
     f26:	68 83       	st	Y, r22
     f28:	79 83       	std	Y+1, r23	; 0x01
     f2a:	8a 83       	std	Y+2, r24	; 0x02
     f2c:	9b 83       	std	Y+3, r25	; 0x03
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ec 01       	movw	r28, r24
     f3a:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
     f3c:	18 16       	cp	r1, r24
     f3e:	19 06       	cpc	r1, r25
     f40:	2c f4       	brge	.+10     	; 0xf4c <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	e0 e6       	ldi	r30, 0x60	; 96
     f46:	f6 e0       	ldi	r31, 0x06	; 6
     f48:	26 83       	std	Z+6, r18	; 0x06
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	e0 e6       	ldi	r30, 0x60	; 96
     f50:	f6 e0       	ldi	r31, 0x06	; 6
     f52:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
     f54:	bc 01       	movw	r22, r24
     f56:	99 23       	and	r25, r25
     f58:	24 f4       	brge	.+8      	; 0xf62 <_ZN13rotateStepper8moveBaseEi+0x2e>
     f5a:	66 27       	eor	r22, r22
     f5c:	77 27       	eor	r23, r23
     f5e:	68 1b       	sub	r22, r24
     f60:	79 0b       	sbc	r23, r25
     f62:	88 27       	eor	r24, r24
     f64:	77 fd       	sbrc	r23, 7
     f66:	80 95       	com	r24
     f68:	98 2f       	mov	r25, r24
     f6a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     f6e:	28 81       	ld	r18, Y
     f70:	39 81       	ldd	r19, Y+1	; 0x01
     f72:	4a 81       	ldd	r20, Y+2	; 0x02
     f74:	5b 81       	ldd	r21, Y+3	; 0x03
     f76:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__mulsf3>
     f7a:	0e 94 37 0a 	call	0x146e	; 0x146e <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	bc f4       	brge	.+46     	; 0xfb2 <_ZN13rotateStepper8moveBaseEi+0x7e>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
		MD2_STEP_CLR();
     f88:	e0 e6       	ldi	r30, 0x60	; 96
     f8a:	f6 e0       	ldi	r31, 0x06	; 6
     f8c:	22 e0       	ldi	r18, 0x02	; 2
     f8e:	26 83       	std	Z+6, r18	; 0x06
     f90:	af eb       	ldi	r26, 0xBF	; 191
     f92:	b2 e1       	ldi	r27, 0x12	; 18
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <_ZN13rotateStepper8moveBaseEi+0x60>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <_ZN13rotateStepper8moveBaseEi+0x66>
     f9a:	00 00       	nop
		_delay_us(600);
		MD2_STEP_SET();
     f9c:	25 83       	std	Z+5, r18	; 0x05
     f9e:	af e1       	ldi	r26, 0x1F	; 31
     fa0:	bc e1       	ldi	r27, 0x1C	; 28
     fa2:	11 97       	sbiw	r26, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <_ZN13rotateStepper8moveBaseEi+0x6e>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <_ZN13rotateStepper8moveBaseEi+0x74>
     fa8:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	86 17       	cp	r24, r22
     fae:	97 07       	cpc	r25, r23
     fb0:	71 f7       	brne	.-36     	; 0xf8e <_ZN13rotateStepper8moveBaseEi+0x5a>
		_delay_us(600);
		MD2_STEP_SET();
		_delay_us(900);
	}
	
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
     fc6:	88 27       	eor	r24, r24
     fc8:	77 fd       	sbrc	r23, 7
     fca:	80 95       	com	r24
     fcc:	98 2f       	mov	r25, r24
     fce:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     fd2:	2b e7       	ldi	r18, 0x7B	; 123
     fd4:	34 e1       	ldi	r19, 0x14	; 20
     fd6:	48 e0       	ldi	r20, 0x08	; 8
     fd8:	52 e4       	ldi	r21, 0x42	; 66
     fda:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__addsf3>
     fde:	0e 94 37 0a 	call	0x146e	; 0x146e <__fixsfsi>
     fe2:	6b 01       	movw	r12, r22
     fe4:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
     fe6:	88 85       	ldd	r24, Y+8	; 0x08
     fe8:	99 85       	ldd	r25, Y+9	; 0x09
     fea:	b6 01       	movw	r22, r12
     fec:	68 1b       	sub	r22, r24
     fee:	79 0b       	sbc	r23, r25
     ff0:	ce 01       	movw	r24, r28
     ff2:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
     ff6:	c8 86       	std	Y+8, r12	; 0x08
     ff8:	d9 86       	std	Y+9, r13	; 0x09
	
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	08 95       	ret

00001008 <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
    1008:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
    100a:	ed 91       	ld	r30, X+
    100c:	fc 91       	ld	r31, X
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	81 81       	ldd	r24, Z+1	; 0x01
    1012:	85 ff       	sbrs	r24, 5
    1014:	fd cf       	rjmp	.-6      	; 0x1010 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    101a:	ed 91       	ld	r30, X+
    101c:	fc 91       	ld	r31, X
    101e:	11 97       	sbiw	r26, 0x01	; 1
    1020:	81 81       	ldd	r24, Z+1	; 0x01
    1022:	85 ff       	sbrs	r24, 5
    1024:	fd cf       	rjmp	.-6      	; 0x1020 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
    1026:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    1028:	ed 91       	ld	r30, X+
    102a:	fc 91       	ld	r31, X
    102c:	11 97       	sbiw	r26, 0x01	; 1
    102e:	81 81       	ldd	r24, Z+1	; 0x01
    1030:	85 ff       	sbrs	r24, 5
    1032:	fd cf       	rjmp	.-6      	; 0x102e <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
    1034:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    1036:	ed 91       	ld	r30, X+
    1038:	fc 91       	ld	r31, X
    103a:	81 81       	ldd	r24, Z+1	; 0x01
    103c:	85 ff       	sbrs	r24, 5
    103e:	fd cf       	rjmp	.-6      	; 0x103a <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
    1040:	64 0f       	add	r22, r20
    1042:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
    1044:	60 83       	st	Z, r22
    1046:	08 95       	ret

00001048 <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
    1052:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
    1054:	6f 37       	cpi	r22, 0x7F	; 127
    1056:	61 f0       	breq	.+24     	; 0x1070 <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
    1058:	6f 37       	cpi	r22, 0x7F	; 127
    105a:	20 f4       	brcc	.+8      	; 0x1064 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
    105c:	4f e7       	ldi	r20, 0x7F	; 127
    105e:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	0b c0       	rjmp	.+22     	; 0x107a <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
    1064:	66 23       	and	r22, r22
    1066:	3c f4       	brge	.+14     	; 0x1076 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
    1068:	41 e8       	ldi	r20, 0x81	; 129
    106a:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	05 c0       	rjmp	.+10     	; 0x107a <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
    1070:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
    1076:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
    1078:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
    107a:	8f 37       	cpi	r24, 0x7F	; 127
    107c:	61 f0       	breq	.+24     	; 0x1096 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
    107e:	8f 37       	cpi	r24, 0x7F	; 127
    1080:	20 f4       	brcc	.+8      	; 0x108a <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
    1082:	0f e7       	ldi	r16, 0x7F	; 127
    1084:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
    1086:	15 e0       	ldi	r17, 0x05	; 5
    1088:	0b c0       	rjmp	.+22     	; 0x10a0 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
    108a:	88 23       	and	r24, r24
    108c:	3c f4       	brge	.+14     	; 0x109c <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
    108e:	01 e8       	ldi	r16, 0x81	; 129
    1090:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
    1092:	14 e0       	ldi	r17, 0x04	; 4
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
    1096:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
    1098:	14 e0       	ldi	r17, 0x04	; 4
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
    109c:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
    109e:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
    10a0:	ce 01       	movw	r24, r28
    10a2:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
    10a6:	40 2f       	mov	r20, r16
    10a8:	61 2f       	mov	r22, r17
    10aa:	ce 01       	movw	r24, r28
    10ac:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN10Sabertooth12SendDriveCmdEcc>
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	64 e0       	ldi	r22, 0x04	; 4
    10cc:	ce 01       	movw	r24, r28
    10ce:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN10Sabertooth12SendDriveCmdEcc>
}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
    10de:	68 83       	st	Y, r22
    10e0:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
    10e2:	4a 83       	std	Y+2, r20	; 0x02
    10e4:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
    10e6:	88 e0       	ldi	r24, 0x08	; 8
    10e8:	fa 01       	movw	r30, r20
    10ea:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
    10ec:	e8 81       	ld	r30, Y
    10ee:	f9 81       	ldd	r31, Y+1	; 0x01
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
    10f4:	e8 81       	ld	r30, Y
    10f6:	f9 81       	ldd	r31, Y+1	; 0x01
    10f8:	8f ec       	ldi	r24, 0xCF	; 207
    10fa:	86 83       	std	Z+6, r24	; 0x06
    10fc:	e8 81       	ld	r30, Y
    10fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1100:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
    1102:	e8 81       	ld	r30, Y
    1104:	f9 81       	ldd	r31, Y+1	; 0x01
    1106:	84 81       	ldd	r24, Z+4	; 0x04
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110c:	ff ef       	ldi	r31, 0xFF	; 255
    110e:	23 ec       	ldi	r18, 0xC3	; 195
    1110:	89 e0       	ldi	r24, 0x09	; 9
    1112:	f1 50       	subi	r31, 0x01	; 1
    1114:	20 40       	sbci	r18, 0x00	; 0
    1116:	80 40       	sbci	r24, 0x00	; 0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
    111c:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
    111e:	e8 81       	ld	r30, Y
    1120:	f9 81       	ldd	r31, Y+1	; 0x01
    1122:	8a ea       	ldi	r24, 0xAA	; 170
    1124:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
    1126:	44 e1       	ldi	r20, 0x14	; 20
    1128:	6e e0       	ldi	r22, 0x0E	; 14
    112a:	ce 01       	movw	r24, r28
    112c:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
    1130:	ce 01       	movw	r24, r28
    1132:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN10Sabertooth7StopAllEv>
}
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <_ZN11stepperInfoC1Ev>:
};

extern void SendStringPC(char *stufftosend);

// default constructor
stepperInfo::stepperInfo() {
    113c:	fc 01       	movw	r30, r24
	enabled = 0;
    113e:	10 82       	st	Z, r1
    1140:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	82 83       	std	Z+2, r24	; 0x02
    1148:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	84 83       	std	Z+4, r24	; 0x04
    1150:	95 83       	std	Z+5, r25	; 0x05
    1152:	08 95       	ret

00001154 <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
    1154:	08 95       	ret

00001156 <_ZN11stepperInfo14processCommandEi>:
{
} //~stepperInfo


//Used for the gripping stepper
void stepperInfo::processCommand(int cmd){
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	dc 01       	movw	r26, r24
	if(!enabled)
    115c:	8d 91       	ld	r24, X+
    115e:	9c 91       	ld	r25, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	89 2b       	or	r24, r25
    1164:	09 f4       	brne	.+2      	; 0x1168 <_ZN11stepperInfo14processCommandEi+0x12>
    1166:	61 c0       	rjmp	.+194    	; 0x122a <_ZN11stepperInfo14processCommandEi+0xd4>
		return;  //TODO: MAKE BETTER
		
	if(cmd != GRIP && cmd != RELEASE)
    1168:	62 30       	cpi	r22, 0x02	; 2
    116a:	71 05       	cpc	r23, r1
    116c:	08 f0       	brcs	.+2      	; 0x1170 <_ZN11stepperInfo14processCommandEi+0x1a>
    116e:	5d c0       	rjmp	.+186    	; 0x122a <_ZN11stepperInfo14processCommandEi+0xd4>
		return;
		
	if(cmd == currentState)
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	8d 91       	ld	r24, X+
    1174:	9c 91       	ld	r25, X
    1176:	13 97       	sbiw	r26, 0x03	; 3
    1178:	86 17       	cp	r24, r22
    117a:	97 07       	cpc	r25, r23
    117c:	09 f4       	brne	.+2      	; 0x1180 <_ZN11stepperInfo14processCommandEi+0x2a>
    117e:	55 c0       	rjmp	.+170    	; 0x122a <_ZN11stepperInfo14processCommandEi+0xd4>
		return;
		
	currentState = cmd;
    1180:	12 96       	adiw	r26, 0x02	; 2
    1182:	6d 93       	st	X+, r22
    1184:	7c 93       	st	X, r23
    1186:	13 97       	sbiw	r26, 0x03	; 3
	//GET DIRECTION
	//CLR IS OUT
	
	//SET is grip
	//CLR is release
	if(cmd == GRIP)
    1188:	61 15       	cp	r22, r1
    118a:	71 05       	cpc	r23, r1
    118c:	29 f4       	brne	.+10     	; 0x1198 <_ZN11stepperInfo14processCommandEi+0x42>
		MD1_DIR_SET();
    118e:	80 e1       	ldi	r24, 0x10	; 16
    1190:	e0 e6       	ldi	r30, 0x60	; 96
    1192:	f6 e0       	ldi	r31, 0x06	; 6
    1194:	85 83       	std	Z+5, r24	; 0x05
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <_ZN11stepperInfo14processCommandEi+0x50>
	else if (cmd == RELEASE)
    1198:	61 30       	cpi	r22, 0x01	; 1
    119a:	71 05       	cpc	r23, r1
    119c:	21 f4       	brne	.+8      	; 0x11a6 <_ZN11stepperInfo14processCommandEi+0x50>
		MD1_DIR_CLR();
    119e:	80 e1       	ldi	r24, 0x10	; 16
    11a0:	e0 e6       	ldi	r30, 0x60	; 96
    11a2:	f6 e0       	ldi	r31, 0x06	; 6
    11a4:	86 83       	std	Z+6, r24	; 0x06
		
	if(!init){
    11a6:	14 96       	adiw	r26, 0x04	; 4
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	15 97       	sbiw	r26, 0x05	; 5
    11ae:	89 2b       	or	r24, r25
    11b0:	c9 f4       	brne	.+50     	; 0x11e4 <_ZN11stepperInfo14processCommandEi+0x8e>
    11b2:	28 e8       	ldi	r18, 0x88	; 136
    11b4:	33 e1       	ldi	r19, 0x13	; 19
		for(int i = 0; i < 5000; ++i){
			MD1_STEP_SET();
    11b6:	e0 e6       	ldi	r30, 0x60	; 96
    11b8:	f6 e0       	ldi	r31, 0x06	; 6
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11be:	cf e8       	ldi	r28, 0x8F	; 143
    11c0:	d1 e0       	ldi	r29, 0x01	; 1
    11c2:	21 97       	sbiw	r28, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <_ZN11stepperInfo14processCommandEi+0x6c>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <_ZN11stepperInfo14processCommandEi+0x72>
    11c8:	00 00       	nop
			_delay_us(50);
			MD1_STEP_CLR();
    11ca:	86 83       	std	Z+6, r24	; 0x06
    11cc:	cf e9       	ldi	r28, 0x9F	; 159
    11ce:	df e0       	ldi	r29, 0x0F	; 15
    11d0:	21 97       	sbiw	r28, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <_ZN11stepperInfo14processCommandEi+0x7a>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <_ZN11stepperInfo14processCommandEi+0x80>
    11d6:	00 00       	nop
    11d8:	21 50       	subi	r18, 0x01	; 1
    11da:	31 09       	sbc	r19, r1
		MD1_DIR_SET();
	else if (cmd == RELEASE)
		MD1_DIR_CLR();
		
	if(!init){
		for(int i = 0; i < 5000; ++i){
    11dc:	21 15       	cp	r18, r1
    11de:	31 05       	cpc	r19, r1
    11e0:	69 f7       	brne	.-38     	; 0x11bc <_ZN11stepperInfo14processCommandEi+0x66>
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <_ZN11stepperInfo14processCommandEi+0x96>
			MD1_STEP_CLR();
			_delay_us(500);
		}
	}
	else {
		init = 0;
    11e4:	14 96       	adiw	r26, 0x04	; 4
    11e6:	1d 92       	st	X+, r1
    11e8:	1c 92       	st	X, r1
    11ea:	15 97       	sbiw	r26, 0x05	; 5
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    11ec:	e0 e2       	ldi	r30, 0x20	; 32
    11ee:	f6 e0       	ldi	r31, 0x06	; 6
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	56 e0       	ldi	r21, 0x06	; 6
		MD1_STEP_SET();
    11f4:	80 e6       	ldi	r24, 0x60	; 96
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	30 e2       	ldi	r19, 0x20	; 32
	else {
		init = 0;
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    11fa:	20 85       	ldd	r18, Z+8	; 0x08
    11fc:	23 fd       	sbrc	r18, 3
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <_ZN11stepperInfo14processCommandEi+0xd0>
    1200:	ea 01       	movw	r28, r20
    1202:	28 85       	ldd	r18, Y+8	; 0x08
    1204:	23 ff       	sbrs	r18, 3
    1206:	0f c0       	rjmp	.+30     	; 0x1226 <_ZN11stepperInfo14processCommandEi+0xd0>
		MD1_STEP_SET();
    1208:	ec 01       	movw	r28, r24
    120a:	3d 83       	std	Y+5, r19	; 0x05
    120c:	d5 ed       	ldi	r29, 0xD5	; 213
    120e:	da 95       	dec	r29
    1210:	f1 f7       	brne	.-4      	; 0x120e <_ZN11stepperInfo14processCommandEi+0xb8>
    1212:	00 00       	nop
		_delay_us(20);
		MD1_STEP_CLR();
    1214:	ec 01       	movw	r28, r24
    1216:	3e 83       	std	Y+6, r19	; 0x06
    1218:	cf e3       	ldi	r28, 0x3F	; 63
    121a:	d1 e0       	ldi	r29, 0x01	; 1
    121c:	21 97       	sbiw	r28, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <_ZN11stepperInfo14processCommandEi+0xc6>
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <_ZN11stepperInfo14processCommandEi+0xcc>
    1222:	00 00       	nop
    1224:	ea cf       	rjmp	.-44     	; 0x11fa <_ZN11stepperInfo14processCommandEi+0xa4>
		_delay_us(40);
	}
	
	enabled = 0;
    1226:	1d 92       	st	X+, r1
    1228:	1c 92       	st	X, r1
	
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <_ZN11stepperInfo6enableEv>:


void stepperInfo::enable(){
	enabled = 1;
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	fc 01       	movw	r30, r24
    1236:	20 83       	st	Z, r18
    1238:	31 83       	std	Z+1, r19	; 0x01
    123a:	08 95       	ret

0000123c <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    123c:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    123e:	60 83       	st	Z, r22
    1240:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    1242:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    1244:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
    1246:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
    1248:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
    124a:	15 86       	std	Z+13, r1	; 0x0d
    124c:	08 95       	ret

0000124e <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    124e:	fc 01       	movw	r30, r24
    1250:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1252:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	29 13       	cpse	r18, r25
    1258:	01 c0       	rjmp	.+2      	; 0x125c <USART_RXBufferData_Available+0xe>
    125a:	80 e0       	ldi	r24, 0x00	; 0
}
    125c:	08 95       	ret

0000125e <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    125e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1260:	84 85       	ldd	r24, Z+12	; 0x0c
    1262:	df 01       	movw	r26, r30
    1264:	a8 0f       	add	r26, r24
    1266:	b1 1d       	adc	r27, r1
    1268:	13 96       	adiw	r26, 0x03	; 3
    126a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    126c:	94 85       	ldd	r25, Z+12	; 0x0c
    126e:	9f 5f       	subi	r25, 0xFF	; 255
    1270:	93 70       	andi	r25, 0x03	; 3
    1272:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
    1274:	08 95       	ret

00001276 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    1276:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    1278:	83 85       	ldd	r24, Z+11	; 0x0b
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    127e:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
    1280:	a0 81       	ld	r26, Z
    1282:	b1 81       	ldd	r27, Z+1	; 0x01
    1284:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
    1286:	89 17       	cp	r24, r25
    1288:	49 f0       	breq	.+18     	; 0x129c <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    128a:	93 85       	ldd	r25, Z+11	; 0x0b
    128c:	df 01       	movw	r26, r30
    128e:	a9 0f       	add	r26, r25
    1290:	b1 1d       	adc	r27, r1
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
    1296:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    129c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    129e:	08 95       	ret

000012a0 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    12a0:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    12a2:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
    12a4:	95 85       	ldd	r25, Z+13	; 0x0d
    12a6:	98 13       	cpse	r25, r24
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    12aa:	01 90       	ld	r0, Z+
    12ac:	f0 81       	ld	r31, Z
    12ae:	e0 2d       	mov	r30, r0
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    12b2:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    12b4:	83 83       	std	Z+3, r24	; 0x03
    12b6:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    12b8:	86 85       	ldd	r24, Z+14	; 0x0e
    12ba:	df 01       	movw	r26, r30
    12bc:	a8 0f       	add	r26, r24
    12be:	b1 1d       	adc	r27, r1
    12c0:	17 96       	adiw	r26, 0x07	; 7
    12c2:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
    12c4:	a0 81       	ld	r26, Z
    12c6:	b1 81       	ldd	r27, Z+1	; 0x01
    12c8:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    12ca:	86 85       	ldd	r24, Z+14	; 0x0e
    12cc:	8f 5f       	subi	r24, 0xFF	; 255
    12ce:	83 70       	andi	r24, 0x03	; 3
    12d0:	86 87       	std	Z+14, r24	; 0x0e
    12d2:	08 95       	ret

000012d4 <__subsf3>:
    12d4:	50 58       	subi	r21, 0x80	; 128

000012d6 <__addsf3>:
    12d6:	bb 27       	eor	r27, r27
    12d8:	aa 27       	eor	r26, r26
    12da:	0e d0       	rcall	.+28     	; 0x12f8 <__addsf3x>
    12dc:	4d c1       	rjmp	.+666    	; 0x1578 <__fp_round>
    12de:	3e d1       	rcall	.+636    	; 0x155c <__fp_pscA>
    12e0:	30 f0       	brcs	.+12     	; 0x12ee <__addsf3+0x18>
    12e2:	43 d1       	rcall	.+646    	; 0x156a <__fp_pscB>
    12e4:	20 f0       	brcs	.+8      	; 0x12ee <__addsf3+0x18>
    12e6:	31 f4       	brne	.+12     	; 0x12f4 <__addsf3+0x1e>
    12e8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ea:	11 f4       	brne	.+4      	; 0x12f0 <__addsf3+0x1a>
    12ec:	1e f4       	brtc	.+6      	; 0x12f4 <__addsf3+0x1e>
    12ee:	33 c1       	rjmp	.+614    	; 0x1556 <__fp_nan>
    12f0:	0e f4       	brtc	.+2      	; 0x12f4 <__addsf3+0x1e>
    12f2:	e0 95       	com	r30
    12f4:	e7 fb       	bst	r30, 7
    12f6:	29 c1       	rjmp	.+594    	; 0x154a <__fp_inf>

000012f8 <__addsf3x>:
    12f8:	e9 2f       	mov	r30, r25
    12fa:	4f d1       	rcall	.+670    	; 0x159a <__fp_split3>
    12fc:	80 f3       	brcs	.-32     	; 0x12de <__addsf3+0x8>
    12fe:	ba 17       	cp	r27, r26
    1300:	62 07       	cpc	r22, r18
    1302:	73 07       	cpc	r23, r19
    1304:	84 07       	cpc	r24, r20
    1306:	95 07       	cpc	r25, r21
    1308:	18 f0       	brcs	.+6      	; 0x1310 <__addsf3x+0x18>
    130a:	71 f4       	brne	.+28     	; 0x1328 <__addsf3x+0x30>
    130c:	9e f5       	brtc	.+102    	; 0x1374 <__addsf3x+0x7c>
    130e:	67 c1       	rjmp	.+718    	; 0x15de <__fp_zero>
    1310:	0e f4       	brtc	.+2      	; 0x1314 <__addsf3x+0x1c>
    1312:	e0 95       	com	r30
    1314:	0b 2e       	mov	r0, r27
    1316:	ba 2f       	mov	r27, r26
    1318:	a0 2d       	mov	r26, r0
    131a:	0b 01       	movw	r0, r22
    131c:	b9 01       	movw	r22, r18
    131e:	90 01       	movw	r18, r0
    1320:	0c 01       	movw	r0, r24
    1322:	ca 01       	movw	r24, r20
    1324:	a0 01       	movw	r20, r0
    1326:	11 24       	eor	r1, r1
    1328:	ff 27       	eor	r31, r31
    132a:	59 1b       	sub	r21, r25
    132c:	99 f0       	breq	.+38     	; 0x1354 <__addsf3x+0x5c>
    132e:	59 3f       	cpi	r21, 0xF9	; 249
    1330:	50 f4       	brcc	.+20     	; 0x1346 <__addsf3x+0x4e>
    1332:	50 3e       	cpi	r21, 0xE0	; 224
    1334:	68 f1       	brcs	.+90     	; 0x1390 <__addsf3x+0x98>
    1336:	1a 16       	cp	r1, r26
    1338:	f0 40       	sbci	r31, 0x00	; 0
    133a:	a2 2f       	mov	r26, r18
    133c:	23 2f       	mov	r18, r19
    133e:	34 2f       	mov	r19, r20
    1340:	44 27       	eor	r20, r20
    1342:	58 5f       	subi	r21, 0xF8	; 248
    1344:	f3 cf       	rjmp	.-26     	; 0x132c <__addsf3x+0x34>
    1346:	46 95       	lsr	r20
    1348:	37 95       	ror	r19
    134a:	27 95       	ror	r18
    134c:	a7 95       	ror	r26
    134e:	f0 40       	sbci	r31, 0x00	; 0
    1350:	53 95       	inc	r21
    1352:	c9 f7       	brne	.-14     	; 0x1346 <__addsf3x+0x4e>
    1354:	7e f4       	brtc	.+30     	; 0x1374 <__addsf3x+0x7c>
    1356:	1f 16       	cp	r1, r31
    1358:	ba 0b       	sbc	r27, r26
    135a:	62 0b       	sbc	r22, r18
    135c:	73 0b       	sbc	r23, r19
    135e:	84 0b       	sbc	r24, r20
    1360:	ba f0       	brmi	.+46     	; 0x1390 <__addsf3x+0x98>
    1362:	91 50       	subi	r25, 0x01	; 1
    1364:	a1 f0       	breq	.+40     	; 0x138e <__addsf3x+0x96>
    1366:	ff 0f       	add	r31, r31
    1368:	bb 1f       	adc	r27, r27
    136a:	66 1f       	adc	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	88 1f       	adc	r24, r24
    1370:	c2 f7       	brpl	.-16     	; 0x1362 <__addsf3x+0x6a>
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <__addsf3x+0x98>
    1374:	ba 0f       	add	r27, r26
    1376:	62 1f       	adc	r22, r18
    1378:	73 1f       	adc	r23, r19
    137a:	84 1f       	adc	r24, r20
    137c:	48 f4       	brcc	.+18     	; 0x1390 <__addsf3x+0x98>
    137e:	87 95       	ror	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	b7 95       	ror	r27
    1386:	f7 95       	ror	r31
    1388:	9e 3f       	cpi	r25, 0xFE	; 254
    138a:	08 f0       	brcs	.+2      	; 0x138e <__addsf3x+0x96>
    138c:	b3 cf       	rjmp	.-154    	; 0x12f4 <__addsf3+0x1e>
    138e:	93 95       	inc	r25
    1390:	88 0f       	add	r24, r24
    1392:	08 f0       	brcs	.+2      	; 0x1396 <__addsf3x+0x9e>
    1394:	99 27       	eor	r25, r25
    1396:	ee 0f       	add	r30, r30
    1398:	97 95       	ror	r25
    139a:	87 95       	ror	r24
    139c:	08 95       	ret

0000139e <__divsf3>:
    139e:	0c d0       	rcall	.+24     	; 0x13b8 <__divsf3x>
    13a0:	eb c0       	rjmp	.+470    	; 0x1578 <__fp_round>
    13a2:	e3 d0       	rcall	.+454    	; 0x156a <__fp_pscB>
    13a4:	40 f0       	brcs	.+16     	; 0x13b6 <__divsf3+0x18>
    13a6:	da d0       	rcall	.+436    	; 0x155c <__fp_pscA>
    13a8:	30 f0       	brcs	.+12     	; 0x13b6 <__divsf3+0x18>
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <__divsf3+0x16>
    13ac:	5f 3f       	cpi	r21, 0xFF	; 255
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <__divsf3+0x18>
    13b0:	cc c0       	rjmp	.+408    	; 0x154a <__fp_inf>
    13b2:	51 11       	cpse	r21, r1
    13b4:	15 c1       	rjmp	.+554    	; 0x15e0 <__fp_szero>
    13b6:	cf c0       	rjmp	.+414    	; 0x1556 <__fp_nan>

000013b8 <__divsf3x>:
    13b8:	f0 d0       	rcall	.+480    	; 0x159a <__fp_split3>
    13ba:	98 f3       	brcs	.-26     	; 0x13a2 <__divsf3+0x4>

000013bc <__divsf3_pse>:
    13bc:	99 23       	and	r25, r25
    13be:	c9 f3       	breq	.-14     	; 0x13b2 <__divsf3+0x14>
    13c0:	55 23       	and	r21, r21
    13c2:	b1 f3       	breq	.-20     	; 0x13b0 <__divsf3+0x12>
    13c4:	95 1b       	sub	r25, r21
    13c6:	55 0b       	sbc	r21, r21
    13c8:	bb 27       	eor	r27, r27
    13ca:	aa 27       	eor	r26, r26
    13cc:	62 17       	cp	r22, r18
    13ce:	73 07       	cpc	r23, r19
    13d0:	84 07       	cpc	r24, r20
    13d2:	38 f0       	brcs	.+14     	; 0x13e2 <__divsf3_pse+0x26>
    13d4:	9f 5f       	subi	r25, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	44 1f       	adc	r20, r20
    13de:	aa 1f       	adc	r26, r26
    13e0:	a9 f3       	breq	.-22     	; 0x13cc <__divsf3_pse+0x10>
    13e2:	33 d0       	rcall	.+102    	; 0x144a <__divsf3_pse+0x8e>
    13e4:	0e 2e       	mov	r0, r30
    13e6:	3a f0       	brmi	.+14     	; 0x13f6 <__divsf3_pse+0x3a>
    13e8:	e0 e8       	ldi	r30, 0x80	; 128
    13ea:	30 d0       	rcall	.+96     	; 0x144c <__divsf3_pse+0x90>
    13ec:	91 50       	subi	r25, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	e6 95       	lsr	r30
    13f2:	00 1c       	adc	r0, r0
    13f4:	ca f7       	brpl	.-14     	; 0x13e8 <__divsf3_pse+0x2c>
    13f6:	29 d0       	rcall	.+82     	; 0x144a <__divsf3_pse+0x8e>
    13f8:	fe 2f       	mov	r31, r30
    13fa:	27 d0       	rcall	.+78     	; 0x144a <__divsf3_pse+0x8e>
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	bb 1f       	adc	r27, r27
    1404:	26 17       	cp	r18, r22
    1406:	37 07       	cpc	r19, r23
    1408:	48 07       	cpc	r20, r24
    140a:	ab 07       	cpc	r26, r27
    140c:	b0 e8       	ldi	r27, 0x80	; 128
    140e:	09 f0       	breq	.+2      	; 0x1412 <__divsf3_pse+0x56>
    1410:	bb 0b       	sbc	r27, r27
    1412:	80 2d       	mov	r24, r0
    1414:	bf 01       	movw	r22, r30
    1416:	ff 27       	eor	r31, r31
    1418:	93 58       	subi	r25, 0x83	; 131
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	2a f0       	brmi	.+10     	; 0x1428 <__divsf3_pse+0x6c>
    141e:	9e 3f       	cpi	r25, 0xFE	; 254
    1420:	51 05       	cpc	r21, r1
    1422:	68 f0       	brcs	.+26     	; 0x143e <__divsf3_pse+0x82>
    1424:	92 c0       	rjmp	.+292    	; 0x154a <__fp_inf>
    1426:	dc c0       	rjmp	.+440    	; 0x15e0 <__fp_szero>
    1428:	5f 3f       	cpi	r21, 0xFF	; 255
    142a:	ec f3       	brlt	.-6      	; 0x1426 <__divsf3_pse+0x6a>
    142c:	98 3e       	cpi	r25, 0xE8	; 232
    142e:	dc f3       	brlt	.-10     	; 0x1426 <__divsf3_pse+0x6a>
    1430:	86 95       	lsr	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	b7 95       	ror	r27
    1438:	f7 95       	ror	r31
    143a:	9f 5f       	subi	r25, 0xFF	; 255
    143c:	c9 f7       	brne	.-14     	; 0x1430 <__divsf3_pse+0x74>
    143e:	88 0f       	add	r24, r24
    1440:	91 1d       	adc	r25, r1
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	97 f9       	bld	r25, 7
    1448:	08 95       	ret
    144a:	e1 e0       	ldi	r30, 0x01	; 1
    144c:	66 0f       	add	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	bb 1f       	adc	r27, r27
    1454:	62 17       	cp	r22, r18
    1456:	73 07       	cpc	r23, r19
    1458:	84 07       	cpc	r24, r20
    145a:	ba 07       	cpc	r27, r26
    145c:	20 f0       	brcs	.+8      	; 0x1466 <__divsf3_pse+0xaa>
    145e:	62 1b       	sub	r22, r18
    1460:	73 0b       	sbc	r23, r19
    1462:	84 0b       	sbc	r24, r20
    1464:	ba 0b       	sbc	r27, r26
    1466:	ee 1f       	adc	r30, r30
    1468:	88 f7       	brcc	.-30     	; 0x144c <__divsf3_pse+0x90>
    146a:	e0 95       	com	r30
    146c:	08 95       	ret

0000146e <__fixsfsi>:
    146e:	04 d0       	rcall	.+8      	; 0x1478 <__fixunssfsi>
    1470:	68 94       	set
    1472:	b1 11       	cpse	r27, r1
    1474:	b5 c0       	rjmp	.+362    	; 0x15e0 <__fp_szero>
    1476:	08 95       	ret

00001478 <__fixunssfsi>:
    1478:	98 d0       	rcall	.+304    	; 0x15aa <__fp_splitA>
    147a:	88 f0       	brcs	.+34     	; 0x149e <__fixunssfsi+0x26>
    147c:	9f 57       	subi	r25, 0x7F	; 127
    147e:	90 f0       	brcs	.+36     	; 0x14a4 <__fixunssfsi+0x2c>
    1480:	b9 2f       	mov	r27, r25
    1482:	99 27       	eor	r25, r25
    1484:	b7 51       	subi	r27, 0x17	; 23
    1486:	a0 f0       	brcs	.+40     	; 0x14b0 <__fixunssfsi+0x38>
    1488:	d1 f0       	breq	.+52     	; 0x14be <__fixunssfsi+0x46>
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	1a f0       	brmi	.+6      	; 0x149a <__fixunssfsi+0x22>
    1494:	ba 95       	dec	r27
    1496:	c9 f7       	brne	.-14     	; 0x148a <__fixunssfsi+0x12>
    1498:	12 c0       	rjmp	.+36     	; 0x14be <__fixunssfsi+0x46>
    149a:	b1 30       	cpi	r27, 0x01	; 1
    149c:	81 f0       	breq	.+32     	; 0x14be <__fixunssfsi+0x46>
    149e:	9f d0       	rcall	.+318    	; 0x15de <__fp_zero>
    14a0:	b1 e0       	ldi	r27, 0x01	; 1
    14a2:	08 95       	ret
    14a4:	9c c0       	rjmp	.+312    	; 0x15de <__fp_zero>
    14a6:	67 2f       	mov	r22, r23
    14a8:	78 2f       	mov	r23, r24
    14aa:	88 27       	eor	r24, r24
    14ac:	b8 5f       	subi	r27, 0xF8	; 248
    14ae:	39 f0       	breq	.+14     	; 0x14be <__fixunssfsi+0x46>
    14b0:	b9 3f       	cpi	r27, 0xF9	; 249
    14b2:	cc f3       	brlt	.-14     	; 0x14a6 <__fixunssfsi+0x2e>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b3 95       	inc	r27
    14bc:	d9 f7       	brne	.-10     	; 0x14b4 <__fixunssfsi+0x3c>
    14be:	3e f4       	brtc	.+14     	; 0x14ce <__fixunssfsi+0x56>
    14c0:	90 95       	com	r25
    14c2:	80 95       	com	r24
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	8f 4f       	sbci	r24, 0xFF	; 255
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	08 95       	ret

000014d0 <__floatunsisf>:
    14d0:	e8 94       	clt
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <__floatsisf+0x12>

000014d4 <__floatsisf>:
    14d4:	97 fb       	bst	r25, 7
    14d6:	3e f4       	brtc	.+14     	; 0x14e6 <__floatsisf+0x12>
    14d8:	90 95       	com	r25
    14da:	80 95       	com	r24
    14dc:	70 95       	com	r23
    14de:	61 95       	neg	r22
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	99 23       	and	r25, r25
    14e8:	a9 f0       	breq	.+42     	; 0x1514 <__floatsisf+0x40>
    14ea:	f9 2f       	mov	r31, r25
    14ec:	96 e9       	ldi	r25, 0x96	; 150
    14ee:	bb 27       	eor	r27, r27
    14f0:	93 95       	inc	r25
    14f2:	f6 95       	lsr	r31
    14f4:	87 95       	ror	r24
    14f6:	77 95       	ror	r23
    14f8:	67 95       	ror	r22
    14fa:	b7 95       	ror	r27
    14fc:	f1 11       	cpse	r31, r1
    14fe:	f8 cf       	rjmp	.-16     	; 0x14f0 <__floatsisf+0x1c>
    1500:	fa f4       	brpl	.+62     	; 0x1540 <__floatsisf+0x6c>
    1502:	bb 0f       	add	r27, r27
    1504:	11 f4       	brne	.+4      	; 0x150a <__floatsisf+0x36>
    1506:	60 ff       	sbrs	r22, 0
    1508:	1b c0       	rjmp	.+54     	; 0x1540 <__floatsisf+0x6c>
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <__floatsisf+0x6c>
    1514:	88 23       	and	r24, r24
    1516:	11 f0       	breq	.+4      	; 0x151c <__floatsisf+0x48>
    1518:	96 e9       	ldi	r25, 0x96	; 150
    151a:	11 c0       	rjmp	.+34     	; 0x153e <__floatsisf+0x6a>
    151c:	77 23       	and	r23, r23
    151e:	21 f0       	breq	.+8      	; 0x1528 <__floatsisf+0x54>
    1520:	9e e8       	ldi	r25, 0x8E	; 142
    1522:	87 2f       	mov	r24, r23
    1524:	76 2f       	mov	r23, r22
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <__floatsisf+0x5e>
    1528:	66 23       	and	r22, r22
    152a:	71 f0       	breq	.+28     	; 0x1548 <__floatsisf+0x74>
    152c:	96 e8       	ldi	r25, 0x86	; 134
    152e:	86 2f       	mov	r24, r22
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	2a f0       	brmi	.+10     	; 0x1540 <__floatsisf+0x6c>
    1536:	9a 95       	dec	r25
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	da f7       	brpl	.-10     	; 0x1536 <__floatsisf+0x62>
    1540:	88 0f       	add	r24, r24
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	97 f9       	bld	r25, 7
    1548:	08 95       	ret

0000154a <__fp_inf>:
    154a:	97 f9       	bld	r25, 7
    154c:	9f 67       	ori	r25, 0x7F	; 127
    154e:	80 e8       	ldi	r24, 0x80	; 128
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	08 95       	ret

00001556 <__fp_nan>:
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	80 ec       	ldi	r24, 0xC0	; 192
    155a:	08 95       	ret

0000155c <__fp_pscA>:
    155c:	00 24       	eor	r0, r0
    155e:	0a 94       	dec	r0
    1560:	16 16       	cp	r1, r22
    1562:	17 06       	cpc	r1, r23
    1564:	18 06       	cpc	r1, r24
    1566:	09 06       	cpc	r0, r25
    1568:	08 95       	ret

0000156a <__fp_pscB>:
    156a:	00 24       	eor	r0, r0
    156c:	0a 94       	dec	r0
    156e:	12 16       	cp	r1, r18
    1570:	13 06       	cpc	r1, r19
    1572:	14 06       	cpc	r1, r20
    1574:	05 06       	cpc	r0, r21
    1576:	08 95       	ret

00001578 <__fp_round>:
    1578:	09 2e       	mov	r0, r25
    157a:	03 94       	inc	r0
    157c:	00 0c       	add	r0, r0
    157e:	11 f4       	brne	.+4      	; 0x1584 <__fp_round+0xc>
    1580:	88 23       	and	r24, r24
    1582:	52 f0       	brmi	.+20     	; 0x1598 <__fp_round+0x20>
    1584:	bb 0f       	add	r27, r27
    1586:	40 f4       	brcc	.+16     	; 0x1598 <__fp_round+0x20>
    1588:	bf 2b       	or	r27, r31
    158a:	11 f4       	brne	.+4      	; 0x1590 <__fp_round+0x18>
    158c:	60 ff       	sbrs	r22, 0
    158e:	04 c0       	rjmp	.+8      	; 0x1598 <__fp_round+0x20>
    1590:	6f 5f       	subi	r22, 0xFF	; 255
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	08 95       	ret

0000159a <__fp_split3>:
    159a:	57 fd       	sbrc	r21, 7
    159c:	90 58       	subi	r25, 0x80	; 128
    159e:	44 0f       	add	r20, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	59 f0       	breq	.+22     	; 0x15ba <__fp_splitA+0x10>
    15a4:	5f 3f       	cpi	r21, 0xFF	; 255
    15a6:	71 f0       	breq	.+28     	; 0x15c4 <__fp_splitA+0x1a>
    15a8:	47 95       	ror	r20

000015aa <__fp_splitA>:
    15aa:	88 0f       	add	r24, r24
    15ac:	97 fb       	bst	r25, 7
    15ae:	99 1f       	adc	r25, r25
    15b0:	61 f0       	breq	.+24     	; 0x15ca <__fp_splitA+0x20>
    15b2:	9f 3f       	cpi	r25, 0xFF	; 255
    15b4:	79 f0       	breq	.+30     	; 0x15d4 <__fp_splitA+0x2a>
    15b6:	87 95       	ror	r24
    15b8:	08 95       	ret
    15ba:	12 16       	cp	r1, r18
    15bc:	13 06       	cpc	r1, r19
    15be:	14 06       	cpc	r1, r20
    15c0:	55 1f       	adc	r21, r21
    15c2:	f2 cf       	rjmp	.-28     	; 0x15a8 <__fp_split3+0xe>
    15c4:	46 95       	lsr	r20
    15c6:	f1 df       	rcall	.-30     	; 0x15aa <__fp_splitA>
    15c8:	08 c0       	rjmp	.+16     	; 0x15da <__fp_splitA+0x30>
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	18 06       	cpc	r1, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	f1 cf       	rjmp	.-30     	; 0x15b6 <__fp_splitA+0xc>
    15d4:	86 95       	lsr	r24
    15d6:	71 05       	cpc	r23, r1
    15d8:	61 05       	cpc	r22, r1
    15da:	08 94       	sec
    15dc:	08 95       	ret

000015de <__fp_zero>:
    15de:	e8 94       	clt

000015e0 <__fp_szero>:
    15e0:	bb 27       	eor	r27, r27
    15e2:	66 27       	eor	r22, r22
    15e4:	77 27       	eor	r23, r23
    15e6:	cb 01       	movw	r24, r22
    15e8:	97 f9       	bld	r25, 7
    15ea:	08 95       	ret

000015ec <__gesf2>:
    15ec:	66 d0       	rcall	.+204    	; 0x16ba <__fp_cmp>
    15ee:	08 f4       	brcc	.+2      	; 0x15f2 <__gesf2+0x6>
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	08 95       	ret

000015f4 <__mulsf3>:
    15f4:	0b d0       	rcall	.+22     	; 0x160c <__mulsf3x>
    15f6:	c0 cf       	rjmp	.-128    	; 0x1578 <__fp_round>
    15f8:	b1 df       	rcall	.-158    	; 0x155c <__fp_pscA>
    15fa:	28 f0       	brcs	.+10     	; 0x1606 <__mulsf3+0x12>
    15fc:	b6 df       	rcall	.-148    	; 0x156a <__fp_pscB>
    15fe:	18 f0       	brcs	.+6      	; 0x1606 <__mulsf3+0x12>
    1600:	95 23       	and	r25, r21
    1602:	09 f0       	breq	.+2      	; 0x1606 <__mulsf3+0x12>
    1604:	a2 cf       	rjmp	.-188    	; 0x154a <__fp_inf>
    1606:	a7 cf       	rjmp	.-178    	; 0x1556 <__fp_nan>
    1608:	11 24       	eor	r1, r1
    160a:	ea cf       	rjmp	.-44     	; 0x15e0 <__fp_szero>

0000160c <__mulsf3x>:
    160c:	c6 df       	rcall	.-116    	; 0x159a <__fp_split3>
    160e:	a0 f3       	brcs	.-24     	; 0x15f8 <__mulsf3+0x4>

00001610 <__mulsf3_pse>:
    1610:	95 9f       	mul	r25, r21
    1612:	d1 f3       	breq	.-12     	; 0x1608 <__mulsf3+0x14>
    1614:	95 0f       	add	r25, r21
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	55 1f       	adc	r21, r21
    161a:	62 9f       	mul	r22, r18
    161c:	f0 01       	movw	r30, r0
    161e:	72 9f       	mul	r23, r18
    1620:	bb 27       	eor	r27, r27
    1622:	f0 0d       	add	r31, r0
    1624:	b1 1d       	adc	r27, r1
    1626:	63 9f       	mul	r22, r19
    1628:	aa 27       	eor	r26, r26
    162a:	f0 0d       	add	r31, r0
    162c:	b1 1d       	adc	r27, r1
    162e:	aa 1f       	adc	r26, r26
    1630:	64 9f       	mul	r22, r20
    1632:	66 27       	eor	r22, r22
    1634:	b0 0d       	add	r27, r0
    1636:	a1 1d       	adc	r26, r1
    1638:	66 1f       	adc	r22, r22
    163a:	82 9f       	mul	r24, r18
    163c:	22 27       	eor	r18, r18
    163e:	b0 0d       	add	r27, r0
    1640:	a1 1d       	adc	r26, r1
    1642:	62 1f       	adc	r22, r18
    1644:	73 9f       	mul	r23, r19
    1646:	b0 0d       	add	r27, r0
    1648:	a1 1d       	adc	r26, r1
    164a:	62 1f       	adc	r22, r18
    164c:	83 9f       	mul	r24, r19
    164e:	a0 0d       	add	r26, r0
    1650:	61 1d       	adc	r22, r1
    1652:	22 1f       	adc	r18, r18
    1654:	74 9f       	mul	r23, r20
    1656:	33 27       	eor	r19, r19
    1658:	a0 0d       	add	r26, r0
    165a:	61 1d       	adc	r22, r1
    165c:	23 1f       	adc	r18, r19
    165e:	84 9f       	mul	r24, r20
    1660:	60 0d       	add	r22, r0
    1662:	21 1d       	adc	r18, r1
    1664:	82 2f       	mov	r24, r18
    1666:	76 2f       	mov	r23, r22
    1668:	6a 2f       	mov	r22, r26
    166a:	11 24       	eor	r1, r1
    166c:	9f 57       	subi	r25, 0x7F	; 127
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	8a f0       	brmi	.+34     	; 0x1694 <__mulsf3_pse+0x84>
    1672:	e1 f0       	breq	.+56     	; 0x16ac <__mulsf3_pse+0x9c>
    1674:	88 23       	and	r24, r24
    1676:	4a f0       	brmi	.+18     	; 0x168a <__mulsf3_pse+0x7a>
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	bb 1f       	adc	r27, r27
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	a9 f7       	brne	.-22     	; 0x1674 <__mulsf3_pse+0x64>
    168a:	9e 3f       	cpi	r25, 0xFE	; 254
    168c:	51 05       	cpc	r21, r1
    168e:	70 f0       	brcs	.+28     	; 0x16ac <__mulsf3_pse+0x9c>
    1690:	5c cf       	rjmp	.-328    	; 0x154a <__fp_inf>
    1692:	a6 cf       	rjmp	.-180    	; 0x15e0 <__fp_szero>
    1694:	5f 3f       	cpi	r21, 0xFF	; 255
    1696:	ec f3       	brlt	.-6      	; 0x1692 <__mulsf3_pse+0x82>
    1698:	98 3e       	cpi	r25, 0xE8	; 232
    169a:	dc f3       	brlt	.-10     	; 0x1692 <__mulsf3_pse+0x82>
    169c:	86 95       	lsr	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	f7 95       	ror	r31
    16a6:	e7 95       	ror	r30
    16a8:	9f 5f       	subi	r25, 0xFF	; 255
    16aa:	c1 f7       	brne	.-16     	; 0x169c <__mulsf3_pse+0x8c>
    16ac:	fe 2b       	or	r31, r30
    16ae:	88 0f       	add	r24, r24
    16b0:	91 1d       	adc	r25, r1
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret

000016ba <__fp_cmp>:
    16ba:	99 0f       	add	r25, r25
    16bc:	00 08       	sbc	r0, r0
    16be:	55 0f       	add	r21, r21
    16c0:	aa 0b       	sbc	r26, r26
    16c2:	e0 e8       	ldi	r30, 0x80	; 128
    16c4:	fe ef       	ldi	r31, 0xFE	; 254
    16c6:	16 16       	cp	r1, r22
    16c8:	17 06       	cpc	r1, r23
    16ca:	e8 07       	cpc	r30, r24
    16cc:	f9 07       	cpc	r31, r25
    16ce:	c0 f0       	brcs	.+48     	; 0x1700 <__fp_cmp+0x46>
    16d0:	12 16       	cp	r1, r18
    16d2:	13 06       	cpc	r1, r19
    16d4:	e4 07       	cpc	r30, r20
    16d6:	f5 07       	cpc	r31, r21
    16d8:	98 f0       	brcs	.+38     	; 0x1700 <__fp_cmp+0x46>
    16da:	62 1b       	sub	r22, r18
    16dc:	73 0b       	sbc	r23, r19
    16de:	84 0b       	sbc	r24, r20
    16e0:	95 0b       	sbc	r25, r21
    16e2:	39 f4       	brne	.+14     	; 0x16f2 <__fp_cmp+0x38>
    16e4:	0a 26       	eor	r0, r26
    16e6:	61 f0       	breq	.+24     	; 0x1700 <__fp_cmp+0x46>
    16e8:	23 2b       	or	r18, r19
    16ea:	24 2b       	or	r18, r20
    16ec:	25 2b       	or	r18, r21
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <__fp_cmp+0x3e>
    16f0:	08 95       	ret
    16f2:	0a 26       	eor	r0, r26
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <__fp_cmp+0x3e>
    16f6:	a1 40       	sbci	r26, 0x01	; 1
    16f8:	a6 95       	lsr	r26
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	81 1d       	adc	r24, r1
    16fe:	81 1d       	adc	r24, r1
    1700:	08 95       	ret

00001702 <__divmodhi4>:
    1702:	97 fb       	bst	r25, 7
    1704:	07 2e       	mov	r0, r23
    1706:	16 f4       	brtc	.+4      	; 0x170c <__divmodhi4+0xa>
    1708:	00 94       	com	r0
    170a:	07 d0       	rcall	.+14     	; 0x171a <__divmodhi4_neg1>
    170c:	77 fd       	sbrc	r23, 7
    170e:	09 d0       	rcall	.+18     	; 0x1722 <__divmodhi4_neg2>
    1710:	0e 94 95 0b 	call	0x172a	; 0x172a <__udivmodhi4>
    1714:	07 fc       	sbrc	r0, 7
    1716:	05 d0       	rcall	.+10     	; 0x1722 <__divmodhi4_neg2>
    1718:	3e f4       	brtc	.+14     	; 0x1728 <__divmodhi4_exit>

0000171a <__divmodhi4_neg1>:
    171a:	90 95       	com	r25
    171c:	81 95       	neg	r24
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	08 95       	ret

00001722 <__divmodhi4_neg2>:
    1722:	70 95       	com	r23
    1724:	61 95       	neg	r22
    1726:	7f 4f       	sbci	r23, 0xFF	; 255

00001728 <__divmodhi4_exit>:
    1728:	08 95       	ret

0000172a <__udivmodhi4>:
    172a:	aa 1b       	sub	r26, r26
    172c:	bb 1b       	sub	r27, r27
    172e:	51 e1       	ldi	r21, 0x11	; 17
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <__udivmodhi4_ep>

00001732 <__udivmodhi4_loop>:
    1732:	aa 1f       	adc	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	a6 17       	cp	r26, r22
    1738:	b7 07       	cpc	r27, r23
    173a:	10 f0       	brcs	.+4      	; 0x1740 <__udivmodhi4_ep>
    173c:	a6 1b       	sub	r26, r22
    173e:	b7 0b       	sbc	r27, r23

00001740 <__udivmodhi4_ep>:
    1740:	88 1f       	adc	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	5a 95       	dec	r21
    1746:	a9 f7       	brne	.-22     	; 0x1732 <__udivmodhi4_loop>
    1748:	80 95       	com	r24
    174a:	90 95       	com	r25
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	08 95       	ret

00001752 <__tablejump2__>:
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31

00001756 <__tablejump__>:
    1756:	05 90       	lpm	r0, Z+
    1758:	f4 91       	lpm	r31, Z
    175a:	e0 2d       	mov	r30, r0
    175c:	09 94       	ijmp

0000175e <__do_global_dtors>:
    175e:	11 e0       	ldi	r17, 0x01	; 1
    1760:	ce e6       	ldi	r28, 0x6E	; 110
    1762:	d1 e0       	ldi	r29, 0x01	; 1
    1764:	04 c0       	rjmp	.+8      	; 0x176e <__do_global_dtors+0x10>
    1766:	fe 01       	movw	r30, r28
    1768:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__tablejump__>
    176c:	22 96       	adiw	r28, 0x02	; 2
    176e:	c0 37       	cpi	r28, 0x70	; 112
    1770:	d1 07       	cpc	r29, r17
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__do_global_dtors+0x8>
    1774:	f8 94       	cli

00001776 <__stop_program>:
    1776:	ff cf       	rjmp	.-2      	; 0x1776 <__stop_program>
