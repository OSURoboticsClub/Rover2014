
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00001170  00001204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00802000  00802000  00001204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003926  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000115b  00000000  00000000  00004d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fbe  00000000  00000000  00005ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000047c  00000000  00000000  00006e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016c2  00000000  00000000  000072f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001640  00000000  00000000  000089ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00009ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      6c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      70:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      74:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      78:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      7c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      80:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      84:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      88:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      8c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      90:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      94:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      98:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      9c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      a0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      a4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      a8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      ac:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      b0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      b4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      b8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      bc:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      c0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      c4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      c8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      cc:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      d0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      d4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      d8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      dc:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      e0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      e4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      e8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      ec:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      f0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      f4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      f8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      fc:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     100:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     104:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     108:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     10c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     110:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     114:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     118:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     11c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     120:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     124:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     128:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     12c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     130:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     134:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     138:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     13c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     140:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     144:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     148:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     14c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     150:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     154:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     158:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     15c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     160:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     164:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
     168:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	8b 04       	cpc	r8, r11

0000016e <__ctors_end>:
     16e:	9c 04       	cpc	r9, r12

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_clear_bss>:
     17c:	20 e2       	ldi	r18, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	af 34       	cpi	r26, 0x4F	; 79
     188:	b2 07       	cpc	r27, r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>

0000018c <__do_global_ctors>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	ce e6       	ldi	r28, 0x6E	; 110
     190:	d1 e0       	ldi	r29, 0x01	; 1
     192:	04 c0       	rjmp	.+8      	; 0x19c <__do_global_ctors+0x10>
     194:	22 97       	sbiw	r28, 0x02	; 2
     196:	fe 01       	movw	r30, r28
     198:	0e 94 a7 08 	call	0x114e	; 0x114e <__tablejump__>
     19c:	cc 36       	cpi	r28, 0x6C	; 108
     19e:	d1 07       	cpc	r29, r17
     1a0:	c9 f7       	brne	.-14     	; 0x194 <__do_global_ctors+0x8>
     1a2:	0e 94 c7 03 	call	0x78e	; 0x78e <main>
     1a6:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__do_global_dtors>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1ae:	aa ec       	ldi	r26, 0xCA	; 202
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	22 e0       	ldi	r18, 0x02	; 2
     1b4:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1b6:	fc 01       	movw	r30, r24
     1b8:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1ba:	1c 92       	st	X, r1
	return Result;
}
     1bc:	08 95       	ret

000001be <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	18 2f       	mov	r17, r24
     1c8:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1ca:	80 91 00 02 	lds	r24, 0x0200
     1ce:	80 fd       	sbrc	r24, 0
     1d0:	1b c0       	rjmp	.+54     	; 0x208 <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1d2:	c0 e0       	ldi	r28, 0x00	; 0
     1d4:	d2 e0       	ldi	r29, 0x02	; 2
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1da:	84 e0       	ldi	r24, 0x04	; 4
     1dc:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1de:	80 e1       	ldi	r24, 0x10	; 16
     1e0:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1e2:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1e8:	80 e2       	ldi	r24, 0x20	; 32
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z17ReadSignatureBytej>
     1f0:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     1f2:	81 e2       	ldi	r24, 0x21	; 33
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z17ReadSignatureBytej>
     1fa:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	8f e7       	ldi	r24, 0x7F	; 127
     1fe:	9c e0       	ldi	r25, 0x0C	; 12
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <_Z7ReadADChh+0x42>
     204:	00 c0       	rjmp	.+0      	; 0x206 <_Z7ReadADChh+0x48>
     206:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     208:	e0 e0       	ldi	r30, 0x00	; 0
     20a:	f2 e0       	ldi	r31, 0x02	; 2
     20c:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     20e:	11 0f       	add	r17, r17
     210:	11 0f       	add	r17, r17
     212:	11 0f       	add	r17, r17
     214:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     216:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     218:	80 a1       	ldd	r24, Z+32	; 0x20
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     21e:	86 81       	ldd	r24, Z+6	; 0x06
     220:	88 23       	and	r24, r24
     222:	e9 f3       	breq	.-6      	; 0x21e <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     224:	e0 e0       	ldi	r30, 0x00	; 0
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	86 81       	ldd	r24, Z+6	; 0x06
     22a:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22c:	80 a1       	ldd	r24, Z+32	; 0x20
     22e:	80 68       	ori	r24, 0x80	; 128
     230:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     232:	86 81       	ldd	r24, Z+6	; 0x06
     234:	88 23       	and	r24, r24
     236:	e9 f3       	breq	.-6      	; 0x232 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     238:	e0 e0       	ldi	r30, 0x00	; 0
     23a:	f2 e0       	ldi	r31, 0x02	; 2
     23c:	86 81       	ldd	r24, Z+6	; 0x06
     23e:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     240:	80 89       	ldd	r24, Z+16	; 0x10
     242:	91 89       	ldd	r25, Z+17	; 0x11
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <_Z23SetXMEGA32MhzCalibratedv>:
#define GRIP 0
#define RELEASE 1


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     24e:	88 ed       	ldi	r24, 0xD8	; 216
     250:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     258:	e0 e5       	ldi	r30, 0x50	; 80
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	81 81       	ldd	r24, Z+1	; 0x01
     25e:	81 ff       	sbrs	r24, 1
     260:	fd cf       	rjmp	.-6      	; 0x25c <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     262:	88 ed       	ldi	r24, 0xD8	; 216
     264:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     26c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     26e:	e0 e5       	ldi	r30, 0x50	; 80
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	84 60       	ori	r24, 0x04	; 4
     276:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     278:	81 81       	ldd	r24, Z+1	; 0x01
     27a:	82 ff       	sbrs	r24, 2
     27c:	fd cf       	rjmp	.-6      	; 0x278 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     27e:	e0 e5       	ldi	r30, 0x50	; 80
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	86 81       	ldd	r24, Z+6	; 0x06
     284:	8d 7f       	andi	r24, 0xFD	; 253
     286:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     288:	e0 e6       	ldi	r30, 0x60	; 96
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	80 83       	st	Z, r24
     292:	08 95       	ret

00000294 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     294:	e0 e4       	ldi	r30, 0x40	; 64
     296:	f6 e0       	ldi	r31, 0x06	; 6
     298:	88 e0       	ldi	r24, 0x08	; 8
     29a:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	60 ea       	ldi	r22, 0xA0	; 160
     2a4:	78 e0       	ldi	r23, 0x08	; 8
     2a6:	80 e4       	ldi	r24, 0x40	; 64
     2a8:	90 e2       	ldi	r25, 0x20	; 32
     2aa:	0e 94 5d 06 	call	0xcba	; 0xcba <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     2ae:	e0 91 40 20 	lds	r30, 0x2040
     2b2:	f0 91 41 20 	lds	r31, 0x2041
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     2ba:	83 81       	ldd	r24, Z+3	; 0x03
     2bc:	8f 7c       	andi	r24, 0xCF	; 207
     2be:	80 61       	ori	r24, 0x10	; 16
     2c0:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     2c2:	a0 ea       	ldi	r26, 0xA0	; 160
     2c4:	b8 e0       	ldi	r27, 0x08	; 8
     2c6:	8f ec       	ldi	r24, 0xCF	; 207
     2c8:	16 96       	adiw	r26, 0x06	; 6
     2ca:	8c 93       	st	X, r24
     2cc:	16 97       	sbiw	r26, 0x06	; 6
     2ce:	17 96       	adiw	r26, 0x07	; 7
     2d0:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     2d2:	84 81       	ldd	r24, Z+4	; 0x04
     2d4:	80 61       	ori	r24, 0x10	; 16
     2d6:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     2d8:	84 81       	ldd	r24, Z+4	; 0x04
     2da:	88 60       	ori	r24, 0x08	; 8
     2dc:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     2de:	e0 ea       	ldi	r30, 0xA0	; 160
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	81 60       	ori	r24, 0x01	; 1
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	08 95       	ret

000002ea <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     2ee:	0e 94 27 01 	call	0x24e	; 0x24e <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     2f2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z12SetupPCCommsv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     2f6:	80 ee       	ldi	r24, 0xE0	; 224
     2f8:	e0 e4       	ldi	r30, 0x40	; 64
     2fa:	f6 e0       	ldi	r31, 0x06	; 6
     2fc:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     2fe:	e0 e6       	ldi	r30, 0x60	; 96
     300:	f6 e0       	ldi	r31, 0x06	; 6
     302:	9f ef       	ldi	r25, 0xFF	; 255
     304:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b6 e0       	ldi	r27, 0x06	; 6
     30a:	11 96       	adiw	r26, 0x01	; 1
     30c:	8c 93       	st	X, r24
     30e:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     310:	c0 e2       	ldi	r28, 0x20	; 32
     312:	d6 e0       	ldi	r29, 0x06	; 6
     314:	87 e0       	ldi	r24, 0x07	; 7
     316:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     318:	84 e0       	ldi	r24, 0x04	; 4
     31a:	12 96       	adiw	r26, 0x02	; 2
     31c:	8c 93       	st	X, r24
     31e:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     320:	98 e0       	ldi	r25, 0x08	; 8
     322:	12 96       	adiw	r26, 0x02	; 2
     324:	9c 93       	st	X, r25
     326:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit	
     328:	9a 83       	std	Y+2, r25	; 0x02
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_DISABLE();
     32a:	20 e4       	ldi	r18, 0x40	; 64
     32c:	25 83       	std	Z+5, r18	; 0x05
	
	//Setup Microstepping
	MD1_M0_CLR();
     32e:	90 e2       	ldi	r25, 0x20	; 32
     330:	16 96       	adiw	r26, 0x06	; 6
     332:	9c 93       	st	X, r25
     334:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     336:	16 96       	adiw	r26, 0x06	; 6
     338:	2c 93       	st	X, r18
     33a:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_CLR();
     33c:	20 e8       	ldi	r18, 0x80	; 128
     33e:	16 96       	adiw	r26, 0x06	; 6
     340:	2c 93       	st	X, r18
	
	MD1_DIR_CLR();
     342:	20 e1       	ldi	r18, 0x10	; 16
     344:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     346:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     348:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_CLR();
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	9e 83       	std	Y+6, r25	; 0x06
	MD2_M2_CLR();
     352:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     354:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     356:	96 83       	std	Z+6, r25	; 0x06
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	8c 01       	movw	r16, r24
     36c:	c7 e0       	ldi	r28, 0x07	; 7
     36e:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     370:	e1 2c       	mov	r14, r1
     372:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     374:	01 15       	cp	r16, r1
     376:	11 05       	cpc	r17, r1
     378:	39 f4       	brne	.+14     	; 0x388 <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 df 00 	call	0x1be	; 0x1be <_Z7ReadADChh>
     382:	e8 0e       	add	r14, r24
     384:	f9 1e       	adc	r15, r25
     386:	09 c0       	rjmp	.+18     	; 0x39a <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     388:	01 30       	cpi	r16, 0x01	; 1
     38a:	11 05       	cpc	r17, r1
     38c:	31 f4       	brne	.+12     	; 0x39a <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 df 00 	call	0x1be	; 0x1be <_Z7ReadADChh>
     396:	e8 0e       	add	r14, r24
     398:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39a:	8f e3       	ldi	r24, 0x3F	; 63
     39c:	9f e1       	ldi	r25, 0x1F	; 31
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <_Z9smoothADCi+0x40>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <_Z9smoothADCi+0x46>
     3a4:	00 00       	nop
     3a6:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     3a8:	20 97       	sbiw	r28, 0x00	; 0
     3aa:	21 f7       	brne	.-56     	; 0x374 <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     3ac:	c7 01       	movw	r24, r14
     3ae:	67 e0       	ldi	r22, 0x07	; 7
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__divmodhi4>
     3b6:	cb 01       	movw	r24, r22
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	08 95       	ret

000003c6 <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     3ce:	20 91 3c 20 	lds	r18, 0x203C
     3d2:	30 91 3d 20 	lds	r19, 0x203D
     3d6:	40 91 3e 20 	lds	r20, 0x203E
     3da:	50 91 3f 20 	lds	r21, 0x203F
     3de:	60 91 38 20 	lds	r22, 0x2038
     3e2:	70 91 39 20 	lds	r23, 0x2039
     3e6:	80 91 3a 20 	lds	r24, 0x203A
     3ea:	90 91 3b 20 	lds	r25, 0x203B
     3ee:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     400:	18 16       	cp	r1, r24
     402:	24 f0       	brlt	.+8      	; 0x40c <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     404:	f7 fa       	bst	r15, 7
     406:	f0 94       	com	r15
     408:	f7 f8       	bld	r15, 7
     40a:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     40c:	a7 01       	movw	r20, r14
     40e:	96 01       	movw	r18, r12
     410:	60 91 2c 20 	lds	r22, 0x202C
     414:	70 91 2d 20 	lds	r23, 0x202D
     418:	80 91 2e 20 	lds	r24, 0x202E
     41c:	90 91 2f 20 	lds	r25, 0x202F
     420:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     424:	18 16       	cp	r1, r24
     426:	44 f4       	brge	.+16     	; 0x438 <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     428:	ea e2       	ldi	r30, 0x2A	; 42
     42a:	f0 e2       	ldi	r31, 0x20	; 32
     42c:	80 81       	ld	r24, Z
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	80 83       	st	Z, r24
     434:	91 83       	std	Z+1, r25	; 0x01
     436:	04 c0       	rjmp	.+8      	; 0x440 <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     438:	10 92 2a 20 	sts	0x202A, r1
     43c:	10 92 2b 20 	sts	0x202B, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     440:	20 91 24 20 	lds	r18, 0x2024
     444:	30 91 25 20 	lds	r19, 0x2025
     448:	40 91 26 20 	lds	r20, 0x2026
     44c:	50 91 27 20 	lds	r21, 0x2027
     450:	60 91 20 20 	lds	r22, 0x2020
     454:	70 91 21 20 	lds	r23, 0x2021
     458:	80 91 22 20 	lds	r24, 0x2022
     45c:	90 91 23 20 	lds	r25, 0x2023
     460:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     464:	6b 01       	movw	r12, r22
     466:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	a9 01       	movw	r20, r18
     46e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     472:	18 16       	cp	r1, r24
     474:	24 f0       	brlt	.+8      	; 0x47e <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     476:	f7 fa       	bst	r15, 7
     478:	f0 94       	com	r15
     47a:	f7 f8       	bld	r15, 7
     47c:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     47e:	a7 01       	movw	r20, r14
     480:	96 01       	movw	r18, r12
     482:	60 91 14 20 	lds	r22, 0x2014
     486:	70 91 15 20 	lds	r23, 0x2015
     48a:	80 91 16 20 	lds	r24, 0x2016
     48e:	90 91 17 20 	lds	r25, 0x2017
     492:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     496:	18 16       	cp	r1, r24
     498:	44 f4       	brge	.+16     	; 0x4aa <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     49a:	e2 e1       	ldi	r30, 0x12	; 18
     49c:	f0 e2       	ldi	r31, 0x20	; 32
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	80 83       	st	Z, r24
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     4aa:	10 92 12 20 	sts	0x2012, r1
     4ae:	10 92 13 20 	sts	0x2013, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     4b2:	20 91 12 20 	lds	r18, 0x2012
     4b6:	30 91 13 20 	lds	r19, 0x2013
     4ba:	80 91 10 20 	lds	r24, 0x2010
     4be:	90 91 11 20 	lds	r25, 0x2011
     4c2:	28 17       	cp	r18, r24
     4c4:	39 07       	cpc	r19, r25
     4c6:	24 f0       	brlt	.+8      	; 0x4d0 <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     4c8:	80 e1       	ldi	r24, 0x10	; 16
     4ca:	90 e2       	ldi	r25, 0x20	; 32
     4cc:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     4d0:	20 91 2a 20 	lds	r18, 0x202A
     4d4:	30 91 2b 20 	lds	r19, 0x202B
     4d8:	80 91 10 20 	lds	r24, 0x2010
     4dc:	90 91 11 20 	lds	r25, 0x2011
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	24 f0       	brlt	.+8      	; 0x4ee <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     4e6:	88 e2       	ldi	r24, 0x28	; 40
     4e8:	90 e2       	ldi	r25, 0x20	; 32
     4ea:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 af 01 	call	0x35e	; 0x35e <_Z9smoothADCi>
     4f6:	bc 01       	movw	r22, r24
     4f8:	88 27       	eor	r24, r24
     4fa:	77 fd       	sbrc	r23, 7
     4fc:	80 95       	com	r24
     4fe:	98 2f       	mov	r25, r24
     500:	0e 94 66 07 	call	0xecc	; 0xecc <__floatsisf>
     504:	2f e1       	ldi	r18, 0x1F	; 31
     506:	35 e8       	ldi	r19, 0x85	; 133
     508:	48 e6       	ldi	r20, 0x68	; 104
     50a:	52 e4       	ldi	r21, 0x42	; 66
     50c:	0e 94 cb 06 	call	0xd96	; 0xd96 <__divsf3>
     510:	25 e8       	ldi	r18, 0x85	; 133
     512:	3b ee       	ldi	r19, 0xEB	; 235
     514:	41 ed       	ldi	r20, 0xD1	; 209
     516:	5e e3       	ldi	r21, 0x3E	; 62
     518:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     51c:	60 93 38 20 	sts	0x2038, r22
     520:	70 93 39 20 	sts	0x2039, r23
     524:	80 93 3a 20 	sts	0x203A, r24
     528:	90 93 3b 20 	sts	0x203B, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 af 01 	call	0x35e	; 0x35e <_Z9smoothADCi>
     534:	bc 01       	movw	r22, r24
     536:	88 27       	eor	r24, r24
     538:	77 fd       	sbrc	r23, 7
     53a:	80 95       	com	r24
     53c:	98 2f       	mov	r25, r24
     53e:	0e 94 66 07 	call	0xecc	; 0xecc <__floatsisf>
     542:	2f e1       	ldi	r18, 0x1F	; 31
     544:	35 e8       	ldi	r19, 0x85	; 133
     546:	48 e6       	ldi	r20, 0x68	; 104
     548:	52 e4       	ldi	r21, 0x42	; 66
     54a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__divsf3>
     54e:	25 e8       	ldi	r18, 0x85	; 133
     550:	3b ee       	ldi	r19, 0xEB	; 235
     552:	41 ed       	ldi	r20, 0xD1	; 209
     554:	5e e3       	ldi	r21, 0x3E	; 62
     556:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     55a:	60 93 20 20 	sts	0x2020, r22
     55e:	70 93 21 20 	sts	0x2021, r23
     562:	80 93 22 20 	sts	0x2022, r24
     566:	90 93 23 20 	sts	0x2023, r25
}
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	08 95       	ret

00000574 <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
		
	if(act == LOWER){
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	09 f0       	breq	.+2      	; 0x58a <_Z13getMotorSpeedi+0x16>
     588:	56 c0       	rjmp	.+172    	; 0x636 <_Z13getMotorSpeedi+0xc2>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     58a:	20 91 3c 20 	lds	r18, 0x203C
     58e:	30 91 3d 20 	lds	r19, 0x203D
     592:	40 91 3e 20 	lds	r20, 0x203E
     596:	50 91 3f 20 	lds	r21, 0x203F
     59a:	60 91 38 20 	lds	r22, 0x2038
     59e:	70 91 39 20 	lds	r23, 0x2039
     5a2:	80 91 3a 20 	lds	r24, 0x203A
     5a6:	90 91 3b 20 	lds	r25, 0x203B
     5aa:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     5ae:	6b 01       	movw	r12, r22
     5b0:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	a9 01       	movw	r20, r18
     5b8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     5bc:	18 16       	cp	r1, r24
     5be:	24 f0       	brlt	.+8      	; 0x5c8 <_Z13getMotorSpeedi+0x54>
		return input;
	else
		return input * -1;
     5c0:	f7 fa       	bst	r15, 7
     5c2:	f0 94       	com	r15
     5c4:	f7 f8       	bld	r15, 7
     5c6:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     5c8:	80 90 30 20 	lds	r8, 0x2030
     5cc:	90 90 31 20 	lds	r9, 0x2031
     5d0:	a0 90 32 20 	lds	r10, 0x2032
     5d4:	b0 90 33 20 	lds	r11, 0x2033
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	5f e3       	ldi	r21, 0x3F	; 63
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 f6 07 	call	0xfec	; 0xfec <__mulsf3>
     5e8:	a7 01       	movw	r20, r14
     5ea:	96 01       	movw	r18, r12
     5ec:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     5f0:	18 16       	cp	r1, r24
     5f2:	54 f4       	brge	.+20     	; 0x608 <_Z13getMotorSpeedi+0x94>
			return lowerAct.speed / 3;
     5f4:	80 91 34 20 	lds	r24, 0x2034
     5f8:	90 91 35 20 	lds	r25, 0x2035
     5fc:	63 e0       	ldi	r22, 0x03	; 3
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__divmodhi4>
     604:	cb 01       	movw	r24, r22
     606:	72 c0       	rjmp	.+228    	; 0x6ec <_Z13getMotorSpeedi+0x178>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     608:	a7 01       	movw	r20, r14
     60a:	96 01       	movw	r18, r12
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     614:	18 16       	cp	r1, r24
     616:	54 f4       	brge	.+20     	; 0x62c <_Z13getMotorSpeedi+0xb8>
			return lowerAct.speed / 2;
     618:	80 91 34 20 	lds	r24, 0x2034
     61c:	90 91 35 20 	lds	r25, 0x2035
     620:	99 23       	and	r25, r25
     622:	0c f4       	brge	.+2      	; 0x626 <_Z13getMotorSpeedi+0xb2>
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	95 95       	asr	r25
     628:	87 95       	ror	r24
     62a:	60 c0       	rjmp	.+192    	; 0x6ec <_Z13getMotorSpeedi+0x178>
		else
			return lowerAct.speed;
     62c:	80 91 34 20 	lds	r24, 0x2034
     630:	90 91 35 20 	lds	r25, 0x2035
     634:	5b c0       	rjmp	.+182    	; 0x6ec <_Z13getMotorSpeedi+0x178>
	}
	else if (act == UPPER){
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	09 f0       	breq	.+2      	; 0x63c <_Z13getMotorSpeedi+0xc8>
     63a:	56 c0       	rjmp	.+172    	; 0x6e8 <_Z13getMotorSpeedi+0x174>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     63c:	20 91 24 20 	lds	r18, 0x2024
     640:	30 91 25 20 	lds	r19, 0x2025
     644:	40 91 26 20 	lds	r20, 0x2026
     648:	50 91 27 20 	lds	r21, 0x2027
     64c:	60 91 20 20 	lds	r22, 0x2020
     650:	70 91 21 20 	lds	r23, 0x2021
     654:	80 91 22 20 	lds	r24, 0x2022
     658:	90 91 23 20 	lds	r25, 0x2023
     65c:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     660:	6b 01       	movw	r12, r22
     662:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a9 01       	movw	r20, r18
     66a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     66e:	18 16       	cp	r1, r24
     670:	24 f0       	brlt	.+8      	; 0x67a <_Z13getMotorSpeedi+0x106>
		return input;
	else
		return input * -1;
     672:	f7 fa       	bst	r15, 7
     674:	f0 94       	com	r15
     676:	f7 f8       	bld	r15, 7
     678:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     67a:	80 90 18 20 	lds	r8, 0x2018
     67e:	90 90 19 20 	lds	r9, 0x2019
     682:	a0 90 1a 20 	lds	r10, 0x201A
     686:	b0 90 1b 20 	lds	r11, 0x201B
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	5f e3       	ldi	r21, 0x3F	; 63
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 f6 07 	call	0xfec	; 0xfec <__mulsf3>
     69a:	a7 01       	movw	r20, r14
     69c:	96 01       	movw	r18, r12
     69e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     6a2:	18 16       	cp	r1, r24
     6a4:	54 f4       	brge	.+20     	; 0x6ba <_Z13getMotorSpeedi+0x146>
			return upperAct.speed / 3;
     6a6:	80 91 1c 20 	lds	r24, 0x201C
     6aa:	90 91 1d 20 	lds	r25, 0x201D
     6ae:	63 e0       	ldi	r22, 0x03	; 3
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__divmodhi4>
     6b6:	cb 01       	movw	r24, r22
     6b8:	19 c0       	rjmp	.+50     	; 0x6ec <_Z13getMotorSpeedi+0x178>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     6ba:	a7 01       	movw	r20, r14
     6bc:	96 01       	movw	r18, r12
     6be:	c5 01       	movw	r24, r10
     6c0:	b4 01       	movw	r22, r8
     6c2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	54 f4       	brge	.+20     	; 0x6de <_Z13getMotorSpeedi+0x16a>
			return upperAct.speed / 2;
     6ca:	80 91 1c 20 	lds	r24, 0x201C
     6ce:	90 91 1d 20 	lds	r25, 0x201D
     6d2:	99 23       	and	r25, r25
     6d4:	0c f4       	brge	.+2      	; 0x6d8 <_Z13getMotorSpeedi+0x164>
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	95 95       	asr	r25
     6da:	87 95       	ror	r24
     6dc:	07 c0       	rjmp	.+14     	; 0x6ec <_Z13getMotorSpeedi+0x178>
		else
			return upperAct.speed;
     6de:	80 91 1c 20 	lds	r24, 0x201C
     6e2:	90 91 1d 20 	lds	r25, 0x201D
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <_Z13getMotorSpeedi+0x178>
	}
	
	
	////////
	return 0;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
}
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	bf 90       	pop	r11
     6f6:	af 90       	pop	r10
     6f8:	9f 90       	pop	r9
     6fa:	8f 90       	pop	r8
     6fc:	08 95       	ret

000006fe <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	f1 f4       	brne	.+60     	; 0x73e <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     702:	80 91 36 20 	lds	r24, 0x2036
     706:	90 91 37 20 	lds	r25, 0x2037
     70a:	00 97       	sbiw	r24, 0x00	; 0
     70c:	09 f4       	brne	.+2      	; 0x710 <_Z11getMotorDiri+0x12>
     70e:	3e c0       	rjmp	.+124    	; 0x78c <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     710:	20 91 3c 20 	lds	r18, 0x203C
     714:	30 91 3d 20 	lds	r19, 0x203D
     718:	40 91 3e 20 	lds	r20, 0x203E
     71c:	50 91 3f 20 	lds	r21, 0x203F
     720:	60 91 38 20 	lds	r22, 0x2038
     724:	70 91 39 20 	lds	r23, 0x2039
     728:	80 91 3a 20 	lds	r24, 0x203A
     72c:	90 91 3b 20 	lds	r25, 0x203B
     730:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     734:	18 16       	cp	r1, r24
     736:	14 f5       	brge	.+68     	; 0x77c <_Z11getMotorDiri+0x7e>
			return -1;
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	9f ef       	ldi	r25, 0xFF	; 255
     73c:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	01 f5       	brne	.+64     	; 0x782 <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     742:	80 91 1e 20 	lds	r24, 0x201E
     746:	90 91 1f 20 	lds	r25, 0x201F
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	f9 f0       	breq	.+62     	; 0x78c <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     74e:	20 91 24 20 	lds	r18, 0x2024
     752:	30 91 25 20 	lds	r19, 0x2025
     756:	40 91 26 20 	lds	r20, 0x2026
     75a:	50 91 27 20 	lds	r21, 0x2027
     75e:	60 91 20 20 	lds	r22, 0x2020
     762:	70 91 21 20 	lds	r23, 0x2021
     766:	80 91 22 20 	lds	r24, 0x2022
     76a:	90 91 23 20 	lds	r25, 0x2023
     76e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	4c f4       	brge	.+18     	; 0x788 <_Z11getMotorDiri+0x8a>
			return -1;
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     78c:	08 95       	ret

0000078e <main>:

int main(void)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <main+0x6>
     794:	00 d0       	rcall	.+0      	; 0x796 <main+0x8>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     79a:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z25DemInitThingsYouBeenDoingv>
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	87 ea       	ldi	r24, 0xA7	; 167
     7a2:	91 e6       	ldi	r25, 0x61	; 97
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	80 40       	sbci	r24, 0x00	; 0
     7a8:	90 40       	sbci	r25, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x16>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x20>
     7ae:	00 00       	nop
	_delay_ms(1000);
	char SendBuffer[200];
	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     7b0:	40 e6       	ldi	r20, 0x60	; 96
     7b2:	56 e0       	ldi	r21, 0x06	; 6
     7b4:	60 ea       	ldi	r22, 0xA0	; 160
     7b6:	79 e0       	ldi	r23, 0x09	; 9
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 2;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e4       	ldi	r27, 0x40	; 64
     7c8:	80 93 24 20 	sts	0x2024, r24
     7cc:	90 93 25 20 	sts	0x2025, r25
     7d0:	a0 93 26 20 	sts	0x2026, r26
     7d4:	b0 93 27 20 	sts	0x2027, r27
	lowerAct.desiredPos = 3.5;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	a0 e6       	ldi	r26, 0x60	; 96
     7de:	b0 e4       	ldi	r27, 0x40	; 64
     7e0:	80 93 3c 20 	sts	0x203C, r24
     7e4:	90 93 3d 20 	sts	0x203D, r25
     7e8:	a0 93 3e 20 	sts	0x203E, r26
     7ec:	b0 93 3f 20 	sts	0x203F, r27
	
//	lowerAct.enable();
//	upperAct.enable();
	
	baseStepper.calibrateBase();
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e2       	ldi	r25, 0x20	; 32
     7f4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_ZN13rotateStepper13calibrateBaseEv>
	
	MD2_DIR_CLR();
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	e0 e6       	ldi	r30, 0x60	; 96
     7fc:	f6 e0       	ldi	r31, 0x06	; 6
     7fe:	86 83       	std	Z+6, r24	; 0x06
	
	baseStepper.rotateBase(90);  //Note that this function takes an angle relative
     800:	6a e5       	ldi	r22, 0x5A	; 90
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e2       	ldi	r25, 0x20	; 32
     808:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN13rotateStepper10rotateBaseEi>
     80c:	ef ef       	ldi	r30, 0xFF	; 255
     80e:	ff e4       	ldi	r31, 0x4F	; 79
     810:	23 ec       	ldi	r18, 0xC3	; 195
     812:	e1 50       	subi	r30, 0x01	; 1
     814:	f0 40       	sbci	r31, 0x00	; 0
     816:	20 40       	sbci	r18, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <main+0x84>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <main+0x8e>
     81c:	00 00       	nop
								 //to the absolute 0 on the robot
	
	_delay_ms(2000);

	baseStepper.rotateBase(45);
     81e:	6d e2       	ldi	r22, 0x2D	; 45
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e2       	ldi	r25, 0x20	; 32
     826:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN13rotateStepper10rotateBaseEi>
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	9f e4       	ldi	r25, 0x4F	; 79
     82e:	e3 ec       	ldi	r30, 0xC3	; 195
     830:	81 50       	subi	r24, 0x01	; 1
     832:	90 40       	sbci	r25, 0x00	; 0
     834:	e0 40       	sbci	r30, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <main+0xa2>
     838:	00 c0       	rjmp	.+0      	; 0x83a <main+0xac>
     83a:	00 00       	nop
	
	_delay_ms(2000);
	
	baseStepper.rotateBase(0);
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e2       	ldi	r25, 0x20	; 32
     844:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN13rotateStepper10rotateBaseEi>
     848:	ff ef       	ldi	r31, 0xFF	; 255
     84a:	2f e4       	ldi	r18, 0x4F	; 79
     84c:	83 ec       	ldi	r24, 0xC3	; 195
     84e:	f1 50       	subi	r31, 0x01	; 1
     850:	20 40       	sbci	r18, 0x00	; 0
     852:	80 40       	sbci	r24, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <main+0xc0>
     856:	00 c0       	rjmp	.+0      	; 0x858 <main+0xca>
     858:	00 00       	nop
	
	_delay_ms(2000);
	
	baseStepper.rotateBase(180);
     85a:	64 eb       	ldi	r22, 0xB4	; 180
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e2       	ldi	r25, 0x20	; 32
     862:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN13rotateStepper10rotateBaseEi>

	/////////////////   DEBUG (and not wasting power) purposes!
	MD2_DISABLE();
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	e0 e6       	ldi	r30, 0x60	; 96
     86a:	f6 e0       	ldi	r31, 0x06	; 6
     86c:	85 83       	std	Z+5, r24	; 0x05
//	SendStringPC(SendBuffer);								//Send Dem Strings
	
	while(1) {
		checkActPosition();
		
		if(lowerAct.enabled || upperAct.enabled){
     86e:	06 e3       	ldi	r16, 0x36	; 54
     870:	10 e2       	ldi	r17, 0x20	; 32
     872:	0f 2e       	mov	r0, r31
     874:	fe e1       	ldi	r31, 0x1E	; 30
     876:	ef 2e       	mov	r14, r31
     878:	f0 e2       	ldi	r31, 0x20	; 32
     87a:	ff 2e       	mov	r15, r31
     87c:	f0 2d       	mov	r31, r0
			DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));
		}
		else {
			ERROR_SET();
     87e:	0f 2e       	mov	r0, r31
     880:	f0 e4       	ldi	r31, 0x40	; 64
     882:	cf 2e       	mov	r12, r31
     884:	f6 e0       	ldi	r31, 0x06	; 6
     886:	df 2e       	mov	r13, r31
     888:	f0 2d       	mov	r31, r0
     88a:	68 94       	set
     88c:	99 24       	eor	r9, r9
     88e:	97 f8       	bld	r9, 7

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	
	while(1) {
		checkActPosition();
     890:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z16checkActPositionv>
		
		if(lowerAct.enabled || upperAct.enabled){
     894:	f8 01       	movw	r30, r16
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	89 2b       	or	r24, r25
     89c:	29 f4       	brne	.+10     	; 0x8a8 <main+0x11a>
     89e:	f7 01       	movw	r30, r14
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	89 2b       	or	r24, r25
     8a6:	e1 f0       	breq	.+56     	; 0x8e0 <main+0x152>
			DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 ba 02 	call	0x574	; 0x574 <_Z13getMotorSpeedi>
     8b0:	b8 2e       	mov	r11, r24
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_Z11getMotorDiri>
     8ba:	a8 2e       	mov	r10, r24
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_Z11getMotorDiri>
     8c4:	ba 9c       	mul	r11, r10
     8c6:	40 2d       	mov	r20, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	41 58       	subi	r20, 0x81	; 129
     8cc:	b8 9e       	mul	r11, r24
     8ce:	80 2d       	mov	r24, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	6f e7       	ldi	r22, 0x7F	; 127
     8d4:	68 0f       	add	r22, r24
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN10Sabertooth11ParsePacketEhh>
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <main+0x162>
		}
		else {
			ERROR_SET();
     8e0:	f6 01       	movw	r30, r12
     8e2:	95 82       	std	Z+5, r9	; 0x05
			DriveSaber.ParsePacket(127,127);  //TODO: This line should only be executed
     8e4:	4f e7       	ldi	r20, 0x7F	; 127
     8e6:	6f e7       	ldi	r22, 0x7F	; 127
     8e8:	ce 01       	movw	r24, r28
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN10Sabertooth11ParsePacketEhh>
     8f0:	ff ef       	ldi	r31, 0xFF	; 255
     8f2:	29 e6       	ldi	r18, 0x69	; 105
     8f4:	88 e1       	ldi	r24, 0x18	; 24
     8f6:	f1 50       	subi	r31, 0x01	; 1
     8f8:	20 40       	sbci	r18, 0x00	; 0
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x168>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <main+0x172>
     900:	00 00       	nop
     902:	9f ef       	ldi	r25, 0xFF	; 255
     904:	e9 ef       	ldi	r30, 0xF9	; 249
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	91 50       	subi	r25, 0x01	; 1
     90a:	e0 40       	sbci	r30, 0x00	; 0
     90c:	f0 40       	sbci	r31, 0x00	; 0
     90e:	e1 f7       	brne	.-8      	; 0x908 <main+0x17a>
     910:	00 c0       	rjmp	.+0      	; 0x912 <main+0x184>
     912:	00 00       	nop
     914:	bd cf       	rjmp	.-134    	; 0x890 <main+0x102>

00000916 <_GLOBAL__sub_I_swap>:
#include "rotateStepper.h"

int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
     916:	88 e2       	ldi	r24, 0x28	; 40
     918:	90 e2       	ldi	r25, 0x20	; 32
     91a:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     91e:	80 e1       	ldi	r24, 0x10	; 16
     920:	90 e2       	ldi	r25, 0x20	; 32
     922:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e2       	ldi	r25, 0x20	; 32
     932:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN13rotateStepperC1Ev>
     936:	08 95       	ret

00000938 <_GLOBAL__sub_D_swap>:
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e2       	ldi	r25, 0x20	; 32
     93c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_ZN13rotateStepperD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	90 e2       	ldi	r25, 0x20	; 32
     944:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN11stepperInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
motorInfo upperAct;
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e2       	ldi	r25, 0x20	; 32
     94c:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN9motorInfoD1Ev>
#include "rotateStepper.h"

int swap = 0;
USART_data_t USART_PC_Data;

motorInfo lowerAct;
     950:	88 e2       	ldi	r24, 0x28	; 40
     952:	90 e2       	ldi	r25, 0x20	; 32
     954:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN9motorInfoD1Ev>
     958:	08 95       	ret

0000095a <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     95a:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     95c:	12 82       	std	Z+2, r1	; 0x02
     95e:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     960:	85 e0       	ldi	r24, 0x05	; 5
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	80 83       	st	Z, r24
     966:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .1;  //Needs calibration
     968:	4d ec       	ldi	r20, 0xCD	; 205
     96a:	5c ec       	ldi	r21, 0xCC	; 204
     96c:	6c ec       	ldi	r22, 0xCC	; 204
     96e:	7d e3       	ldi	r23, 0x3D	; 61
     970:	44 83       	std	Z+4, r20	; 0x04
     972:	55 83       	std	Z+5, r21	; 0x05
     974:	66 83       	std	Z+6, r22	; 0x06
     976:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e4       	ldi	r22, 0x40	; 64
     97e:	7f e3       	ldi	r23, 0x3F	; 63
     980:	40 87       	std	Z+8, r20	; 0x08
     982:	51 87       	std	Z+9, r21	; 0x09
     984:	62 87       	std	Z+10, r22	; 0x0a
     986:	73 87       	std	Z+11, r23	; 0x0b
	speed = 50;
     988:	82 e3       	ldi	r24, 0x32	; 50
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	84 87       	std	Z+12, r24	; 0x0c
     98e:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     990:	16 86       	std	Z+14, r1	; 0x0e
     992:	17 86       	std	Z+15, r1	; 0x0f
     994:	08 95       	ret

00000996 <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     996:	08 95       	ret

00000998 <_ZN9motorInfo7disableEv>:
void motorInfo::enable(){
	enabled = 1;
}

void motorInfo::disable(){
	enabled = 0;
     998:	fc 01       	movw	r30, r24
     99a:	16 86       	std	Z+14, r1	; 0x0e
     99c:	17 86       	std	Z+15, r1	; 0x0f
     99e:	08 95       	ret

000009a0 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     9a0:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     9a2:	45 e8       	ldi	r20, 0x85	; 133
     9a4:	5b e2       	ldi	r21, 0x2B	; 43
     9a6:	61 e8       	ldi	r22, 0x81	; 129
     9a8:	73 e4       	ldi	r23, 0x43	; 67
     9aa:	44 83       	std	Z+4, r20	; 0x04
     9ac:	55 83       	std	Z+5, r21	; 0x05
     9ae:	66 83       	std	Z+6, r22	; 0x06
     9b0:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	60 e8       	ldi	r22, 0x80	; 128
     9b8:	7f eb       	ldi	r23, 0xBF	; 191
     9ba:	40 83       	st	Z, r20
     9bc:	51 83       	std	Z+1, r21	; 0x01
     9be:	62 83       	std	Z+2, r22	; 0x02
     9c0:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     9c2:	10 86       	std	Z+8, r1	; 0x08
     9c4:	11 86       	std	Z+9, r1	; 0x09
     9c6:	08 95       	ret

000009c8 <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     9c8:	08 95       	ret

000009ca <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	e0 e6       	ldi	r30, 0x60	; 96
     9d4:	f6 e0       	ldi	r31, 0x06	; 6
     9d6:	86 83       	std	Z+6, r24	; 0x06
	bool calFirstPress = false;
	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     9dc:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     9de:	a0 e0       	ldi	r26, 0x00	; 0
     9e0:	b6 e0       	ldi	r27, 0x06	; 6

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     9e2:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     9e4:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     9e6:	18 96       	adiw	r26, 0x08	; 8
     9e8:	8c 91       	ld	r24, X
     9ea:	18 97       	sbiw	r26, 0x08	; 8

		if(calButtonState && !calFirstPress){
     9ec:	82 ff       	sbrs	r24, 2
     9ee:	0e c0       	rjmp	.+28     	; 0xa0c <_ZN13rotateStepper13calibrateBaseEv+0x42>
     9f0:	21 11       	cpse	r18, r1
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     9f4:	35 83       	std	Z+5, r19	; 0x05
     9f6:	2f ef       	ldi	r18, 0xFF	; 255
     9f8:	43 ec       	ldi	r20, 0xC3	; 195
     9fa:	89 e0       	ldi	r24, 0x09	; 9
     9fc:	21 50       	subi	r18, 0x01	; 1
     9fe:	40 40       	sbci	r20, 0x00	; 0
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <_ZN13rotateStepper13calibrateBaseEv+0x32>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     a06:	00 00       	nop
	
	while (calInProgress){
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
     a08:	23 2f       	mov	r18, r19
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(100);  //For gracefulness
		}
		
		if(calFirstPress == true)
     a0c:	22 23       	and	r18, r18
     a0e:	51 f0       	breq	.+20     	; 0xa24 <_ZN13rotateStepper13calibrateBaseEv+0x5a>
			++stepCount;
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
     a14:	67 39       	cpi	r22, 0x97	; 151
     a16:	71 05       	cpc	r23, r1
     a18:	2c f0       	brlt	.+10     	; 0xa24 <_ZN13rotateStepper13calibrateBaseEv+0x5a>
     a1a:	18 96       	adiw	r26, 0x08	; 8
     a1c:	8c 91       	ld	r24, X
     a1e:	18 97       	sbiw	r26, 0x08	; 8
     a20:	82 fd       	sbrc	r24, 2
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <_ZN13rotateStepper13calibrateBaseEv+0x7e>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     a24:	56 83       	std	Z+6, r21	; 0x06
     a26:	8f e3       	ldi	r24, 0x3F	; 63
     a28:	9f e1       	ldi	r25, 0x1F	; 31
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <_ZN13rotateStepper13calibrateBaseEv+0x60>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <_ZN13rotateStepper13calibrateBaseEv+0x66>
     a30:	00 00       	nop
		_delay_ms(1);
		MD2_STEP_SET();
     a32:	55 83       	std	Z+5, r21	; 0x05
     a34:	9f ef       	ldi	r25, 0xFF	; 255
     a36:	49 ef       	ldi	r20, 0xF9	; 249
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	91 50       	subi	r25, 0x01	; 1
     a3c:	40 40       	sbci	r20, 0x00	; 0
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <_ZN13rotateStepper13calibrateBaseEv+0x70>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <_ZN13rotateStepper13calibrateBaseEv+0x7a>
     a44:	00 00       	nop
     a46:	cf cf       	rjmp	.-98     	; 0x9e6 <_ZN13rotateStepper13calibrateBaseEv+0x1c>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	e0 e6       	ldi	r30, 0x60	; 96
     a4c:	f6 e0       	ldi	r31, 0x06	; 6
     a4e:	86 83       	std	Z+6, r24	; 0x06
     a50:	8f e3       	ldi	r24, 0x3F	; 63
     a52:	9f e1       	ldi	r25, 0x1F	; 31
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <_ZN13rotateStepper13calibrateBaseEv+0x8a>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <_ZN13rotateStepper13calibrateBaseEv+0x90>
     a5a:	00 00       	nop
		_delay_ms(1);
		MD2_STEP_SET();
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	85 83       	std	Z+5, r24	; 0x05
     a60:	9f ef       	ldi	r25, 0xFF	; 255
     a62:	29 ef       	ldi	r18, 0xF9	; 249
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	91 50       	subi	r25, 0x01	; 1
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	40 40       	sbci	r20, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <_ZN13rotateStepper13calibrateBaseEv+0x9c>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <_ZN13rotateStepper13calibrateBaseEv+0xa6>
     a70:	00 00       	nop
		_delay_ms(10);
	}
	
	multiplier = stepCount / calSpan;
     a72:	88 27       	eor	r24, r24
     a74:	77 fd       	sbrc	r23, 7
     a76:	80 95       	com	r24
     a78:	98 2f       	mov	r25, r24
     a7a:	0e 94 66 07 	call	0xecc	; 0xecc <__floatsisf>
     a7e:	2c 81       	ldd	r18, Y+4	; 0x04
     a80:	3d 81       	ldd	r19, Y+5	; 0x05
     a82:	4e 81       	ldd	r20, Y+6	; 0x06
     a84:	5f 81       	ldd	r21, Y+7	; 0x07
     a86:	0e 94 cb 06 	call	0xd96	; 0xd96 <__divsf3>
     a8a:	68 83       	st	Y, r22
     a8c:	79 83       	std	Y+1, r23	; 0x01
     a8e:	8a 83       	std	Y+2, r24	; 0x02
     a90:	9b 83       	std	Y+3, r25	; 0x03
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
     aa0:	18 16       	cp	r1, r24
     aa2:	19 06       	cpc	r1, r25
     aa4:	2c f4       	brge	.+10     	; 0xab0 <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	e0 e6       	ldi	r30, 0x60	; 96
     aaa:	f6 e0       	ldi	r31, 0x06	; 6
     aac:	26 83       	std	Z+6, r18	; 0x06
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	e0 e6       	ldi	r30, 0x60	; 96
     ab4:	f6 e0       	ldi	r31, 0x06	; 6
     ab6:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
     ab8:	bc 01       	movw	r22, r24
     aba:	99 23       	and	r25, r25
     abc:	24 f4       	brge	.+8      	; 0xac6 <_ZN13rotateStepper8moveBaseEi+0x2e>
     abe:	66 27       	eor	r22, r22
     ac0:	77 27       	eor	r23, r23
     ac2:	68 1b       	sub	r22, r24
     ac4:	79 0b       	sbc	r23, r25
     ac6:	88 27       	eor	r24, r24
     ac8:	77 fd       	sbrc	r23, 7
     aca:	80 95       	com	r24
     acc:	98 2f       	mov	r25, r24
     ace:	0e 94 66 07 	call	0xecc	; 0xecc <__floatsisf>
     ad2:	28 81       	ld	r18, Y
     ad4:	39 81       	ldd	r19, Y+1	; 0x01
     ad6:	4a 81       	ldd	r20, Y+2	; 0x02
     ad8:	5b 81       	ldd	r21, Y+3	; 0x03
     ada:	0e 94 f6 07 	call	0xfec	; 0xfec <__mulsf3>
     ade:	0e 94 33 07 	call	0xe66	; 0xe66 <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
     ae2:	16 16       	cp	r1, r22
     ae4:	17 06       	cpc	r1, r23
     ae6:	bc f4       	brge	.+46     	; 0xb16 <_ZN13rotateStepper8moveBaseEi+0x7e>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
		MD2_STEP_CLR();
     aec:	e0 e6       	ldi	r30, 0x60	; 96
     aee:	f6 e0       	ldi	r31, 0x06	; 6
     af0:	22 e0       	ldi	r18, 0x02	; 2
     af2:	26 83       	std	Z+6, r18	; 0x06
     af4:	af e3       	ldi	r26, 0x3F	; 63
     af6:	bf e1       	ldi	r27, 0x1F	; 31
     af8:	11 97       	sbiw	r26, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <_ZN13rotateStepper8moveBaseEi+0x60>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <_ZN13rotateStepper8moveBaseEi+0x66>
     afe:	00 00       	nop
		_delay_ms(1);
		MD2_STEP_SET();
     b00:	25 83       	std	Z+5, r18	; 0x05
     b02:	af eb       	ldi	r26, 0xBF	; 191
     b04:	ba ed       	ldi	r27, 0xDA	; 218
     b06:	11 97       	sbiw	r26, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <_ZN13rotateStepper8moveBaseEi+0x6e>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <_ZN13rotateStepper8moveBaseEi+0x74>
     b0c:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	86 17       	cp	r24, r22
     b12:	97 07       	cpc	r25, r23
     b14:	71 f7       	brne	.-36     	; 0xaf2 <_ZN13rotateStepper8moveBaseEi+0x5a>
		_delay_ms(1);
		MD2_STEP_SET();
		_delay_ms(7);
	}
	
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
     b2a:	88 27       	eor	r24, r24
     b2c:	77 fd       	sbrc	r23, 7
     b2e:	80 95       	com	r24
     b30:	98 2f       	mov	r25, r24
     b32:	0e 94 66 07 	call	0xecc	; 0xecc <__floatsisf>
     b36:	2b e7       	ldi	r18, 0x7B	; 123
     b38:	34 e1       	ldi	r19, 0x14	; 20
     b3a:	48 e0       	ldi	r20, 0x08	; 8
     b3c:	52 e4       	ldi	r21, 0x42	; 66
     b3e:	0e 94 67 06 	call	0xcce	; 0xcce <__addsf3>
     b42:	0e 94 33 07 	call	0xe66	; 0xe66 <__fixsfsi>
     b46:	6b 01       	movw	r12, r22
     b48:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
     b4a:	88 85       	ldd	r24, Y+8	; 0x08
     b4c:	99 85       	ldd	r25, Y+9	; 0x09
     b4e:	b6 01       	movw	r22, r12
     b50:	68 1b       	sub	r22, r24
     b52:	79 0b       	sbc	r23, r25
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
     b5a:	c8 86       	std	Y+8, r12	; 0x08
     b5c:	d9 86       	std	Y+9, r13	; 0x09
	
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	08 95       	ret

00000b6c <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
     b6c:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
     b6e:	ed 91       	ld	r30, X+
     b70:	fc 91       	ld	r31, X
     b72:	11 97       	sbiw	r26, 0x01	; 1
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	85 ff       	sbrs	r24, 5
     b78:	fd cf       	rjmp	.-6      	; 0xb74 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     b7e:	ed 91       	ld	r30, X+
     b80:	fc 91       	ld	r31, X
     b82:	11 97       	sbiw	r26, 0x01	; 1
     b84:	81 81       	ldd	r24, Z+1	; 0x01
     b86:	85 ff       	sbrs	r24, 5
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
     b8a:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     b8c:	ed 91       	ld	r30, X+
     b8e:	fc 91       	ld	r31, X
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	81 81       	ldd	r24, Z+1	; 0x01
     b94:	85 ff       	sbrs	r24, 5
     b96:	fd cf       	rjmp	.-6      	; 0xb92 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
     b98:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     b9a:	ed 91       	ld	r30, X+
     b9c:	fc 91       	ld	r31, X
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	85 ff       	sbrs	r24, 5
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
     ba4:	64 0f       	add	r22, r20
     ba6:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
     ba8:	60 83       	st	Z, r22
     baa:	08 95       	ret

00000bac <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
     bb8:	6f 37       	cpi	r22, 0x7F	; 127
     bba:	61 f0       	breq	.+24     	; 0xbd4 <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
     bbc:	6f 37       	cpi	r22, 0x7F	; 127
     bbe:	20 f4       	brcc	.+8      	; 0xbc8 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
     bc0:	4f e7       	ldi	r20, 0x7F	; 127
     bc2:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	0b c0       	rjmp	.+22     	; 0xbde <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
     bc8:	66 23       	and	r22, r22
     bca:	3c f4       	brge	.+14     	; 0xbda <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
     bcc:	41 e8       	ldi	r20, 0x81	; 129
     bce:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
     bd4:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
     bda:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
     bdc:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
     bde:	8f 37       	cpi	r24, 0x7F	; 127
     be0:	61 f0       	breq	.+24     	; 0xbfa <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
     be2:	8f 37       	cpi	r24, 0x7F	; 127
     be4:	20 f4       	brcc	.+8      	; 0xbee <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
     be6:	0f e7       	ldi	r16, 0x7F	; 127
     be8:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
     bea:	15 e0       	ldi	r17, 0x05	; 5
     bec:	0b c0       	rjmp	.+22     	; 0xc04 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
     bee:	88 23       	and	r24, r24
     bf0:	3c f4       	brge	.+14     	; 0xc00 <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
     bf2:	01 e8       	ldi	r16, 0x81	; 129
     bf4:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
     bf6:	14 e0       	ldi	r17, 0x04	; 4
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
     bfa:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
     bfc:	14 e0       	ldi	r17, 0x04	; 4
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
     c00:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
     c02:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
     c0a:	40 2f       	mov	r20, r16
     c0c:	61 2f       	mov	r22, r17
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN10Sabertooth12SendDriveCmdEcc>
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	08 95       	ret

00000c1e <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	64 e0       	ldi	r22, 0x04	; 4
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN10Sabertooth12SendDriveCmdEcc>
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
     c42:	68 83       	st	Y, r22
     c44:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
     c46:	4a 83       	std	Y+2, r20	; 0x02
     c48:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	fa 01       	movw	r30, r20
     c4e:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
     c50:	e8 81       	ld	r30, Y
     c52:	f9 81       	ldd	r31, Y+1	; 0x01
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
     c58:	e8 81       	ld	r30, Y
     c5a:	f9 81       	ldd	r31, Y+1	; 0x01
     c5c:	8f ec       	ldi	r24, 0xCF	; 207
     c5e:	86 83       	std	Z+6, r24	; 0x06
     c60:	e8 81       	ld	r30, Y
     c62:	f9 81       	ldd	r31, Y+1	; 0x01
     c64:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
     c66:	e8 81       	ld	r30, Y
     c68:	f9 81       	ldd	r31, Y+1	; 0x01
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	88 60       	ori	r24, 0x08	; 8
     c6e:	84 83       	std	Z+4, r24	; 0x04
     c70:	ff ef       	ldi	r31, 0xFF	; 255
     c72:	23 ec       	ldi	r18, 0xC3	; 195
     c74:	89 e0       	ldi	r24, 0x09	; 9
     c76:	f1 50       	subi	r31, 0x01	; 1
     c78:	20 40       	sbci	r18, 0x00	; 0
     c7a:	80 40       	sbci	r24, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
     c80:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
     c82:	e8 81       	ld	r30, Y
     c84:	f9 81       	ldd	r31, Y+1	; 0x01
     c86:	8a ea       	ldi	r24, 0xAA	; 170
     c88:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
     c8a:	44 e1       	ldi	r20, 0x14	; 20
     c8c:	6e e0       	ldi	r22, 0x0E	; 14
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_ZN10Sabertooth7StopAllEv>
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <_ZN11stepperInfoC1Ev>:
	#include "usart_driver.h"
};


// default constructor
stepperInfo::stepperInfo() {
     ca0:	fc 01       	movw	r30, r24
	enabled = 0;
     ca2:	10 82       	st	Z, r1
     ca4:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
     caa:	82 83       	std	Z+2, r24	; 0x02
     cac:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	84 83       	std	Z+4, r24	; 0x04
     cb4:	95 83       	std	Z+5, r25	; 0x05
     cb6:	08 95       	ret

00000cb8 <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
     cb8:	08 95       	ret

00000cba <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     cba:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     cbc:	60 83       	st	Z, r22
     cbe:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     cc0:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     cc2:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
     cc4:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
     cc6:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
     cc8:	15 86       	std	Z+13, r1	; 0x0d
     cca:	08 95       	ret

00000ccc <__subsf3>:
     ccc:	50 58       	subi	r21, 0x80	; 128

00000cce <__addsf3>:
     cce:	bb 27       	eor	r27, r27
     cd0:	aa 27       	eor	r26, r26
     cd2:	0e d0       	rcall	.+28     	; 0xcf0 <__addsf3x>
     cd4:	4d c1       	rjmp	.+666    	; 0xf70 <__fp_round>
     cd6:	3e d1       	rcall	.+636    	; 0xf54 <__fp_pscA>
     cd8:	30 f0       	brcs	.+12     	; 0xce6 <__addsf3+0x18>
     cda:	43 d1       	rcall	.+646    	; 0xf62 <__fp_pscB>
     cdc:	20 f0       	brcs	.+8      	; 0xce6 <__addsf3+0x18>
     cde:	31 f4       	brne	.+12     	; 0xcec <__addsf3+0x1e>
     ce0:	9f 3f       	cpi	r25, 0xFF	; 255
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__addsf3+0x1a>
     ce4:	1e f4       	brtc	.+6      	; 0xcec <__addsf3+0x1e>
     ce6:	33 c1       	rjmp	.+614    	; 0xf4e <__fp_nan>
     ce8:	0e f4       	brtc	.+2      	; 0xcec <__addsf3+0x1e>
     cea:	e0 95       	com	r30
     cec:	e7 fb       	bst	r30, 7
     cee:	29 c1       	rjmp	.+594    	; 0xf42 <__fp_inf>

00000cf0 <__addsf3x>:
     cf0:	e9 2f       	mov	r30, r25
     cf2:	4f d1       	rcall	.+670    	; 0xf92 <__fp_split3>
     cf4:	80 f3       	brcs	.-32     	; 0xcd6 <__addsf3+0x8>
     cf6:	ba 17       	cp	r27, r26
     cf8:	62 07       	cpc	r22, r18
     cfa:	73 07       	cpc	r23, r19
     cfc:	84 07       	cpc	r24, r20
     cfe:	95 07       	cpc	r25, r21
     d00:	18 f0       	brcs	.+6      	; 0xd08 <__addsf3x+0x18>
     d02:	71 f4       	brne	.+28     	; 0xd20 <__addsf3x+0x30>
     d04:	9e f5       	brtc	.+102    	; 0xd6c <__addsf3x+0x7c>
     d06:	67 c1       	rjmp	.+718    	; 0xfd6 <__fp_zero>
     d08:	0e f4       	brtc	.+2      	; 0xd0c <__addsf3x+0x1c>
     d0a:	e0 95       	com	r30
     d0c:	0b 2e       	mov	r0, r27
     d0e:	ba 2f       	mov	r27, r26
     d10:	a0 2d       	mov	r26, r0
     d12:	0b 01       	movw	r0, r22
     d14:	b9 01       	movw	r22, r18
     d16:	90 01       	movw	r18, r0
     d18:	0c 01       	movw	r0, r24
     d1a:	ca 01       	movw	r24, r20
     d1c:	a0 01       	movw	r20, r0
     d1e:	11 24       	eor	r1, r1
     d20:	ff 27       	eor	r31, r31
     d22:	59 1b       	sub	r21, r25
     d24:	99 f0       	breq	.+38     	; 0xd4c <__addsf3x+0x5c>
     d26:	59 3f       	cpi	r21, 0xF9	; 249
     d28:	50 f4       	brcc	.+20     	; 0xd3e <__addsf3x+0x4e>
     d2a:	50 3e       	cpi	r21, 0xE0	; 224
     d2c:	68 f1       	brcs	.+90     	; 0xd88 <__addsf3x+0x98>
     d2e:	1a 16       	cp	r1, r26
     d30:	f0 40       	sbci	r31, 0x00	; 0
     d32:	a2 2f       	mov	r26, r18
     d34:	23 2f       	mov	r18, r19
     d36:	34 2f       	mov	r19, r20
     d38:	44 27       	eor	r20, r20
     d3a:	58 5f       	subi	r21, 0xF8	; 248
     d3c:	f3 cf       	rjmp	.-26     	; 0xd24 <__addsf3x+0x34>
     d3e:	46 95       	lsr	r20
     d40:	37 95       	ror	r19
     d42:	27 95       	ror	r18
     d44:	a7 95       	ror	r26
     d46:	f0 40       	sbci	r31, 0x00	; 0
     d48:	53 95       	inc	r21
     d4a:	c9 f7       	brne	.-14     	; 0xd3e <__addsf3x+0x4e>
     d4c:	7e f4       	brtc	.+30     	; 0xd6c <__addsf3x+0x7c>
     d4e:	1f 16       	cp	r1, r31
     d50:	ba 0b       	sbc	r27, r26
     d52:	62 0b       	sbc	r22, r18
     d54:	73 0b       	sbc	r23, r19
     d56:	84 0b       	sbc	r24, r20
     d58:	ba f0       	brmi	.+46     	; 0xd88 <__addsf3x+0x98>
     d5a:	91 50       	subi	r25, 0x01	; 1
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <__addsf3x+0x96>
     d5e:	ff 0f       	add	r31, r31
     d60:	bb 1f       	adc	r27, r27
     d62:	66 1f       	adc	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	c2 f7       	brpl	.-16     	; 0xd5a <__addsf3x+0x6a>
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <__addsf3x+0x98>
     d6c:	ba 0f       	add	r27, r26
     d6e:	62 1f       	adc	r22, r18
     d70:	73 1f       	adc	r23, r19
     d72:	84 1f       	adc	r24, r20
     d74:	48 f4       	brcc	.+18     	; 0xd88 <__addsf3x+0x98>
     d76:	87 95       	ror	r24
     d78:	77 95       	ror	r23
     d7a:	67 95       	ror	r22
     d7c:	b7 95       	ror	r27
     d7e:	f7 95       	ror	r31
     d80:	9e 3f       	cpi	r25, 0xFE	; 254
     d82:	08 f0       	brcs	.+2      	; 0xd86 <__addsf3x+0x96>
     d84:	b3 cf       	rjmp	.-154    	; 0xcec <__addsf3+0x1e>
     d86:	93 95       	inc	r25
     d88:	88 0f       	add	r24, r24
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <__addsf3x+0x9e>
     d8c:	99 27       	eor	r25, r25
     d8e:	ee 0f       	add	r30, r30
     d90:	97 95       	ror	r25
     d92:	87 95       	ror	r24
     d94:	08 95       	ret

00000d96 <__divsf3>:
     d96:	0c d0       	rcall	.+24     	; 0xdb0 <__divsf3x>
     d98:	eb c0       	rjmp	.+470    	; 0xf70 <__fp_round>
     d9a:	e3 d0       	rcall	.+454    	; 0xf62 <__fp_pscB>
     d9c:	40 f0       	brcs	.+16     	; 0xdae <__divsf3+0x18>
     d9e:	da d0       	rcall	.+436    	; 0xf54 <__fp_pscA>
     da0:	30 f0       	brcs	.+12     	; 0xdae <__divsf3+0x18>
     da2:	21 f4       	brne	.+8      	; 0xdac <__divsf3+0x16>
     da4:	5f 3f       	cpi	r21, 0xFF	; 255
     da6:	19 f0       	breq	.+6      	; 0xdae <__divsf3+0x18>
     da8:	cc c0       	rjmp	.+408    	; 0xf42 <__fp_inf>
     daa:	51 11       	cpse	r21, r1
     dac:	15 c1       	rjmp	.+554    	; 0xfd8 <__fp_szero>
     dae:	cf c0       	rjmp	.+414    	; 0xf4e <__fp_nan>

00000db0 <__divsf3x>:
     db0:	f0 d0       	rcall	.+480    	; 0xf92 <__fp_split3>
     db2:	98 f3       	brcs	.-26     	; 0xd9a <__divsf3+0x4>

00000db4 <__divsf3_pse>:
     db4:	99 23       	and	r25, r25
     db6:	c9 f3       	breq	.-14     	; 0xdaa <__divsf3+0x14>
     db8:	55 23       	and	r21, r21
     dba:	b1 f3       	breq	.-20     	; 0xda8 <__divsf3+0x12>
     dbc:	95 1b       	sub	r25, r21
     dbe:	55 0b       	sbc	r21, r21
     dc0:	bb 27       	eor	r27, r27
     dc2:	aa 27       	eor	r26, r26
     dc4:	62 17       	cp	r22, r18
     dc6:	73 07       	cpc	r23, r19
     dc8:	84 07       	cpc	r24, r20
     dca:	38 f0       	brcs	.+14     	; 0xdda <__divsf3_pse+0x26>
     dcc:	9f 5f       	subi	r25, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	44 1f       	adc	r20, r20
     dd6:	aa 1f       	adc	r26, r26
     dd8:	a9 f3       	breq	.-22     	; 0xdc4 <__divsf3_pse+0x10>
     dda:	33 d0       	rcall	.+102    	; 0xe42 <__divsf3_pse+0x8e>
     ddc:	0e 2e       	mov	r0, r30
     dde:	3a f0       	brmi	.+14     	; 0xdee <__divsf3_pse+0x3a>
     de0:	e0 e8       	ldi	r30, 0x80	; 128
     de2:	30 d0       	rcall	.+96     	; 0xe44 <__divsf3_pse+0x90>
     de4:	91 50       	subi	r25, 0x01	; 1
     de6:	50 40       	sbci	r21, 0x00	; 0
     de8:	e6 95       	lsr	r30
     dea:	00 1c       	adc	r0, r0
     dec:	ca f7       	brpl	.-14     	; 0xde0 <__divsf3_pse+0x2c>
     dee:	29 d0       	rcall	.+82     	; 0xe42 <__divsf3_pse+0x8e>
     df0:	fe 2f       	mov	r31, r30
     df2:	27 d0       	rcall	.+78     	; 0xe42 <__divsf3_pse+0x8e>
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	88 1f       	adc	r24, r24
     dfa:	bb 1f       	adc	r27, r27
     dfc:	26 17       	cp	r18, r22
     dfe:	37 07       	cpc	r19, r23
     e00:	48 07       	cpc	r20, r24
     e02:	ab 07       	cpc	r26, r27
     e04:	b0 e8       	ldi	r27, 0x80	; 128
     e06:	09 f0       	breq	.+2      	; 0xe0a <__divsf3_pse+0x56>
     e08:	bb 0b       	sbc	r27, r27
     e0a:	80 2d       	mov	r24, r0
     e0c:	bf 01       	movw	r22, r30
     e0e:	ff 27       	eor	r31, r31
     e10:	93 58       	subi	r25, 0x83	; 131
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	2a f0       	brmi	.+10     	; 0xe20 <__divsf3_pse+0x6c>
     e16:	9e 3f       	cpi	r25, 0xFE	; 254
     e18:	51 05       	cpc	r21, r1
     e1a:	68 f0       	brcs	.+26     	; 0xe36 <__divsf3_pse+0x82>
     e1c:	92 c0       	rjmp	.+292    	; 0xf42 <__fp_inf>
     e1e:	dc c0       	rjmp	.+440    	; 0xfd8 <__fp_szero>
     e20:	5f 3f       	cpi	r21, 0xFF	; 255
     e22:	ec f3       	brlt	.-6      	; 0xe1e <__divsf3_pse+0x6a>
     e24:	98 3e       	cpi	r25, 0xE8	; 232
     e26:	dc f3       	brlt	.-10     	; 0xe1e <__divsf3_pse+0x6a>
     e28:	86 95       	lsr	r24
     e2a:	77 95       	ror	r23
     e2c:	67 95       	ror	r22
     e2e:	b7 95       	ror	r27
     e30:	f7 95       	ror	r31
     e32:	9f 5f       	subi	r25, 0xFF	; 255
     e34:	c9 f7       	brne	.-14     	; 0xe28 <__divsf3_pse+0x74>
     e36:	88 0f       	add	r24, r24
     e38:	91 1d       	adc	r25, r1
     e3a:	96 95       	lsr	r25
     e3c:	87 95       	ror	r24
     e3e:	97 f9       	bld	r25, 7
     e40:	08 95       	ret
     e42:	e1 e0       	ldi	r30, 0x01	; 1
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	bb 1f       	adc	r27, r27
     e4c:	62 17       	cp	r22, r18
     e4e:	73 07       	cpc	r23, r19
     e50:	84 07       	cpc	r24, r20
     e52:	ba 07       	cpc	r27, r26
     e54:	20 f0       	brcs	.+8      	; 0xe5e <__divsf3_pse+0xaa>
     e56:	62 1b       	sub	r22, r18
     e58:	73 0b       	sbc	r23, r19
     e5a:	84 0b       	sbc	r24, r20
     e5c:	ba 0b       	sbc	r27, r26
     e5e:	ee 1f       	adc	r30, r30
     e60:	88 f7       	brcc	.-30     	; 0xe44 <__divsf3_pse+0x90>
     e62:	e0 95       	com	r30
     e64:	08 95       	ret

00000e66 <__fixsfsi>:
     e66:	04 d0       	rcall	.+8      	; 0xe70 <__fixunssfsi>
     e68:	68 94       	set
     e6a:	b1 11       	cpse	r27, r1
     e6c:	b5 c0       	rjmp	.+362    	; 0xfd8 <__fp_szero>
     e6e:	08 95       	ret

00000e70 <__fixunssfsi>:
     e70:	98 d0       	rcall	.+304    	; 0xfa2 <__fp_splitA>
     e72:	88 f0       	brcs	.+34     	; 0xe96 <__fixunssfsi+0x26>
     e74:	9f 57       	subi	r25, 0x7F	; 127
     e76:	90 f0       	brcs	.+36     	; 0xe9c <__fixunssfsi+0x2c>
     e78:	b9 2f       	mov	r27, r25
     e7a:	99 27       	eor	r25, r25
     e7c:	b7 51       	subi	r27, 0x17	; 23
     e7e:	a0 f0       	brcs	.+40     	; 0xea8 <__fixunssfsi+0x38>
     e80:	d1 f0       	breq	.+52     	; 0xeb6 <__fixunssfsi+0x46>
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	1a f0       	brmi	.+6      	; 0xe92 <__fixunssfsi+0x22>
     e8c:	ba 95       	dec	r27
     e8e:	c9 f7       	brne	.-14     	; 0xe82 <__fixunssfsi+0x12>
     e90:	12 c0       	rjmp	.+36     	; 0xeb6 <__fixunssfsi+0x46>
     e92:	b1 30       	cpi	r27, 0x01	; 1
     e94:	81 f0       	breq	.+32     	; 0xeb6 <__fixunssfsi+0x46>
     e96:	9f d0       	rcall	.+318    	; 0xfd6 <__fp_zero>
     e98:	b1 e0       	ldi	r27, 0x01	; 1
     e9a:	08 95       	ret
     e9c:	9c c0       	rjmp	.+312    	; 0xfd6 <__fp_zero>
     e9e:	67 2f       	mov	r22, r23
     ea0:	78 2f       	mov	r23, r24
     ea2:	88 27       	eor	r24, r24
     ea4:	b8 5f       	subi	r27, 0xF8	; 248
     ea6:	39 f0       	breq	.+14     	; 0xeb6 <__fixunssfsi+0x46>
     ea8:	b9 3f       	cpi	r27, 0xF9	; 249
     eaa:	cc f3       	brlt	.-14     	; 0xe9e <__fixunssfsi+0x2e>
     eac:	86 95       	lsr	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b3 95       	inc	r27
     eb4:	d9 f7       	brne	.-10     	; 0xeac <__fixunssfsi+0x3c>
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__fixunssfsi+0x56>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	08 95       	ret

00000ec8 <__floatunsisf>:
     ec8:	e8 94       	clt
     eca:	09 c0       	rjmp	.+18     	; 0xede <__floatsisf+0x12>

00000ecc <__floatsisf>:
     ecc:	97 fb       	bst	r25, 7
     ece:	3e f4       	brtc	.+14     	; 0xede <__floatsisf+0x12>
     ed0:	90 95       	com	r25
     ed2:	80 95       	com	r24
     ed4:	70 95       	com	r23
     ed6:	61 95       	neg	r22
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	99 23       	and	r25, r25
     ee0:	a9 f0       	breq	.+42     	; 0xf0c <__floatsisf+0x40>
     ee2:	f9 2f       	mov	r31, r25
     ee4:	96 e9       	ldi	r25, 0x96	; 150
     ee6:	bb 27       	eor	r27, r27
     ee8:	93 95       	inc	r25
     eea:	f6 95       	lsr	r31
     eec:	87 95       	ror	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	b7 95       	ror	r27
     ef4:	f1 11       	cpse	r31, r1
     ef6:	f8 cf       	rjmp	.-16     	; 0xee8 <__floatsisf+0x1c>
     ef8:	fa f4       	brpl	.+62     	; 0xf38 <__floatsisf+0x6c>
     efa:	bb 0f       	add	r27, r27
     efc:	11 f4       	brne	.+4      	; 0xf02 <__floatsisf+0x36>
     efe:	60 ff       	sbrs	r22, 0
     f00:	1b c0       	rjmp	.+54     	; 0xf38 <__floatsisf+0x6c>
     f02:	6f 5f       	subi	r22, 0xFF	; 255
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	8f 4f       	sbci	r24, 0xFF	; 255
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	16 c0       	rjmp	.+44     	; 0xf38 <__floatsisf+0x6c>
     f0c:	88 23       	and	r24, r24
     f0e:	11 f0       	breq	.+4      	; 0xf14 <__floatsisf+0x48>
     f10:	96 e9       	ldi	r25, 0x96	; 150
     f12:	11 c0       	rjmp	.+34     	; 0xf36 <__floatsisf+0x6a>
     f14:	77 23       	and	r23, r23
     f16:	21 f0       	breq	.+8      	; 0xf20 <__floatsisf+0x54>
     f18:	9e e8       	ldi	r25, 0x8E	; 142
     f1a:	87 2f       	mov	r24, r23
     f1c:	76 2f       	mov	r23, r22
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <__floatsisf+0x5e>
     f20:	66 23       	and	r22, r22
     f22:	71 f0       	breq	.+28     	; 0xf40 <__floatsisf+0x74>
     f24:	96 e8       	ldi	r25, 0x86	; 134
     f26:	86 2f       	mov	r24, r22
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	2a f0       	brmi	.+10     	; 0xf38 <__floatsisf+0x6c>
     f2e:	9a 95       	dec	r25
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	88 1f       	adc	r24, r24
     f36:	da f7       	brpl	.-10     	; 0xf2e <__floatsisf+0x62>
     f38:	88 0f       	add	r24, r24
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	97 f9       	bld	r25, 7
     f40:	08 95       	ret

00000f42 <__fp_inf>:
     f42:	97 f9       	bld	r25, 7
     f44:	9f 67       	ori	r25, 0x7F	; 127
     f46:	80 e8       	ldi	r24, 0x80	; 128
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	08 95       	ret

00000f4e <__fp_nan>:
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	80 ec       	ldi	r24, 0xC0	; 192
     f52:	08 95       	ret

00000f54 <__fp_pscA>:
     f54:	00 24       	eor	r0, r0
     f56:	0a 94       	dec	r0
     f58:	16 16       	cp	r1, r22
     f5a:	17 06       	cpc	r1, r23
     f5c:	18 06       	cpc	r1, r24
     f5e:	09 06       	cpc	r0, r25
     f60:	08 95       	ret

00000f62 <__fp_pscB>:
     f62:	00 24       	eor	r0, r0
     f64:	0a 94       	dec	r0
     f66:	12 16       	cp	r1, r18
     f68:	13 06       	cpc	r1, r19
     f6a:	14 06       	cpc	r1, r20
     f6c:	05 06       	cpc	r0, r21
     f6e:	08 95       	ret

00000f70 <__fp_round>:
     f70:	09 2e       	mov	r0, r25
     f72:	03 94       	inc	r0
     f74:	00 0c       	add	r0, r0
     f76:	11 f4       	brne	.+4      	; 0xf7c <__fp_round+0xc>
     f78:	88 23       	and	r24, r24
     f7a:	52 f0       	brmi	.+20     	; 0xf90 <__fp_round+0x20>
     f7c:	bb 0f       	add	r27, r27
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <__fp_round+0x20>
     f80:	bf 2b       	or	r27, r31
     f82:	11 f4       	brne	.+4      	; 0xf88 <__fp_round+0x18>
     f84:	60 ff       	sbrs	r22, 0
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <__fp_round+0x20>
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8f 4f       	sbci	r24, 0xFF	; 255
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	08 95       	ret

00000f92 <__fp_split3>:
     f92:	57 fd       	sbrc	r21, 7
     f94:	90 58       	subi	r25, 0x80	; 128
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	59 f0       	breq	.+22     	; 0xfb2 <__fp_splitA+0x10>
     f9c:	5f 3f       	cpi	r21, 0xFF	; 255
     f9e:	71 f0       	breq	.+28     	; 0xfbc <__fp_splitA+0x1a>
     fa0:	47 95       	ror	r20

00000fa2 <__fp_splitA>:
     fa2:	88 0f       	add	r24, r24
     fa4:	97 fb       	bst	r25, 7
     fa6:	99 1f       	adc	r25, r25
     fa8:	61 f0       	breq	.+24     	; 0xfc2 <__fp_splitA+0x20>
     faa:	9f 3f       	cpi	r25, 0xFF	; 255
     fac:	79 f0       	breq	.+30     	; 0xfcc <__fp_splitA+0x2a>
     fae:	87 95       	ror	r24
     fb0:	08 95       	ret
     fb2:	12 16       	cp	r1, r18
     fb4:	13 06       	cpc	r1, r19
     fb6:	14 06       	cpc	r1, r20
     fb8:	55 1f       	adc	r21, r21
     fba:	f2 cf       	rjmp	.-28     	; 0xfa0 <__fp_split3+0xe>
     fbc:	46 95       	lsr	r20
     fbe:	f1 df       	rcall	.-30     	; 0xfa2 <__fp_splitA>
     fc0:	08 c0       	rjmp	.+16     	; 0xfd2 <__fp_splitA+0x30>
     fc2:	16 16       	cp	r1, r22
     fc4:	17 06       	cpc	r1, r23
     fc6:	18 06       	cpc	r1, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	f1 cf       	rjmp	.-30     	; 0xfae <__fp_splitA+0xc>
     fcc:	86 95       	lsr	r24
     fce:	71 05       	cpc	r23, r1
     fd0:	61 05       	cpc	r22, r1
     fd2:	08 94       	sec
     fd4:	08 95       	ret

00000fd6 <__fp_zero>:
     fd6:	e8 94       	clt

00000fd8 <__fp_szero>:
     fd8:	bb 27       	eor	r27, r27
     fda:	66 27       	eor	r22, r22
     fdc:	77 27       	eor	r23, r23
     fde:	cb 01       	movw	r24, r22
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <__gesf2>:
     fe4:	66 d0       	rcall	.+204    	; 0x10b2 <__fp_cmp>
     fe6:	08 f4       	brcc	.+2      	; 0xfea <__gesf2+0x6>
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	08 95       	ret

00000fec <__mulsf3>:
     fec:	0b d0       	rcall	.+22     	; 0x1004 <__mulsf3x>
     fee:	c0 cf       	rjmp	.-128    	; 0xf70 <__fp_round>
     ff0:	b1 df       	rcall	.-158    	; 0xf54 <__fp_pscA>
     ff2:	28 f0       	brcs	.+10     	; 0xffe <__mulsf3+0x12>
     ff4:	b6 df       	rcall	.-148    	; 0xf62 <__fp_pscB>
     ff6:	18 f0       	brcs	.+6      	; 0xffe <__mulsf3+0x12>
     ff8:	95 23       	and	r25, r21
     ffa:	09 f0       	breq	.+2      	; 0xffe <__mulsf3+0x12>
     ffc:	a2 cf       	rjmp	.-188    	; 0xf42 <__fp_inf>
     ffe:	a7 cf       	rjmp	.-178    	; 0xf4e <__fp_nan>
    1000:	11 24       	eor	r1, r1
    1002:	ea cf       	rjmp	.-44     	; 0xfd8 <__fp_szero>

00001004 <__mulsf3x>:
    1004:	c6 df       	rcall	.-116    	; 0xf92 <__fp_split3>
    1006:	a0 f3       	brcs	.-24     	; 0xff0 <__mulsf3+0x4>

00001008 <__mulsf3_pse>:
    1008:	95 9f       	mul	r25, r21
    100a:	d1 f3       	breq	.-12     	; 0x1000 <__mulsf3+0x14>
    100c:	95 0f       	add	r25, r21
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	55 1f       	adc	r21, r21
    1012:	62 9f       	mul	r22, r18
    1014:	f0 01       	movw	r30, r0
    1016:	72 9f       	mul	r23, r18
    1018:	bb 27       	eor	r27, r27
    101a:	f0 0d       	add	r31, r0
    101c:	b1 1d       	adc	r27, r1
    101e:	63 9f       	mul	r22, r19
    1020:	aa 27       	eor	r26, r26
    1022:	f0 0d       	add	r31, r0
    1024:	b1 1d       	adc	r27, r1
    1026:	aa 1f       	adc	r26, r26
    1028:	64 9f       	mul	r22, r20
    102a:	66 27       	eor	r22, r22
    102c:	b0 0d       	add	r27, r0
    102e:	a1 1d       	adc	r26, r1
    1030:	66 1f       	adc	r22, r22
    1032:	82 9f       	mul	r24, r18
    1034:	22 27       	eor	r18, r18
    1036:	b0 0d       	add	r27, r0
    1038:	a1 1d       	adc	r26, r1
    103a:	62 1f       	adc	r22, r18
    103c:	73 9f       	mul	r23, r19
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	62 1f       	adc	r22, r18
    1044:	83 9f       	mul	r24, r19
    1046:	a0 0d       	add	r26, r0
    1048:	61 1d       	adc	r22, r1
    104a:	22 1f       	adc	r18, r18
    104c:	74 9f       	mul	r23, r20
    104e:	33 27       	eor	r19, r19
    1050:	a0 0d       	add	r26, r0
    1052:	61 1d       	adc	r22, r1
    1054:	23 1f       	adc	r18, r19
    1056:	84 9f       	mul	r24, r20
    1058:	60 0d       	add	r22, r0
    105a:	21 1d       	adc	r18, r1
    105c:	82 2f       	mov	r24, r18
    105e:	76 2f       	mov	r23, r22
    1060:	6a 2f       	mov	r22, r26
    1062:	11 24       	eor	r1, r1
    1064:	9f 57       	subi	r25, 0x7F	; 127
    1066:	50 40       	sbci	r21, 0x00	; 0
    1068:	8a f0       	brmi	.+34     	; 0x108c <__mulsf3_pse+0x84>
    106a:	e1 f0       	breq	.+56     	; 0x10a4 <__mulsf3_pse+0x9c>
    106c:	88 23       	and	r24, r24
    106e:	4a f0       	brmi	.+18     	; 0x1082 <__mulsf3_pse+0x7a>
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	bb 1f       	adc	r27, r27
    1076:	66 1f       	adc	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	91 50       	subi	r25, 0x01	; 1
    107e:	50 40       	sbci	r21, 0x00	; 0
    1080:	a9 f7       	brne	.-22     	; 0x106c <__mulsf3_pse+0x64>
    1082:	9e 3f       	cpi	r25, 0xFE	; 254
    1084:	51 05       	cpc	r21, r1
    1086:	70 f0       	brcs	.+28     	; 0x10a4 <__mulsf3_pse+0x9c>
    1088:	5c cf       	rjmp	.-328    	; 0xf42 <__fp_inf>
    108a:	a6 cf       	rjmp	.-180    	; 0xfd8 <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	ec f3       	brlt	.-6      	; 0x108a <__mulsf3_pse+0x82>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	dc f3       	brlt	.-10     	; 0x108a <__mulsf3_pse+0x82>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	e7 95       	ror	r30
    10a0:	9f 5f       	subi	r25, 0xFF	; 255
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <__mulsf3_pse+0x8c>
    10a4:	fe 2b       	or	r31, r30
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret

000010b2 <__fp_cmp>:
    10b2:	99 0f       	add	r25, r25
    10b4:	00 08       	sbc	r0, r0
    10b6:	55 0f       	add	r21, r21
    10b8:	aa 0b       	sbc	r26, r26
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	fe ef       	ldi	r31, 0xFE	; 254
    10be:	16 16       	cp	r1, r22
    10c0:	17 06       	cpc	r1, r23
    10c2:	e8 07       	cpc	r30, r24
    10c4:	f9 07       	cpc	r31, r25
    10c6:	c0 f0       	brcs	.+48     	; 0x10f8 <__fp_cmp+0x46>
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	e4 07       	cpc	r30, r20
    10ce:	f5 07       	cpc	r31, r21
    10d0:	98 f0       	brcs	.+38     	; 0x10f8 <__fp_cmp+0x46>
    10d2:	62 1b       	sub	r22, r18
    10d4:	73 0b       	sbc	r23, r19
    10d6:	84 0b       	sbc	r24, r20
    10d8:	95 0b       	sbc	r25, r21
    10da:	39 f4       	brne	.+14     	; 0x10ea <__fp_cmp+0x38>
    10dc:	0a 26       	eor	r0, r26
    10de:	61 f0       	breq	.+24     	; 0x10f8 <__fp_cmp+0x46>
    10e0:	23 2b       	or	r18, r19
    10e2:	24 2b       	or	r18, r20
    10e4:	25 2b       	or	r18, r21
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <__fp_cmp+0x3e>
    10e8:	08 95       	ret
    10ea:	0a 26       	eor	r0, r26
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <__fp_cmp+0x3e>
    10ee:	a1 40       	sbci	r26, 0x01	; 1
    10f0:	a6 95       	lsr	r26
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	81 1d       	adc	r24, r1
    10f6:	81 1d       	adc	r24, r1
    10f8:	08 95       	ret

000010fa <__divmodhi4>:
    10fa:	97 fb       	bst	r25, 7
    10fc:	07 2e       	mov	r0, r23
    10fe:	16 f4       	brtc	.+4      	; 0x1104 <__divmodhi4+0xa>
    1100:	00 94       	com	r0
    1102:	07 d0       	rcall	.+14     	; 0x1112 <__divmodhi4_neg1>
    1104:	77 fd       	sbrc	r23, 7
    1106:	09 d0       	rcall	.+18     	; 0x111a <__divmodhi4_neg2>
    1108:	0e 94 91 08 	call	0x1122	; 0x1122 <__udivmodhi4>
    110c:	07 fc       	sbrc	r0, 7
    110e:	05 d0       	rcall	.+10     	; 0x111a <__divmodhi4_neg2>
    1110:	3e f4       	brtc	.+14     	; 0x1120 <__divmodhi4_exit>

00001112 <__divmodhi4_neg1>:
    1112:	90 95       	com	r25
    1114:	81 95       	neg	r24
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	08 95       	ret

0000111a <__divmodhi4_neg2>:
    111a:	70 95       	com	r23
    111c:	61 95       	neg	r22
    111e:	7f 4f       	sbci	r23, 0xFF	; 255

00001120 <__divmodhi4_exit>:
    1120:	08 95       	ret

00001122 <__udivmodhi4>:
    1122:	aa 1b       	sub	r26, r26
    1124:	bb 1b       	sub	r27, r27
    1126:	51 e1       	ldi	r21, 0x11	; 17
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <__udivmodhi4_ep>

0000112a <__udivmodhi4_loop>:
    112a:	aa 1f       	adc	r26, r26
    112c:	bb 1f       	adc	r27, r27
    112e:	a6 17       	cp	r26, r22
    1130:	b7 07       	cpc	r27, r23
    1132:	10 f0       	brcs	.+4      	; 0x1138 <__udivmodhi4_ep>
    1134:	a6 1b       	sub	r26, r22
    1136:	b7 0b       	sbc	r27, r23

00001138 <__udivmodhi4_ep>:
    1138:	88 1f       	adc	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	5a 95       	dec	r21
    113e:	a9 f7       	brne	.-22     	; 0x112a <__udivmodhi4_loop>
    1140:	80 95       	com	r24
    1142:	90 95       	com	r25
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	08 95       	ret

0000114a <__tablejump2__>:
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31

0000114e <__tablejump__>:
    114e:	05 90       	lpm	r0, Z+
    1150:	f4 91       	lpm	r31, Z
    1152:	e0 2d       	mov	r30, r0
    1154:	09 94       	ijmp

00001156 <__do_global_dtors>:
    1156:	11 e0       	ldi	r17, 0x01	; 1
    1158:	ce e6       	ldi	r28, 0x6E	; 110
    115a:	d1 e0       	ldi	r29, 0x01	; 1
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <__do_global_dtors+0x10>
    115e:	fe 01       	movw	r30, r28
    1160:	0e 94 a7 08 	call	0x114e	; 0x114e <__tablejump__>
    1164:	22 96       	adiw	r28, 0x02	; 2
    1166:	c0 37       	cpi	r28, 0x70	; 112
    1168:	d1 07       	cpc	r29, r17
    116a:	c9 f7       	brne	.-14     	; 0x115e <__do_global_dtors+0x8>
    116c:	f8 94       	cli

0000116e <__stop_program>:
    116e:	ff cf       	rjmp	.-2      	; 0x116e <__stop_program>
