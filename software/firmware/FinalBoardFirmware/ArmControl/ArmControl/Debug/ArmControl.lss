
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000162a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  0000162a  000016be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005f  00802012  00802012  000016d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c09  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011db  00000000  00000000  00005529  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001040  00000000  00000000  00006704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000564  00000000  00000000  00007744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000178e  00000000  00000000  00007ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000187b  00000000  00000000  00009436  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000acb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_25>
      68:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_26>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	2a 06       	cpc	r2, r26

0000016e <__ctors_end>:
     16e:	3b 06       	cpc	r3, r27

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	ea e2       	ldi	r30, 0x2A	; 42
     184:	f6 e1       	ldi	r31, 0x16	; 22
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 31       	cpi	r26, 0x12	; 18
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a2 e1       	ldi	r26, 0x12	; 18
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a1 37       	cpi	r26, 0x71	; 113
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 04 0b 	call	0x1608	; 0x1608 <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <main>
     1bc:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1d0:	1c 92       	st	X, r1
	return Result;
}
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1f8:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     22c:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <_Z17FlushSerialBufferP16Usart_and_buffer>:
enum XMegaStates{
	WaitForHost,
	ARMControl
} CurrentState = WaitForHost;
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
     26a:	03 c0       	rjmp	.+6      	; 0x272 <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
     26c:	ce 01       	movw	r24, r28
     26e:	0e 94 88 08 	call	0x1110	; 0x1110 <USART_RXBuffer_GetByte>
	WaitForHost,
	ARMControl
} CurrentState = WaitForHost;
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
     272:	ce 01       	movw	r24, r28
     274:	0e 94 80 08 	call	0x1100	; 0x1100 <USART_RXBufferData_Available>
     278:	81 11       	cpse	r24, r1
     27a:	f8 cf       	rjmp	.-16     	; 0x26c <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <__vector_25>:

ISR(USARTC0_RXC_vect){
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	11 24       	eor	r1, r1
     28c:	2f 93       	push	r18
     28e:	3f 93       	push	r19
     290:	4f 93       	push	r20
     292:	5f 93       	push	r21
     294:	6f 93       	push	r22
     296:	7f 93       	push	r23
     298:	8f 93       	push	r24
     29a:	9f 93       	push	r25
     29c:	af 93       	push	r26
     29e:	bf 93       	push	r27
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
     2a8:	82 e6       	ldi	r24, 0x62	; 98
     2aa:	90 e2       	ldi	r25, 0x20	; 32
     2ac:	0e 94 94 08 	call	0x1128	; 0x1128 <USART_RXComplete>
	
	if(USART_RXBufferData_Available(&USART_PC_Data)){
     2b0:	82 e6       	ldi	r24, 0x62	; 98
     2b2:	90 e2       	ldi	r25, 0x20	; 32
     2b4:	0e 94 80 08 	call	0x1100	; 0x1100 <USART_RXBufferData_Available>
     2b8:	88 23       	and	r24, r24
     2ba:	79 f0       	breq	.+30     	; 0x2da <__vector_25+0x58>
		recieveBuffer[bufferIndex] = USART_RXBuffer_GetByte(&USART_PC_Data);
     2bc:	c0 91 1d 20 	lds	r28, 0x201D
     2c0:	d0 e0       	ldi	r29, 0x00	; 0
     2c2:	82 e6       	ldi	r24, 0x62	; 98
     2c4:	90 e2       	ldi	r25, 0x20	; 32
     2c6:	0e 94 88 08 	call	0x1110	; 0x1110 <USART_RXBuffer_GetByte>
     2ca:	cd 5e       	subi	r28, 0xED	; 237
     2cc:	df 4d       	sbci	r29, 0xDF	; 223
     2ce:	88 83       	st	Y, r24
		bufferIndex++;
     2d0:	80 91 1d 20 	lds	r24, 0x201D
     2d4:	8f 5f       	subi	r24, 0xFF	; 255
     2d6:	80 93 1d 20 	sts	0x201D, r24
	}
	
	if(bufferIndex == PACKETSIZE){
     2da:	80 91 1d 20 	lds	r24, 0x201D
     2de:	8a 30       	cpi	r24, 0x0A	; 10
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_25+0x62>
     2e2:	52 c0       	rjmp	.+164    	; 0x388 <__vector_25+0x106>
		FlushSerialBuffer(&USART_PC_Data);
     2e4:	82 e6       	ldi	r24, 0x62	; 98
     2e6:	90 e2       	ldi	r25, 0x20	; 32
     2e8:	0e 94 32 01 	call	0x264	; 0x264 <_Z17FlushSerialBufferP16Usart_and_buffer>
		canAcceptPackets = false;
     2ec:	10 92 00 20 	sts	0x2000, r1
		
		gripStepper.desiredGripState = ~(recieveBuffer[1] & (1 << 1)); //0b00000010
     2f0:	80 91 14 20 	lds	r24, 0x2014
     2f4:	82 70       	andi	r24, 0x02	; 2
     2f6:	80 95       	com	r24
     2f8:	80 93 31 20 	sts	0x2031, r24
		baseStepper.desiredPos = (recieveBuffer[2]+recieveBuffer[3]);
     2fc:	20 91 15 20 	lds	r18, 0x2015
     300:	80 91 16 20 	lds	r24, 0x2016
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	82 0f       	add	r24, r18
     308:	91 1d       	adc	r25, r1
     30a:	80 93 29 20 	sts	0x2029, r24
     30e:	90 93 2a 20 	sts	0x202A, r25
		lowerAct.setDesired((double(recieveBuffer[4]+recieveBuffer[5]) / double(100)));
     312:	80 91 17 20 	lds	r24, 0x2017
     316:	60 91 18 20 	lds	r22, 0x2018
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	68 0f       	add	r22, r24
     31e:	71 1d       	adc	r23, r1
     320:	88 27       	eor	r24, r24
     322:	77 fd       	sbrc	r23, 7
     324:	80 95       	com	r24
     326:	98 2f       	mov	r25, r24
     328:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 ec       	ldi	r20, 0xC8	; 200
     332:	52 e4       	ldi	r21, 0x42	; 66
     334:	0e 94 28 09 	call	0x1250	; 0x1250 <__divsf3>
     338:	ab 01       	movw	r20, r22
     33a:	bc 01       	movw	r22, r24
     33c:	8a e4       	ldi	r24, 0x4A	; 74
     33e:	90 e2       	ldi	r25, 0x20	; 32
     340:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN9motorInfo10setDesiredEf>
		upperAct.setDesired((double(recieveBuffer[6]+recieveBuffer[7]) / double(100)));
     344:	80 91 19 20 	lds	r24, 0x2019
     348:	60 91 1a 20 	lds	r22, 0x201A
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	68 0f       	add	r22, r24
     350:	71 1d       	adc	r23, r1
     352:	88 27       	eor	r24, r24
     354:	77 fd       	sbrc	r23, 7
     356:	80 95       	com	r24
     358:	98 2f       	mov	r25, r24
     35a:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	48 ec       	ldi	r20, 0xC8	; 200
     364:	52 e4       	ldi	r21, 0x42	; 66
     366:	0e 94 28 09 	call	0x1250	; 0x1250 <__divsf3>
     36a:	ab 01       	movw	r20, r22
     36c:	bc 01       	movw	r22, r24
     36e:	82 e3       	ldi	r24, 0x32	; 50
     370:	90 e2       	ldi	r25, 0x20	; 32
     372:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN9motorInfo10setDesiredEf>
		
		STATUS1_SET();
     376:	80 e4       	ldi	r24, 0x40	; 64
     378:	e0 e4       	ldi	r30, 0x40	; 64
     37a:	f6 e0       	ldi	r31, 0x06	; 6
     37c:	85 83       	std	Z+5, r24	; 0x05
		IsPacketToParse = true;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 1e 20 	sts	0x201E, r24
		bufferIndex = 0;
     384:	10 92 1d 20 	sts	0x201D, r1
	}

}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <__vector_26>:

ISR(USARTC0_DRE_vect){
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
     3d0:	82 e6       	ldi	r24, 0x62	; 98
     3d2:	90 e2       	ldi	r25, 0x20	; 32
     3d4:	0e 94 a9 08 	call	0x1152	; 0x1152 <USART_DataRegEmpty>
}
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <_Z23SetXMEGA32MhzCalibratedv>:


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     3fa:	88 ed       	ldi	r24, 0xD8	; 216
     3fc:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     404:	e0 e5       	ldi	r30, 0x50	; 80
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	81 81       	ldd	r24, Z+1	; 0x01
     40a:	81 ff       	sbrs	r24, 1
     40c:	fd cf       	rjmp	.-6      	; 0x408 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     40e:	88 ed       	ldi	r24, 0xD8	; 216
     410:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     418:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     41a:	e0 e5       	ldi	r30, 0x50	; 80
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	84 60       	ori	r24, 0x04	; 4
     422:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     424:	81 81       	ldd	r24, Z+1	; 0x01
     426:	82 ff       	sbrs	r24, 2
     428:	fd cf       	rjmp	.-6      	; 0x424 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     42a:	e0 e5       	ldi	r30, 0x50	; 80
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	86 81       	ldd	r24, Z+6	; 0x06
     430:	8d 7f       	andi	r24, 0xFD	; 253
     432:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     434:	e0 e6       	ldi	r30, 0x60	; 96
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	81 60       	ori	r24, 0x01	; 1
     43c:	80 83       	st	Z, r24
     43e:	08 95       	ret

00000440 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     440:	e0 e4       	ldi	r30, 0x40	; 64
     442:	f6 e0       	ldi	r31, 0x06	; 6
     444:	88 e0       	ldi	r24, 0x08	; 8
     446:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	60 ea       	ldi	r22, 0xA0	; 160
     450:	78 e0       	ldi	r23, 0x08	; 8
     452:	82 e6       	ldi	r24, 0x62	; 98
     454:	90 e2       	ldi	r25, 0x20	; 32
     456:	0e 94 77 08 	call	0x10ee	; 0x10ee <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     45a:	e0 91 62 20 	lds	r30, 0x2062
     45e:	f0 91 63 20 	lds	r31, 0x2063
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     466:	83 81       	ldd	r24, Z+3	; 0x03
     468:	8f 7c       	andi	r24, 0xCF	; 207
     46a:	80 61       	ori	r24, 0x10	; 16
     46c:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     46e:	a0 ea       	ldi	r26, 0xA0	; 160
     470:	b8 e0       	ldi	r27, 0x08	; 8
     472:	8f ec       	ldi	r24, 0xCF	; 207
     474:	16 96       	adiw	r26, 0x06	; 6
     476:	8c 93       	st	X, r24
     478:	16 97       	sbiw	r26, 0x06	; 6
     47a:	17 96       	adiw	r26, 0x07	; 7
     47c:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     47e:	84 81       	ldd	r24, Z+4	; 0x04
     480:	80 61       	ori	r24, 0x10	; 16
     482:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     484:	84 81       	ldd	r24, Z+4	; 0x04
     486:	88 60       	ori	r24, 0x08	; 8
     488:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     48a:	e0 ea       	ldi	r30, 0xA0	; 160
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	82 81       	ldd	r24, Z+2	; 0x02
     490:	81 60       	ori	r24, 0x01	; 1
     492:	82 83       	std	Z+2, r24	; 0x02
     494:	08 95       	ret

00000496 <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     49a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     49e:	0e 94 20 02 	call	0x440	; 0x440 <_Z12SetupPCCommsv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     4a2:	80 ee       	ldi	r24, 0xE0	; 224
     4a4:	e0 e4       	ldi	r30, 0x40	; 64
     4a6:	f6 e0       	ldi	r31, 0x06	; 6
     4a8:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     4aa:	e0 e6       	ldi	r30, 0x60	; 96
     4ac:	f6 e0       	ldi	r31, 0x06	; 6
     4ae:	9f ef       	ldi	r25, 0xFF	; 255
     4b0:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b6 e0       	ldi	r27, 0x06	; 6
     4b6:	11 96       	adiw	r26, 0x01	; 1
     4b8:	8c 93       	st	X, r24
     4ba:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     4bc:	c0 e2       	ldi	r28, 0x20	; 32
     4be:	d6 e0       	ldi	r29, 0x06	; 6
     4c0:	87 e0       	ldi	r24, 0x07	; 7
     4c2:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     4c4:	84 e0       	ldi	r24, 0x04	; 4
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	8c 93       	st	X, r24
     4ca:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     4cc:	98 e0       	ldi	r25, 0x08	; 8
     4ce:	12 96       	adiw	r26, 0x02	; 2
     4d0:	9c 93       	st	X, r25
     4d2:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit	
     4d4:	9a 83       	std	Y+2, r25	; 0x02
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_ENABLE();
     4d6:	20 e4       	ldi	r18, 0x40	; 64
     4d8:	26 83       	std	Z+6, r18	; 0x06
	
	//Setup Microstepping
	MD1_M0_CLR();
     4da:	90 e2       	ldi	r25, 0x20	; 32
     4dc:	16 96       	adiw	r26, 0x06	; 6
     4de:	9c 93       	st	X, r25
     4e0:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     4e2:	16 96       	adiw	r26, 0x06	; 6
     4e4:	2c 93       	st	X, r18
     4e6:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_SET();
     4e8:	20 e8       	ldi	r18, 0x80	; 128
     4ea:	15 96       	adiw	r26, 0x05	; 5
     4ec:	2c 93       	st	X, r18
	
	MD1_DIR_CLR();
     4ee:	20 e1       	ldi	r18, 0x10	; 16
     4f0:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     4f2:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     4f4:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_SET();
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	9d 83       	std	Y+5, r25	; 0x05
	MD2_M2_CLR();
     4fe:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     500:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     502:	96 83       	std	Z+6, r25	; 0x06
	
	sei();
     504:	78 94       	sei
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <_Z12SendStringPCPc>:

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     50c:	fc 01       	movw	r30, r24
     50e:	20 81       	ld	r18, Z
     510:	22 23       	and	r18, r18
     512:	59 f0       	breq	.+22     	; 0x52a <_Z12SendStringPCPc+0x1e>
     514:	dc 01       	movw	r26, r24
     516:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     518:	e0 ea       	ldi	r30, 0xA0	; 160
     51a:	f8 e0       	ldi	r31, 0x08	; 8
     51c:	81 81       	ldd	r24, Z+1	; 0x01
     51e:	85 ff       	sbrs	r24, 5
     520:	fd cf       	rjmp	.-6      	; 0x51c <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);	
     522:	20 83       	st	Z, r18
	
	sei();
}

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     524:	2d 91       	ld	r18, X+
     526:	21 11       	cpse	r18, r1
     528:	f9 cf       	rjmp	.-14     	; 0x51c <_Z12SendStringPCPc+0x10>
     52a:	08 95       	ret

0000052c <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	8c 01       	movw	r16, r24
     53a:	c7 e0       	ldi	r28, 0x07	; 7
     53c:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     53e:	e1 2c       	mov	r14, r1
     540:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     542:	01 15       	cp	r16, r1
     544:	11 05       	cpc	r17, r1
     546:	39 f4       	brne	.+14     	; 0x556 <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     550:	e8 0e       	add	r14, r24
     552:	f9 1e       	adc	r15, r25
     554:	09 c0       	rjmp	.+18     	; 0x568 <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     556:	01 30       	cpi	r16, 0x01	; 1
     558:	11 05       	cpc	r17, r1
     55a:	31 f4       	brne	.+12     	; 0x568 <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     564:	e8 0e       	add	r14, r24
     566:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     568:	8f e3       	ldi	r24, 0x3F	; 63
     56a:	9f e1       	ldi	r25, 0x1F	; 31
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <_Z9smoothADCi+0x40>
     570:	00 c0       	rjmp	.+0      	; 0x572 <_Z9smoothADCi+0x46>
     572:	00 00       	nop
     574:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     576:	20 97       	sbiw	r28, 0x00	; 0
     578:	21 f7       	brne	.-56     	; 0x542 <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     57a:	c7 01       	movw	r24, r14
     57c:	67 e0       	ldi	r22, 0x07	; 7
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodhi4>
     584:	cb 01       	movw	r24, r22
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     59c:	20 91 5e 20 	lds	r18, 0x205E
     5a0:	30 91 5f 20 	lds	r19, 0x205F
     5a4:	40 91 60 20 	lds	r20, 0x2060
     5a8:	50 91 61 20 	lds	r21, 0x2061
     5ac:	60 91 5a 20 	lds	r22, 0x205A
     5b0:	70 91 5b 20 	lds	r23, 0x205B
     5b4:	80 91 5c 20 	lds	r24, 0x205C
     5b8:	90 91 5d 20 	lds	r25, 0x205D
     5bc:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     5c0:	6b 01       	movw	r12, r22
     5c2:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     5ce:	18 16       	cp	r1, r24
     5d0:	24 f0       	brlt	.+8      	; 0x5da <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     5d2:	f7 fa       	bst	r15, 7
     5d4:	f0 94       	com	r15
     5d6:	f7 f8       	bld	r15, 7
     5d8:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     5da:	a7 01       	movw	r20, r14
     5dc:	96 01       	movw	r18, r12
     5de:	60 91 4e 20 	lds	r22, 0x204E
     5e2:	70 91 4f 20 	lds	r23, 0x204F
     5e6:	80 91 50 20 	lds	r24, 0x2050
     5ea:	90 91 51 20 	lds	r25, 0x2051
     5ee:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     5f2:	18 16       	cp	r1, r24
     5f4:	44 f4       	brge	.+16     	; 0x606 <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     5f6:	ec e4       	ldi	r30, 0x4C	; 76
     5f8:	f0 e2       	ldi	r31, 0x20	; 32
     5fa:	80 81       	ld	r24, Z
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	80 83       	st	Z, r24
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	04 c0       	rjmp	.+8      	; 0x60e <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     606:	10 92 4c 20 	sts	0x204C, r1
     60a:	10 92 4d 20 	sts	0x204D, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     60e:	20 91 46 20 	lds	r18, 0x2046
     612:	30 91 47 20 	lds	r19, 0x2047
     616:	40 91 48 20 	lds	r20, 0x2048
     61a:	50 91 49 20 	lds	r21, 0x2049
     61e:	60 91 42 20 	lds	r22, 0x2042
     622:	70 91 43 20 	lds	r23, 0x2043
     626:	80 91 44 20 	lds	r24, 0x2044
     62a:	90 91 45 20 	lds	r25, 0x2045
     62e:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     632:	6b 01       	movw	r12, r22
     634:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	a9 01       	movw	r20, r18
     63c:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     640:	18 16       	cp	r1, r24
     642:	24 f0       	brlt	.+8      	; 0x64c <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     644:	f7 fa       	bst	r15, 7
     646:	f0 94       	com	r15
     648:	f7 f8       	bld	r15, 7
     64a:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     64c:	a7 01       	movw	r20, r14
     64e:	96 01       	movw	r18, r12
     650:	60 91 36 20 	lds	r22, 0x2036
     654:	70 91 37 20 	lds	r23, 0x2037
     658:	80 91 38 20 	lds	r24, 0x2038
     65c:	90 91 39 20 	lds	r25, 0x2039
     660:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     664:	18 16       	cp	r1, r24
     666:	44 f4       	brge	.+16     	; 0x678 <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     668:	e4 e3       	ldi	r30, 0x34	; 52
     66a:	f0 e2       	ldi	r31, 0x20	; 32
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	80 83       	st	Z, r24
     674:	91 83       	std	Z+1, r25	; 0x01
     676:	04 c0       	rjmp	.+8      	; 0x680 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     678:	10 92 34 20 	sts	0x2034, r1
     67c:	10 92 35 20 	sts	0x2035, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     680:	20 91 34 20 	lds	r18, 0x2034
     684:	30 91 35 20 	lds	r19, 0x2035
     688:	80 91 32 20 	lds	r24, 0x2032
     68c:	90 91 33 20 	lds	r25, 0x2033
     690:	28 17       	cp	r18, r24
     692:	39 07       	cpc	r19, r25
     694:	24 f0       	brlt	.+8      	; 0x69e <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     696:	82 e3       	ldi	r24, 0x32	; 50
     698:	90 e2       	ldi	r25, 0x20	; 32
     69a:	0e 94 71 06 	call	0xce2	; 0xce2 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     69e:	20 91 4c 20 	lds	r18, 0x204C
     6a2:	30 91 4d 20 	lds	r19, 0x204D
     6a6:	80 91 32 20 	lds	r24, 0x2032
     6aa:	90 91 33 20 	lds	r25, 0x2033
     6ae:	28 17       	cp	r18, r24
     6b0:	39 07       	cpc	r19, r25
     6b2:	24 f0       	brlt	.+8      	; 0x6bc <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     6b4:	8a e4       	ldi	r24, 0x4A	; 74
     6b6:	90 e2       	ldi	r25, 0x20	; 32
     6b8:	0e 94 71 06 	call	0xce2	; 0xce2 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 96 02 	call	0x52c	; 0x52c <_Z9smoothADCi>
     6c4:	bc 01       	movw	r22, r24
     6c6:	88 27       	eor	r24, r24
     6c8:	77 fd       	sbrc	r23, 7
     6ca:	80 95       	com	r24
     6cc:	98 2f       	mov	r25, r24
     6ce:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     6d2:	2f e1       	ldi	r18, 0x1F	; 31
     6d4:	35 e8       	ldi	r19, 0x85	; 133
     6d6:	48 e6       	ldi	r20, 0x68	; 104
     6d8:	52 e4       	ldi	r21, 0x42	; 66
     6da:	0e 94 28 09 	call	0x1250	; 0x1250 <__divsf3>
     6de:	25 e8       	ldi	r18, 0x85	; 133
     6e0:	3b ee       	ldi	r19, 0xEB	; 235
     6e2:	41 ed       	ldi	r20, 0xD1	; 209
     6e4:	5e e3       	ldi	r21, 0x3E	; 62
     6e6:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     6ea:	60 93 5a 20 	sts	0x205A, r22
     6ee:	70 93 5b 20 	sts	0x205B, r23
     6f2:	80 93 5c 20 	sts	0x205C, r24
     6f6:	90 93 5d 20 	sts	0x205D, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 96 02 	call	0x52c	; 0x52c <_Z9smoothADCi>
     702:	bc 01       	movw	r22, r24
     704:	88 27       	eor	r24, r24
     706:	77 fd       	sbrc	r23, 7
     708:	80 95       	com	r24
     70a:	98 2f       	mov	r25, r24
     70c:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     710:	2f e1       	ldi	r18, 0x1F	; 31
     712:	35 e8       	ldi	r19, 0x85	; 133
     714:	48 e6       	ldi	r20, 0x68	; 104
     716:	52 e4       	ldi	r21, 0x42	; 66
     718:	0e 94 28 09 	call	0x1250	; 0x1250 <__divsf3>
     71c:	25 e8       	ldi	r18, 0x85	; 133
     71e:	3b ee       	ldi	r19, 0xEB	; 235
     720:	41 ed       	ldi	r20, 0xD1	; 209
     722:	5e e3       	ldi	r21, 0x3E	; 62
     724:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     728:	60 93 42 20 	sts	0x2042, r22
     72c:	70 93 43 20 	sts	0x2043, r23
     730:	80 93 44 20 	sts	0x2044, r24
     734:	90 93 45 20 	sts	0x2045, r25
}
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	08 95       	ret

00000742 <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     742:	4f 92       	push	r4
     744:	5f 92       	push	r5
     746:	6f 92       	push	r6
     748:	7f 92       	push	r7
     74a:	8f 92       	push	r8
     74c:	9f 92       	push	r9
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
		
	if(act == LOWER){
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	09 f0       	breq	.+2      	; 0x760 <_Z13getMotorSpeedi+0x1e>
     75e:	71 c0       	rjmp	.+226    	; 0x842 <_Z13getMotorSpeedi+0x100>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     760:	40 90 5a 20 	lds	r4, 0x205A
     764:	50 90 5b 20 	lds	r5, 0x205B
     768:	60 90 5c 20 	lds	r6, 0x205C
     76c:	70 90 5d 20 	lds	r7, 0x205D
     770:	20 91 5e 20 	lds	r18, 0x205E
     774:	30 91 5f 20 	lds	r19, 0x205F
     778:	40 91 60 20 	lds	r20, 0x2060
     77c:	50 91 61 20 	lds	r21, 0x2061
     780:	c3 01       	movw	r24, r6
     782:	b2 01       	movw	r22, r4
     784:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     788:	6b 01       	movw	r12, r22
     78a:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	a9 01       	movw	r20, r18
     792:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     796:	18 16       	cp	r1, r24
     798:	24 f0       	brlt	.+8      	; 0x7a2 <_Z13getMotorSpeedi+0x60>
		return input;
	else
		return input * -1;
     79a:	f7 fa       	bst	r15, 7
     79c:	f0 94       	com	r15
     79e:	f7 f8       	bld	r15, 7
     7a0:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     7a2:	80 90 52 20 	lds	r8, 0x2052
     7a6:	90 90 53 20 	lds	r9, 0x2053
     7aa:	a0 90 54 20 	lds	r10, 0x2054
     7ae:	b0 90 55 20 	lds	r11, 0x2055
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	5f e3       	ldi	r21, 0x3F	; 63
     7ba:	c5 01       	movw	r24, r10
     7bc:	b4 01       	movw	r22, r8
     7be:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     7c2:	a7 01       	movw	r20, r14
     7c4:	96 01       	movw	r18, r12
     7c6:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	54 f4       	brge	.+20     	; 0x7e2 <_Z13getMotorSpeedi+0xa0>
			return lowerAct.speed / 3;
     7ce:	80 91 56 20 	lds	r24, 0x2056
     7d2:	90 91 57 20 	lds	r25, 0x2057
     7d6:	63 e0       	ldi	r22, 0x03	; 3
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodhi4>
     7de:	cb 01       	movw	r24, r22
     7e0:	a6 c0       	rjmp	.+332    	; 0x92e <_Z13getMotorSpeedi+0x1ec>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     7e2:	20 91 5e 20 	lds	r18, 0x205E
     7e6:	30 91 5f 20 	lds	r19, 0x205F
     7ea:	40 91 60 20 	lds	r20, 0x2060
     7ee:	50 91 61 20 	lds	r21, 0x2061
     7f2:	c3 01       	movw	r24, r6
     7f4:	b2 01       	movw	r22, r4
     7f6:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     7fa:	6b 01       	movw	r12, r22
     7fc:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	a9 01       	movw	r20, r18
     804:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     808:	18 16       	cp	r1, r24
     80a:	24 f0       	brlt	.+8      	; 0x814 <_Z13getMotorSpeedi+0xd2>
		return input;
	else
		return input * -1;
     80c:	f7 fa       	bst	r15, 7
     80e:	f0 94       	com	r15
     810:	f7 f8       	bld	r15, 7
     812:	f0 94       	com	r15
int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
			return lowerAct.speed / 3;
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     814:	a7 01       	movw	r20, r14
     816:	96 01       	movw	r18, r12
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     820:	18 16       	cp	r1, r24
     822:	54 f4       	brge	.+20     	; 0x838 <_Z13getMotorSpeedi+0xf6>
			return lowerAct.speed / 2;
     824:	80 91 56 20 	lds	r24, 0x2056
     828:	90 91 57 20 	lds	r25, 0x2057
     82c:	99 23       	and	r25, r25
     82e:	0c f4       	brge	.+2      	; 0x832 <_Z13getMotorSpeedi+0xf0>
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	95 95       	asr	r25
     834:	87 95       	ror	r24
     836:	7b c0       	rjmp	.+246    	; 0x92e <_Z13getMotorSpeedi+0x1ec>
		else
			return lowerAct.speed;
     838:	80 91 56 20 	lds	r24, 0x2056
     83c:	90 91 57 20 	lds	r25, 0x2057
     840:	76 c0       	rjmp	.+236    	; 0x92e <_Z13getMotorSpeedi+0x1ec>
	}
	else if (act == UPPER){
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	09 f0       	breq	.+2      	; 0x848 <_Z13getMotorSpeedi+0x106>
     846:	71 c0       	rjmp	.+226    	; 0x92a <_Z13getMotorSpeedi+0x1e8>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     848:	40 90 42 20 	lds	r4, 0x2042
     84c:	50 90 43 20 	lds	r5, 0x2043
     850:	60 90 44 20 	lds	r6, 0x2044
     854:	70 90 45 20 	lds	r7, 0x2045
     858:	20 91 46 20 	lds	r18, 0x2046
     85c:	30 91 47 20 	lds	r19, 0x2047
     860:	40 91 48 20 	lds	r20, 0x2048
     864:	50 91 49 20 	lds	r21, 0x2049
     868:	c3 01       	movw	r24, r6
     86a:	b2 01       	movw	r22, r4
     86c:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     870:	6b 01       	movw	r12, r22
     872:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	a9 01       	movw	r20, r18
     87a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     87e:	18 16       	cp	r1, r24
     880:	24 f0       	brlt	.+8      	; 0x88a <_Z13getMotorSpeedi+0x148>
		return input;
	else
		return input * -1;
     882:	f7 fa       	bst	r15, 7
     884:	f0 94       	com	r15
     886:	f7 f8       	bld	r15, 7
     888:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     88a:	80 90 3a 20 	lds	r8, 0x203A
     88e:	90 90 3b 20 	lds	r9, 0x203B
     892:	a0 90 3c 20 	lds	r10, 0x203C
     896:	b0 90 3d 20 	lds	r11, 0x203D
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     8aa:	a7 01       	movw	r20, r14
     8ac:	96 01       	movw	r18, r12
     8ae:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     8b2:	18 16       	cp	r1, r24
     8b4:	54 f4       	brge	.+20     	; 0x8ca <_Z13getMotorSpeedi+0x188>
			return upperAct.speed / 3;
     8b6:	80 91 3e 20 	lds	r24, 0x203E
     8ba:	90 91 3f 20 	lds	r25, 0x203F
     8be:	63 e0       	ldi	r22, 0x03	; 3
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodhi4>
     8c6:	cb 01       	movw	r24, r22
     8c8:	32 c0       	rjmp	.+100    	; 0x92e <_Z13getMotorSpeedi+0x1ec>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     8ca:	20 91 46 20 	lds	r18, 0x2046
     8ce:	30 91 47 20 	lds	r19, 0x2047
     8d2:	40 91 48 20 	lds	r20, 0x2048
     8d6:	50 91 49 20 	lds	r21, 0x2049
     8da:	c3 01       	movw	r24, r6
     8dc:	b2 01       	movw	r22, r4
     8de:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	a9 01       	movw	r20, r18
     8ec:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     8f0:	18 16       	cp	r1, r24
     8f2:	24 f0       	brlt	.+8      	; 0x8fc <_Z13getMotorSpeedi+0x1ba>
		return input;
	else
		return input * -1;
     8f4:	f7 fa       	bst	r15, 7
     8f6:	f0 94       	com	r15
     8f8:	f7 f8       	bld	r15, 7
     8fa:	f0 94       	com	r15
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
			return upperAct.speed / 3;
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     8fc:	a7 01       	movw	r20, r14
     8fe:	96 01       	movw	r18, r12
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     908:	18 16       	cp	r1, r24
     90a:	54 f4       	brge	.+20     	; 0x920 <_Z13getMotorSpeedi+0x1de>
			return upperAct.speed / 2;
     90c:	80 91 3e 20 	lds	r24, 0x203E
     910:	90 91 3f 20 	lds	r25, 0x203F
     914:	99 23       	and	r25, r25
     916:	0c f4       	brge	.+2      	; 0x91a <_Z13getMotorSpeedi+0x1d8>
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	95 95       	asr	r25
     91c:	87 95       	ror	r24
     91e:	07 c0       	rjmp	.+14     	; 0x92e <_Z13getMotorSpeedi+0x1ec>
		else
			return upperAct.speed;
     920:	80 91 3e 20 	lds	r24, 0x203E
     924:	90 91 3f 20 	lds	r25, 0x203F
     928:	02 c0       	rjmp	.+4      	; 0x92e <_Z13getMotorSpeedi+0x1ec>
	}
	
	
	////////
	return 0;
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
}
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	9f 90       	pop	r9
     93c:	8f 90       	pop	r8
     93e:	7f 90       	pop	r7
     940:	6f 90       	pop	r6
     942:	5f 90       	pop	r5
     944:	4f 90       	pop	r4
     946:	08 95       	ret

00000948 <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	f1 f4       	brne	.+60     	; 0x988 <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     94c:	80 91 58 20 	lds	r24, 0x2058
     950:	90 91 59 20 	lds	r25, 0x2059
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	09 f4       	brne	.+2      	; 0x95a <_Z11getMotorDiri+0x12>
     958:	3e c0       	rjmp	.+124    	; 0x9d6 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     95a:	20 91 5e 20 	lds	r18, 0x205E
     95e:	30 91 5f 20 	lds	r19, 0x205F
     962:	40 91 60 20 	lds	r20, 0x2060
     966:	50 91 61 20 	lds	r21, 0x2061
     96a:	60 91 5a 20 	lds	r22, 0x205A
     96e:	70 91 5b 20 	lds	r23, 0x205B
     972:	80 91 5c 20 	lds	r24, 0x205C
     976:	90 91 5d 20 	lds	r25, 0x205D
     97a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	14 f5       	brge	.+68     	; 0x9c6 <_Z11getMotorDiri+0x7e>
			return -1;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	9f ef       	ldi	r25, 0xFF	; 255
     986:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	01 f5       	brne	.+64     	; 0x9cc <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     98c:	80 91 40 20 	lds	r24, 0x2040
     990:	90 91 41 20 	lds	r25, 0x2041
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	f9 f0       	breq	.+62     	; 0x9d6 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     998:	20 91 46 20 	lds	r18, 0x2046
     99c:	30 91 47 20 	lds	r19, 0x2047
     9a0:	40 91 48 20 	lds	r20, 0x2048
     9a4:	50 91 49 20 	lds	r21, 0x2049
     9a8:	60 91 42 20 	lds	r22, 0x2042
     9ac:	70 91 43 20 	lds	r23, 0x2043
     9b0:	80 91 44 20 	lds	r24, 0x2044
     9b4:	90 91 45 20 	lds	r25, 0x2045
     9b8:	0e 94 4f 0a 	call	0x149e	; 0x149e <__gesf2>
     9bc:	18 16       	cp	r1, r24
     9be:	4c f4       	brge	.+18     	; 0x9d2 <_Z11getMotorDiri+0x8a>
			return -1;
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	9f ef       	ldi	r25, 0xFF	; 255
     9c4:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     9d6:	08 95       	ret

000009d8 <main>:

int main(void)
{
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	00 d0       	rcall	.+0      	; 0x9de <main+0x6>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <main+0x8>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     9e4:	0e 94 4b 02 	call	0x496	; 0x496 <_Z25DemInitThingsYouBeenDoingv>
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	87 ea       	ldi	r24, 0xA7	; 167
     9ec:	91 e6       	ldi	r25, 0x61	; 97
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	80 40       	sbci	r24, 0x00	; 0
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <main+0x16>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <main+0x20>
     9f8:	00 00       	nop
	_delay_ms(1000);
	char SendBuffer[200];
	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     9fa:	40 e6       	ldi	r20, 0x60	; 96
     9fc:	56 e0       	ldi	r21, 0x06	; 6
     9fe:	60 ea       	ldi	r22, 0xA0	; 160
     a00:	79 e0       	ldi	r23, 0x09	; 9
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 2.5;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e2       	ldi	r26, 0x20	; 32
     a10:	b0 e4       	ldi	r27, 0x40	; 64
     a12:	80 93 46 20 	sts	0x2046, r24
     a16:	90 93 47 20 	sts	0x2047, r25
     a1a:	a0 93 48 20 	sts	0x2048, r26
     a1e:	b0 93 49 20 	sts	0x2049, r27
	lowerAct.desiredPos = 3.5;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a0 e6       	ldi	r26, 0x60	; 96
     a28:	b0 e4       	ldi	r27, 0x40	; 64
     a2a:	80 93 5e 20 	sts	0x205E, r24
     a2e:	90 93 5f 20 	sts	0x205F, r25
     a32:	a0 93 60 20 	sts	0x2060, r26
     a36:	b0 93 61 20 	sts	0x2061, r27
	
	lowerAct.enable();
     a3a:	8a e4       	ldi	r24, 0x4A	; 74
     a3c:	90 e2       	ldi	r25, 0x20	; 32
     a3e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN9motorInfo6enableEv>
	upperAct.enable();
     a42:	82 e3       	ldi	r24, 0x32	; 50
     a44:	90 e2       	ldi	r25, 0x20	; 32
     a46:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN9motorInfo6enableEv>
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while(lowerAct.enabled || upperAct.enabled){
     a4a:	0f 2e       	mov	r0, r31
     a4c:	f8 e5       	ldi	r31, 0x58	; 88
     a4e:	ef 2e       	mov	r14, r31
     a50:	f0 e2       	ldi	r31, 0x20	; 32
     a52:	ff 2e       	mov	r15, r31
     a54:	f0 2d       	mov	r31, r0
     a56:	00 e4       	ldi	r16, 0x40	; 64
     a58:	10 e2       	ldi	r17, 0x20	; 32
     a5a:	22 c0       	rjmp	.+68     	; 0xaa0 <main+0xc8>
		checkActPosition();
     a5c:	0e 94 ca 02 	call	0x594	; 0x594 <_Z16checkActPositionv>
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 a1 03 	call	0x742	; 0x742 <_Z13getMotorSpeedi>
     a68:	c8 2e       	mov	r12, r24
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 a4 04 	call	0x948	; 0x948 <_Z11getMotorDiri>
     a72:	b8 2e       	mov	r11, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 a1 03 	call	0x742	; 0x742 <_Z13getMotorSpeedi>
     a7c:	d8 2e       	mov	r13, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 a4 04 	call	0x948	; 0x948 <_Z11getMotorDiri>
     a86:	bc 9c       	mul	r11, r12
     a88:	40 2d       	mov	r20, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	41 58       	subi	r20, 0x81	; 129
     a8e:	8d 9d       	mul	r24, r13
     a90:	80 2d       	mov	r24, r0
     a92:	11 24       	eor	r1, r1
     a94:	6f e7       	ldi	r22, 0x7F	; 127
     a96:	68 0f       	add	r22, r24
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN10Sabertooth11ParsePacketEhh>
	lowerAct.enable();
	upperAct.enable();
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while(lowerAct.enabled || upperAct.enabled){
     aa0:	f7 01       	movw	r30, r14
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	89 2b       	or	r24, r25
     aa8:	c9 f6       	brne	.-78     	; 0xa5c <main+0x84>
     aaa:	f8 01       	movw	r30, r16
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	89 2b       	or	r24, r25
     ab2:	a1 f6       	brne	.-88     	; 0xa5c <main+0x84>
		checkActPosition();
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
	}

	baseStepper.calibrateBase();
     ab4:	8f e1       	ldi	r24, 0x1F	; 31
     ab6:	90 e2       	ldi	r25, 0x20	; 32
     ab8:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN13rotateStepper13calibrateBaseEv>
	MD2_DIR_CLR();
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	e0 e6       	ldi	r30, 0x60	; 96
     ac0:	f6 e0       	ldi	r31, 0x06	; 6
     ac2:	86 83       	std	Z+6, r24	; 0x06
	baseStepper.rotateBase(0);  //Note that this function takes an angle relative
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	8f e1       	ldi	r24, 0x1F	; 31
     aca:	90 e2       	ldi	r25, 0x20	; 32
     acc:	0e 94 33 07 	call	0xe66	; 0xe66 <_ZN13rotateStepper10rotateBaseEi>
			}else{
				bufferIndex = 0;
			}
		}else if(CurrentState == ARMControl){
			if(IsPacketToParse){
				ERROR_SET();									//Show light when done with actuators
     ad0:	0f 2e       	mov	r0, r31
     ad2:	f0 e4       	ldi	r31, 0x40	; 64
     ad4:	8f 2e       	mov	r8, r31
     ad6:	f6 e0       	ldi	r31, 0x06	; 6
     ad8:	9f 2e       	mov	r9, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	68 94       	set
     ade:	33 24       	eor	r3, r3
     ae0:	37 f8       	bld	r3, 7
				upperAct.enable();						//Re-enabled lower actuator

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
				checkActPosition();								//Check once to avoid loop is possible
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f8 e5       	ldi	r31, 0x58	; 88
     ae6:	ef 2e       	mov	r14, r31
     ae8:	f0 e2       	ldi	r31, 0x20	; 32
     aea:	ff 2e       	mov	r15, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	0f 2e       	mov	r0, r31
     af0:	f0 e4       	ldi	r31, 0x40	; 64
     af2:	af 2e       	mov	r10, r31
     af4:	f0 e2       	ldi	r31, 0x20	; 32
     af6:	bf 2e       	mov	r11, r31
     af8:	f0 2d       	mov	r31, r0

				}
				
				IsPacketToParse = false;
				ERROR_CLR();
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     afa:	00 ea       	ldi	r16, 0xA0	; 160
     afc:	18 e0       	ldi	r17, 0x08	; 8
				USART_PutChar(&USARTC0, 255);
     afe:	44 24       	eor	r4, r4
     b00:	4a 94       	dec	r4
//	SendStringPC(SendBuffer);								//Send Dem Strings
	while(1){
		if(CurrentState == WaitForHost){
			SendStringPC("ID: ArmControl\r\n");
			_delay_ms(500);
			if(recieveBuffer[0] == 'r'){
     b02:	0f 2e       	mov	r0, r31
     b04:	f3 e1       	ldi	r31, 0x13	; 19
     b06:	cf 2e       	mov	r12, r31
     b08:	f0 e2       	ldi	r31, 0x20	; 32
     b0a:	df 2e       	mov	r13, r31
     b0c:	f0 2d       	mov	r31, r0
	/////////////Initial Calibration and Default Positions//////////////////////

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	while(1){
		if(CurrentState == WaitForHost){
     b0e:	80 91 12 20 	lds	r24, 0x2012
     b12:	81 11       	cpse	r24, r1
     b14:	1e c0       	rjmp	.+60     	; 0xb52 <main+0x17a>
			SendStringPC("ID: ArmControl\r\n");
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e2       	ldi	r25, 0x20	; 32
     b1a:	0e 94 86 02 	call	0x50c	; 0x50c <_Z12SendStringPCPc>
     b1e:	ff ef       	ldi	r31, 0xFF	; 255
     b20:	23 ed       	ldi	r18, 0xD3	; 211
     b22:	80 e3       	ldi	r24, 0x30	; 48
     b24:	f1 50       	subi	r31, 0x01	; 1
     b26:	20 40       	sbci	r18, 0x00	; 0
     b28:	80 40       	sbci	r24, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <main+0x14c>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <main+0x156>
     b2e:	00 00       	nop
			_delay_ms(500);
			if(recieveBuffer[0] == 'r'){
     b30:	f6 01       	movw	r30, r12
     b32:	80 81       	ld	r24, Z
     b34:	82 37       	cpi	r24, 0x72	; 114
     b36:	51 f4       	brne	.+20     	; 0xb4c <main+0x174>
				CurrentState = ARMControl;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 12 20 	sts	0x2012, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     b3e:	f8 01       	movw	r30, r16
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	85 ff       	sbrs	r24, 5
     b44:	fc cf       	rjmp	.-8      	; 0xb3e <main+0x166>
				USART_PutChar(&USARTC0, 'r');
     b46:	82 e7       	ldi	r24, 0x72	; 114
     b48:	80 83       	st	Z, r24
     b4a:	e1 cf       	rjmp	.-62     	; 0xb0e <main+0x136>
			}else{
				bufferIndex = 0;
     b4c:	10 92 1d 20 	sts	0x201D, r1
     b50:	de cf       	rjmp	.-68     	; 0xb0e <main+0x136>
			}
		}else if(CurrentState == ARMControl){
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	e1 f6       	brne	.-72     	; 0xb0e <main+0x136>
			if(IsPacketToParse){
     b56:	80 91 1e 20 	lds	r24, 0x201E
     b5a:	88 23       	and	r24, r24
     b5c:	c1 f2       	breq	.-80     	; 0xb0e <main+0x136>
				ERROR_SET();									//Show light when done with actuators
     b5e:	f4 01       	movw	r30, r8
     b60:	35 82       	std	Z+5, r3	; 0x05
				lowerAct.enable();						//Re-enable lower actuator
     b62:	8a e4       	ldi	r24, 0x4A	; 74
     b64:	90 e2       	ldi	r25, 0x20	; 32
     b66:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN9motorInfo6enableEv>
				upperAct.enable();						//Re-enabled lower actuator
     b6a:	82 e3       	ldi	r24, 0x32	; 50
     b6c:	90 e2       	ldi	r25, 0x20	; 32
     b6e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN9motorInfo6enableEv>

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
     b72:	e9 e2       	ldi	r30, 0x29	; 41
     b74:	f0 e2       	ldi	r31, 0x20	; 32
     b76:	60 81       	ld	r22, Z
     b78:	71 81       	ldd	r23, Z+1	; 0x01
     b7a:	8f e1       	ldi	r24, 0x1F	; 31
     b7c:	90 e2       	ldi	r25, 0x20	; 32
     b7e:	0e 94 33 07 	call	0xe66	; 0xe66 <_ZN13rotateStepper10rotateBaseEi>
					
				checkActPosition();								//Check once to avoid loop is possible
     b82:	0e 94 ca 02 	call	0x594	; 0x594 <_Z16checkActPositionv>
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     b86:	22 c0       	rjmp	.+68     	; 0xbcc <main+0x1f4>
					checkActPosition();							//Check positions
     b88:	0e 94 ca 02 	call	0x594	; 0x594 <_Z16checkActPositionv>
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 a1 03 	call	0x742	; 0x742 <_Z13getMotorSpeedi>
     b94:	68 2e       	mov	r6, r24
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 a4 04 	call	0x948	; 0x948 <_Z11getMotorDiri>
     b9e:	58 2e       	mov	r5, r24
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 a1 03 	call	0x742	; 0x742 <_Z13getMotorSpeedi>
     ba8:	78 2e       	mov	r7, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 a4 04 	call	0x948	; 0x948 <_Z11getMotorDiri>
     bb2:	56 9c       	mul	r5, r6
     bb4:	40 2d       	mov	r20, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	41 58       	subi	r20, 0x81	; 129
     bba:	87 9d       	mul	r24, r7
     bbc:	80 2d       	mov	r24, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	6f e7       	ldi	r22, 0x7F	; 127
     bc2:	68 0f       	add	r22, r24
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN10Sabertooth11ParsePacketEhh>
				upperAct.enable();						//Re-enabled lower actuator

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
				checkActPosition();								//Check once to avoid loop is possible
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     bcc:	f7 01       	movw	r30, r14
     bce:	80 81       	ld	r24, Z
     bd0:	91 81       	ldd	r25, Z+1	; 0x01
     bd2:	89 2b       	or	r24, r25
     bd4:	c9 f6       	brne	.-78     	; 0xb88 <main+0x1b0>
     bd6:	f5 01       	movw	r30, r10
     bd8:	80 81       	ld	r24, Z
     bda:	91 81       	ldd	r25, Z+1	; 0x01
     bdc:	89 2b       	or	r24, r25
     bde:	a1 f6       	brne	.-88     	; 0xb88 <main+0x1b0>
					checkActPosition();							//Check positions
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
				}												//Exit when done moving
					

				DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	6f e7       	ldi	r22, 0x7F	; 127
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN10Sabertooth11ParsePacketEhh>

				if(gripStepper.desiredGripState == GRIP){
     bec:	e1 e3       	ldi	r30, 0x31	; 49
     bee:	f0 e2       	ldi	r31, 0x20	; 32
     bf0:	80 81       	ld	r24, Z
     bf2:	81 11       	cpse	r24, r1
     bf4:	0b c0       	rjmp	.+22     	; 0xc0c <main+0x234>
					gripStepper.enable();
     bf6:	8b e2       	ldi	r24, 0x2B	; 43
     bf8:	90 e2       	ldi	r25, 0x20	; 32
     bfa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN11stepperInfo6enableEv>
					gripStepper.processCommand(GRIP);
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	8b e2       	ldi	r24, 0x2B	; 43
     c04:	90 e2       	ldi	r25, 0x20	; 32
     c06:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN11stepperInfo14processCommandEi>
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <main+0x252>
				}else if(gripStepper.desiredGripState == RELEASE){
     c0c:	e1 e3       	ldi	r30, 0x31	; 49
     c0e:	f0 e2       	ldi	r31, 0x20	; 32
     c10:	80 81       	ld	r24, Z
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	51 f4       	brne	.+20     	; 0xc2a <main+0x252>
					gripStepper.enable();
     c16:	8b e2       	ldi	r24, 0x2B	; 43
     c18:	90 e2       	ldi	r25, 0x20	; 32
     c1a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN11stepperInfo6enableEv>
					gripStepper.processCommand(RELEASE);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	8b e2       	ldi	r24, 0x2B	; 43
     c24:	90 e2       	ldi	r25, 0x20	; 32
     c26:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN11stepperInfo14processCommandEi>

				}
				
				IsPacketToParse = false;
     c2a:	10 92 1e 20 	sts	0x201E, r1
				ERROR_CLR();
     c2e:	f4 01       	movw	r30, r8
     c30:	36 82       	std	Z+6, r3	; 0x06
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c32:	f8 01       	movw	r30, r16
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	85 ff       	sbrs	r24, 5
     c38:	fc cf       	rjmp	.-8      	; 0xc32 <main+0x25a>
				USART_PutChar(&USARTC0, 255);
     c3a:	40 82       	st	Z, r4
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c3c:	f8 01       	movw	r30, r16
     c3e:	81 81       	ldd	r24, Z+1	; 0x01
     c40:	85 ff       	sbrs	r24, 5
     c42:	fc cf       	rjmp	.-8      	; 0xc3c <main+0x264>
				USART_PutChar(&USARTC0,'r');
     c44:	82 e7       	ldi	r24, 0x72	; 114
     c46:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c48:	f8 01       	movw	r30, r16
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	85 ff       	sbrs	r24, 5
     c4e:	fc cf       	rjmp	.-8      	; 0xc48 <main+0x270>
				USART_PutChar(&USARTC0,255);
     c50:	40 82       	st	Z, r4
     c52:	5d cf       	rjmp	.-326    	; 0xb0e <main+0x136>

00000c54 <_GLOBAL__sub_I_swap>:

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     c54:	8a e4       	ldi	r24, 0x4A	; 74
     c56:	90 e2       	ldi	r25, 0x20	; 32
     c58:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     c5c:	82 e3       	ldi	r24, 0x32	; 50
     c5e:	90 e2       	ldi	r25, 0x20	; 32
     c60:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     c64:	8b e2       	ldi	r24, 0x2B	; 43
     c66:	90 e2       	ldi	r25, 0x20	; 32
     c68:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     c6c:	8f e1       	ldi	r24, 0x1F	; 31
     c6e:	90 e2       	ldi	r25, 0x20	; 32
     c70:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN13rotateStepperC1Ev>
     c74:	08 95       	ret

00000c76 <_GLOBAL__sub_D_swap>:
     c76:	8f e1       	ldi	r24, 0x1F	; 31
     c78:	90 e2       	ldi	r25, 0x20	; 32
     c7a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN13rotateStepperD1Ev>
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     c7e:	8b e2       	ldi	r24, 0x2B	; 43
     c80:	90 e2       	ldi	r25, 0x20	; 32
     c82:	0e 94 01 08 	call	0x1002	; 0x1002 <_ZN11stepperInfoD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
     c86:	82 e3       	ldi	r24, 0x32	; 50
     c88:	90 e2       	ldi	r25, 0x20	; 32
     c8a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN9motorInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     c8e:	8a e4       	ldi	r24, 0x4A	; 74
     c90:	90 e2       	ldi	r25, 0x20	; 32
     c92:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN9motorInfoD1Ev>
     c96:	08 95       	ret

00000c98 <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     c98:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     c9a:	12 82       	std	Z+2, r1	; 0x02
     c9c:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	80 83       	st	Z, r24
     ca4:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .2;  //Needs calibration
     ca6:	4d ec       	ldi	r20, 0xCD	; 205
     ca8:	5c ec       	ldi	r21, 0xCC	; 204
     caa:	6c e4       	ldi	r22, 0x4C	; 76
     cac:	7e e3       	ldi	r23, 0x3E	; 62
     cae:	44 83       	std	Z+4, r20	; 0x04
     cb0:	55 83       	std	Z+5, r21	; 0x05
     cb2:	66 83       	std	Z+6, r22	; 0x06
     cb4:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	60 e4       	ldi	r22, 0x40	; 64
     cbc:	7f e3       	ldi	r23, 0x3F	; 63
     cbe:	40 87       	std	Z+8, r20	; 0x08
     cc0:	51 87       	std	Z+9, r21	; 0x09
     cc2:	62 87       	std	Z+10, r22	; 0x0a
     cc4:	73 87       	std	Z+11, r23	; 0x0b
	speed = 100;
     cc6:	84 e6       	ldi	r24, 0x64	; 100
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	84 87       	std	Z+12, r24	; 0x0c
     ccc:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     cce:	16 86       	std	Z+14, r1	; 0x0e
     cd0:	17 86       	std	Z+15, r1	; 0x0f
     cd2:	08 95       	ret

00000cd4 <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     cd4:	08 95       	ret

00000cd6 <_ZN9motorInfo6enableEv>:
	
} //~motorInfo


void motorInfo::enable(){
	enabled = 1;
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	fc 01       	movw	r30, r24
     cdc:	26 87       	std	Z+14, r18	; 0x0e
     cde:	37 87       	std	Z+15, r19	; 0x0f
     ce0:	08 95       	ret

00000ce2 <_ZN9motorInfo7disableEv>:
}

void motorInfo::disable(){
	enabled = 0;
     ce2:	fc 01       	movw	r30, r24
     ce4:	16 86       	std	Z+14, r1	; 0x0e
     ce6:	17 86       	std	Z+15, r1	; 0x0f
     ce8:	08 95       	ret

00000cea <_ZN9motorInfo10setDesiredEf>:
}


void motorInfo::setDesired(float desired){
	desiredPos = desired; //Mutate desiredPos
     cea:	fc 01       	movw	r30, r24
     cec:	44 8b       	std	Z+20, r20	; 0x14
     cee:	55 8b       	std	Z+21, r21	; 0x15
     cf0:	66 8b       	std	Z+22, r22	; 0x16
     cf2:	77 8b       	std	Z+23, r23	; 0x17
     cf4:	08 95       	ret

00000cf6 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     cf6:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     cf8:	45 e8       	ldi	r20, 0x85	; 133
     cfa:	5b e2       	ldi	r21, 0x2B	; 43
     cfc:	61 e8       	ldi	r22, 0x81	; 129
     cfe:	73 e4       	ldi	r23, 0x43	; 67
     d00:	44 83       	std	Z+4, r20	; 0x04
     d02:	55 83       	std	Z+5, r21	; 0x05
     d04:	66 83       	std	Z+6, r22	; 0x06
     d06:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	60 e8       	ldi	r22, 0x80	; 128
     d0e:	7f eb       	ldi	r23, 0xBF	; 191
     d10:	40 83       	st	Z, r20
     d12:	51 83       	std	Z+1, r21	; 0x01
     d14:	62 83       	std	Z+2, r22	; 0x02
     d16:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     d18:	10 86       	std	Z+8, r1	; 0x08
     d1a:	11 86       	std	Z+9, r1	; 0x09
     d1c:	08 95       	ret

00000d1e <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     d1e:	08 95       	ret

00000d20 <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	e0 e6       	ldi	r30, 0x60	; 96
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	86 83       	std	Z+6, r24	; 0x06
	bool calFirstPress = false;
	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     d32:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b6 e0       	ldi	r27, 0x06	; 6

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     d38:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     d3a:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     d3c:	18 96       	adiw	r26, 0x08	; 8
     d3e:	8c 91       	ld	r24, X
     d40:	18 97       	sbiw	r26, 0x08	; 8

		if(calButtonState && !calFirstPress){
     d42:	82 ff       	sbrs	r24, 2
     d44:	0e c0       	rjmp	.+28     	; 0xd62 <_ZN13rotateStepper13calibrateBaseEv+0x42>
     d46:	21 11       	cpse	r18, r1
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     d4a:	35 83       	std	Z+5, r19	; 0x05
     d4c:	2f ef       	ldi	r18, 0xFF	; 255
     d4e:	43 ec       	ldi	r20, 0xC3	; 195
     d50:	89 e0       	ldi	r24, 0x09	; 9
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	40 40       	sbci	r20, 0x00	; 0
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <_ZN13rotateStepper13calibrateBaseEv+0x32>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     d5c:	00 00       	nop
	
	while (calInProgress){
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
     d5e:	23 2f       	mov	r18, r19
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <_ZN13rotateStepper13calibrateBaseEv+0x46>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(100);  //For gracefulness
		}
		
		if(calFirstPress == true)
     d62:	22 23       	and	r18, r18
     d64:	51 f0       	breq	.+20     	; 0xd7a <_ZN13rotateStepper13calibrateBaseEv+0x5a>
			++stepCount;
     d66:	6f 5f       	subi	r22, 0xFF	; 255
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
     d6a:	67 39       	cpi	r22, 0x97	; 151
     d6c:	71 05       	cpc	r23, r1
     d6e:	2c f0       	brlt	.+10     	; 0xd7a <_ZN13rotateStepper13calibrateBaseEv+0x5a>
     d70:	18 96       	adiw	r26, 0x08	; 8
     d72:	8c 91       	ld	r24, X
     d74:	18 97       	sbiw	r26, 0x08	; 8
     d76:	82 fd       	sbrc	r24, 2
     d78:	0f c0       	rjmp	.+30     	; 0xd98 <_ZN13rotateStepper13calibrateBaseEv+0x78>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     d7a:	56 83       	std	Z+6, r21	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	98 e1       	ldi	r25, 0x18	; 24
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <_ZN13rotateStepper13calibrateBaseEv+0x60>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <_ZN13rotateStepper13calibrateBaseEv+0x66>
     d86:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
     d88:	55 83       	std	Z+5, r21	; 0x05
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	98 e1       	ldi	r25, 0x18	; 24
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <_ZN13rotateStepper13calibrateBaseEv+0x6e>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <_ZN13rotateStepper13calibrateBaseEv+0x74>
     d94:	00 00       	nop
     d96:	d2 cf       	rjmp	.-92     	; 0xd3c <_ZN13rotateStepper13calibrateBaseEv+0x1c>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	e0 e6       	ldi	r30, 0x60	; 96
     d9c:	f6 e0       	ldi	r31, 0x06	; 6
     d9e:	86 83       	std	Z+6, r24	; 0x06
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	98 e1       	ldi	r25, 0x18	; 24
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <_ZN13rotateStepper13calibrateBaseEv+0x84>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <_ZN13rotateStepper13calibrateBaseEv+0x8a>
     daa:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	85 83       	std	Z+5, r24	; 0x05
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	98 e1       	ldi	r25, 0x18	; 24
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <_ZN13rotateStepper13calibrateBaseEv+0x94>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <_ZN13rotateStepper13calibrateBaseEv+0x9a>
     dba:	00 00       	nop
		_delay_us(800);	
		
	}	
	multiplier = stepCount / calSpan;
     dbc:	88 27       	eor	r24, r24
     dbe:	77 fd       	sbrc	r23, 7
     dc0:	80 95       	com	r24
     dc2:	98 2f       	mov	r25, r24
     dc4:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     dc8:	2c 81       	ldd	r18, Y+4	; 0x04
     dca:	3d 81       	ldd	r19, Y+5	; 0x05
     dcc:	4e 81       	ldd	r20, Y+6	; 0x06
     dce:	5f 81       	ldd	r21, Y+7	; 0x07
     dd0:	0e 94 28 09 	call	0x1250	; 0x1250 <__divsf3>
     dd4:	68 83       	st	Y, r22
     dd6:	79 83       	std	Y+1, r23	; 0x01
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	9b 83       	std	Y+3, r25	; 0x03
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ec 01       	movw	r28, r24
     de8:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
     dea:	18 16       	cp	r1, r24
     dec:	19 06       	cpc	r1, r25
     dee:	2c f4       	brge	.+10     	; 0xdfa <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	e0 e6       	ldi	r30, 0x60	; 96
     df4:	f6 e0       	ldi	r31, 0x06	; 6
     df6:	26 83       	std	Z+6, r18	; 0x06
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	e0 e6       	ldi	r30, 0x60	; 96
     dfe:	f6 e0       	ldi	r31, 0x06	; 6
     e00:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
     e02:	bc 01       	movw	r22, r24
     e04:	99 23       	and	r25, r25
     e06:	24 f4       	brge	.+8      	; 0xe10 <_ZN13rotateStepper8moveBaseEi+0x2e>
     e08:	66 27       	eor	r22, r22
     e0a:	77 27       	eor	r23, r23
     e0c:	68 1b       	sub	r22, r24
     e0e:	79 0b       	sbc	r23, r25
     e10:	88 27       	eor	r24, r24
     e12:	77 fd       	sbrc	r23, 7
     e14:	80 95       	com	r24
     e16:	98 2f       	mov	r25, r24
     e18:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     e1c:	28 81       	ld	r18, Y
     e1e:	39 81       	ldd	r19, Y+1	; 0x01
     e20:	4a 81       	ldd	r20, Y+2	; 0x02
     e22:	5b 81       	ldd	r21, Y+3	; 0x03
     e24:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     e28:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
     e2c:	16 16       	cp	r1, r22
     e2e:	17 06       	cpc	r1, r23
     e30:	bc f4       	brge	.+46     	; 0xe60 <_ZN13rotateStepper8moveBaseEi+0x7e>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
		MD2_STEP_CLR();
     e36:	e0 e6       	ldi	r30, 0x60	; 96
     e38:	f6 e0       	ldi	r31, 0x06	; 6
     e3a:	22 e0       	ldi	r18, 0x02	; 2
     e3c:	26 83       	std	Z+6, r18	; 0x06
     e3e:	af eb       	ldi	r26, 0xBF	; 191
     e40:	b2 e1       	ldi	r27, 0x12	; 18
     e42:	11 97       	sbiw	r26, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <_ZN13rotateStepper8moveBaseEi+0x60>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <_ZN13rotateStepper8moveBaseEi+0x66>
     e48:	00 00       	nop
		_delay_us(600);
		MD2_STEP_SET();
     e4a:	25 83       	std	Z+5, r18	; 0x05
     e4c:	af e1       	ldi	r26, 0x1F	; 31
     e4e:	bc e1       	ldi	r27, 0x1C	; 28
     e50:	11 97       	sbiw	r26, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <_ZN13rotateStepper8moveBaseEi+0x6e>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <_ZN13rotateStepper8moveBaseEi+0x74>
     e56:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	86 17       	cp	r24, r22
     e5c:	97 07       	cpc	r25, r23
     e5e:	71 f7       	brne	.-36     	; 0xe3c <_ZN13rotateStepper8moveBaseEi+0x5a>
		_delay_us(600);
		MD2_STEP_SET();
		_delay_us(900);
	}
	
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
     e74:	88 27       	eor	r24, r24
     e76:	77 fd       	sbrc	r23, 7
     e78:	80 95       	com	r24
     e7a:	98 2f       	mov	r25, r24
     e7c:	0e 94 c3 09 	call	0x1386	; 0x1386 <__floatsisf>
     e80:	2b e7       	ldi	r18, 0x7B	; 123
     e82:	34 e1       	ldi	r19, 0x14	; 20
     e84:	48 e0       	ldi	r20, 0x08	; 8
     e86:	52 e4       	ldi	r21, 0x42	; 66
     e88:	0e 94 c4 08 	call	0x1188	; 0x1188 <__addsf3>
     e8c:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixsfsi>
     e90:	6b 01       	movw	r12, r22
     e92:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
     e94:	88 85       	ldd	r24, Y+8	; 0x08
     e96:	99 85       	ldd	r25, Y+9	; 0x09
     e98:	b6 01       	movw	r22, r12
     e9a:	68 1b       	sub	r22, r24
     e9c:	79 0b       	sbc	r23, r25
     e9e:	ce 01       	movw	r24, r28
     ea0:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
     ea4:	c8 86       	std	Y+8, r12	; 0x08
     ea6:	d9 86       	std	Y+9, r13	; 0x09
	
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	08 95       	ret

00000eb6 <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
     eb6:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	81 81       	ldd	r24, Z+1	; 0x01
     ec0:	85 ff       	sbrs	r24, 5
     ec2:	fd cf       	rjmp	.-6      	; 0xebe <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
     ec4:	80 e8       	ldi	r24, 0x80	; 128
     ec6:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     ec8:	ed 91       	ld	r30, X+
     eca:	fc 91       	ld	r31, X
     ecc:	11 97       	sbiw	r26, 0x01	; 1
     ece:	81 81       	ldd	r24, Z+1	; 0x01
     ed0:	85 ff       	sbrs	r24, 5
     ed2:	fd cf       	rjmp	.-6      	; 0xece <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
     ed4:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	11 97       	sbiw	r26, 0x01	; 1
     edc:	81 81       	ldd	r24, Z+1	; 0x01
     ede:	85 ff       	sbrs	r24, 5
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
     ee2:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     ee4:	ed 91       	ld	r30, X+
     ee6:	fc 91       	ld	r31, X
     ee8:	81 81       	ldd	r24, Z+1	; 0x01
     eea:	85 ff       	sbrs	r24, 5
     eec:	fd cf       	rjmp	.-6      	; 0xee8 <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
     eee:	64 0f       	add	r22, r20
     ef0:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
     ef2:	60 83       	st	Z, r22
     ef4:	08 95       	ret

00000ef6 <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	ec 01       	movw	r28, r24
     f00:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
     f02:	6f 37       	cpi	r22, 0x7F	; 127
     f04:	61 f0       	breq	.+24     	; 0xf1e <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
     f06:	6f 37       	cpi	r22, 0x7F	; 127
     f08:	20 f4       	brcc	.+8      	; 0xf12 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
     f12:	66 23       	and	r22, r22
     f14:	3c f4       	brge	.+14     	; 0xf24 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
     f16:	41 e8       	ldi	r20, 0x81	; 129
     f18:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
     f1e:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
     f24:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
     f26:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
     f28:	8f 37       	cpi	r24, 0x7F	; 127
     f2a:	61 f0       	breq	.+24     	; 0xf44 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
     f2c:	8f 37       	cpi	r24, 0x7F	; 127
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
     f30:	0f e7       	ldi	r16, 0x7F	; 127
     f32:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
     f34:	15 e0       	ldi	r17, 0x05	; 5
     f36:	0b c0       	rjmp	.+22     	; 0xf4e <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
     f38:	88 23       	and	r24, r24
     f3a:	3c f4       	brge	.+14     	; 0xf4a <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
     f3c:	01 e8       	ldi	r16, 0x81	; 129
     f3e:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
     f40:	14 e0       	ldi	r17, 0x04	; 4
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
     f44:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
     f46:	14 e0       	ldi	r17, 0x04	; 4
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
     f4a:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
     f4c:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
     f54:	40 2f       	mov	r20, r16
     f56:	61 2f       	mov	r22, r17
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN10Sabertooth12SendDriveCmdEcc>
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	64 e0       	ldi	r22, 0x04	; 4
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN10Sabertooth12SendDriveCmdEcc>
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
     f8c:	68 83       	st	Y, r22
     f8e:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
     f90:	4a 83       	std	Y+2, r20	; 0x02
     f92:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
     f94:	88 e0       	ldi	r24, 0x08	; 8
     f96:	fa 01       	movw	r30, r20
     f98:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
     f9a:	e8 81       	ld	r30, Y
     f9c:	f9 81       	ldd	r31, Y+1	; 0x01
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
     fa2:	e8 81       	ld	r30, Y
     fa4:	f9 81       	ldd	r31, Y+1	; 0x01
     fa6:	8f ec       	ldi	r24, 0xCF	; 207
     fa8:	86 83       	std	Z+6, r24	; 0x06
     faa:	e8 81       	ld	r30, Y
     fac:	f9 81       	ldd	r31, Y+1	; 0x01
     fae:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
     fb0:	e8 81       	ld	r30, Y
     fb2:	f9 81       	ldd	r31, Y+1	; 0x01
     fb4:	84 81       	ldd	r24, Z+4	; 0x04
     fb6:	88 60       	ori	r24, 0x08	; 8
     fb8:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fba:	ff ef       	ldi	r31, 0xFF	; 255
     fbc:	23 ec       	ldi	r18, 0xC3	; 195
     fbe:	89 e0       	ldi	r24, 0x09	; 9
     fc0:	f1 50       	subi	r31, 0x01	; 1
     fc2:	20 40       	sbci	r18, 0x00	; 0
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
     fca:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
     fcc:	e8 81       	ld	r30, Y
     fce:	f9 81       	ldd	r31, Y+1	; 0x01
     fd0:	8a ea       	ldi	r24, 0xAA	; 170
     fd2:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
     fd4:	44 e1       	ldi	r20, 0x14	; 20
     fd6:	6e e0       	ldi	r22, 0x0E	; 14
     fd8:	ce 01       	movw	r24, r28
     fda:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN10Sabertooth7StopAllEv>
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <_ZN11stepperInfoC1Ev>:
};

extern void SendStringPC(char *stufftosend);

// default constructor
stepperInfo::stepperInfo() {
     fea:	fc 01       	movw	r30, r24
	enabled = 0;
     fec:	10 82       	st	Z, r1
     fee:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	9f ef       	ldi	r25, 0xFF	; 255
     ff4:	82 83       	std	Z+2, r24	; 0x02
     ff6:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	84 83       	std	Z+4, r24	; 0x04
     ffe:	95 83       	std	Z+5, r25	; 0x05
    1000:	08 95       	ret

00001002 <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
    1002:	08 95       	ret

00001004 <_ZN11stepperInfo14processCommandEi>:
{
} //~stepperInfo


//Used for the gripping stepper
void stepperInfo::processCommand(int cmd){
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	dc 01       	movw	r26, r24
	if(!enabled)
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	89 2b       	or	r24, r25
    1012:	09 f4       	brne	.+2      	; 0x1016 <_ZN11stepperInfo14processCommandEi+0x12>
    1014:	63 c0       	rjmp	.+198    	; 0x10dc <_ZN11stepperInfo14processCommandEi+0xd8>
		return;  //TODO: MAKE BETTER
		
	if(cmd != GRIP && cmd != RELEASE)
    1016:	62 30       	cpi	r22, 0x02	; 2
    1018:	71 05       	cpc	r23, r1
    101a:	08 f0       	brcs	.+2      	; 0x101e <_ZN11stepperInfo14processCommandEi+0x1a>
    101c:	5f c0       	rjmp	.+190    	; 0x10dc <_ZN11stepperInfo14processCommandEi+0xd8>
		return;
		
	if(cmd == currentState)
    101e:	12 96       	adiw	r26, 0x02	; 2
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	13 97       	sbiw	r26, 0x03	; 3
    1026:	86 17       	cp	r24, r22
    1028:	97 07       	cpc	r25, r23
    102a:	09 f4       	brne	.+2      	; 0x102e <_ZN11stepperInfo14processCommandEi+0x2a>
    102c:	57 c0       	rjmp	.+174    	; 0x10dc <_ZN11stepperInfo14processCommandEi+0xd8>
		return;
		
	currentState = cmd;
    102e:	12 96       	adiw	r26, 0x02	; 2
    1030:	6d 93       	st	X+, r22
    1032:	7c 93       	st	X, r23
    1034:	13 97       	sbiw	r26, 0x03	; 3
	//GET DIRECTION
	//CLR IS OUT
	
	//SET is grip
	//CLR is release
	if(cmd == GRIP)
    1036:	61 15       	cp	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	29 f4       	brne	.+10     	; 0x1046 <_ZN11stepperInfo14processCommandEi+0x42>
		MD1_DIR_SET();
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	e0 e6       	ldi	r30, 0x60	; 96
    1040:	f6 e0       	ldi	r31, 0x06	; 6
    1042:	85 83       	std	Z+5, r24	; 0x05
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <_ZN11stepperInfo14processCommandEi+0x50>
	else if (cmd == RELEASE)
    1046:	61 30       	cpi	r22, 0x01	; 1
    1048:	71 05       	cpc	r23, r1
    104a:	21 f4       	brne	.+8      	; 0x1054 <_ZN11stepperInfo14processCommandEi+0x50>
		MD1_DIR_CLR();
    104c:	80 e1       	ldi	r24, 0x10	; 16
    104e:	e0 e6       	ldi	r30, 0x60	; 96
    1050:	f6 e0       	ldi	r31, 0x06	; 6
    1052:	86 83       	std	Z+6, r24	; 0x06
		
	if(!init){
    1054:	14 96       	adiw	r26, 0x04	; 4
    1056:	8d 91       	ld	r24, X+
    1058:	9c 91       	ld	r25, X
    105a:	15 97       	sbiw	r26, 0x05	; 5
    105c:	89 2b       	or	r24, r25
    105e:	c9 f4       	brne	.+50     	; 0x1092 <_ZN11stepperInfo14processCommandEi+0x8e>
    1060:	20 e1       	ldi	r18, 0x10	; 16
    1062:	37 e2       	ldi	r19, 0x27	; 39
		for(int i = 0; i < 10000; ++i){
			MD1_STEP_SET();
    1064:	e0 e6       	ldi	r30, 0x60	; 96
    1066:	f6 e0       	ldi	r31, 0x06	; 6
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    106c:	cf e8       	ldi	r28, 0x8F	; 143
    106e:	d1 e0       	ldi	r29, 0x01	; 1
    1070:	21 97       	sbiw	r28, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <_ZN11stepperInfo14processCommandEi+0x6c>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <_ZN11stepperInfo14processCommandEi+0x72>
    1076:	00 00       	nop
			_delay_us(50);
			MD1_STEP_CLR();
    1078:	86 83       	std	Z+6, r24	; 0x06
    107a:	cf e9       	ldi	r28, 0x9F	; 159
    107c:	df e0       	ldi	r29, 0x0F	; 15
    107e:	21 97       	sbiw	r28, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <_ZN11stepperInfo14processCommandEi+0x7a>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <_ZN11stepperInfo14processCommandEi+0x80>
    1084:	00 00       	nop
    1086:	21 50       	subi	r18, 0x01	; 1
    1088:	31 09       	sbc	r19, r1
		MD1_DIR_SET();
	else if (cmd == RELEASE)
		MD1_DIR_CLR();
		
	if(!init){
		for(int i = 0; i < 10000; ++i){
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	69 f7       	brne	.-38     	; 0x106a <_ZN11stepperInfo14processCommandEi+0x66>
    1090:	04 c0       	rjmp	.+8      	; 0x109a <_ZN11stepperInfo14processCommandEi+0x96>
			MD1_STEP_CLR();
			_delay_us(500);
		}
	}
	else {
		init = 0;
    1092:	14 96       	adiw	r26, 0x04	; 4
    1094:	1d 92       	st	X+, r1
    1096:	1c 92       	st	X, r1
    1098:	15 97       	sbiw	r26, 0x05	; 5
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    109a:	e0 e2       	ldi	r30, 0x20	; 32
    109c:	f6 e0       	ldi	r31, 0x06	; 6
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	56 e0       	ldi	r21, 0x06	; 6
		MD1_STEP_SET();
    10a2:	80 e6       	ldi	r24, 0x60	; 96
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	30 e2       	ldi	r19, 0x20	; 32
	else {
		init = 0;
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    10a8:	20 85       	ldd	r18, Z+8	; 0x08
    10aa:	23 fd       	sbrc	r18, 3
    10ac:	15 c0       	rjmp	.+42     	; 0x10d8 <_ZN11stepperInfo14processCommandEi+0xd4>
    10ae:	ea 01       	movw	r28, r20
    10b0:	28 85       	ldd	r18, Y+8	; 0x08
    10b2:	23 ff       	sbrs	r18, 3
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <_ZN11stepperInfo14processCommandEi+0xd4>
		MD1_STEP_SET();
    10b6:	ec 01       	movw	r28, r24
    10b8:	3d 83       	std	Y+5, r19	; 0x05
    10ba:	cf ed       	ldi	r28, 0xDF	; 223
    10bc:	d1 e0       	ldi	r29, 0x01	; 1
    10be:	21 97       	sbiw	r28, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <_ZN11stepperInfo14processCommandEi+0xba>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <_ZN11stepperInfo14processCommandEi+0xc0>
    10c4:	00 00       	nop
		_delay_us(60);
		MD1_STEP_CLR();
    10c6:	ec 01       	movw	r28, r24
    10c8:	3e 83       	std	Y+6, r19	; 0x06
    10ca:	cf ed       	ldi	r28, 0xDF	; 223
    10cc:	d1 e0       	ldi	r29, 0x01	; 1
    10ce:	21 97       	sbiw	r28, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <_ZN11stepperInfo14processCommandEi+0xca>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <_ZN11stepperInfo14processCommandEi+0xd0>
    10d4:	00 00       	nop
    10d6:	e8 cf       	rjmp	.-48     	; 0x10a8 <_ZN11stepperInfo14processCommandEi+0xa4>
		_delay_us(60);
	}
	
	enabled = 0;
    10d8:	1d 92       	st	X+, r1
    10da:	1c 92       	st	X, r1
	
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <_ZN11stepperInfo6enableEv>:


void stepperInfo::enable(){
	enabled = 1;
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18
    10ea:	31 83       	std	Z+1, r19	; 0x01
    10ec:	08 95       	ret

000010ee <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    10ee:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    10f0:	60 83       	st	Z, r22
    10f2:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    10f4:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    10f6:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
    10f8:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
    10fa:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
    10fc:	15 86       	std	Z+13, r1	; 0x0d
    10fe:	08 95       	ret

00001100 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1100:	fc 01       	movw	r30, r24
    1102:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1104:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	29 13       	cpse	r18, r25
    110a:	01 c0       	rjmp	.+2      	; 0x110e <USART_RXBufferData_Available+0xe>
    110c:	80 e0       	ldi	r24, 0x00	; 0
}
    110e:	08 95       	ret

00001110 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    1110:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1112:	84 85       	ldd	r24, Z+12	; 0x0c
    1114:	df 01       	movw	r26, r30
    1116:	a8 0f       	add	r26, r24
    1118:	b1 1d       	adc	r27, r1
    111a:	13 96       	adiw	r26, 0x03	; 3
    111c:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    111e:	94 85       	ldd	r25, Z+12	; 0x0c
    1120:	9f 5f       	subi	r25, 0xFF	; 255
    1122:	93 70       	andi	r25, 0x03	; 3
    1124:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
    1126:	08 95       	ret

00001128 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    1128:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    112a:	83 85       	ldd	r24, Z+11	; 0x0b
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1130:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
    1132:	a0 81       	ld	r26, Z
    1134:	b1 81       	ldd	r27, Z+1	; 0x01
    1136:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
    1138:	89 17       	cp	r24, r25
    113a:	49 f0       	breq	.+18     	; 0x114e <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    113c:	93 85       	ldd	r25, Z+11	; 0x0b
    113e:	df 01       	movw	r26, r30
    1140:	a9 0f       	add	r26, r25
    1142:	b1 1d       	adc	r27, r1
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
    1148:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    114e:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    1150:	08 95       	ret

00001152 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    1152:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    1154:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
    1156:	95 85       	ldd	r25, Z+13	; 0x0d
    1158:	98 13       	cpse	r25, r24
    115a:	07 c0       	rjmp	.+14     	; 0x116a <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    115c:	01 90       	ld	r0, Z+
    115e:	f0 81       	ld	r31, Z
    1160:	e0 2d       	mov	r30, r0
    1162:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1164:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1166:	83 83       	std	Z+3, r24	; 0x03
    1168:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    116a:	86 85       	ldd	r24, Z+14	; 0x0e
    116c:	df 01       	movw	r26, r30
    116e:	a8 0f       	add	r26, r24
    1170:	b1 1d       	adc	r27, r1
    1172:	17 96       	adiw	r26, 0x07	; 7
    1174:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
    1176:	a0 81       	ld	r26, Z
    1178:	b1 81       	ldd	r27, Z+1	; 0x01
    117a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    117c:	86 85       	ldd	r24, Z+14	; 0x0e
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	83 70       	andi	r24, 0x03	; 3
    1182:	86 87       	std	Z+14, r24	; 0x0e
    1184:	08 95       	ret

00001186 <__subsf3>:
    1186:	50 58       	subi	r21, 0x80	; 128

00001188 <__addsf3>:
    1188:	bb 27       	eor	r27, r27
    118a:	aa 27       	eor	r26, r26
    118c:	0e d0       	rcall	.+28     	; 0x11aa <__addsf3x>
    118e:	4d c1       	rjmp	.+666    	; 0x142a <__fp_round>
    1190:	3e d1       	rcall	.+636    	; 0x140e <__fp_pscA>
    1192:	30 f0       	brcs	.+12     	; 0x11a0 <__addsf3+0x18>
    1194:	43 d1       	rcall	.+646    	; 0x141c <__fp_pscB>
    1196:	20 f0       	brcs	.+8      	; 0x11a0 <__addsf3+0x18>
    1198:	31 f4       	brne	.+12     	; 0x11a6 <__addsf3+0x1e>
    119a:	9f 3f       	cpi	r25, 0xFF	; 255
    119c:	11 f4       	brne	.+4      	; 0x11a2 <__addsf3+0x1a>
    119e:	1e f4       	brtc	.+6      	; 0x11a6 <__addsf3+0x1e>
    11a0:	33 c1       	rjmp	.+614    	; 0x1408 <__fp_nan>
    11a2:	0e f4       	brtc	.+2      	; 0x11a6 <__addsf3+0x1e>
    11a4:	e0 95       	com	r30
    11a6:	e7 fb       	bst	r30, 7
    11a8:	29 c1       	rjmp	.+594    	; 0x13fc <__fp_inf>

000011aa <__addsf3x>:
    11aa:	e9 2f       	mov	r30, r25
    11ac:	4f d1       	rcall	.+670    	; 0x144c <__fp_split3>
    11ae:	80 f3       	brcs	.-32     	; 0x1190 <__addsf3+0x8>
    11b0:	ba 17       	cp	r27, r26
    11b2:	62 07       	cpc	r22, r18
    11b4:	73 07       	cpc	r23, r19
    11b6:	84 07       	cpc	r24, r20
    11b8:	95 07       	cpc	r25, r21
    11ba:	18 f0       	brcs	.+6      	; 0x11c2 <__addsf3x+0x18>
    11bc:	71 f4       	brne	.+28     	; 0x11da <__addsf3x+0x30>
    11be:	9e f5       	brtc	.+102    	; 0x1226 <__addsf3x+0x7c>
    11c0:	67 c1       	rjmp	.+718    	; 0x1490 <__fp_zero>
    11c2:	0e f4       	brtc	.+2      	; 0x11c6 <__addsf3x+0x1c>
    11c4:	e0 95       	com	r30
    11c6:	0b 2e       	mov	r0, r27
    11c8:	ba 2f       	mov	r27, r26
    11ca:	a0 2d       	mov	r26, r0
    11cc:	0b 01       	movw	r0, r22
    11ce:	b9 01       	movw	r22, r18
    11d0:	90 01       	movw	r18, r0
    11d2:	0c 01       	movw	r0, r24
    11d4:	ca 01       	movw	r24, r20
    11d6:	a0 01       	movw	r20, r0
    11d8:	11 24       	eor	r1, r1
    11da:	ff 27       	eor	r31, r31
    11dc:	59 1b       	sub	r21, r25
    11de:	99 f0       	breq	.+38     	; 0x1206 <__addsf3x+0x5c>
    11e0:	59 3f       	cpi	r21, 0xF9	; 249
    11e2:	50 f4       	brcc	.+20     	; 0x11f8 <__addsf3x+0x4e>
    11e4:	50 3e       	cpi	r21, 0xE0	; 224
    11e6:	68 f1       	brcs	.+90     	; 0x1242 <__addsf3x+0x98>
    11e8:	1a 16       	cp	r1, r26
    11ea:	f0 40       	sbci	r31, 0x00	; 0
    11ec:	a2 2f       	mov	r26, r18
    11ee:	23 2f       	mov	r18, r19
    11f0:	34 2f       	mov	r19, r20
    11f2:	44 27       	eor	r20, r20
    11f4:	58 5f       	subi	r21, 0xF8	; 248
    11f6:	f3 cf       	rjmp	.-26     	; 0x11de <__addsf3x+0x34>
    11f8:	46 95       	lsr	r20
    11fa:	37 95       	ror	r19
    11fc:	27 95       	ror	r18
    11fe:	a7 95       	ror	r26
    1200:	f0 40       	sbci	r31, 0x00	; 0
    1202:	53 95       	inc	r21
    1204:	c9 f7       	brne	.-14     	; 0x11f8 <__addsf3x+0x4e>
    1206:	7e f4       	brtc	.+30     	; 0x1226 <__addsf3x+0x7c>
    1208:	1f 16       	cp	r1, r31
    120a:	ba 0b       	sbc	r27, r26
    120c:	62 0b       	sbc	r22, r18
    120e:	73 0b       	sbc	r23, r19
    1210:	84 0b       	sbc	r24, r20
    1212:	ba f0       	brmi	.+46     	; 0x1242 <__addsf3x+0x98>
    1214:	91 50       	subi	r25, 0x01	; 1
    1216:	a1 f0       	breq	.+40     	; 0x1240 <__addsf3x+0x96>
    1218:	ff 0f       	add	r31, r31
    121a:	bb 1f       	adc	r27, r27
    121c:	66 1f       	adc	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	c2 f7       	brpl	.-16     	; 0x1214 <__addsf3x+0x6a>
    1224:	0e c0       	rjmp	.+28     	; 0x1242 <__addsf3x+0x98>
    1226:	ba 0f       	add	r27, r26
    1228:	62 1f       	adc	r22, r18
    122a:	73 1f       	adc	r23, r19
    122c:	84 1f       	adc	r24, r20
    122e:	48 f4       	brcc	.+18     	; 0x1242 <__addsf3x+0x98>
    1230:	87 95       	ror	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f7 95       	ror	r31
    123a:	9e 3f       	cpi	r25, 0xFE	; 254
    123c:	08 f0       	brcs	.+2      	; 0x1240 <__addsf3x+0x96>
    123e:	b3 cf       	rjmp	.-154    	; 0x11a6 <__addsf3+0x1e>
    1240:	93 95       	inc	r25
    1242:	88 0f       	add	r24, r24
    1244:	08 f0       	brcs	.+2      	; 0x1248 <__addsf3x+0x9e>
    1246:	99 27       	eor	r25, r25
    1248:	ee 0f       	add	r30, r30
    124a:	97 95       	ror	r25
    124c:	87 95       	ror	r24
    124e:	08 95       	ret

00001250 <__divsf3>:
    1250:	0c d0       	rcall	.+24     	; 0x126a <__divsf3x>
    1252:	eb c0       	rjmp	.+470    	; 0x142a <__fp_round>
    1254:	e3 d0       	rcall	.+454    	; 0x141c <__fp_pscB>
    1256:	40 f0       	brcs	.+16     	; 0x1268 <__divsf3+0x18>
    1258:	da d0       	rcall	.+436    	; 0x140e <__fp_pscA>
    125a:	30 f0       	brcs	.+12     	; 0x1268 <__divsf3+0x18>
    125c:	21 f4       	brne	.+8      	; 0x1266 <__divsf3+0x16>
    125e:	5f 3f       	cpi	r21, 0xFF	; 255
    1260:	19 f0       	breq	.+6      	; 0x1268 <__divsf3+0x18>
    1262:	cc c0       	rjmp	.+408    	; 0x13fc <__fp_inf>
    1264:	51 11       	cpse	r21, r1
    1266:	15 c1       	rjmp	.+554    	; 0x1492 <__fp_szero>
    1268:	cf c0       	rjmp	.+414    	; 0x1408 <__fp_nan>

0000126a <__divsf3x>:
    126a:	f0 d0       	rcall	.+480    	; 0x144c <__fp_split3>
    126c:	98 f3       	brcs	.-26     	; 0x1254 <__divsf3+0x4>

0000126e <__divsf3_pse>:
    126e:	99 23       	and	r25, r25
    1270:	c9 f3       	breq	.-14     	; 0x1264 <__divsf3+0x14>
    1272:	55 23       	and	r21, r21
    1274:	b1 f3       	breq	.-20     	; 0x1262 <__divsf3+0x12>
    1276:	95 1b       	sub	r25, r21
    1278:	55 0b       	sbc	r21, r21
    127a:	bb 27       	eor	r27, r27
    127c:	aa 27       	eor	r26, r26
    127e:	62 17       	cp	r22, r18
    1280:	73 07       	cpc	r23, r19
    1282:	84 07       	cpc	r24, r20
    1284:	38 f0       	brcs	.+14     	; 0x1294 <__divsf3_pse+0x26>
    1286:	9f 5f       	subi	r25, 0xFF	; 255
    1288:	5f 4f       	sbci	r21, 0xFF	; 255
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	44 1f       	adc	r20, r20
    1290:	aa 1f       	adc	r26, r26
    1292:	a9 f3       	breq	.-22     	; 0x127e <__divsf3_pse+0x10>
    1294:	33 d0       	rcall	.+102    	; 0x12fc <__divsf3_pse+0x8e>
    1296:	0e 2e       	mov	r0, r30
    1298:	3a f0       	brmi	.+14     	; 0x12a8 <__divsf3_pse+0x3a>
    129a:	e0 e8       	ldi	r30, 0x80	; 128
    129c:	30 d0       	rcall	.+96     	; 0x12fe <__divsf3_pse+0x90>
    129e:	91 50       	subi	r25, 0x01	; 1
    12a0:	50 40       	sbci	r21, 0x00	; 0
    12a2:	e6 95       	lsr	r30
    12a4:	00 1c       	adc	r0, r0
    12a6:	ca f7       	brpl	.-14     	; 0x129a <__divsf3_pse+0x2c>
    12a8:	29 d0       	rcall	.+82     	; 0x12fc <__divsf3_pse+0x8e>
    12aa:	fe 2f       	mov	r31, r30
    12ac:	27 d0       	rcall	.+78     	; 0x12fc <__divsf3_pse+0x8e>
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	bb 1f       	adc	r27, r27
    12b6:	26 17       	cp	r18, r22
    12b8:	37 07       	cpc	r19, r23
    12ba:	48 07       	cpc	r20, r24
    12bc:	ab 07       	cpc	r26, r27
    12be:	b0 e8       	ldi	r27, 0x80	; 128
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <__divsf3_pse+0x56>
    12c2:	bb 0b       	sbc	r27, r27
    12c4:	80 2d       	mov	r24, r0
    12c6:	bf 01       	movw	r22, r30
    12c8:	ff 27       	eor	r31, r31
    12ca:	93 58       	subi	r25, 0x83	; 131
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	2a f0       	brmi	.+10     	; 0x12da <__divsf3_pse+0x6c>
    12d0:	9e 3f       	cpi	r25, 0xFE	; 254
    12d2:	51 05       	cpc	r21, r1
    12d4:	68 f0       	brcs	.+26     	; 0x12f0 <__divsf3_pse+0x82>
    12d6:	92 c0       	rjmp	.+292    	; 0x13fc <__fp_inf>
    12d8:	dc c0       	rjmp	.+440    	; 0x1492 <__fp_szero>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	ec f3       	brlt	.-6      	; 0x12d8 <__divsf3_pse+0x6a>
    12de:	98 3e       	cpi	r25, 0xE8	; 232
    12e0:	dc f3       	brlt	.-10     	; 0x12d8 <__divsf3_pse+0x6a>
    12e2:	86 95       	lsr	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	b7 95       	ror	r27
    12ea:	f7 95       	ror	r31
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
    12ee:	c9 f7       	brne	.-14     	; 0x12e2 <__divsf3_pse+0x74>
    12f0:	88 0f       	add	r24, r24
    12f2:	91 1d       	adc	r25, r1
    12f4:	96 95       	lsr	r25
    12f6:	87 95       	ror	r24
    12f8:	97 f9       	bld	r25, 7
    12fa:	08 95       	ret
    12fc:	e1 e0       	ldi	r30, 0x01	; 1
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	bb 1f       	adc	r27, r27
    1306:	62 17       	cp	r22, r18
    1308:	73 07       	cpc	r23, r19
    130a:	84 07       	cpc	r24, r20
    130c:	ba 07       	cpc	r27, r26
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__divsf3_pse+0xaa>
    1310:	62 1b       	sub	r22, r18
    1312:	73 0b       	sbc	r23, r19
    1314:	84 0b       	sbc	r24, r20
    1316:	ba 0b       	sbc	r27, r26
    1318:	ee 1f       	adc	r30, r30
    131a:	88 f7       	brcc	.-30     	; 0x12fe <__divsf3_pse+0x90>
    131c:	e0 95       	com	r30
    131e:	08 95       	ret

00001320 <__fixsfsi>:
    1320:	04 d0       	rcall	.+8      	; 0x132a <__fixunssfsi>
    1322:	68 94       	set
    1324:	b1 11       	cpse	r27, r1
    1326:	b5 c0       	rjmp	.+362    	; 0x1492 <__fp_szero>
    1328:	08 95       	ret

0000132a <__fixunssfsi>:
    132a:	98 d0       	rcall	.+304    	; 0x145c <__fp_splitA>
    132c:	88 f0       	brcs	.+34     	; 0x1350 <__fixunssfsi+0x26>
    132e:	9f 57       	subi	r25, 0x7F	; 127
    1330:	90 f0       	brcs	.+36     	; 0x1356 <__fixunssfsi+0x2c>
    1332:	b9 2f       	mov	r27, r25
    1334:	99 27       	eor	r25, r25
    1336:	b7 51       	subi	r27, 0x17	; 23
    1338:	a0 f0       	brcs	.+40     	; 0x1362 <__fixunssfsi+0x38>
    133a:	d1 f0       	breq	.+52     	; 0x1370 <__fixunssfsi+0x46>
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	1a f0       	brmi	.+6      	; 0x134c <__fixunssfsi+0x22>
    1346:	ba 95       	dec	r27
    1348:	c9 f7       	brne	.-14     	; 0x133c <__fixunssfsi+0x12>
    134a:	12 c0       	rjmp	.+36     	; 0x1370 <__fixunssfsi+0x46>
    134c:	b1 30       	cpi	r27, 0x01	; 1
    134e:	81 f0       	breq	.+32     	; 0x1370 <__fixunssfsi+0x46>
    1350:	9f d0       	rcall	.+318    	; 0x1490 <__fp_zero>
    1352:	b1 e0       	ldi	r27, 0x01	; 1
    1354:	08 95       	ret
    1356:	9c c0       	rjmp	.+312    	; 0x1490 <__fp_zero>
    1358:	67 2f       	mov	r22, r23
    135a:	78 2f       	mov	r23, r24
    135c:	88 27       	eor	r24, r24
    135e:	b8 5f       	subi	r27, 0xF8	; 248
    1360:	39 f0       	breq	.+14     	; 0x1370 <__fixunssfsi+0x46>
    1362:	b9 3f       	cpi	r27, 0xF9	; 249
    1364:	cc f3       	brlt	.-14     	; 0x1358 <__fixunssfsi+0x2e>
    1366:	86 95       	lsr	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	b3 95       	inc	r27
    136e:	d9 f7       	brne	.-10     	; 0x1366 <__fixunssfsi+0x3c>
    1370:	3e f4       	brtc	.+14     	; 0x1380 <__fixunssfsi+0x56>
    1372:	90 95       	com	r25
    1374:	80 95       	com	r24
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	08 95       	ret

00001382 <__floatunsisf>:
    1382:	e8 94       	clt
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <__floatsisf+0x12>

00001386 <__floatsisf>:
    1386:	97 fb       	bst	r25, 7
    1388:	3e f4       	brtc	.+14     	; 0x1398 <__floatsisf+0x12>
    138a:	90 95       	com	r25
    138c:	80 95       	com	r24
    138e:	70 95       	com	r23
    1390:	61 95       	neg	r22
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	99 23       	and	r25, r25
    139a:	a9 f0       	breq	.+42     	; 0x13c6 <__floatsisf+0x40>
    139c:	f9 2f       	mov	r31, r25
    139e:	96 e9       	ldi	r25, 0x96	; 150
    13a0:	bb 27       	eor	r27, r27
    13a2:	93 95       	inc	r25
    13a4:	f6 95       	lsr	r31
    13a6:	87 95       	ror	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b7 95       	ror	r27
    13ae:	f1 11       	cpse	r31, r1
    13b0:	f8 cf       	rjmp	.-16     	; 0x13a2 <__floatsisf+0x1c>
    13b2:	fa f4       	brpl	.+62     	; 0x13f2 <__floatsisf+0x6c>
    13b4:	bb 0f       	add	r27, r27
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__floatsisf+0x36>
    13b8:	60 ff       	sbrs	r22, 0
    13ba:	1b c0       	rjmp	.+54     	; 0x13f2 <__floatsisf+0x6c>
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	16 c0       	rjmp	.+44     	; 0x13f2 <__floatsisf+0x6c>
    13c6:	88 23       	and	r24, r24
    13c8:	11 f0       	breq	.+4      	; 0x13ce <__floatsisf+0x48>
    13ca:	96 e9       	ldi	r25, 0x96	; 150
    13cc:	11 c0       	rjmp	.+34     	; 0x13f0 <__floatsisf+0x6a>
    13ce:	77 23       	and	r23, r23
    13d0:	21 f0       	breq	.+8      	; 0x13da <__floatsisf+0x54>
    13d2:	9e e8       	ldi	r25, 0x8E	; 142
    13d4:	87 2f       	mov	r24, r23
    13d6:	76 2f       	mov	r23, r22
    13d8:	05 c0       	rjmp	.+10     	; 0x13e4 <__floatsisf+0x5e>
    13da:	66 23       	and	r22, r22
    13dc:	71 f0       	breq	.+28     	; 0x13fa <__floatsisf+0x74>
    13de:	96 e8       	ldi	r25, 0x86	; 134
    13e0:	86 2f       	mov	r24, r22
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	2a f0       	brmi	.+10     	; 0x13f2 <__floatsisf+0x6c>
    13e8:	9a 95       	dec	r25
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	88 1f       	adc	r24, r24
    13f0:	da f7       	brpl	.-10     	; 0x13e8 <__floatsisf+0x62>
    13f2:	88 0f       	add	r24, r24
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret

000013fc <__fp_inf>:
    13fc:	97 f9       	bld	r25, 7
    13fe:	9f 67       	ori	r25, 0x7F	; 127
    1400:	80 e8       	ldi	r24, 0x80	; 128
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	08 95       	ret

00001408 <__fp_nan>:
    1408:	9f ef       	ldi	r25, 0xFF	; 255
    140a:	80 ec       	ldi	r24, 0xC0	; 192
    140c:	08 95       	ret

0000140e <__fp_pscA>:
    140e:	00 24       	eor	r0, r0
    1410:	0a 94       	dec	r0
    1412:	16 16       	cp	r1, r22
    1414:	17 06       	cpc	r1, r23
    1416:	18 06       	cpc	r1, r24
    1418:	09 06       	cpc	r0, r25
    141a:	08 95       	ret

0000141c <__fp_pscB>:
    141c:	00 24       	eor	r0, r0
    141e:	0a 94       	dec	r0
    1420:	12 16       	cp	r1, r18
    1422:	13 06       	cpc	r1, r19
    1424:	14 06       	cpc	r1, r20
    1426:	05 06       	cpc	r0, r21
    1428:	08 95       	ret

0000142a <__fp_round>:
    142a:	09 2e       	mov	r0, r25
    142c:	03 94       	inc	r0
    142e:	00 0c       	add	r0, r0
    1430:	11 f4       	brne	.+4      	; 0x1436 <__fp_round+0xc>
    1432:	88 23       	and	r24, r24
    1434:	52 f0       	brmi	.+20     	; 0x144a <__fp_round+0x20>
    1436:	bb 0f       	add	r27, r27
    1438:	40 f4       	brcc	.+16     	; 0x144a <__fp_round+0x20>
    143a:	bf 2b       	or	r27, r31
    143c:	11 f4       	brne	.+4      	; 0x1442 <__fp_round+0x18>
    143e:	60 ff       	sbrs	r22, 0
    1440:	04 c0       	rjmp	.+8      	; 0x144a <__fp_round+0x20>
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	8f 4f       	sbci	r24, 0xFF	; 255
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	08 95       	ret

0000144c <__fp_split3>:
    144c:	57 fd       	sbrc	r21, 7
    144e:	90 58       	subi	r25, 0x80	; 128
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	59 f0       	breq	.+22     	; 0x146c <__fp_splitA+0x10>
    1456:	5f 3f       	cpi	r21, 0xFF	; 255
    1458:	71 f0       	breq	.+28     	; 0x1476 <__fp_splitA+0x1a>
    145a:	47 95       	ror	r20

0000145c <__fp_splitA>:
    145c:	88 0f       	add	r24, r24
    145e:	97 fb       	bst	r25, 7
    1460:	99 1f       	adc	r25, r25
    1462:	61 f0       	breq	.+24     	; 0x147c <__fp_splitA+0x20>
    1464:	9f 3f       	cpi	r25, 0xFF	; 255
    1466:	79 f0       	breq	.+30     	; 0x1486 <__fp_splitA+0x2a>
    1468:	87 95       	ror	r24
    146a:	08 95       	ret
    146c:	12 16       	cp	r1, r18
    146e:	13 06       	cpc	r1, r19
    1470:	14 06       	cpc	r1, r20
    1472:	55 1f       	adc	r21, r21
    1474:	f2 cf       	rjmp	.-28     	; 0x145a <__fp_split3+0xe>
    1476:	46 95       	lsr	r20
    1478:	f1 df       	rcall	.-30     	; 0x145c <__fp_splitA>
    147a:	08 c0       	rjmp	.+16     	; 0x148c <__fp_splitA+0x30>
    147c:	16 16       	cp	r1, r22
    147e:	17 06       	cpc	r1, r23
    1480:	18 06       	cpc	r1, r24
    1482:	99 1f       	adc	r25, r25
    1484:	f1 cf       	rjmp	.-30     	; 0x1468 <__fp_splitA+0xc>
    1486:	86 95       	lsr	r24
    1488:	71 05       	cpc	r23, r1
    148a:	61 05       	cpc	r22, r1
    148c:	08 94       	sec
    148e:	08 95       	ret

00001490 <__fp_zero>:
    1490:	e8 94       	clt

00001492 <__fp_szero>:
    1492:	bb 27       	eor	r27, r27
    1494:	66 27       	eor	r22, r22
    1496:	77 27       	eor	r23, r23
    1498:	cb 01       	movw	r24, r22
    149a:	97 f9       	bld	r25, 7
    149c:	08 95       	ret

0000149e <__gesf2>:
    149e:	66 d0       	rcall	.+204    	; 0x156c <__fp_cmp>
    14a0:	08 f4       	brcc	.+2      	; 0x14a4 <__gesf2+0x6>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	08 95       	ret

000014a6 <__mulsf3>:
    14a6:	0b d0       	rcall	.+22     	; 0x14be <__mulsf3x>
    14a8:	c0 cf       	rjmp	.-128    	; 0x142a <__fp_round>
    14aa:	b1 df       	rcall	.-158    	; 0x140e <__fp_pscA>
    14ac:	28 f0       	brcs	.+10     	; 0x14b8 <__mulsf3+0x12>
    14ae:	b6 df       	rcall	.-148    	; 0x141c <__fp_pscB>
    14b0:	18 f0       	brcs	.+6      	; 0x14b8 <__mulsf3+0x12>
    14b2:	95 23       	and	r25, r21
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <__mulsf3+0x12>
    14b6:	a2 cf       	rjmp	.-188    	; 0x13fc <__fp_inf>
    14b8:	a7 cf       	rjmp	.-178    	; 0x1408 <__fp_nan>
    14ba:	11 24       	eor	r1, r1
    14bc:	ea cf       	rjmp	.-44     	; 0x1492 <__fp_szero>

000014be <__mulsf3x>:
    14be:	c6 df       	rcall	.-116    	; 0x144c <__fp_split3>
    14c0:	a0 f3       	brcs	.-24     	; 0x14aa <__mulsf3+0x4>

000014c2 <__mulsf3_pse>:
    14c2:	95 9f       	mul	r25, r21
    14c4:	d1 f3       	breq	.-12     	; 0x14ba <__mulsf3+0x14>
    14c6:	95 0f       	add	r25, r21
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	55 1f       	adc	r21, r21
    14cc:	62 9f       	mul	r22, r18
    14ce:	f0 01       	movw	r30, r0
    14d0:	72 9f       	mul	r23, r18
    14d2:	bb 27       	eor	r27, r27
    14d4:	f0 0d       	add	r31, r0
    14d6:	b1 1d       	adc	r27, r1
    14d8:	63 9f       	mul	r22, r19
    14da:	aa 27       	eor	r26, r26
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	aa 1f       	adc	r26, r26
    14e2:	64 9f       	mul	r22, r20
    14e4:	66 27       	eor	r22, r22
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	66 1f       	adc	r22, r22
    14ec:	82 9f       	mul	r24, r18
    14ee:	22 27       	eor	r18, r18
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	62 1f       	adc	r22, r18
    14f6:	73 9f       	mul	r23, r19
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	83 9f       	mul	r24, r19
    1500:	a0 0d       	add	r26, r0
    1502:	61 1d       	adc	r22, r1
    1504:	22 1f       	adc	r18, r18
    1506:	74 9f       	mul	r23, r20
    1508:	33 27       	eor	r19, r19
    150a:	a0 0d       	add	r26, r0
    150c:	61 1d       	adc	r22, r1
    150e:	23 1f       	adc	r18, r19
    1510:	84 9f       	mul	r24, r20
    1512:	60 0d       	add	r22, r0
    1514:	21 1d       	adc	r18, r1
    1516:	82 2f       	mov	r24, r18
    1518:	76 2f       	mov	r23, r22
    151a:	6a 2f       	mov	r22, r26
    151c:	11 24       	eor	r1, r1
    151e:	9f 57       	subi	r25, 0x7F	; 127
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	8a f0       	brmi	.+34     	; 0x1546 <__mulsf3_pse+0x84>
    1524:	e1 f0       	breq	.+56     	; 0x155e <__mulsf3_pse+0x9c>
    1526:	88 23       	and	r24, r24
    1528:	4a f0       	brmi	.+18     	; 0x153c <__mulsf3_pse+0x7a>
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__mulsf3_pse+0x64>
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	51 05       	cpc	r21, r1
    1540:	70 f0       	brcs	.+28     	; 0x155e <__mulsf3_pse+0x9c>
    1542:	5c cf       	rjmp	.-328    	; 0x13fc <__fp_inf>
    1544:	a6 cf       	rjmp	.-180    	; 0x1492 <__fp_szero>
    1546:	5f 3f       	cpi	r21, 0xFF	; 255
    1548:	ec f3       	brlt	.-6      	; 0x1544 <__mulsf3_pse+0x82>
    154a:	98 3e       	cpi	r25, 0xE8	; 232
    154c:	dc f3       	brlt	.-10     	; 0x1544 <__mulsf3_pse+0x82>
    154e:	86 95       	lsr	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b7 95       	ror	r27
    1556:	f7 95       	ror	r31
    1558:	e7 95       	ror	r30
    155a:	9f 5f       	subi	r25, 0xFF	; 255
    155c:	c1 f7       	brne	.-16     	; 0x154e <__mulsf3_pse+0x8c>
    155e:	fe 2b       	or	r31, r30
    1560:	88 0f       	add	r24, r24
    1562:	91 1d       	adc	r25, r1
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret

0000156c <__fp_cmp>:
    156c:	99 0f       	add	r25, r25
    156e:	00 08       	sbc	r0, r0
    1570:	55 0f       	add	r21, r21
    1572:	aa 0b       	sbc	r26, r26
    1574:	e0 e8       	ldi	r30, 0x80	; 128
    1576:	fe ef       	ldi	r31, 0xFE	; 254
    1578:	16 16       	cp	r1, r22
    157a:	17 06       	cpc	r1, r23
    157c:	e8 07       	cpc	r30, r24
    157e:	f9 07       	cpc	r31, r25
    1580:	c0 f0       	brcs	.+48     	; 0x15b2 <__fp_cmp+0x46>
    1582:	12 16       	cp	r1, r18
    1584:	13 06       	cpc	r1, r19
    1586:	e4 07       	cpc	r30, r20
    1588:	f5 07       	cpc	r31, r21
    158a:	98 f0       	brcs	.+38     	; 0x15b2 <__fp_cmp+0x46>
    158c:	62 1b       	sub	r22, r18
    158e:	73 0b       	sbc	r23, r19
    1590:	84 0b       	sbc	r24, r20
    1592:	95 0b       	sbc	r25, r21
    1594:	39 f4       	brne	.+14     	; 0x15a4 <__fp_cmp+0x38>
    1596:	0a 26       	eor	r0, r26
    1598:	61 f0       	breq	.+24     	; 0x15b2 <__fp_cmp+0x46>
    159a:	23 2b       	or	r18, r19
    159c:	24 2b       	or	r18, r20
    159e:	25 2b       	or	r18, r21
    15a0:	21 f4       	brne	.+8      	; 0x15aa <__fp_cmp+0x3e>
    15a2:	08 95       	ret
    15a4:	0a 26       	eor	r0, r26
    15a6:	09 f4       	brne	.+2      	; 0x15aa <__fp_cmp+0x3e>
    15a8:	a1 40       	sbci	r26, 0x01	; 1
    15aa:	a6 95       	lsr	r26
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	81 1d       	adc	r24, r1
    15b0:	81 1d       	adc	r24, r1
    15b2:	08 95       	ret

000015b4 <__divmodhi4>:
    15b4:	97 fb       	bst	r25, 7
    15b6:	07 2e       	mov	r0, r23
    15b8:	16 f4       	brtc	.+4      	; 0x15be <__divmodhi4+0xa>
    15ba:	00 94       	com	r0
    15bc:	07 d0       	rcall	.+14     	; 0x15cc <__divmodhi4_neg1>
    15be:	77 fd       	sbrc	r23, 7
    15c0:	09 d0       	rcall	.+18     	; 0x15d4 <__divmodhi4_neg2>
    15c2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__udivmodhi4>
    15c6:	07 fc       	sbrc	r0, 7
    15c8:	05 d0       	rcall	.+10     	; 0x15d4 <__divmodhi4_neg2>
    15ca:	3e f4       	brtc	.+14     	; 0x15da <__divmodhi4_exit>

000015cc <__divmodhi4_neg1>:
    15cc:	90 95       	com	r25
    15ce:	81 95       	neg	r24
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	08 95       	ret

000015d4 <__divmodhi4_neg2>:
    15d4:	70 95       	com	r23
    15d6:	61 95       	neg	r22
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255

000015da <__divmodhi4_exit>:
    15da:	08 95       	ret

000015dc <__udivmodhi4>:
    15dc:	aa 1b       	sub	r26, r26
    15de:	bb 1b       	sub	r27, r27
    15e0:	51 e1       	ldi	r21, 0x11	; 17
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <__udivmodhi4_ep>

000015e4 <__udivmodhi4_loop>:
    15e4:	aa 1f       	adc	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	a6 17       	cp	r26, r22
    15ea:	b7 07       	cpc	r27, r23
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <__udivmodhi4_ep>
    15ee:	a6 1b       	sub	r26, r22
    15f0:	b7 0b       	sbc	r27, r23

000015f2 <__udivmodhi4_ep>:
    15f2:	88 1f       	adc	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	5a 95       	dec	r21
    15f8:	a9 f7       	brne	.-22     	; 0x15e4 <__udivmodhi4_loop>
    15fa:	80 95       	com	r24
    15fc:	90 95       	com	r25
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	08 95       	ret

00001604 <__tablejump2__>:
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31

00001608 <__tablejump__>:
    1608:	05 90       	lpm	r0, Z+
    160a:	f4 91       	lpm	r31, Z
    160c:	e0 2d       	mov	r30, r0
    160e:	09 94       	ijmp

00001610 <__do_global_dtors>:
    1610:	11 e0       	ldi	r17, 0x01	; 1
    1612:	ce e6       	ldi	r28, 0x6E	; 110
    1614:	d1 e0       	ldi	r29, 0x01	; 1
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <__do_global_dtors+0x10>
    1618:	fe 01       	movw	r30, r28
    161a:	0e 94 04 0b 	call	0x1608	; 0x1608 <__tablejump__>
    161e:	22 96       	adiw	r28, 0x02	; 2
    1620:	c0 37       	cpi	r28, 0x70	; 112
    1622:	d1 07       	cpc	r29, r17
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__do_global_dtors+0x8>
    1626:	f8 94       	cli

00001628 <__stop_program>:
    1628:	ff cf       	rjmp	.-2      	; 0x1628 <__stop_program>
