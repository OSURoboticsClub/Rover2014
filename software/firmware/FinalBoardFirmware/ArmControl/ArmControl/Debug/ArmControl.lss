
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  000010da  0000116e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  00802002  00802002  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038c6  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001193  00000000  00000000  00004c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fd2  00000000  00000000  00005e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000534  00000000  00000000  00006de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001705  00000000  00000000  00007318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001764  00000000  00000000  00008a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0000a181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_25>
      68:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_26>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	f9 04       	cpc	r15, r9

0000016e <__ctors_end>:
     16e:	0a 05       	cpc	r16, r10

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	ea ed       	ldi	r30, 0xDA	; 218
     184:	f0 e1       	ldi	r31, 0x10	; 16
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 30       	cpi	r26, 0x02	; 2
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a2 e0       	ldi	r26, 0x02	; 2
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	ac 35       	cpi	r26, 0x5C	; 92
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 46 04 	call	0x88c	; 0x88c <main>
     1bc:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1d0:	1c 92       	st	X, r1
	return Result;
}
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1f8:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     22c:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <__vector_25>:
#define PACKETSIZE 10
volatile char recieveBuffer[PACKETSIZE];

enum { HEADER, COMMAND, BASEROTVAL1, BASEROTVAL2, ACT1VAL1, ACT1VAL2, ACT2VAL1, ACT2VAL2, CHECKSUM, TAIL};

ISR(USARTC0_RXC_vect){
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	2f 93       	push	r18
     270:	3f 93       	push	r19
     272:	4f 93       	push	r20
     274:	5f 93       	push	r21
     276:	6f 93       	push	r22
     278:	7f 93       	push	r23
     27a:	8f 93       	push	r24
     27c:	9f 93       	push	r25
     27e:	af 93       	push	r26
     280:	bf 93       	push	r27
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
     28a:	8d e4       	ldi	r24, 0x4D	; 77
     28c:	90 e2       	ldi	r25, 0x20	; 32
     28e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <USART_RXComplete>
	
	if(USART_RXBufferData_Available(&USART_PC_Data)){
     292:	8d e4       	ldi	r24, 0x4D	; 77
     294:	90 e2       	ldi	r25, 0x20	; 32
     296:	0e 94 09 06 	call	0xc12	; 0xc12 <USART_RXBufferData_Available>
     29a:	88 23       	and	r24, r24
     29c:	99 f0       	breq	.+38     	; 0x2c4 <__vector_25+0x60>
		recieveBuffer[bufferIndex++] = USART_RXBuffer_GetByte(&USART_PC_Data);
     29e:	c0 91 0c 20 	lds	r28, 0x200C
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	8c 0f       	add	r24, r28
     2a6:	80 93 0c 20 	sts	0x200C, r24
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
     2ac:	8d e4       	ldi	r24, 0x4D	; 77
     2ae:	90 e2       	ldi	r25, 0x20	; 32
     2b0:	0e 94 11 06 	call	0xc22	; 0xc22 <USART_RXBuffer_GetByte>
     2b4:	ce 5f       	subi	r28, 0xFE	; 254
     2b6:	df 4d       	sbci	r29, 0xDF	; 223
     2b8:	88 83       	st	Y, r24
		bufferIndex++;
     2ba:	80 91 0c 20 	lds	r24, 0x200C
     2be:	8f 5f       	subi	r24, 0xFF	; 255
     2c0:	80 93 0c 20 	sts	0x200C, r24
	}
	
	if(bufferIndex == PACKETSIZE){
     2c4:	80 91 0c 20 	lds	r24, 0x200C
     2c8:	8a 30       	cpi	r24, 0x0A	; 10
     2ca:	31 f4       	brne	.+12     	; 0x2d8 <__vector_25+0x74>
		canAcceptPackets = false;
     2cc:	10 92 00 20 	sts	0x2000, r1
		//Process packet
		STATUS1_SET();
     2d0:	80 e4       	ldi	r24, 0x40	; 64
     2d2:	e0 e4       	ldi	r30, 0x40	; 64
     2d4:	f6 e0       	ldi	r31, 0x06	; 6
     2d6:	85 83       	std	Z+5, r24	; 0x05
	}

}
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	bf 91       	pop	r27
     2e2:	af 91       	pop	r26
     2e4:	9f 91       	pop	r25
     2e6:	8f 91       	pop	r24
     2e8:	7f 91       	pop	r23
     2ea:	6f 91       	pop	r22
     2ec:	5f 91       	pop	r21
     2ee:	4f 91       	pop	r20
     2f0:	3f 91       	pop	r19
     2f2:	2f 91       	pop	r18
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <__vector_26>:

ISR(USARTC0_DRE_vect){
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
     320:	8d e4       	ldi	r24, 0x4D	; 77
     322:	90 e2       	ldi	r25, 0x20	; 32
     324:	0e 94 32 06 	call	0xc64	; 0xc64 <USART_DataRegEmpty>
}
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <_Z23SetXMEGA32MhzCalibratedv>:


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     34a:	88 ed       	ldi	r24, 0xD8	; 216
     34c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     354:	e0 e5       	ldi	r30, 0x50	; 80
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	81 81       	ldd	r24, Z+1	; 0x01
     35a:	81 ff       	sbrs	r24, 1
     35c:	fd cf       	rjmp	.-6      	; 0x358 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     35e:	88 ed       	ldi	r24, 0xD8	; 216
     360:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     368:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     36a:	e0 e5       	ldi	r30, 0x50	; 80
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	84 60       	ori	r24, 0x04	; 4
     372:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     374:	81 81       	ldd	r24, Z+1	; 0x01
     376:	82 ff       	sbrs	r24, 2
     378:	fd cf       	rjmp	.-6      	; 0x374 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     37a:	e0 e5       	ldi	r30, 0x50	; 80
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	86 81       	ldd	r24, Z+6	; 0x06
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     384:	e0 e6       	ldi	r30, 0x60	; 96
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	80 83       	st	Z, r24
     38e:	08 95       	ret

00000390 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     390:	e0 e4       	ldi	r30, 0x40	; 64
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	88 e0       	ldi	r24, 0x08	; 8
     396:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     398:	84 e0       	ldi	r24, 0x04	; 4
     39a:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	60 ea       	ldi	r22, 0xA0	; 160
     3a0:	78 e0       	ldi	r23, 0x08	; 8
     3a2:	8d e4       	ldi	r24, 0x4D	; 77
     3a4:	90 e2       	ldi	r25, 0x20	; 32
     3a6:	0e 94 00 06 	call	0xc00	; 0xc00 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     3aa:	e0 91 4d 20 	lds	r30, 0x204D
     3ae:	f0 91 4e 20 	lds	r31, 0x204E
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     3b6:	83 81       	ldd	r24, Z+3	; 0x03
     3b8:	8f 7c       	andi	r24, 0xCF	; 207
     3ba:	80 61       	ori	r24, 0x10	; 16
     3bc:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     3be:	a0 ea       	ldi	r26, 0xA0	; 160
     3c0:	b8 e0       	ldi	r27, 0x08	; 8
     3c2:	8f ec       	ldi	r24, 0xCF	; 207
     3c4:	16 96       	adiw	r26, 0x06	; 6
     3c6:	8c 93       	st	X, r24
     3c8:	16 97       	sbiw	r26, 0x06	; 6
     3ca:	17 96       	adiw	r26, 0x07	; 7
     3cc:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     3ce:	84 81       	ldd	r24, Z+4	; 0x04
     3d0:	80 61       	ori	r24, 0x10	; 16
     3d2:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     3d4:	84 81       	ldd	r24, Z+4	; 0x04
     3d6:	88 60       	ori	r24, 0x08	; 8
     3d8:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     3da:	e0 ea       	ldi	r30, 0xA0	; 160
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	82 81       	ldd	r24, Z+2	; 0x02
     3e0:	81 60       	ori	r24, 0x01	; 1
     3e2:	82 83       	std	Z+2, r24	; 0x02
     3e4:	08 95       	ret

000003e6 <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     3ea:	0e 94 a5 01 	call	0x34a	; 0x34a <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     3ee:	0e 94 c8 01 	call	0x390	; 0x390 <_Z12SetupPCCommsv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     3f2:	80 ee       	ldi	r24, 0xE0	; 224
     3f4:	e0 e4       	ldi	r30, 0x40	; 64
     3f6:	f6 e0       	ldi	r31, 0x06	; 6
     3f8:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3fa:	e0 e6       	ldi	r30, 0x60	; 96
     3fc:	f6 e0       	ldi	r31, 0x06	; 6
     3fe:	9f ef       	ldi	r25, 0xFF	; 255
     400:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b6 e0       	ldi	r27, 0x06	; 6
     406:	11 96       	adiw	r26, 0x01	; 1
     408:	8c 93       	st	X, r24
     40a:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     40c:	c0 e2       	ldi	r28, 0x20	; 32
     40e:	d6 e0       	ldi	r29, 0x06	; 6
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     414:	84 e0       	ldi	r24, 0x04	; 4
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	8c 93       	st	X, r24
     41a:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     41c:	98 e0       	ldi	r25, 0x08	; 8
     41e:	12 96       	adiw	r26, 0x02	; 2
     420:	9c 93       	st	X, r25
     422:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit	
     424:	9a 83       	std	Y+2, r25	; 0x02
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_ENABLE();
     426:	20 e4       	ldi	r18, 0x40	; 64
     428:	26 83       	std	Z+6, r18	; 0x06
	
	//Setup Microstepping
	MD1_M0_CLR();
     42a:	90 e2       	ldi	r25, 0x20	; 32
     42c:	16 96       	adiw	r26, 0x06	; 6
     42e:	9c 93       	st	X, r25
     430:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     432:	16 96       	adiw	r26, 0x06	; 6
     434:	2c 93       	st	X, r18
     436:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_SET();
     438:	20 e8       	ldi	r18, 0x80	; 128
     43a:	15 96       	adiw	r26, 0x05	; 5
     43c:	2c 93       	st	X, r18
	
	MD1_DIR_CLR();
     43e:	20 e1       	ldi	r18, 0x10	; 16
     440:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     442:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     444:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_CLR();
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	9e 83       	std	Y+6, r25	; 0x06
	MD2_M2_CLR();
     44e:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     450:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     452:	96 83       	std	Z+6, r25	; 0x06
	
	sei();
     454:	78 94       	sei
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	8c 01       	movw	r16, r24
     46a:	c7 e0       	ldi	r28, 0x07	; 7
     46c:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     46e:	e1 2c       	mov	r14, r1
     470:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     472:	01 15       	cp	r16, r1
     474:	11 05       	cpc	r17, r1
     476:	39 f4       	brne	.+14     	; 0x486 <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     480:	e8 0e       	add	r14, r24
     482:	f9 1e       	adc	r15, r25
     484:	09 c0       	rjmp	.+18     	; 0x498 <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     486:	01 30       	cpi	r16, 0x01	; 1
     488:	11 05       	cpc	r17, r1
     48a:	31 f4       	brne	.+12     	; 0x498 <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     494:	e8 0e       	add	r14, r24
     496:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     498:	8f e3       	ldi	r24, 0x3F	; 63
     49a:	9f e1       	ldi	r25, 0x1F	; 31
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <_Z9smoothADCi+0x40>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <_Z9smoothADCi+0x46>
     4a2:	00 00       	nop
     4a4:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     4a6:	20 97       	sbiw	r28, 0x00	; 0
     4a8:	21 f7       	brne	.-56     	; 0x472 <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     4aa:	c7 01       	movw	r24, r14
     4ac:	67 e0       	ldi	r22, 0x07	; 7
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 32 08 	call	0x1064	; 0x1064 <__divmodhi4>
     4b4:	cb 01       	movw	r24, r22
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	08 95       	ret

000004c4 <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     4cc:	20 91 49 20 	lds	r18, 0x2049
     4d0:	30 91 4a 20 	lds	r19, 0x204A
     4d4:	40 91 4b 20 	lds	r20, 0x204B
     4d8:	50 91 4c 20 	lds	r21, 0x204C
     4dc:	60 91 45 20 	lds	r22, 0x2045
     4e0:	70 91 46 20 	lds	r23, 0x2046
     4e4:	80 91 47 20 	lds	r24, 0x2047
     4e8:	90 91 48 20 	lds	r25, 0x2048
     4ec:	0e 94 4c 06 	call	0xc98	; 0xc98 <__subsf3>
     4f0:	6b 01       	movw	r12, r22
     4f2:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	a9 01       	movw	r20, r18
     4fa:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     4fe:	18 16       	cp	r1, r24
     500:	24 f0       	brlt	.+8      	; 0x50a <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     502:	f7 fa       	bst	r15, 7
     504:	f0 94       	com	r15
     506:	f7 f8       	bld	r15, 7
     508:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     50a:	a7 01       	movw	r20, r14
     50c:	96 01       	movw	r18, r12
     50e:	60 91 39 20 	lds	r22, 0x2039
     512:	70 91 3a 20 	lds	r23, 0x203A
     516:	80 91 3b 20 	lds	r24, 0x203B
     51a:	90 91 3c 20 	lds	r25, 0x203C
     51e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     522:	18 16       	cp	r1, r24
     524:	44 f4       	brge	.+16     	; 0x536 <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     526:	e7 e3       	ldi	r30, 0x37	; 55
     528:	f0 e2       	ldi	r31, 0x20	; 32
     52a:	80 81       	ld	r24, Z
     52c:	91 81       	ldd	r25, Z+1	; 0x01
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	80 83       	st	Z, r24
     532:	91 83       	std	Z+1, r25	; 0x01
     534:	04 c0       	rjmp	.+8      	; 0x53e <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     536:	10 92 37 20 	sts	0x2037, r1
     53a:	10 92 38 20 	sts	0x2038, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     53e:	20 91 31 20 	lds	r18, 0x2031
     542:	30 91 32 20 	lds	r19, 0x2032
     546:	40 91 33 20 	lds	r20, 0x2033
     54a:	50 91 34 20 	lds	r21, 0x2034
     54e:	60 91 2d 20 	lds	r22, 0x202D
     552:	70 91 2e 20 	lds	r23, 0x202E
     556:	80 91 2f 20 	lds	r24, 0x202F
     55a:	90 91 30 20 	lds	r25, 0x2030
     55e:	0e 94 4c 06 	call	0xc98	; 0xc98 <__subsf3>
     562:	6b 01       	movw	r12, r22
     564:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     570:	18 16       	cp	r1, r24
     572:	24 f0       	brlt	.+8      	; 0x57c <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     574:	f7 fa       	bst	r15, 7
     576:	f0 94       	com	r15
     578:	f7 f8       	bld	r15, 7
     57a:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     57c:	a7 01       	movw	r20, r14
     57e:	96 01       	movw	r18, r12
     580:	60 91 21 20 	lds	r22, 0x2021
     584:	70 91 22 20 	lds	r23, 0x2022
     588:	80 91 23 20 	lds	r24, 0x2023
     58c:	90 91 24 20 	lds	r25, 0x2024
     590:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     594:	18 16       	cp	r1, r24
     596:	44 f4       	brge	.+16     	; 0x5a8 <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     598:	ef e1       	ldi	r30, 0x1F	; 31
     59a:	f0 e2       	ldi	r31, 0x20	; 32
     59c:	80 81       	ld	r24, Z
     59e:	91 81       	ldd	r25, Z+1	; 0x01
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	80 83       	st	Z, r24
     5a4:	91 83       	std	Z+1, r25	; 0x01
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     5a8:	10 92 1f 20 	sts	0x201F, r1
     5ac:	10 92 20 20 	sts	0x2020, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     5b0:	20 91 1f 20 	lds	r18, 0x201F
     5b4:	30 91 20 20 	lds	r19, 0x2020
     5b8:	80 91 1d 20 	lds	r24, 0x201D
     5bc:	90 91 1e 20 	lds	r25, 0x201E
     5c0:	28 17       	cp	r18, r24
     5c2:	39 07       	cpc	r19, r25
     5c4:	24 f0       	brlt	.+8      	; 0x5ce <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     5c6:	8d e1       	ldi	r24, 0x1D	; 29
     5c8:	90 e2       	ldi	r25, 0x20	; 32
     5ca:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     5ce:	20 91 37 20 	lds	r18, 0x2037
     5d2:	30 91 38 20 	lds	r19, 0x2038
     5d6:	80 91 1d 20 	lds	r24, 0x201D
     5da:	90 91 1e 20 	lds	r25, 0x201E
     5de:	28 17       	cp	r18, r24
     5e0:	39 07       	cpc	r19, r25
     5e2:	24 f0       	brlt	.+8      	; 0x5ec <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     5e4:	85 e3       	ldi	r24, 0x35	; 53
     5e6:	90 e2       	ldi	r25, 0x20	; 32
     5e8:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z9smoothADCi>
     5f4:	bc 01       	movw	r22, r24
     5f6:	88 27       	eor	r24, r24
     5f8:	77 fd       	sbrc	r23, 7
     5fa:	80 95       	com	r24
     5fc:	98 2f       	mov	r25, r24
     5fe:	0e 94 1b 07 	call	0xe36	; 0xe36 <__floatsisf>
     602:	2f e1       	ldi	r18, 0x1F	; 31
     604:	35 e8       	ldi	r19, 0x85	; 133
     606:	48 e6       	ldi	r20, 0x68	; 104
     608:	52 e4       	ldi	r21, 0x42	; 66
     60a:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divsf3>
     60e:	25 e8       	ldi	r18, 0x85	; 133
     610:	3b ee       	ldi	r19, 0xEB	; 235
     612:	41 ed       	ldi	r20, 0xD1	; 209
     614:	5e e3       	ldi	r21, 0x3E	; 62
     616:	0e 94 4c 06 	call	0xc98	; 0xc98 <__subsf3>
     61a:	60 93 45 20 	sts	0x2045, r22
     61e:	70 93 46 20 	sts	0x2046, r23
     622:	80 93 47 20 	sts	0x2047, r24
     626:	90 93 48 20 	sts	0x2048, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z9smoothADCi>
     632:	bc 01       	movw	r22, r24
     634:	88 27       	eor	r24, r24
     636:	77 fd       	sbrc	r23, 7
     638:	80 95       	com	r24
     63a:	98 2f       	mov	r25, r24
     63c:	0e 94 1b 07 	call	0xe36	; 0xe36 <__floatsisf>
     640:	2f e1       	ldi	r18, 0x1F	; 31
     642:	35 e8       	ldi	r19, 0x85	; 133
     644:	48 e6       	ldi	r20, 0x68	; 104
     646:	52 e4       	ldi	r21, 0x42	; 66
     648:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divsf3>
     64c:	25 e8       	ldi	r18, 0x85	; 133
     64e:	3b ee       	ldi	r19, 0xEB	; 235
     650:	41 ed       	ldi	r20, 0xD1	; 209
     652:	5e e3       	ldi	r21, 0x3E	; 62
     654:	0e 94 4c 06 	call	0xc98	; 0xc98 <__subsf3>
     658:	60 93 2d 20 	sts	0x202D, r22
     65c:	70 93 2e 20 	sts	0x202E, r23
     660:	80 93 2f 20 	sts	0x202F, r24
     664:	90 93 30 20 	sts	0x2030, r25
}
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     672:	8f 92       	push	r8
     674:	9f 92       	push	r9
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
		
	if(act == LOWER){
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	09 f0       	breq	.+2      	; 0x688 <_Z13getMotorSpeedi+0x16>
     686:	56 c0       	rjmp	.+172    	; 0x734 <_Z13getMotorSpeedi+0xc2>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     688:	20 91 49 20 	lds	r18, 0x2049
     68c:	30 91 4a 20 	lds	r19, 0x204A
     690:	40 91 4b 20 	lds	r20, 0x204B
     694:	50 91 4c 20 	lds	r21, 0x204C
     698:	60 91 45 20 	lds	r22, 0x2045
     69c:	70 91 46 20 	lds	r23, 0x2046
     6a0:	80 91 47 20 	lds	r24, 0x2047
     6a4:	90 91 48 20 	lds	r25, 0x2048
     6a8:	0e 94 4c 06 	call	0xc98	; 0xc98 <__subsf3>
     6ac:	6b 01       	movw	r12, r22
     6ae:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     6ba:	18 16       	cp	r1, r24
     6bc:	24 f0       	brlt	.+8      	; 0x6c6 <_Z13getMotorSpeedi+0x54>
		return input;
	else
		return input * -1;
     6be:	f7 fa       	bst	r15, 7
     6c0:	f0 94       	com	r15
     6c2:	f7 f8       	bld	r15, 7
     6c4:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     6c6:	80 90 3d 20 	lds	r8, 0x203D
     6ca:	90 90 3e 20 	lds	r9, 0x203E
     6ce:	a0 90 3f 20 	lds	r10, 0x203F
     6d2:	b0 90 40 20 	lds	r11, 0x2040
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	c5 01       	movw	r24, r10
     6e0:	b4 01       	movw	r22, r8
     6e2:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     6e6:	a7 01       	movw	r20, r14
     6e8:	96 01       	movw	r18, r12
     6ea:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	54 f4       	brge	.+20     	; 0x706 <_Z13getMotorSpeedi+0x94>
			return lowerAct.speed / 3;
     6f2:	80 91 41 20 	lds	r24, 0x2041
     6f6:	90 91 42 20 	lds	r25, 0x2042
     6fa:	63 e0       	ldi	r22, 0x03	; 3
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	0e 94 32 08 	call	0x1064	; 0x1064 <__divmodhi4>
     702:	cb 01       	movw	r24, r22
     704:	72 c0       	rjmp	.+228    	; 0x7ea <_Z13getMotorSpeedi+0x178>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     706:	a7 01       	movw	r20, r14
     708:	96 01       	movw	r18, r12
     70a:	c5 01       	movw	r24, r10
     70c:	b4 01       	movw	r22, r8
     70e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     712:	18 16       	cp	r1, r24
     714:	54 f4       	brge	.+20     	; 0x72a <_Z13getMotorSpeedi+0xb8>
			return lowerAct.speed / 2;
     716:	80 91 41 20 	lds	r24, 0x2041
     71a:	90 91 42 20 	lds	r25, 0x2042
     71e:	99 23       	and	r25, r25
     720:	0c f4       	brge	.+2      	; 0x724 <_Z13getMotorSpeedi+0xb2>
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	95 95       	asr	r25
     726:	87 95       	ror	r24
     728:	60 c0       	rjmp	.+192    	; 0x7ea <_Z13getMotorSpeedi+0x178>
		else
			return lowerAct.speed;
     72a:	80 91 41 20 	lds	r24, 0x2041
     72e:	90 91 42 20 	lds	r25, 0x2042
     732:	5b c0       	rjmp	.+182    	; 0x7ea <_Z13getMotorSpeedi+0x178>
	}
	else if (act == UPPER){
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	09 f0       	breq	.+2      	; 0x73a <_Z13getMotorSpeedi+0xc8>
     738:	56 c0       	rjmp	.+172    	; 0x7e6 <_Z13getMotorSpeedi+0x174>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     73a:	20 91 31 20 	lds	r18, 0x2031
     73e:	30 91 32 20 	lds	r19, 0x2032
     742:	40 91 33 20 	lds	r20, 0x2033
     746:	50 91 34 20 	lds	r21, 0x2034
     74a:	60 91 2d 20 	lds	r22, 0x202D
     74e:	70 91 2e 20 	lds	r23, 0x202E
     752:	80 91 2f 20 	lds	r24, 0x202F
     756:	90 91 30 20 	lds	r25, 0x2030
     75a:	0e 94 4c 06 	call	0xc98	; 0xc98 <__subsf3>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	a9 01       	movw	r20, r18
     768:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     76c:	18 16       	cp	r1, r24
     76e:	24 f0       	brlt	.+8      	; 0x778 <_Z13getMotorSpeedi+0x106>
		return input;
	else
		return input * -1;
     770:	f7 fa       	bst	r15, 7
     772:	f0 94       	com	r15
     774:	f7 f8       	bld	r15, 7
     776:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     778:	80 90 25 20 	lds	r8, 0x2025
     77c:	90 90 26 20 	lds	r9, 0x2026
     780:	a0 90 27 20 	lds	r10, 0x2027
     784:	b0 90 28 20 	lds	r11, 0x2028
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	c5 01       	movw	r24, r10
     792:	b4 01       	movw	r22, r8
     794:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     798:	a7 01       	movw	r20, r14
     79a:	96 01       	movw	r18, r12
     79c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     7a0:	18 16       	cp	r1, r24
     7a2:	54 f4       	brge	.+20     	; 0x7b8 <_Z13getMotorSpeedi+0x146>
			return upperAct.speed / 3;
     7a4:	80 91 29 20 	lds	r24, 0x2029
     7a8:	90 91 2a 20 	lds	r25, 0x202A
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	0e 94 32 08 	call	0x1064	; 0x1064 <__divmodhi4>
     7b4:	cb 01       	movw	r24, r22
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <_Z13getMotorSpeedi+0x178>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     7b8:	a7 01       	movw	r20, r14
     7ba:	96 01       	movw	r18, r12
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	54 f4       	brge	.+20     	; 0x7dc <_Z13getMotorSpeedi+0x16a>
			return upperAct.speed / 2;
     7c8:	80 91 29 20 	lds	r24, 0x2029
     7cc:	90 91 2a 20 	lds	r25, 0x202A
     7d0:	99 23       	and	r25, r25
     7d2:	0c f4       	brge	.+2      	; 0x7d6 <_Z13getMotorSpeedi+0x164>
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	95 95       	asr	r25
     7d8:	87 95       	ror	r24
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <_Z13getMotorSpeedi+0x178>
		else
			return upperAct.speed;
     7dc:	80 91 29 20 	lds	r24, 0x2029
     7e0:	90 91 2a 20 	lds	r25, 0x202A
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <_Z13getMotorSpeedi+0x178>
	}
	
	
	////////
	return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
}
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	08 95       	ret

000007fc <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	f1 f4       	brne	.+60     	; 0x83c <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     800:	80 91 43 20 	lds	r24, 0x2043
     804:	90 91 44 20 	lds	r25, 0x2044
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	09 f4       	brne	.+2      	; 0x80e <_Z11getMotorDiri+0x12>
     80c:	3e c0       	rjmp	.+124    	; 0x88a <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     80e:	20 91 49 20 	lds	r18, 0x2049
     812:	30 91 4a 20 	lds	r19, 0x204A
     816:	40 91 4b 20 	lds	r20, 0x204B
     81a:	50 91 4c 20 	lds	r21, 0x204C
     81e:	60 91 45 20 	lds	r22, 0x2045
     822:	70 91 46 20 	lds	r23, 0x2046
     826:	80 91 47 20 	lds	r24, 0x2047
     82a:	90 91 48 20 	lds	r25, 0x2048
     82e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     832:	18 16       	cp	r1, r24
     834:	14 f5       	brge	.+68     	; 0x87a <_Z11getMotorDiri+0x7e>
			return -1;
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	01 f5       	brne	.+64     	; 0x880 <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     840:	80 91 2b 20 	lds	r24, 0x202B
     844:	90 91 2c 20 	lds	r25, 0x202C
     848:	00 97       	sbiw	r24, 0x00	; 0
     84a:	f9 f0       	breq	.+62     	; 0x88a <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     84c:	20 91 31 20 	lds	r18, 0x2031
     850:	30 91 32 20 	lds	r19, 0x2032
     854:	40 91 33 20 	lds	r20, 0x2033
     858:	50 91 34 20 	lds	r21, 0x2034
     85c:	60 91 2d 20 	lds	r22, 0x202D
     860:	70 91 2e 20 	lds	r23, 0x202E
     864:	80 91 2f 20 	lds	r24, 0x202F
     868:	90 91 30 20 	lds	r25, 0x2030
     86c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__gesf2>
     870:	18 16       	cp	r1, r24
     872:	4c f4       	brge	.+18     	; 0x886 <_Z11getMotorDiri+0x8a>
			return -1;
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     88a:	08 95       	ret

0000088c <main>:

int main(void)
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <main+0x6>
     892:	00 d0       	rcall	.+0      	; 0x894 <main+0x8>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     898:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_Z25DemInitThingsYouBeenDoingv>
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	87 ea       	ldi	r24, 0xA7	; 167
     8a0:	91 e6       	ldi	r25, 0x61	; 97
     8a2:	21 50       	subi	r18, 0x01	; 1
     8a4:	80 40       	sbci	r24, 0x00	; 0
     8a6:	90 40       	sbci	r25, 0x00	; 0
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <main+0x16>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <main+0x20>
     8ac:	00 00       	nop
	_delay_ms(1000);
	char SendBuffer[200];
	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     8ae:	40 e6       	ldi	r20, 0x60	; 96
     8b0:	56 e0       	ldi	r21, 0x06	; 6
     8b2:	60 ea       	ldi	r22, 0xA0	; 160
     8b4:	79 e0       	ldi	r23, 0x09	; 9
     8b6:	ce 01       	movw	r24, r28
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 3.5;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	a0 e6       	ldi	r26, 0x60	; 96
     8c4:	b0 e4       	ldi	r27, 0x40	; 64
     8c6:	80 93 31 20 	sts	0x2031, r24
     8ca:	90 93 32 20 	sts	0x2032, r25
     8ce:	a0 93 33 20 	sts	0x2033, r26
     8d2:	b0 93 34 20 	sts	0x2034, r27
	lowerAct.desiredPos = 1.5;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a0 ec       	ldi	r26, 0xC0	; 192
     8dc:	bf e3       	ldi	r27, 0x3F	; 63
     8de:	80 93 49 20 	sts	0x2049, r24
     8e2:	90 93 4a 20 	sts	0x204A, r25
     8e6:	a0 93 4b 20 	sts	0x204B, r26
     8ea:	b0 93 4c 20 	sts	0x204C, r27
	
	lowerAct.enable();
     8ee:	85 e3       	ldi	r24, 0x35	; 53
     8f0:	90 e2       	ldi	r25, 0x20	; 32
     8f2:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN9motorInfo6enableEv>
	upperAct.enable();
     8f6:	8d e1       	ldi	r24, 0x1D	; 29
     8f8:	90 e2       	ldi	r25, 0x20	; 32
     8fa:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN9motorInfo6enableEv>
	//baseStepper.rotateBase(0);  //Note that this function takes an angle relative
								 //to the absolute 0 on the robot


	/////////////////   DEBUG (and not wasting power) purposes!
	MD2_DISABLE();
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	e0 e6       	ldi	r30, 0x60	; 96
     902:	f6 e0       	ldi	r31, 0x06	; 6
     904:	85 83       	std	Z+5, r24	; 0x05
//	SendStringPC(SendBuffer);								//Send Dem Strings
	
	while(1) {
		checkActPosition();
		
		if(lowerAct.enabled || upperAct.enabled){
     906:	0f 2e       	mov	r0, r31
     908:	f3 e4       	ldi	r31, 0x43	; 67
     90a:	ef 2e       	mov	r14, r31
     90c:	f0 e2       	ldi	r31, 0x20	; 32
     90e:	ff 2e       	mov	r15, r31
     910:	f0 2d       	mov	r31, r0
     912:	0f 2e       	mov	r0, r31
     914:	fb e2       	ldi	r31, 0x2B	; 43
     916:	cf 2e       	mov	r12, r31
     918:	f0 e2       	ldi	r31, 0x20	; 32
     91a:	df 2e       	mov	r13, r31
     91c:	f0 2d       	mov	r31, r0
			DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));
		}
		else {
			ERROR_SET();
     91e:	00 e4       	ldi	r16, 0x40	; 64
     920:	16 e0       	ldi	r17, 0x06	; 6
     922:	68 94       	set
     924:	66 24       	eor	r6, r6
     926:	67 f8       	bld	r6, 7
											  //once, unlike the current implementation
		}
		
		//Handle sending ready byte
		if(!canAcceptPackets){
			canAcceptPackets = true;
     928:	77 24       	eor	r7, r7
     92a:	73 94       	inc	r7
			USART_PutChar(&USARTC0,'r');
     92c:	0f 2e       	mov	r0, r31
     92e:	f0 ea       	ldi	r31, 0xA0	; 160
     930:	af 2e       	mov	r10, r31
     932:	f8 e0       	ldi	r31, 0x08	; 8
     934:	bf 2e       	mov	r11, r31
     936:	f0 2d       	mov	r31, r0
     938:	0f 2e       	mov	r0, r31
     93a:	f2 e7       	ldi	r31, 0x72	; 114
     93c:	8f 2e       	mov	r8, r31
     93e:	f0 2d       	mov	r31, r0
		}
		
		
		_delay_ms(2000);
		STATUS1_CLR();
     940:	68 94       	set
     942:	99 24       	eor	r9, r9
     944:	96 f8       	bld	r9, 6

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	
	while(1) {
		checkActPosition();
     946:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z16checkActPositionv>
		
		if(lowerAct.enabled || upperAct.enabled){
     94a:	f7 01       	movw	r30, r14
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	89 2b       	or	r24, r25
     952:	29 f4       	brne	.+10     	; 0x95e <main+0xd2>
     954:	f6 01       	movw	r30, r12
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	89 2b       	or	r24, r25
     95c:	e1 f0       	breq	.+56     	; 0x996 <main+0x10a>
			DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 39 03 	call	0x672	; 0x672 <_Z13getMotorSpeedi>
     966:	58 2e       	mov	r5, r24
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_Z11getMotorDiri>
     970:	48 2e       	mov	r4, r24
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_Z11getMotorDiri>
     97a:	54 9c       	mul	r5, r4
     97c:	40 2d       	mov	r20, r0
     97e:	11 24       	eor	r1, r1
     980:	41 58       	subi	r20, 0x81	; 129
     982:	58 9e       	mul	r5, r24
     984:	80 2d       	mov	r24, r0
     986:	11 24       	eor	r1, r1
     988:	6f e7       	ldi	r22, 0x7F	; 127
     98a:	68 0f       	add	r22, r24
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN10Sabertooth11ParsePacketEhh>
     994:	08 c0       	rjmp	.+16     	; 0x9a6 <main+0x11a>
		}
		else {
			ERROR_SET();
     996:	f8 01       	movw	r30, r16
     998:	65 82       	std	Z+5, r6	; 0x05
			DriveSaber.ParsePacket(127,127);  //TODO: This line should only be executed
     99a:	4f e7       	ldi	r20, 0x7F	; 127
     99c:	6f e7       	ldi	r22, 0x7F	; 127
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN10Sabertooth11ParsePacketEhh>
											  //once, unlike the current implementation
		}
		
		//Handle sending ready byte
		if(!canAcceptPackets){
     9a6:	80 91 00 20 	lds	r24, 0x2000
     9aa:	81 11       	cpse	r24, r1
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <main+0x12a>
			canAcceptPackets = true;
     9ae:	70 92 00 20 	sts	0x2000, r7
			USART_PutChar(&USARTC0,'r');
     9b2:	f5 01       	movw	r30, r10
     9b4:	80 82       	st	Z, r8
     9b6:	ff ef       	ldi	r31, 0xFF	; 255
     9b8:	2f e4       	ldi	r18, 0x4F	; 79
     9ba:	83 ec       	ldi	r24, 0xC3	; 195
     9bc:	f1 50       	subi	r31, 0x01	; 1
     9be:	20 40       	sbci	r18, 0x00	; 0
     9c0:	80 40       	sbci	r24, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <main+0x130>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <main+0x13a>
     9c6:	00 00       	nop
		}
		
		
		_delay_ms(2000);
		STATUS1_CLR();
     9c8:	f8 01       	movw	r30, r16
     9ca:	96 82       	std	Z+6, r9	; 0x06
     9cc:	ff ef       	ldi	r31, 0xFF	; 255
     9ce:	29 e6       	ldi	r18, 0x69	; 105
     9d0:	88 e1       	ldi	r24, 0x18	; 24
     9d2:	f1 50       	subi	r31, 0x01	; 1
     9d4:	20 40       	sbci	r18, 0x00	; 0
     9d6:	80 40       	sbci	r24, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x146>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <main+0x150>
     9dc:	00 00       	nop
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	e9 ef       	ldi	r30, 0xF9	; 249
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	91 50       	subi	r25, 0x01	; 1
     9e6:	e0 40       	sbci	r30, 0x00	; 0
     9e8:	f0 40       	sbci	r31, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <main+0x158>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <main+0x162>
     9ee:	00 00       	nop
     9f0:	aa cf       	rjmp	.-172    	; 0x946 <main+0xba>

000009f2 <_GLOBAL__sub_I_swap>:

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     9f2:	85 e3       	ldi	r24, 0x35	; 53
     9f4:	90 e2       	ldi	r25, 0x20	; 32
     9f6:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     9fa:	8d e1       	ldi	r24, 0x1D	; 29
     9fc:	90 e2       	ldi	r25, 0x20	; 32
     9fe:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     a02:	87 e1       	ldi	r24, 0x17	; 23
     a04:	90 e2       	ldi	r25, 0x20	; 32
     a06:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     a0a:	8d e0       	ldi	r24, 0x0D	; 13
     a0c:	90 e2       	ldi	r25, 0x20	; 32
     a0e:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13rotateStepperC1Ev>
     a12:	08 95       	ret

00000a14 <_GLOBAL__sub_D_swap>:
     a14:	8d e0       	ldi	r24, 0x0D	; 13
     a16:	90 e2       	ldi	r25, 0x20	; 32
     a18:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN13rotateStepperD1Ev>
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     a1c:	87 e1       	ldi	r24, 0x17	; 23
     a1e:	90 e2       	ldi	r25, 0x20	; 32
     a20:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN11stepperInfoD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
     a24:	8d e1       	ldi	r24, 0x1D	; 29
     a26:	90 e2       	ldi	r25, 0x20	; 32
     a28:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN9motorInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     a2c:	85 e3       	ldi	r24, 0x35	; 53
     a2e:	90 e2       	ldi	r25, 0x20	; 32
     a30:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN9motorInfoD1Ev>
     a34:	08 95       	ret

00000a36 <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     a36:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     a38:	12 82       	std	Z+2, r1	; 0x02
     a3a:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     a3c:	85 e0       	ldi	r24, 0x05	; 5
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	80 83       	st	Z, r24
     a42:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .1;  //Needs calibration
     a44:	4d ec       	ldi	r20, 0xCD	; 205
     a46:	5c ec       	ldi	r21, 0xCC	; 204
     a48:	6c ec       	ldi	r22, 0xCC	; 204
     a4a:	7d e3       	ldi	r23, 0x3D	; 61
     a4c:	44 83       	std	Z+4, r20	; 0x04
     a4e:	55 83       	std	Z+5, r21	; 0x05
     a50:	66 83       	std	Z+6, r22	; 0x06
     a52:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	60 e4       	ldi	r22, 0x40	; 64
     a5a:	7f e3       	ldi	r23, 0x3F	; 63
     a5c:	40 87       	std	Z+8, r20	; 0x08
     a5e:	51 87       	std	Z+9, r21	; 0x09
     a60:	62 87       	std	Z+10, r22	; 0x0a
     a62:	73 87       	std	Z+11, r23	; 0x0b
	speed = 50;
     a64:	82 e3       	ldi	r24, 0x32	; 50
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	84 87       	std	Z+12, r24	; 0x0c
     a6a:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     a6c:	16 86       	std	Z+14, r1	; 0x0e
     a6e:	17 86       	std	Z+15, r1	; 0x0f
     a70:	08 95       	ret

00000a72 <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     a72:	08 95       	ret

00000a74 <_ZN9motorInfo6enableEv>:
	
} //~motorInfo


void motorInfo::enable(){
	enabled = 1;
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	fc 01       	movw	r30, r24
     a7a:	26 87       	std	Z+14, r18	; 0x0e
     a7c:	37 87       	std	Z+15, r19	; 0x0f
     a7e:	08 95       	ret

00000a80 <_ZN9motorInfo7disableEv>:
}

void motorInfo::disable(){
	enabled = 0;
     a80:	fc 01       	movw	r30, r24
     a82:	16 86       	std	Z+14, r1	; 0x0e
     a84:	17 86       	std	Z+15, r1	; 0x0f
     a86:	08 95       	ret

00000a88 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     a88:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     a8a:	45 e8       	ldi	r20, 0x85	; 133
     a8c:	5b e2       	ldi	r21, 0x2B	; 43
     a8e:	61 e8       	ldi	r22, 0x81	; 129
     a90:	73 e4       	ldi	r23, 0x43	; 67
     a92:	44 83       	std	Z+4, r20	; 0x04
     a94:	55 83       	std	Z+5, r21	; 0x05
     a96:	66 83       	std	Z+6, r22	; 0x06
     a98:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	60 e8       	ldi	r22, 0x80	; 128
     aa0:	7f eb       	ldi	r23, 0xBF	; 191
     aa2:	40 83       	st	Z, r20
     aa4:	51 83       	std	Z+1, r21	; 0x01
     aa6:	62 83       	std	Z+2, r22	; 0x02
     aa8:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     aaa:	10 86       	std	Z+8, r1	; 0x08
     aac:	11 86       	std	Z+9, r1	; 0x09
     aae:	08 95       	ret

00000ab0 <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     ab0:	08 95       	ret

00000ab2 <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
     ab2:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
     ab4:	ed 91       	ld	r30, X+
     ab6:	fc 91       	ld	r31, X
     ab8:	11 97       	sbiw	r26, 0x01	; 1
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	85 ff       	sbrs	r24, 5
     abe:	fd cf       	rjmp	.-6      	; 0xaba <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     ac4:	ed 91       	ld	r30, X+
     ac6:	fc 91       	ld	r31, X
     ac8:	11 97       	sbiw	r26, 0x01	; 1
     aca:	81 81       	ldd	r24, Z+1	; 0x01
     acc:	85 ff       	sbrs	r24, 5
     ace:	fd cf       	rjmp	.-6      	; 0xaca <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
     ad0:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     ad2:	ed 91       	ld	r30, X+
     ad4:	fc 91       	ld	r31, X
     ad6:	11 97       	sbiw	r26, 0x01	; 1
     ad8:	81 81       	ldd	r24, Z+1	; 0x01
     ada:	85 ff       	sbrs	r24, 5
     adc:	fd cf       	rjmp	.-6      	; 0xad8 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
     ade:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
     ae0:	ed 91       	ld	r30, X+
     ae2:	fc 91       	ld	r31, X
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	85 ff       	sbrs	r24, 5
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
     aea:	64 0f       	add	r22, r20
     aec:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
     aee:	60 83       	st	Z, r22
     af0:	08 95       	ret

00000af2 <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
     afe:	6f 37       	cpi	r22, 0x7F	; 127
     b00:	61 f0       	breq	.+24     	; 0xb1a <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
     b02:	6f 37       	cpi	r22, 0x7F	; 127
     b04:	20 f4       	brcc	.+8      	; 0xb0e <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
     b06:	4f e7       	ldi	r20, 0x7F	; 127
     b08:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
     b0e:	66 23       	and	r22, r22
     b10:	3c f4       	brge	.+14     	; 0xb20 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
     b12:	41 e8       	ldi	r20, 0x81	; 129
     b14:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
     b1a:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
     b20:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
     b22:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
     b24:	8f 37       	cpi	r24, 0x7F	; 127
     b26:	61 f0       	breq	.+24     	; 0xb40 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
     b28:	8f 37       	cpi	r24, 0x7F	; 127
     b2a:	20 f4       	brcc	.+8      	; 0xb34 <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
     b2c:	0f e7       	ldi	r16, 0x7F	; 127
     b2e:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
     b30:	15 e0       	ldi	r17, 0x05	; 5
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
     b34:	88 23       	and	r24, r24
     b36:	3c f4       	brge	.+14     	; 0xb46 <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
     b38:	01 e8       	ldi	r16, 0x81	; 129
     b3a:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
     b3c:	14 e0       	ldi	r17, 0x04	; 4
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
     b40:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
     b42:	14 e0       	ldi	r17, 0x04	; 4
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
     b46:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
     b48:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
     b4a:	ce 01       	movw	r24, r28
     b4c:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
     b50:	40 2f       	mov	r20, r16
     b52:	61 2f       	mov	r22, r17
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN10Sabertooth12SendDriveCmdEcc>
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	64 e0       	ldi	r22, 0x04	; 4
     b76:	ce 01       	movw	r24, r28
     b78:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN10Sabertooth12SendDriveCmdEcc>
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
     b88:	68 83       	st	Y, r22
     b8a:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
     b8c:	4a 83       	std	Y+2, r20	; 0x02
     b8e:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	fa 01       	movw	r30, r20
     b94:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
     b96:	e8 81       	ld	r30, Y
     b98:	f9 81       	ldd	r31, Y+1	; 0x01
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
     b9e:	e8 81       	ld	r30, Y
     ba0:	f9 81       	ldd	r31, Y+1	; 0x01
     ba2:	8f ec       	ldi	r24, 0xCF	; 207
     ba4:	86 83       	std	Z+6, r24	; 0x06
     ba6:	e8 81       	ld	r30, Y
     ba8:	f9 81       	ldd	r31, Y+1	; 0x01
     baa:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
     bac:	e8 81       	ld	r30, Y
     bae:	f9 81       	ldd	r31, Y+1	; 0x01
     bb0:	84 81       	ldd	r24, Z+4	; 0x04
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	84 83       	std	Z+4, r24	; 0x04
     bb6:	ff ef       	ldi	r31, 0xFF	; 255
     bb8:	23 ec       	ldi	r18, 0xC3	; 195
     bba:	89 e0       	ldi	r24, 0x09	; 9
     bbc:	f1 50       	subi	r31, 0x01	; 1
     bbe:	20 40       	sbci	r18, 0x00	; 0
     bc0:	80 40       	sbci	r24, 0x00	; 0
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
     bc6:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
     bc8:	e8 81       	ld	r30, Y
     bca:	f9 81       	ldd	r31, Y+1	; 0x01
     bcc:	8a ea       	ldi	r24, 0xAA	; 170
     bce:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
     bd0:	44 e1       	ldi	r20, 0x14	; 20
     bd2:	6e e0       	ldi	r22, 0x0E	; 14
     bd4:	ce 01       	movw	r24, r28
     bd6:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN10Sabertooth7StopAllEv>
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <_ZN11stepperInfoC1Ev>:
};

extern void SendStringPC(char *stufftosend);

// default constructor
stepperInfo::stepperInfo() {
     be6:	fc 01       	movw	r30, r24
	enabled = 0;
     be8:	10 82       	st	Z, r1
     bea:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	9f ef       	ldi	r25, 0xFF	; 255
     bf0:	82 83       	std	Z+2, r24	; 0x02
     bf2:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	84 83       	std	Z+4, r24	; 0x04
     bfa:	95 83       	std	Z+5, r25	; 0x05
     bfc:	08 95       	ret

00000bfe <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
     bfe:	08 95       	ret

00000c00 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     c00:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     c02:	60 83       	st	Z, r22
     c04:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     c06:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     c08:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
     c0a:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
     c0c:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
     c0e:	15 86       	std	Z+13, r1	; 0x0d
     c10:	08 95       	ret

00000c12 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     c12:	fc 01       	movw	r30, r24
     c14:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     c16:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	29 13       	cpse	r18, r25
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <USART_RXBufferData_Available+0xe>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
}
     c20:	08 95       	ret

00000c22 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
     c22:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     c24:	84 85       	ldd	r24, Z+12	; 0x0c
     c26:	df 01       	movw	r26, r30
     c28:	a8 0f       	add	r26, r24
     c2a:	b1 1d       	adc	r27, r1
     c2c:	13 96       	adiw	r26, 0x03	; 3
     c2e:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     c30:	94 85       	ldd	r25, Z+12	; 0x0c
     c32:	9f 5f       	subi	r25, 0xFF	; 255
     c34:	93 70       	andi	r25, 0x03	; 3
     c36:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
     c38:	08 95       	ret

00000c3a <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     c3a:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     c3c:	83 85       	ldd	r24, Z+11	; 0x0b
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     c42:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
     c44:	a0 81       	ld	r26, Z
     c46:	b1 81       	ldd	r27, Z+1	; 0x01
     c48:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
     c4a:	89 17       	cp	r24, r25
     c4c:	49 f0       	breq	.+18     	; 0xc60 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     c4e:	93 85       	ldd	r25, Z+11	; 0x0b
     c50:	df 01       	movw	r26, r30
     c52:	a9 0f       	add	r26, r25
     c54:	b1 1d       	adc	r27, r1
     c56:	13 96       	adiw	r26, 0x03	; 3
     c58:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
     c5a:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     c60:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     c62:	08 95       	ret

00000c64 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     c64:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     c66:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
     c68:	95 85       	ldd	r25, Z+13	; 0x0d
     c6a:	98 13       	cpse	r25, r24
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     c6e:	01 90       	ld	r0, Z+
     c70:	f0 81       	ld	r31, Z
     c72:	e0 2d       	mov	r30, r0
     c74:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     c76:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     c78:	83 83       	std	Z+3, r24	; 0x03
     c7a:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     c7c:	86 85       	ldd	r24, Z+14	; 0x0e
     c7e:	df 01       	movw	r26, r30
     c80:	a8 0f       	add	r26, r24
     c82:	b1 1d       	adc	r27, r1
     c84:	17 96       	adiw	r26, 0x07	; 7
     c86:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
     c88:	a0 81       	ld	r26, Z
     c8a:	b1 81       	ldd	r27, Z+1	; 0x01
     c8c:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     c8e:	86 85       	ldd	r24, Z+14	; 0x0e
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	83 70       	andi	r24, 0x03	; 3
     c94:	86 87       	std	Z+14, r24	; 0x0e
     c96:	08 95       	ret

00000c98 <__subsf3>:
     c98:	50 58       	subi	r21, 0x80	; 128

00000c9a <__addsf3>:
     c9a:	bb 27       	eor	r27, r27
     c9c:	aa 27       	eor	r26, r26
     c9e:	0e d0       	rcall	.+28     	; 0xcbc <__addsf3x>
     ca0:	1c c1       	rjmp	.+568    	; 0xeda <__fp_round>
     ca2:	0d d1       	rcall	.+538    	; 0xebe <__fp_pscA>
     ca4:	30 f0       	brcs	.+12     	; 0xcb2 <__addsf3+0x18>
     ca6:	12 d1       	rcall	.+548    	; 0xecc <__fp_pscB>
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__addsf3+0x18>
     caa:	31 f4       	brne	.+12     	; 0xcb8 <__addsf3+0x1e>
     cac:	9f 3f       	cpi	r25, 0xFF	; 255
     cae:	11 f4       	brne	.+4      	; 0xcb4 <__addsf3+0x1a>
     cb0:	1e f4       	brtc	.+6      	; 0xcb8 <__addsf3+0x1e>
     cb2:	02 c1       	rjmp	.+516    	; 0xeb8 <__fp_nan>
     cb4:	0e f4       	brtc	.+2      	; 0xcb8 <__addsf3+0x1e>
     cb6:	e0 95       	com	r30
     cb8:	e7 fb       	bst	r30, 7
     cba:	f8 c0       	rjmp	.+496    	; 0xeac <__fp_inf>

00000cbc <__addsf3x>:
     cbc:	e9 2f       	mov	r30, r25
     cbe:	1e d1       	rcall	.+572    	; 0xefc <__fp_split3>
     cc0:	80 f3       	brcs	.-32     	; 0xca2 <__addsf3+0x8>
     cc2:	ba 17       	cp	r27, r26
     cc4:	62 07       	cpc	r22, r18
     cc6:	73 07       	cpc	r23, r19
     cc8:	84 07       	cpc	r24, r20
     cca:	95 07       	cpc	r25, r21
     ccc:	18 f0       	brcs	.+6      	; 0xcd4 <__addsf3x+0x18>
     cce:	71 f4       	brne	.+28     	; 0xcec <__addsf3x+0x30>
     cd0:	9e f5       	brtc	.+102    	; 0xd38 <__addsf3x+0x7c>
     cd2:	36 c1       	rjmp	.+620    	; 0xf40 <__fp_zero>
     cd4:	0e f4       	brtc	.+2      	; 0xcd8 <__addsf3x+0x1c>
     cd6:	e0 95       	com	r30
     cd8:	0b 2e       	mov	r0, r27
     cda:	ba 2f       	mov	r27, r26
     cdc:	a0 2d       	mov	r26, r0
     cde:	0b 01       	movw	r0, r22
     ce0:	b9 01       	movw	r22, r18
     ce2:	90 01       	movw	r18, r0
     ce4:	0c 01       	movw	r0, r24
     ce6:	ca 01       	movw	r24, r20
     ce8:	a0 01       	movw	r20, r0
     cea:	11 24       	eor	r1, r1
     cec:	ff 27       	eor	r31, r31
     cee:	59 1b       	sub	r21, r25
     cf0:	99 f0       	breq	.+38     	; 0xd18 <__addsf3x+0x5c>
     cf2:	59 3f       	cpi	r21, 0xF9	; 249
     cf4:	50 f4       	brcc	.+20     	; 0xd0a <__addsf3x+0x4e>
     cf6:	50 3e       	cpi	r21, 0xE0	; 224
     cf8:	68 f1       	brcs	.+90     	; 0xd54 <__addsf3x+0x98>
     cfa:	1a 16       	cp	r1, r26
     cfc:	f0 40       	sbci	r31, 0x00	; 0
     cfe:	a2 2f       	mov	r26, r18
     d00:	23 2f       	mov	r18, r19
     d02:	34 2f       	mov	r19, r20
     d04:	44 27       	eor	r20, r20
     d06:	58 5f       	subi	r21, 0xF8	; 248
     d08:	f3 cf       	rjmp	.-26     	; 0xcf0 <__addsf3x+0x34>
     d0a:	46 95       	lsr	r20
     d0c:	37 95       	ror	r19
     d0e:	27 95       	ror	r18
     d10:	a7 95       	ror	r26
     d12:	f0 40       	sbci	r31, 0x00	; 0
     d14:	53 95       	inc	r21
     d16:	c9 f7       	brne	.-14     	; 0xd0a <__addsf3x+0x4e>
     d18:	7e f4       	brtc	.+30     	; 0xd38 <__addsf3x+0x7c>
     d1a:	1f 16       	cp	r1, r31
     d1c:	ba 0b       	sbc	r27, r26
     d1e:	62 0b       	sbc	r22, r18
     d20:	73 0b       	sbc	r23, r19
     d22:	84 0b       	sbc	r24, r20
     d24:	ba f0       	brmi	.+46     	; 0xd54 <__addsf3x+0x98>
     d26:	91 50       	subi	r25, 0x01	; 1
     d28:	a1 f0       	breq	.+40     	; 0xd52 <__addsf3x+0x96>
     d2a:	ff 0f       	add	r31, r31
     d2c:	bb 1f       	adc	r27, r27
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	88 1f       	adc	r24, r24
     d34:	c2 f7       	brpl	.-16     	; 0xd26 <__addsf3x+0x6a>
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <__addsf3x+0x98>
     d38:	ba 0f       	add	r27, r26
     d3a:	62 1f       	adc	r22, r18
     d3c:	73 1f       	adc	r23, r19
     d3e:	84 1f       	adc	r24, r20
     d40:	48 f4       	brcc	.+18     	; 0xd54 <__addsf3x+0x98>
     d42:	87 95       	ror	r24
     d44:	77 95       	ror	r23
     d46:	67 95       	ror	r22
     d48:	b7 95       	ror	r27
     d4a:	f7 95       	ror	r31
     d4c:	9e 3f       	cpi	r25, 0xFE	; 254
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <__addsf3x+0x96>
     d50:	b3 cf       	rjmp	.-154    	; 0xcb8 <__addsf3+0x1e>
     d52:	93 95       	inc	r25
     d54:	88 0f       	add	r24, r24
     d56:	08 f0       	brcs	.+2      	; 0xd5a <__addsf3x+0x9e>
     d58:	99 27       	eor	r25, r25
     d5a:	ee 0f       	add	r30, r30
     d5c:	97 95       	ror	r25
     d5e:	87 95       	ror	r24
     d60:	08 95       	ret

00000d62 <__divsf3>:
     d62:	0c d0       	rcall	.+24     	; 0xd7c <__divsf3x>
     d64:	ba c0       	rjmp	.+372    	; 0xeda <__fp_round>
     d66:	b2 d0       	rcall	.+356    	; 0xecc <__fp_pscB>
     d68:	40 f0       	brcs	.+16     	; 0xd7a <__divsf3+0x18>
     d6a:	a9 d0       	rcall	.+338    	; 0xebe <__fp_pscA>
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <__divsf3+0x18>
     d6e:	21 f4       	brne	.+8      	; 0xd78 <__divsf3+0x16>
     d70:	5f 3f       	cpi	r21, 0xFF	; 255
     d72:	19 f0       	breq	.+6      	; 0xd7a <__divsf3+0x18>
     d74:	9b c0       	rjmp	.+310    	; 0xeac <__fp_inf>
     d76:	51 11       	cpse	r21, r1
     d78:	e4 c0       	rjmp	.+456    	; 0xf42 <__fp_szero>
     d7a:	9e c0       	rjmp	.+316    	; 0xeb8 <__fp_nan>

00000d7c <__divsf3x>:
     d7c:	bf d0       	rcall	.+382    	; 0xefc <__fp_split3>
     d7e:	98 f3       	brcs	.-26     	; 0xd66 <__divsf3+0x4>

00000d80 <__divsf3_pse>:
     d80:	99 23       	and	r25, r25
     d82:	c9 f3       	breq	.-14     	; 0xd76 <__divsf3+0x14>
     d84:	55 23       	and	r21, r21
     d86:	b1 f3       	breq	.-20     	; 0xd74 <__divsf3+0x12>
     d88:	95 1b       	sub	r25, r21
     d8a:	55 0b       	sbc	r21, r21
     d8c:	bb 27       	eor	r27, r27
     d8e:	aa 27       	eor	r26, r26
     d90:	62 17       	cp	r22, r18
     d92:	73 07       	cpc	r23, r19
     d94:	84 07       	cpc	r24, r20
     d96:	38 f0       	brcs	.+14     	; 0xda6 <__divsf3_pse+0x26>
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	aa 1f       	adc	r26, r26
     da4:	a9 f3       	breq	.-22     	; 0xd90 <__divsf3_pse+0x10>
     da6:	33 d0       	rcall	.+102    	; 0xe0e <__divsf3_pse+0x8e>
     da8:	0e 2e       	mov	r0, r30
     daa:	3a f0       	brmi	.+14     	; 0xdba <__divsf3_pse+0x3a>
     dac:	e0 e8       	ldi	r30, 0x80	; 128
     dae:	30 d0       	rcall	.+96     	; 0xe10 <__divsf3_pse+0x90>
     db0:	91 50       	subi	r25, 0x01	; 1
     db2:	50 40       	sbci	r21, 0x00	; 0
     db4:	e6 95       	lsr	r30
     db6:	00 1c       	adc	r0, r0
     db8:	ca f7       	brpl	.-14     	; 0xdac <__divsf3_pse+0x2c>
     dba:	29 d0       	rcall	.+82     	; 0xe0e <__divsf3_pse+0x8e>
     dbc:	fe 2f       	mov	r31, r30
     dbe:	27 d0       	rcall	.+78     	; 0xe0e <__divsf3_pse+0x8e>
     dc0:	66 0f       	add	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	bb 1f       	adc	r27, r27
     dc8:	26 17       	cp	r18, r22
     dca:	37 07       	cpc	r19, r23
     dcc:	48 07       	cpc	r20, r24
     dce:	ab 07       	cpc	r26, r27
     dd0:	b0 e8       	ldi	r27, 0x80	; 128
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <__divsf3_pse+0x56>
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	80 2d       	mov	r24, r0
     dd8:	bf 01       	movw	r22, r30
     dda:	ff 27       	eor	r31, r31
     ddc:	93 58       	subi	r25, 0x83	; 131
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	2a f0       	brmi	.+10     	; 0xdec <__divsf3_pse+0x6c>
     de2:	9e 3f       	cpi	r25, 0xFE	; 254
     de4:	51 05       	cpc	r21, r1
     de6:	68 f0       	brcs	.+26     	; 0xe02 <__divsf3_pse+0x82>
     de8:	61 c0       	rjmp	.+194    	; 0xeac <__fp_inf>
     dea:	ab c0       	rjmp	.+342    	; 0xf42 <__fp_szero>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	ec f3       	brlt	.-6      	; 0xdea <__divsf3_pse+0x6a>
     df0:	98 3e       	cpi	r25, 0xE8	; 232
     df2:	dc f3       	brlt	.-10     	; 0xdea <__divsf3_pse+0x6a>
     df4:	86 95       	lsr	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f7 95       	ror	r31
     dfe:	9f 5f       	subi	r25, 0xFF	; 255
     e00:	c9 f7       	brne	.-14     	; 0xdf4 <__divsf3_pse+0x74>
     e02:	88 0f       	add	r24, r24
     e04:	91 1d       	adc	r25, r1
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret
     e0e:	e1 e0       	ldi	r30, 0x01	; 1
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	bb 1f       	adc	r27, r27
     e18:	62 17       	cp	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	ba 07       	cpc	r27, r26
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__divsf3_pse+0xaa>
     e22:	62 1b       	sub	r22, r18
     e24:	73 0b       	sbc	r23, r19
     e26:	84 0b       	sbc	r24, r20
     e28:	ba 0b       	sbc	r27, r26
     e2a:	ee 1f       	adc	r30, r30
     e2c:	88 f7       	brcc	.-30     	; 0xe10 <__divsf3_pse+0x90>
     e2e:	e0 95       	com	r30
     e30:	08 95       	ret

00000e32 <__floatunsisf>:
     e32:	e8 94       	clt
     e34:	09 c0       	rjmp	.+18     	; 0xe48 <__floatsisf+0x12>

00000e36 <__floatsisf>:
     e36:	97 fb       	bst	r25, 7
     e38:	3e f4       	brtc	.+14     	; 0xe48 <__floatsisf+0x12>
     e3a:	90 95       	com	r25
     e3c:	80 95       	com	r24
     e3e:	70 95       	com	r23
     e40:	61 95       	neg	r22
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	8f 4f       	sbci	r24, 0xFF	; 255
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	99 23       	and	r25, r25
     e4a:	a9 f0       	breq	.+42     	; 0xe76 <__floatsisf+0x40>
     e4c:	f9 2f       	mov	r31, r25
     e4e:	96 e9       	ldi	r25, 0x96	; 150
     e50:	bb 27       	eor	r27, r27
     e52:	93 95       	inc	r25
     e54:	f6 95       	lsr	r31
     e56:	87 95       	ror	r24
     e58:	77 95       	ror	r23
     e5a:	67 95       	ror	r22
     e5c:	b7 95       	ror	r27
     e5e:	f1 11       	cpse	r31, r1
     e60:	f8 cf       	rjmp	.-16     	; 0xe52 <__floatsisf+0x1c>
     e62:	fa f4       	brpl	.+62     	; 0xea2 <__floatsisf+0x6c>
     e64:	bb 0f       	add	r27, r27
     e66:	11 f4       	brne	.+4      	; 0xe6c <__floatsisf+0x36>
     e68:	60 ff       	sbrs	r22, 0
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <__floatsisf+0x6c>
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	8f 4f       	sbci	r24, 0xFF	; 255
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	16 c0       	rjmp	.+44     	; 0xea2 <__floatsisf+0x6c>
     e76:	88 23       	and	r24, r24
     e78:	11 f0       	breq	.+4      	; 0xe7e <__floatsisf+0x48>
     e7a:	96 e9       	ldi	r25, 0x96	; 150
     e7c:	11 c0       	rjmp	.+34     	; 0xea0 <__floatsisf+0x6a>
     e7e:	77 23       	and	r23, r23
     e80:	21 f0       	breq	.+8      	; 0xe8a <__floatsisf+0x54>
     e82:	9e e8       	ldi	r25, 0x8E	; 142
     e84:	87 2f       	mov	r24, r23
     e86:	76 2f       	mov	r23, r22
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <__floatsisf+0x5e>
     e8a:	66 23       	and	r22, r22
     e8c:	71 f0       	breq	.+28     	; 0xeaa <__floatsisf+0x74>
     e8e:	96 e8       	ldi	r25, 0x86	; 134
     e90:	86 2f       	mov	r24, r22
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	2a f0       	brmi	.+10     	; 0xea2 <__floatsisf+0x6c>
     e98:	9a 95       	dec	r25
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	da f7       	brpl	.-10     	; 0xe98 <__floatsisf+0x62>
     ea2:	88 0f       	add	r24, r24
     ea4:	96 95       	lsr	r25
     ea6:	87 95       	ror	r24
     ea8:	97 f9       	bld	r25, 7
     eaa:	08 95       	ret

00000eac <__fp_inf>:
     eac:	97 f9       	bld	r25, 7
     eae:	9f 67       	ori	r25, 0x7F	; 127
     eb0:	80 e8       	ldi	r24, 0x80	; 128
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	08 95       	ret

00000eb8 <__fp_nan>:
     eb8:	9f ef       	ldi	r25, 0xFF	; 255
     eba:	80 ec       	ldi	r24, 0xC0	; 192
     ebc:	08 95       	ret

00000ebe <__fp_pscA>:
     ebe:	00 24       	eor	r0, r0
     ec0:	0a 94       	dec	r0
     ec2:	16 16       	cp	r1, r22
     ec4:	17 06       	cpc	r1, r23
     ec6:	18 06       	cpc	r1, r24
     ec8:	09 06       	cpc	r0, r25
     eca:	08 95       	ret

00000ecc <__fp_pscB>:
     ecc:	00 24       	eor	r0, r0
     ece:	0a 94       	dec	r0
     ed0:	12 16       	cp	r1, r18
     ed2:	13 06       	cpc	r1, r19
     ed4:	14 06       	cpc	r1, r20
     ed6:	05 06       	cpc	r0, r21
     ed8:	08 95       	ret

00000eda <__fp_round>:
     eda:	09 2e       	mov	r0, r25
     edc:	03 94       	inc	r0
     ede:	00 0c       	add	r0, r0
     ee0:	11 f4       	brne	.+4      	; 0xee6 <__fp_round+0xc>
     ee2:	88 23       	and	r24, r24
     ee4:	52 f0       	brmi	.+20     	; 0xefa <__fp_round+0x20>
     ee6:	bb 0f       	add	r27, r27
     ee8:	40 f4       	brcc	.+16     	; 0xefa <__fp_round+0x20>
     eea:	bf 2b       	or	r27, r31
     eec:	11 f4       	brne	.+4      	; 0xef2 <__fp_round+0x18>
     eee:	60 ff       	sbrs	r22, 0
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <__fp_round+0x20>
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	08 95       	ret

00000efc <__fp_split3>:
     efc:	57 fd       	sbrc	r21, 7
     efe:	90 58       	subi	r25, 0x80	; 128
     f00:	44 0f       	add	r20, r20
     f02:	55 1f       	adc	r21, r21
     f04:	59 f0       	breq	.+22     	; 0xf1c <__fp_splitA+0x10>
     f06:	5f 3f       	cpi	r21, 0xFF	; 255
     f08:	71 f0       	breq	.+28     	; 0xf26 <__fp_splitA+0x1a>
     f0a:	47 95       	ror	r20

00000f0c <__fp_splitA>:
     f0c:	88 0f       	add	r24, r24
     f0e:	97 fb       	bst	r25, 7
     f10:	99 1f       	adc	r25, r25
     f12:	61 f0       	breq	.+24     	; 0xf2c <__fp_splitA+0x20>
     f14:	9f 3f       	cpi	r25, 0xFF	; 255
     f16:	79 f0       	breq	.+30     	; 0xf36 <__fp_splitA+0x2a>
     f18:	87 95       	ror	r24
     f1a:	08 95       	ret
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	14 06       	cpc	r1, r20
     f22:	55 1f       	adc	r21, r21
     f24:	f2 cf       	rjmp	.-28     	; 0xf0a <__fp_split3+0xe>
     f26:	46 95       	lsr	r20
     f28:	f1 df       	rcall	.-30     	; 0xf0c <__fp_splitA>
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <__fp_splitA+0x30>
     f2c:	16 16       	cp	r1, r22
     f2e:	17 06       	cpc	r1, r23
     f30:	18 06       	cpc	r1, r24
     f32:	99 1f       	adc	r25, r25
     f34:	f1 cf       	rjmp	.-30     	; 0xf18 <__fp_splitA+0xc>
     f36:	86 95       	lsr	r24
     f38:	71 05       	cpc	r23, r1
     f3a:	61 05       	cpc	r22, r1
     f3c:	08 94       	sec
     f3e:	08 95       	ret

00000f40 <__fp_zero>:
     f40:	e8 94       	clt

00000f42 <__fp_szero>:
     f42:	bb 27       	eor	r27, r27
     f44:	66 27       	eor	r22, r22
     f46:	77 27       	eor	r23, r23
     f48:	cb 01       	movw	r24, r22
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <__gesf2>:
     f4e:	66 d0       	rcall	.+204    	; 0x101c <__fp_cmp>
     f50:	08 f4       	brcc	.+2      	; 0xf54 <__gesf2+0x6>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	08 95       	ret

00000f56 <__mulsf3>:
     f56:	0b d0       	rcall	.+22     	; 0xf6e <__mulsf3x>
     f58:	c0 cf       	rjmp	.-128    	; 0xeda <__fp_round>
     f5a:	b1 df       	rcall	.-158    	; 0xebe <__fp_pscA>
     f5c:	28 f0       	brcs	.+10     	; 0xf68 <__mulsf3+0x12>
     f5e:	b6 df       	rcall	.-148    	; 0xecc <__fp_pscB>
     f60:	18 f0       	brcs	.+6      	; 0xf68 <__mulsf3+0x12>
     f62:	95 23       	and	r25, r21
     f64:	09 f0       	breq	.+2      	; 0xf68 <__mulsf3+0x12>
     f66:	a2 cf       	rjmp	.-188    	; 0xeac <__fp_inf>
     f68:	a7 cf       	rjmp	.-178    	; 0xeb8 <__fp_nan>
     f6a:	11 24       	eor	r1, r1
     f6c:	ea cf       	rjmp	.-44     	; 0xf42 <__fp_szero>

00000f6e <__mulsf3x>:
     f6e:	c6 df       	rcall	.-116    	; 0xefc <__fp_split3>
     f70:	a0 f3       	brcs	.-24     	; 0xf5a <__mulsf3+0x4>

00000f72 <__mulsf3_pse>:
     f72:	95 9f       	mul	r25, r21
     f74:	d1 f3       	breq	.-12     	; 0xf6a <__mulsf3+0x14>
     f76:	95 0f       	add	r25, r21
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	55 1f       	adc	r21, r21
     f7c:	62 9f       	mul	r22, r18
     f7e:	f0 01       	movw	r30, r0
     f80:	72 9f       	mul	r23, r18
     f82:	bb 27       	eor	r27, r27
     f84:	f0 0d       	add	r31, r0
     f86:	b1 1d       	adc	r27, r1
     f88:	63 9f       	mul	r22, r19
     f8a:	aa 27       	eor	r26, r26
     f8c:	f0 0d       	add	r31, r0
     f8e:	b1 1d       	adc	r27, r1
     f90:	aa 1f       	adc	r26, r26
     f92:	64 9f       	mul	r22, r20
     f94:	66 27       	eor	r22, r22
     f96:	b0 0d       	add	r27, r0
     f98:	a1 1d       	adc	r26, r1
     f9a:	66 1f       	adc	r22, r22
     f9c:	82 9f       	mul	r24, r18
     f9e:	22 27       	eor	r18, r18
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	62 1f       	adc	r22, r18
     fa6:	73 9f       	mul	r23, r19
     fa8:	b0 0d       	add	r27, r0
     faa:	a1 1d       	adc	r26, r1
     fac:	62 1f       	adc	r22, r18
     fae:	83 9f       	mul	r24, r19
     fb0:	a0 0d       	add	r26, r0
     fb2:	61 1d       	adc	r22, r1
     fb4:	22 1f       	adc	r18, r18
     fb6:	74 9f       	mul	r23, r20
     fb8:	33 27       	eor	r19, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	23 1f       	adc	r18, r19
     fc0:	84 9f       	mul	r24, r20
     fc2:	60 0d       	add	r22, r0
     fc4:	21 1d       	adc	r18, r1
     fc6:	82 2f       	mov	r24, r18
     fc8:	76 2f       	mov	r23, r22
     fca:	6a 2f       	mov	r22, r26
     fcc:	11 24       	eor	r1, r1
     fce:	9f 57       	subi	r25, 0x7F	; 127
     fd0:	50 40       	sbci	r21, 0x00	; 0
     fd2:	8a f0       	brmi	.+34     	; 0xff6 <__mulsf3_pse+0x84>
     fd4:	e1 f0       	breq	.+56     	; 0x100e <__mulsf3_pse+0x9c>
     fd6:	88 23       	and	r24, r24
     fd8:	4a f0       	brmi	.+18     	; 0xfec <__mulsf3_pse+0x7a>
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	bb 1f       	adc	r27, r27
     fe0:	66 1f       	adc	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	91 50       	subi	r25, 0x01	; 1
     fe8:	50 40       	sbci	r21, 0x00	; 0
     fea:	a9 f7       	brne	.-22     	; 0xfd6 <__mulsf3_pse+0x64>
     fec:	9e 3f       	cpi	r25, 0xFE	; 254
     fee:	51 05       	cpc	r21, r1
     ff0:	70 f0       	brcs	.+28     	; 0x100e <__mulsf3_pse+0x9c>
     ff2:	5c cf       	rjmp	.-328    	; 0xeac <__fp_inf>
     ff4:	a6 cf       	rjmp	.-180    	; 0xf42 <__fp_szero>
     ff6:	5f 3f       	cpi	r21, 0xFF	; 255
     ff8:	ec f3       	brlt	.-6      	; 0xff4 <__mulsf3_pse+0x82>
     ffa:	98 3e       	cpi	r25, 0xE8	; 232
     ffc:	dc f3       	brlt	.-10     	; 0xff4 <__mulsf3_pse+0x82>
     ffe:	86 95       	lsr	r24
    1000:	77 95       	ror	r23
    1002:	67 95       	ror	r22
    1004:	b7 95       	ror	r27
    1006:	f7 95       	ror	r31
    1008:	e7 95       	ror	r30
    100a:	9f 5f       	subi	r25, 0xFF	; 255
    100c:	c1 f7       	brne	.-16     	; 0xffe <__mulsf3_pse+0x8c>
    100e:	fe 2b       	or	r31, r30
    1010:	88 0f       	add	r24, r24
    1012:	91 1d       	adc	r25, r1
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	97 f9       	bld	r25, 7
    101a:	08 95       	ret

0000101c <__fp_cmp>:
    101c:	99 0f       	add	r25, r25
    101e:	00 08       	sbc	r0, r0
    1020:	55 0f       	add	r21, r21
    1022:	aa 0b       	sbc	r26, r26
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	fe ef       	ldi	r31, 0xFE	; 254
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	e8 07       	cpc	r30, r24
    102e:	f9 07       	cpc	r31, r25
    1030:	c0 f0       	brcs	.+48     	; 0x1062 <__fp_cmp+0x46>
    1032:	12 16       	cp	r1, r18
    1034:	13 06       	cpc	r1, r19
    1036:	e4 07       	cpc	r30, r20
    1038:	f5 07       	cpc	r31, r21
    103a:	98 f0       	brcs	.+38     	; 0x1062 <__fp_cmp+0x46>
    103c:	62 1b       	sub	r22, r18
    103e:	73 0b       	sbc	r23, r19
    1040:	84 0b       	sbc	r24, r20
    1042:	95 0b       	sbc	r25, r21
    1044:	39 f4       	brne	.+14     	; 0x1054 <__fp_cmp+0x38>
    1046:	0a 26       	eor	r0, r26
    1048:	61 f0       	breq	.+24     	; 0x1062 <__fp_cmp+0x46>
    104a:	23 2b       	or	r18, r19
    104c:	24 2b       	or	r18, r20
    104e:	25 2b       	or	r18, r21
    1050:	21 f4       	brne	.+8      	; 0x105a <__fp_cmp+0x3e>
    1052:	08 95       	ret
    1054:	0a 26       	eor	r0, r26
    1056:	09 f4       	brne	.+2      	; 0x105a <__fp_cmp+0x3e>
    1058:	a1 40       	sbci	r26, 0x01	; 1
    105a:	a6 95       	lsr	r26
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	81 1d       	adc	r24, r1
    1060:	81 1d       	adc	r24, r1
    1062:	08 95       	ret

00001064 <__divmodhi4>:
    1064:	97 fb       	bst	r25, 7
    1066:	07 2e       	mov	r0, r23
    1068:	16 f4       	brtc	.+4      	; 0x106e <__divmodhi4+0xa>
    106a:	00 94       	com	r0
    106c:	07 d0       	rcall	.+14     	; 0x107c <__divmodhi4_neg1>
    106e:	77 fd       	sbrc	r23, 7
    1070:	09 d0       	rcall	.+18     	; 0x1084 <__divmodhi4_neg2>
    1072:	0e 94 46 08 	call	0x108c	; 0x108c <__udivmodhi4>
    1076:	07 fc       	sbrc	r0, 7
    1078:	05 d0       	rcall	.+10     	; 0x1084 <__divmodhi4_neg2>
    107a:	3e f4       	brtc	.+14     	; 0x108a <__divmodhi4_exit>

0000107c <__divmodhi4_neg1>:
    107c:	90 95       	com	r25
    107e:	81 95       	neg	r24
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	08 95       	ret

00001084 <__divmodhi4_neg2>:
    1084:	70 95       	com	r23
    1086:	61 95       	neg	r22
    1088:	7f 4f       	sbci	r23, 0xFF	; 255

0000108a <__divmodhi4_exit>:
    108a:	08 95       	ret

0000108c <__udivmodhi4>:
    108c:	aa 1b       	sub	r26, r26
    108e:	bb 1b       	sub	r27, r27
    1090:	51 e1       	ldi	r21, 0x11	; 17
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <__udivmodhi4_ep>

00001094 <__udivmodhi4_loop>:
    1094:	aa 1f       	adc	r26, r26
    1096:	bb 1f       	adc	r27, r27
    1098:	a6 17       	cp	r26, r22
    109a:	b7 07       	cpc	r27, r23
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <__udivmodhi4_ep>
    109e:	a6 1b       	sub	r26, r22
    10a0:	b7 0b       	sbc	r27, r23

000010a2 <__udivmodhi4_ep>:
    10a2:	88 1f       	adc	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	5a 95       	dec	r21
    10a8:	a9 f7       	brne	.-22     	; 0x1094 <__udivmodhi4_loop>
    10aa:	80 95       	com	r24
    10ac:	90 95       	com	r25
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	08 95       	ret

000010b4 <__tablejump2__>:
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31

000010b8 <__tablejump__>:
    10b8:	05 90       	lpm	r0, Z+
    10ba:	f4 91       	lpm	r31, Z
    10bc:	e0 2d       	mov	r30, r0
    10be:	09 94       	ijmp

000010c0 <__do_global_dtors>:
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	ce e6       	ldi	r28, 0x6E	; 110
    10c4:	d1 e0       	ldi	r29, 0x01	; 1
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <__do_global_dtors+0x10>
    10c8:	fe 01       	movw	r30, r28
    10ca:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__tablejump__>
    10ce:	22 96       	adiw	r28, 0x02	; 2
    10d0:	c0 37       	cpi	r28, 0x70	; 112
    10d2:	d1 07       	cpc	r29, r17
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__do_global_dtors+0x8>
    10d6:	f8 94       	cli

000010d8 <__stop_program>:
    10d8:	ff cf       	rjmp	.-2      	; 0x10d8 <__stop_program>
