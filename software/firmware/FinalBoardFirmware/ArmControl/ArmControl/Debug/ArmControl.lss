
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000194e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  0000194e  000019e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00802012  00802012  000019f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004827  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012c9  00000000  00000000  0000649b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000120a  00000000  00000000  00007764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005c8  00000000  00000000  00008970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c17  00000000  00000000  00008f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001952  00000000  00000000  0000ab4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0000c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "Misc.h"
#include <avr/io.h>
#include "XMegaMacros.h"

void DockArm(unsigned char dockState){
	if(dockState == DOCK_ARM){
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
		ERROR_SET();
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_25>
      68:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_26>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_77>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	71 07       	cpc	r23, r17

0000016e <__ctors_end>:
     16e:	82 07       	cpc	r24, r18

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	ee e4       	ldi	r30, 0x4E	; 78
     184:	f9 e1       	ldi	r31, 0x19	; 25
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 31       	cpi	r26, 0x12	; 18
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a2 e1       	ldi	r26, 0x12	; 18
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	ab 37       	cpi	r26, 0x7B	; 123
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 96 0c 	call	0x192c	; 0x192c <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
     1bc:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1d0:	1c 92       	st	X, r1
	return Result;
}
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1f8:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     22c:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <_Z15SetupResetTimerv>:
	WaitForHost,
	ARMControl
} CurrentState = WaitForHost;

void SetupResetTimer(){
	TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; //31250 counts per second with 32Mhz Processor
     264:	e0 e0       	ldi	r30, 0x00	; 0
     266:	f9 e0       	ldi	r31, 0x09	; 9
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	80 83       	st	Z, r24
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
     26c:	11 82       	std	Z+1, r1	; 0x01
	TCD0.PER = 31250;
     26e:	82 e1       	ldi	r24, 0x12	; 18
     270:	9a e7       	ldi	r25, 0x7A	; 122
     272:	86 a3       	std	Z+38, r24	; 0x26
     274:	97 a3       	std	Z+39, r25	; 0x27
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	08 95       	ret

0000027c <_Z17FlushSerialBufferP16Usart_and_buffer>:
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
     282:	03 c0       	rjmp	.+6      	; 0x28a <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
     284:	ce 01       	movw	r24, r28
     286:	0e 94 1a 0a 	call	0x1434	; 0x1434 <USART_RXBuffer_GetByte>
	TCD0.PER = 31250;
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 12 0a 	call	0x1424	; 0x1424 <USART_RXBufferData_Available>
     290:	81 11       	cpse	r24, r1
     292:	f8 cf       	rjmp	.-16     	; 0x284 <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <__vector_25>:

ISR(USARTC0_RXC_vect){
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
     2c0:	8c e6       	ldi	r24, 0x6C	; 108
     2c2:	90 e2       	ldi	r25, 0x20	; 32
     2c4:	0e 94 26 0a 	call	0x144c	; 0x144c <USART_RXComplete>
	
	if(USART_RXBufferData_Available(&USART_PC_Data)){
     2c8:	8c e6       	ldi	r24, 0x6C	; 108
     2ca:	90 e2       	ldi	r25, 0x20	; 32
     2cc:	0e 94 12 0a 	call	0x1424	; 0x1424 <USART_RXBufferData_Available>
     2d0:	88 23       	and	r24, r24
     2d2:	79 f0       	breq	.+30     	; 0x2f2 <__vector_25+0x58>
		recieveBuffer[bufferIndex] = USART_RXBuffer_GetByte(&USART_PC_Data);
     2d4:	c0 91 25 20 	lds	r28, 0x2025
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	8c e6       	ldi	r24, 0x6C	; 108
     2dc:	90 e2       	ldi	r25, 0x20	; 32
     2de:	0e 94 1a 0a 	call	0x1434	; 0x1434 <USART_RXBuffer_GetByte>
     2e2:	cd 5e       	subi	r28, 0xED	; 237
     2e4:	df 4d       	sbci	r29, 0xDF	; 223
     2e6:	88 83       	st	Y, r24
		bufferIndex++;
     2e8:	80 91 25 20 	lds	r24, 0x2025
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	80 93 25 20 	sts	0x2025, r24
	}
	
	if((bufferIndex == PACKETSIZE)){
     2f2:	80 91 25 20 	lds	r24, 0x2025
     2f6:	8a 30       	cpi	r24, 0x0A	; 10
     2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_25+0x62>
     2fa:	88 c0       	rjmp	.+272    	; 0x40c <__vector_25+0x172>
		FlushSerialBuffer(&USART_PC_Data);
     2fc:	8c e6       	ldi	r24, 0x6C	; 108
     2fe:	90 e2       	ldi	r25, 0x20	; 32
     300:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17FlushSerialBufferP16Usart_and_buffer>
		if(recieveBuffer[8] == (recieveBuffer[1] ^ recieveBuffer[2] ^ recieveBuffer[3] ^ recieveBuffer[4] ^ recieveBuffer[5] ^ recieveBuffer[6] ^ recieveBuffer[7])){
     304:	90 91 1b 20 	lds	r25, 0x201B
     308:	80 91 14 20 	lds	r24, 0x2014
     30c:	70 91 15 20 	lds	r23, 0x2015
     310:	60 91 16 20 	lds	r22, 0x2016
     314:	50 91 17 20 	lds	r21, 0x2017
     318:	40 91 18 20 	lds	r20, 0x2018
     31c:	30 91 19 20 	lds	r19, 0x2019
     320:	20 91 1a 20 	lds	r18, 0x201A
     324:	87 27       	eor	r24, r23
     326:	86 27       	eor	r24, r22
     328:	85 27       	eor	r24, r21
     32a:	84 27       	eor	r24, r20
     32c:	83 27       	eor	r24, r19
     32e:	82 27       	eor	r24, r18
     330:	98 13       	cpse	r25, r24
     332:	53 c0       	rjmp	.+166    	; 0x3da <__vector_25+0x140>
			ShouldRECAL = recieveBuffer[1] & 0b00001000;
     334:	e4 e1       	ldi	r30, 0x14	; 20
     336:	f0 e2       	ldi	r31, 0x20	; 32
     338:	80 81       	ld	r24, Z
     33a:	83 fb       	bst	r24, 3
     33c:	88 27       	eor	r24, r24
     33e:	80 f9       	bld	r24, 0
     340:	80 93 26 20 	sts	0x2026, r24
  			ARM_Dock_State = recieveBuffer[1] & 0b00000100;
     344:	80 81       	ld	r24, Z
     346:	84 70       	andi	r24, 0x04	; 4
     348:	80 93 27 20 	sts	0x2027, r24
			gripStepper.desiredGripState = !(recieveBuffer[1] & GRIP_BM_SERIAL); //0b00000010	
     34c:	80 81       	ld	r24, Z
     34e:	c1 e0       	ldi	r28, 0x01	; 1
     350:	86 95       	lsr	r24
     352:	81 70       	andi	r24, 0x01	; 1
     354:	8c 27       	eor	r24, r28
     356:	80 93 3b 20 	sts	0x203B, r24
			baseStepper.desiredPos = (recieveBuffer[3]+recieveBuffer[2]);
     35a:	20 91 16 20 	lds	r18, 0x2016
     35e:	80 91 15 20 	lds	r24, 0x2015
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	82 0f       	add	r24, r18
     366:	91 1d       	adc	r25, r1
     368:	80 93 33 20 	sts	0x2033, r24
     36c:	90 93 34 20 	sts	0x2034, r25
			lowerAct.setDesired((double(recieveBuffer[5]+recieveBuffer[4]) / double(100)));
     370:	80 91 18 20 	lds	r24, 0x2018
     374:	60 91 17 20 	lds	r22, 0x2017
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	68 0f       	add	r22, r24
     37c:	71 1d       	adc	r23, r1
     37e:	88 27       	eor	r24, r24
     380:	77 fd       	sbrc	r23, 7
     382:	80 95       	com	r24
     384:	98 2f       	mov	r25, r24
     386:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	48 ec       	ldi	r20, 0xC8	; 200
     390:	52 e4       	ldi	r21, 0x42	; 66
     392:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     396:	ab 01       	movw	r20, r22
     398:	bc 01       	movw	r22, r24
     39a:	84 e5       	ldi	r24, 0x54	; 84
     39c:	90 e2       	ldi	r25, 0x20	; 32
     39e:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN9motorInfo10setDesiredEf>
			upperAct.setDesired((double(recieveBuffer[7]+recieveBuffer[6]) / double(100)));
     3a2:	80 91 1a 20 	lds	r24, 0x201A
     3a6:	60 91 19 20 	lds	r22, 0x2019
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	68 0f       	add	r22, r24
     3ae:	71 1d       	adc	r23, r1
     3b0:	88 27       	eor	r24, r24
     3b2:	77 fd       	sbrc	r23, 7
     3b4:	80 95       	com	r24
     3b6:	98 2f       	mov	r25, r24
     3b8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	48 ec       	ldi	r20, 0xC8	; 200
     3c2:	52 e4       	ldi	r21, 0x42	; 66
     3c4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     3c8:	ab 01       	movw	r20, r22
     3ca:	bc 01       	movw	r22, r24
     3cc:	8c e3       	ldi	r24, 0x3C	; 60
     3ce:	90 e2       	ldi	r25, 0x20	; 32
     3d0:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN9motorInfo10setDesiredEf>
			IsPacketToParse = true;
     3d4:	c0 93 28 20 	sts	0x2028, r28
     3d8:	19 c0       	rjmp	.+50     	; 0x40c <__vector_25+0x172>
		}else{
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3da:	e0 ea       	ldi	r30, 0xA0	; 160
     3dc:	f8 e0       	ldi	r31, 0x08	; 8
     3de:	81 81       	ldd	r24, Z+1	; 0x01
     3e0:	85 ff       	sbrs	r24, 5
     3e2:	fd cf       	rjmp	.-6      	; 0x3de <__vector_25+0x144>
			USART_PutChar(&USARTC0, 255);
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	80 93 a0 08 	sts	0x08A0, r24
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3ea:	e0 ea       	ldi	r30, 0xA0	; 160
     3ec:	f8 e0       	ldi	r31, 0x08	; 8
     3ee:	81 81       	ldd	r24, Z+1	; 0x01
     3f0:	85 ff       	sbrs	r24, 5
     3f2:	fd cf       	rjmp	.-6      	; 0x3ee <__vector_25+0x154>
			USART_PutChar(&USARTC0,0);  //Checksum failed
     3f4:	10 92 a0 08 	sts	0x08A0, r1
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3f8:	e0 ea       	ldi	r30, 0xA0	; 160
     3fa:	f8 e0       	ldi	r31, 0x08	; 8
     3fc:	81 81       	ldd	r24, Z+1	; 0x01
     3fe:	85 ff       	sbrs	r24, 5
     400:	fd cf       	rjmp	.-6      	; 0x3fc <__vector_25+0x162>
			USART_PutChar(&USARTC0,255);
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	80 93 a0 08 	sts	0x08A0, r24

			bufferIndex = 0;	
     408:	10 92 25 20 	sts	0x2025, r1
		}
		
	}

}
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	bf 91       	pop	r27
     416:	af 91       	pop	r26
     418:	9f 91       	pop	r25
     41a:	8f 91       	pop	r24
     41c:	7f 91       	pop	r23
     41e:	6f 91       	pop	r22
     420:	5f 91       	pop	r21
     422:	4f 91       	pop	r20
     424:	3f 91       	pop	r19
     426:	2f 91       	pop	r18
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <__vector_26>:

ISR(USARTC0_DRE_vect){
     432:	1f 92       	push	r1
     434:	0f 92       	push	r0
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	0f 92       	push	r0
     43a:	11 24       	eor	r1, r1
     43c:	2f 93       	push	r18
     43e:	3f 93       	push	r19
     440:	4f 93       	push	r20
     442:	5f 93       	push	r21
     444:	6f 93       	push	r22
     446:	7f 93       	push	r23
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
     454:	8c e6       	ldi	r24, 0x6C	; 108
     456:	90 e2       	ldi	r25, 0x20	; 32
     458:	0e 94 3b 0a 	call	0x1476	; 0x1476 <USART_DataRegEmpty>
}
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	bf 91       	pop	r27
     462:	af 91       	pop	r26
     464:	9f 91       	pop	r25
     466:	8f 91       	pop	r24
     468:	7f 91       	pop	r23
     46a:	6f 91       	pop	r22
     46c:	5f 91       	pop	r21
     46e:	4f 91       	pop	r20
     470:	3f 91       	pop	r19
     472:	2f 91       	pop	r18
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <_Z23SetXMEGA32MhzCalibratedv>:


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     47e:	88 ed       	ldi	r24, 0xD8	; 216
     480:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     488:	e0 e5       	ldi	r30, 0x50	; 80
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	81 81       	ldd	r24, Z+1	; 0x01
     48e:	81 ff       	sbrs	r24, 1
     490:	fd cf       	rjmp	.-6      	; 0x48c <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     492:	88 ed       	ldi	r24, 0xD8	; 216
     494:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     49c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     49e:	e0 e5       	ldi	r30, 0x50	; 80
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	84 60       	ori	r24, 0x04	; 4
     4a6:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     4a8:	81 81       	ldd	r24, Z+1	; 0x01
     4aa:	82 ff       	sbrs	r24, 2
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     4ae:	e0 e5       	ldi	r30, 0x50	; 80
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	86 81       	ldd	r24, Z+6	; 0x06
     4b4:	8d 7f       	andi	r24, 0xFD	; 253
     4b6:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     4b8:	e0 e6       	ldi	r30, 0x60	; 96
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	80 83       	st	Z, r24
     4c2:	08 95       	ret

000004c4 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     4c4:	e0 e4       	ldi	r30, 0x40	; 64
     4c6:	f6 e0       	ldi	r31, 0x06	; 6
     4c8:	88 e0       	ldi	r24, 0x08	; 8
     4ca:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     4d0:	41 e0       	ldi	r20, 0x01	; 1
     4d2:	60 ea       	ldi	r22, 0xA0	; 160
     4d4:	78 e0       	ldi	r23, 0x08	; 8
     4d6:	8c e6       	ldi	r24, 0x6C	; 108
     4d8:	90 e2       	ldi	r25, 0x20	; 32
     4da:	0e 94 09 0a 	call	0x1412	; 0x1412 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     4de:	e0 91 6c 20 	lds	r30, 0x206C
     4e2:	f0 91 6d 20 	lds	r31, 0x206D
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     4ea:	83 81       	ldd	r24, Z+3	; 0x03
     4ec:	8f 7c       	andi	r24, 0xCF	; 207
     4ee:	80 61       	ori	r24, 0x10	; 16
     4f0:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     4f2:	a0 ea       	ldi	r26, 0xA0	; 160
     4f4:	b8 e0       	ldi	r27, 0x08	; 8
     4f6:	8f ec       	ldi	r24, 0xCF	; 207
     4f8:	16 96       	adiw	r26, 0x06	; 6
     4fa:	8c 93       	st	X, r24
     4fc:	16 97       	sbiw	r26, 0x06	; 6
     4fe:	17 96       	adiw	r26, 0x07	; 7
     500:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     502:	84 81       	ldd	r24, Z+4	; 0x04
     504:	80 61       	ori	r24, 0x10	; 16
     506:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     508:	84 81       	ldd	r24, Z+4	; 0x04
     50a:	88 60       	ori	r24, 0x08	; 8
     50c:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     50e:	e0 ea       	ldi	r30, 0xA0	; 160
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	82 81       	ldd	r24, Z+2	; 0x02
     514:	81 60       	ori	r24, 0x01	; 1
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	08 95       	ret

0000051a <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     51e:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     522:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_Z12SetupPCCommsv>
	SetupResetTimer();
     526:	0e 94 32 01 	call	0x264	; 0x264 <_Z15SetupResetTimerv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     52a:	80 ee       	ldi	r24, 0xE0	; 224
     52c:	e0 e4       	ldi	r30, 0x40	; 64
     52e:	f6 e0       	ldi	r31, 0x06	; 6
     530:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     532:	e0 e6       	ldi	r30, 0x60	; 96
     534:	f6 e0       	ldi	r31, 0x06	; 6
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     53a:	a0 e0       	ldi	r26, 0x00	; 0
     53c:	b6 e0       	ldi	r27, 0x06	; 6
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	8c 93       	st	X, r24
     542:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     544:	c0 e2       	ldi	r28, 0x20	; 32
     546:	d6 e0       	ldi	r29, 0x06	; 6
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	12 96       	adiw	r26, 0x02	; 2
     550:	8c 93       	st	X, r24
     552:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     554:	98 e0       	ldi	r25, 0x08	; 8
     556:	12 96       	adiw	r26, 0x02	; 2
     558:	9c 93       	st	X, r25
     55a:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit
     55c:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = (PIN4_bm); //'IsRoving' check
     55e:	20 e1       	ldi	r18, 0x10	; 16
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	2c 93       	st	X, r18
     564:	12 97       	sbiw	r26, 0x02	; 2
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_ENABLE();
     566:	30 e4       	ldi	r19, 0x40	; 64
     568:	36 83       	std	Z+6, r19	; 0x06
	
	//Setup Microstepping
	MD1_M0_CLR();
     56a:	90 e2       	ldi	r25, 0x20	; 32
     56c:	16 96       	adiw	r26, 0x06	; 6
     56e:	9c 93       	st	X, r25
     570:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     572:	16 96       	adiw	r26, 0x06	; 6
     574:	3c 93       	st	X, r19
     576:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_SET();
     578:	30 e8       	ldi	r19, 0x80	; 128
     57a:	15 96       	adiw	r26, 0x05	; 5
     57c:	3c 93       	st	X, r19
	
	MD1_DIR_CLR();
     57e:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     580:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     582:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_SET();
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	9d 83       	std	Y+5, r25	; 0x05
	MD2_M2_CLR();
     58c:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     58e:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     590:	96 83       	std	Z+6, r25	; 0x06
	
	sei();
     592:	78 94       	sei
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <_Z12SendStringPCPc>:

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     59a:	fc 01       	movw	r30, r24
     59c:	20 81       	ld	r18, Z
     59e:	22 23       	and	r18, r18
     5a0:	59 f0       	breq	.+22     	; 0x5b8 <_Z12SendStringPCPc+0x1e>
     5a2:	dc 01       	movw	r26, r24
     5a4:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     5a6:	e0 ea       	ldi	r30, 0xA0	; 160
     5a8:	f8 e0       	ldi	r31, 0x08	; 8
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	85 ff       	sbrs	r24, 5
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);	
     5b0:	20 83       	st	Z, r18
	
	sei();
}

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     5b2:	2d 91       	ld	r18, X+
     5b4:	21 11       	cpse	r18, r1
     5b6:	f9 cf       	rjmp	.-14     	; 0x5aa <_Z12SendStringPCPc+0x10>
     5b8:	08 95       	ret

000005ba <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
     5c8:	c7 e0       	ldi	r28, 0x07	; 7
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     5cc:	e1 2c       	mov	r14, r1
     5ce:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     5d0:	01 15       	cp	r16, r1
     5d2:	11 05       	cpc	r17, r1
     5d4:	39 f4       	brne	.+14     	; 0x5e4 <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5de:	e8 0e       	add	r14, r24
     5e0:	f9 1e       	adc	r15, r25
     5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     5e4:	01 30       	cpi	r16, 0x01	; 1
     5e6:	11 05       	cpc	r17, r1
     5e8:	31 f4       	brne	.+12     	; 0x5f6 <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5f2:	e8 0e       	add	r14, r24
     5f4:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	9f e1       	ldi	r25, 0x1F	; 31
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <_Z9smoothADCi+0x40>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <_Z9smoothADCi+0x46>
     600:	00 00       	nop
     602:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     604:	20 97       	sbiw	r28, 0x00	; 0
     606:	21 f7       	brne	.-56     	; 0x5d0 <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     608:	c7 01       	movw	r24, r14
     60a:	67 e0       	ldi	r22, 0x07	; 7
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divmodhi4>
     612:	cb 01       	movw	r24, r22
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	08 95       	ret

00000622 <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     62a:	20 91 68 20 	lds	r18, 0x2068
     62e:	30 91 69 20 	lds	r19, 0x2069
     632:	40 91 6a 20 	lds	r20, 0x206A
     636:	50 91 6b 20 	lds	r21, 0x206B
     63a:	60 91 64 20 	lds	r22, 0x2064
     63e:	70 91 65 20 	lds	r23, 0x2065
     642:	80 91 66 20 	lds	r24, 0x2066
     646:	90 91 67 20 	lds	r25, 0x2067
     64a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     64e:	6b 01       	movw	r12, r22
     650:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	a9 01       	movw	r20, r18
     658:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     65c:	18 16       	cp	r1, r24
     65e:	24 f0       	brlt	.+8      	; 0x668 <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     660:	f7 fa       	bst	r15, 7
     662:	f0 94       	com	r15
     664:	f7 f8       	bld	r15, 7
     666:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     668:	a7 01       	movw	r20, r14
     66a:	96 01       	movw	r18, r12
     66c:	60 91 58 20 	lds	r22, 0x2058
     670:	70 91 59 20 	lds	r23, 0x2059
     674:	80 91 5a 20 	lds	r24, 0x205A
     678:	90 91 5b 20 	lds	r25, 0x205B
     67c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	44 f4       	brge	.+16     	; 0x694 <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     684:	e6 e5       	ldi	r30, 0x56	; 86
     686:	f0 e2       	ldi	r31, 0x20	; 32
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	80 83       	st	Z, r24
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	04 c0       	rjmp	.+8      	; 0x69c <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     694:	10 92 56 20 	sts	0x2056, r1
     698:	10 92 57 20 	sts	0x2057, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     69c:	20 91 50 20 	lds	r18, 0x2050
     6a0:	30 91 51 20 	lds	r19, 0x2051
     6a4:	40 91 52 20 	lds	r20, 0x2052
     6a8:	50 91 53 20 	lds	r21, 0x2053
     6ac:	60 91 4c 20 	lds	r22, 0x204C
     6b0:	70 91 4d 20 	lds	r23, 0x204D
     6b4:	80 91 4e 20 	lds	r24, 0x204E
     6b8:	90 91 4f 20 	lds	r25, 0x204F
     6bc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     6c0:	6b 01       	movw	r12, r22
     6c2:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	24 f0       	brlt	.+8      	; 0x6da <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     6d2:	f7 fa       	bst	r15, 7
     6d4:	f0 94       	com	r15
     6d6:	f7 f8       	bld	r15, 7
     6d8:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     6da:	a7 01       	movw	r20, r14
     6dc:	96 01       	movw	r18, r12
     6de:	60 91 40 20 	lds	r22, 0x2040
     6e2:	70 91 41 20 	lds	r23, 0x2041
     6e6:	80 91 42 20 	lds	r24, 0x2042
     6ea:	90 91 43 20 	lds	r25, 0x2043
     6ee:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	44 f4       	brge	.+16     	; 0x706 <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     6f6:	ee e3       	ldi	r30, 0x3E	; 62
     6f8:	f0 e2       	ldi	r31, 0x20	; 32
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	80 83       	st	Z, r24
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	04 c0       	rjmp	.+8      	; 0x70e <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     706:	10 92 3e 20 	sts	0x203E, r1
     70a:	10 92 3f 20 	sts	0x203F, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     70e:	20 91 3e 20 	lds	r18, 0x203E
     712:	30 91 3f 20 	lds	r19, 0x203F
     716:	80 91 3c 20 	lds	r24, 0x203C
     71a:	90 91 3d 20 	lds	r25, 0x203D
     71e:	28 17       	cp	r18, r24
     720:	39 07       	cpc	r19, r25
     722:	24 f0       	brlt	.+8      	; 0x72c <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     724:	8c e3       	ldi	r24, 0x3C	; 60
     726:	90 e2       	ldi	r25, 0x20	; 32
     728:	0e 94 b8 07 	call	0xf70	; 0xf70 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     72c:	20 91 56 20 	lds	r18, 0x2056
     730:	30 91 57 20 	lds	r19, 0x2057
     734:	80 91 3c 20 	lds	r24, 0x203C
     738:	90 91 3d 20 	lds	r25, 0x203D
     73c:	28 17       	cp	r18, r24
     73e:	39 07       	cpc	r19, r25
     740:	24 f0       	brlt	.+8      	; 0x74a <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     742:	84 e5       	ldi	r24, 0x54	; 84
     744:	90 e2       	ldi	r25, 0x20	; 32
     746:	0e 94 b8 07 	call	0xf70	; 0xf70 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_Z9smoothADCi>
     752:	bc 01       	movw	r22, r24
     754:	88 27       	eor	r24, r24
     756:	77 fd       	sbrc	r23, 7
     758:	80 95       	com	r24
     75a:	98 2f       	mov	r25, r24
     75c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
     760:	2f e1       	ldi	r18, 0x1F	; 31
     762:	35 e8       	ldi	r19, 0x85	; 133
     764:	48 e6       	ldi	r20, 0x68	; 104
     766:	52 e4       	ldi	r21, 0x42	; 66
     768:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     76c:	25 e8       	ldi	r18, 0x85	; 133
     76e:	3b ee       	ldi	r19, 0xEB	; 235
     770:	41 ed       	ldi	r20, 0xD1	; 209
     772:	5e e3       	ldi	r21, 0x3E	; 62
     774:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     778:	60 93 64 20 	sts	0x2064, r22
     77c:	70 93 65 20 	sts	0x2065, r23
     780:	80 93 66 20 	sts	0x2066, r24
     784:	90 93 67 20 	sts	0x2067, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_Z9smoothADCi>
     790:	bc 01       	movw	r22, r24
     792:	88 27       	eor	r24, r24
     794:	77 fd       	sbrc	r23, 7
     796:	80 95       	com	r24
     798:	98 2f       	mov	r25, r24
     79a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
     79e:	2f e1       	ldi	r18, 0x1F	; 31
     7a0:	35 e8       	ldi	r19, 0x85	; 133
     7a2:	48 e6       	ldi	r20, 0x68	; 104
     7a4:	52 e4       	ldi	r21, 0x42	; 66
     7a6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     7aa:	25 e8       	ldi	r18, 0x85	; 133
     7ac:	3b ee       	ldi	r19, 0xEB	; 235
     7ae:	41 ed       	ldi	r20, 0xD1	; 209
     7b0:	5e e3       	ldi	r21, 0x3E	; 62
     7b2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     7b6:	60 93 4c 20 	sts	0x204C, r22
     7ba:	70 93 4d 20 	sts	0x204D, r23
     7be:	80 93 4e 20 	sts	0x204E, r24
     7c2:	90 93 4f 20 	sts	0x204F, r25
}
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	08 95       	ret

000007d0 <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     7d0:	4f 92       	push	r4
     7d2:	5f 92       	push	r5
     7d4:	6f 92       	push	r6
     7d6:	7f 92       	push	r7
     7d8:	8f 92       	push	r8
     7da:	9f 92       	push	r9
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
		
	if(act == LOWER){
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	09 f0       	breq	.+2      	; 0x7ee <_Z13getMotorSpeedi+0x1e>
     7ec:	71 c0       	rjmp	.+226    	; 0x8d0 <_Z13getMotorSpeedi+0x100>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     7ee:	40 90 64 20 	lds	r4, 0x2064
     7f2:	50 90 65 20 	lds	r5, 0x2065
     7f6:	60 90 66 20 	lds	r6, 0x2066
     7fa:	70 90 67 20 	lds	r7, 0x2067
     7fe:	20 91 68 20 	lds	r18, 0x2068
     802:	30 91 69 20 	lds	r19, 0x2069
     806:	40 91 6a 20 	lds	r20, 0x206A
     80a:	50 91 6b 20 	lds	r21, 0x206B
     80e:	c3 01       	movw	r24, r6
     810:	b2 01       	movw	r22, r4
     812:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     816:	6b 01       	movw	r12, r22
     818:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	a9 01       	movw	r20, r18
     820:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     824:	18 16       	cp	r1, r24
     826:	24 f0       	brlt	.+8      	; 0x830 <_Z13getMotorSpeedi+0x60>
		return input;
	else
		return input * -1;
     828:	f7 fa       	bst	r15, 7
     82a:	f0 94       	com	r15
     82c:	f7 f8       	bld	r15, 7
     82e:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     830:	80 90 5c 20 	lds	r8, 0x205C
     834:	90 90 5d 20 	lds	r9, 0x205D
     838:	a0 90 5e 20 	lds	r10, 0x205E
     83c:	b0 90 5f 20 	lds	r11, 0x205F
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	5f e3       	ldi	r21, 0x3F	; 63
     848:	c5 01       	movw	r24, r10
     84a:	b4 01       	movw	r22, r8
     84c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__mulsf3>
     850:	a7 01       	movw	r20, r14
     852:	96 01       	movw	r18, r12
     854:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     858:	18 16       	cp	r1, r24
     85a:	54 f4       	brge	.+20     	; 0x870 <_Z13getMotorSpeedi+0xa0>
			return lowerAct.speed / 3;
     85c:	80 91 60 20 	lds	r24, 0x2060
     860:	90 91 61 20 	lds	r25, 0x2061
     864:	63 e0       	ldi	r22, 0x03	; 3
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divmodhi4>
     86c:	cb 01       	movw	r24, r22
     86e:	a6 c0       	rjmp	.+332    	; 0x9bc <_Z13getMotorSpeedi+0x1ec>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     870:	20 91 68 20 	lds	r18, 0x2068
     874:	30 91 69 20 	lds	r19, 0x2069
     878:	40 91 6a 20 	lds	r20, 0x206A
     87c:	50 91 6b 20 	lds	r21, 0x206B
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     888:	6b 01       	movw	r12, r22
     88a:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	a9 01       	movw	r20, r18
     892:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     896:	18 16       	cp	r1, r24
     898:	24 f0       	brlt	.+8      	; 0x8a2 <_Z13getMotorSpeedi+0xd2>
		return input;
	else
		return input * -1;
     89a:	f7 fa       	bst	r15, 7
     89c:	f0 94       	com	r15
     89e:	f7 f8       	bld	r15, 7
     8a0:	f0 94       	com	r15
int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
			return lowerAct.speed / 3;
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     8a2:	a7 01       	movw	r20, r14
     8a4:	96 01       	movw	r18, r12
     8a6:	c5 01       	movw	r24, r10
     8a8:	b4 01       	movw	r22, r8
     8aa:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	54 f4       	brge	.+20     	; 0x8c6 <_Z13getMotorSpeedi+0xf6>
			return lowerAct.speed / 2;
     8b2:	80 91 60 20 	lds	r24, 0x2060
     8b6:	90 91 61 20 	lds	r25, 0x2061
     8ba:	99 23       	and	r25, r25
     8bc:	0c f4       	brge	.+2      	; 0x8c0 <_Z13getMotorSpeedi+0xf0>
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	95 95       	asr	r25
     8c2:	87 95       	ror	r24
     8c4:	7b c0       	rjmp	.+246    	; 0x9bc <_Z13getMotorSpeedi+0x1ec>
		else
			return lowerAct.speed;
     8c6:	80 91 60 20 	lds	r24, 0x2060
     8ca:	90 91 61 20 	lds	r25, 0x2061
     8ce:	76 c0       	rjmp	.+236    	; 0x9bc <_Z13getMotorSpeedi+0x1ec>
	}
	else if (act == UPPER){
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <_Z13getMotorSpeedi+0x106>
     8d4:	71 c0       	rjmp	.+226    	; 0x9b8 <_Z13getMotorSpeedi+0x1e8>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     8d6:	40 90 4c 20 	lds	r4, 0x204C
     8da:	50 90 4d 20 	lds	r5, 0x204D
     8de:	60 90 4e 20 	lds	r6, 0x204E
     8e2:	70 90 4f 20 	lds	r7, 0x204F
     8e6:	20 91 50 20 	lds	r18, 0x2050
     8ea:	30 91 51 20 	lds	r19, 0x2051
     8ee:	40 91 52 20 	lds	r20, 0x2052
     8f2:	50 91 53 20 	lds	r21, 0x2053
     8f6:	c3 01       	movw	r24, r6
     8f8:	b2 01       	movw	r22, r4
     8fa:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     8fe:	6b 01       	movw	r12, r22
     900:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	a9 01       	movw	r20, r18
     908:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     90c:	18 16       	cp	r1, r24
     90e:	24 f0       	brlt	.+8      	; 0x918 <_Z13getMotorSpeedi+0x148>
		return input;
	else
		return input * -1;
     910:	f7 fa       	bst	r15, 7
     912:	f0 94       	com	r15
     914:	f7 f8       	bld	r15, 7
     916:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     918:	80 90 44 20 	lds	r8, 0x2044
     91c:	90 90 45 20 	lds	r9, 0x2045
     920:	a0 90 46 20 	lds	r10, 0x2046
     924:	b0 90 47 20 	lds	r11, 0x2047
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	5f e3       	ldi	r21, 0x3F	; 63
     930:	c5 01       	movw	r24, r10
     932:	b4 01       	movw	r22, r8
     934:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__mulsf3>
     938:	a7 01       	movw	r20, r14
     93a:	96 01       	movw	r18, r12
     93c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     940:	18 16       	cp	r1, r24
     942:	54 f4       	brge	.+20     	; 0x958 <_Z13getMotorSpeedi+0x188>
			return upperAct.speed / 3;
     944:	80 91 48 20 	lds	r24, 0x2048
     948:	90 91 49 20 	lds	r25, 0x2049
     94c:	63 e0       	ldi	r22, 0x03	; 3
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divmodhi4>
     954:	cb 01       	movw	r24, r22
     956:	32 c0       	rjmp	.+100    	; 0x9bc <_Z13getMotorSpeedi+0x1ec>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     958:	20 91 50 20 	lds	r18, 0x2050
     95c:	30 91 51 20 	lds	r19, 0x2051
     960:	40 91 52 20 	lds	r20, 0x2052
     964:	50 91 53 20 	lds	r21, 0x2053
     968:	c3 01       	movw	r24, r6
     96a:	b2 01       	movw	r22, r4
     96c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     970:	6b 01       	movw	r12, r22
     972:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	a9 01       	movw	r20, r18
     97a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	24 f0       	brlt	.+8      	; 0x98a <_Z13getMotorSpeedi+0x1ba>
		return input;
	else
		return input * -1;
     982:	f7 fa       	bst	r15, 7
     984:	f0 94       	com	r15
     986:	f7 f8       	bld	r15, 7
     988:	f0 94       	com	r15
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
			return upperAct.speed / 3;
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     98a:	a7 01       	movw	r20, r14
     98c:	96 01       	movw	r18, r12
     98e:	c5 01       	movw	r24, r10
     990:	b4 01       	movw	r22, r8
     992:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     996:	18 16       	cp	r1, r24
     998:	54 f4       	brge	.+20     	; 0x9ae <_Z13getMotorSpeedi+0x1de>
			return upperAct.speed / 2;
     99a:	80 91 48 20 	lds	r24, 0x2048
     99e:	90 91 49 20 	lds	r25, 0x2049
     9a2:	99 23       	and	r25, r25
     9a4:	0c f4       	brge	.+2      	; 0x9a8 <_Z13getMotorSpeedi+0x1d8>
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	95 95       	asr	r25
     9aa:	87 95       	ror	r24
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <_Z13getMotorSpeedi+0x1ec>
		else
			return upperAct.speed;
     9ae:	80 91 48 20 	lds	r24, 0x2048
     9b2:	90 91 49 20 	lds	r25, 0x2049
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <_Z13getMotorSpeedi+0x1ec>
	}
	
	
	////////
	return 0;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
}
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	bf 90       	pop	r11
     9c6:	af 90       	pop	r10
     9c8:	9f 90       	pop	r9
     9ca:	8f 90       	pop	r8
     9cc:	7f 90       	pop	r7
     9ce:	6f 90       	pop	r6
     9d0:	5f 90       	pop	r5
     9d2:	4f 90       	pop	r4
     9d4:	08 95       	ret

000009d6 <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	f1 f4       	brne	.+60     	; 0xa16 <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     9da:	80 91 62 20 	lds	r24, 0x2062
     9de:	90 91 63 20 	lds	r25, 0x2063
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <_Z11getMotorDiri+0x12>
     9e6:	3e c0       	rjmp	.+124    	; 0xa64 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     9e8:	20 91 68 20 	lds	r18, 0x2068
     9ec:	30 91 69 20 	lds	r19, 0x2069
     9f0:	40 91 6a 20 	lds	r20, 0x206A
     9f4:	50 91 6b 20 	lds	r21, 0x206B
     9f8:	60 91 64 20 	lds	r22, 0x2064
     9fc:	70 91 65 20 	lds	r23, 0x2065
     a00:	80 91 66 20 	lds	r24, 0x2066
     a04:	90 91 67 20 	lds	r25, 0x2067
     a08:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     a0c:	18 16       	cp	r1, r24
     a0e:	14 f5       	brge	.+68     	; 0xa54 <_Z11getMotorDiri+0x7e>
			return -1;
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	9f ef       	ldi	r25, 0xFF	; 255
     a14:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	01 f5       	brne	.+64     	; 0xa5a <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     a1a:	80 91 4a 20 	lds	r24, 0x204A
     a1e:	90 91 4b 20 	lds	r25, 0x204B
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	f9 f0       	breq	.+62     	; 0xa64 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     a26:	20 91 50 20 	lds	r18, 0x2050
     a2a:	30 91 51 20 	lds	r19, 0x2051
     a2e:	40 91 52 20 	lds	r20, 0x2052
     a32:	50 91 53 20 	lds	r21, 0x2053
     a36:	60 91 4c 20 	lds	r22, 0x204C
     a3a:	70 91 4d 20 	lds	r23, 0x204D
     a3e:	80 91 4e 20 	lds	r24, 0x204E
     a42:	90 91 4f 20 	lds	r25, 0x204F
     a46:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gesf2>
     a4a:	18 16       	cp	r1, r24
     a4c:	4c f4       	brge	.+18     	; 0xa60 <_Z11getMotorDiri+0x8a>
			return -1;
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	9f ef       	ldi	r25, 0xFF	; 255
     a52:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     a64:	08 95       	ret

00000a66 <main>:

int main(void)
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <main+0x6>
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <main+0x8>
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     a72:	0e 94 8d 02 	call	0x51a	; 0x51a <_Z25DemInitThingsYouBeenDoingv>
     a76:	2f ef       	ldi	r18, 0xFF	; 255
     a78:	87 ea       	ldi	r24, 0xA7	; 167
     a7a:	91 e6       	ldi	r25, 0x61	; 97
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <main+0x16>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0x20>
     a86:	00 00       	nop
	_delay_ms(1000);

	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     a88:	40 e6       	ldi	r20, 0x60	; 96
     a8a:	56 e0       	ldi	r21, 0x06	; 6
     a8c:	60 ea       	ldi	r22, 0xA0	; 160
     a8e:	79 e0       	ldi	r23, 0x09	; 9
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 3.0;
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e4       	ldi	r26, 0x40	; 64
     a9e:	b0 e4       	ldi	r27, 0x40	; 64
     aa0:	80 93 50 20 	sts	0x2050, r24
     aa4:	90 93 51 20 	sts	0x2051, r25
     aa8:	a0 93 52 20 	sts	0x2052, r26
     aac:	b0 93 53 20 	sts	0x2053, r27
	lowerAct.desiredPos = 3.5;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e6       	ldi	r26, 0x60	; 96
     ab6:	b0 e4       	ldi	r27, 0x40	; 64
     ab8:	80 93 68 20 	sts	0x2068, r24
     abc:	90 93 69 20 	sts	0x2069, r25
     ac0:	a0 93 6a 20 	sts	0x206A, r26
     ac4:	b0 93 6b 20 	sts	0x206B, r27
	
	//Wait until rover is unpaused
	while(!CHECK_ISROVING());
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f6 e0       	ldi	r31, 0x06	; 6
     acc:	80 85       	ldd	r24, Z+8	; 0x08
     ace:	84 ff       	sbrs	r24, 4
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <main+0x66>
	
	lowerAct.enable();
     ad2:	84 e5       	ldi	r24, 0x54	; 84
     ad4:	90 e2       	ldi	r25, 0x20	; 32
     ad6:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN9motorInfo6enableEv>
	upperAct.enable();
     ada:	8c e3       	ldi	r24, 0x3C	; 60
     adc:	90 e2       	ldi	r25, 0x20	; 32
     ade:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN9motorInfo6enableEv>
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled)){
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f2 e6       	ldi	r31, 0x62	; 98
     ae6:	cf 2e       	mov	r12, r31
     ae8:	f0 e2       	ldi	r31, 0x20	; 32
     aea:	df 2e       	mov	r13, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	0f 2e       	mov	r0, r31
     af0:	fa e4       	ldi	r31, 0x4A	; 74
     af2:	ef 2e       	mov	r14, r31
     af4:	f0 e2       	ldi	r31, 0x20	; 32
     af6:	ff 2e       	mov	r15, r31
     af8:	f0 2d       	mov	r31, r0
		checkActPosition();
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));
		while(!CHECK_ISROVING()){
     afa:	00 e0       	ldi	r16, 0x00	; 0
     afc:	16 e0       	ldi	r17, 0x06	; 6
	lowerAct.enable();
	upperAct.enable();
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled)){
     afe:	31 c0       	rjmp	.+98     	; 0xb62 <main+0xfc>
		checkActPosition();
     b00:	0e 94 11 03 	call	0x622	; 0x622 <_Z16checkActPositionv>
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z13getMotorSpeedi>
     b0c:	a8 2e       	mov	r10, r24
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11getMotorDiri>
     b16:	98 2e       	mov	r9, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z13getMotorSpeedi>
     b20:	b8 2e       	mov	r11, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11getMotorDiri>
     b2a:	9a 9c       	mul	r9, r10
     b2c:	40 2d       	mov	r20, r0
     b2e:	11 24       	eor	r1, r1
     b30:	41 58       	subi	r20, 0x81	; 129
     b32:	8b 9d       	mul	r24, r11
     b34:	80 2d       	mov	r24, r0
     b36:	11 24       	eor	r1, r1
     b38:	6f e7       	ldi	r22, 0x7F	; 127
     b3a:	68 0f       	add	r22, r24
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
		while(!CHECK_ISROVING()){
     b44:	d8 01       	movw	r26, r16
     b46:	18 96       	adiw	r26, 0x08	; 8
     b48:	8c 91       	ld	r24, X
     b4a:	84 fd       	sbrc	r24, 4
     b4c:	0a c0       	rjmp	.+20     	; 0xb62 <main+0xfc>
			DriveSaber.ParsePacket(127,127);
     b4e:	4f e7       	ldi	r20, 0x7F	; 127
     b50:	6f e7       	ldi	r22, 0x7F	; 127
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled)){
		checkActPosition();
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));
		while(!CHECK_ISROVING()){
     b5a:	f8 01       	movw	r30, r16
     b5c:	80 85       	ldd	r24, Z+8	; 0x08
     b5e:	84 ff       	sbrs	r24, 4
     b60:	f6 cf       	rjmp	.-20     	; 0xb4e <main+0xe8>
	lowerAct.enable();
	upperAct.enable();
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled)){
     b62:	d6 01       	movw	r26, r12
     b64:	8d 91       	ld	r24, X+
     b66:	9c 91       	ld	r25, X
     b68:	89 2b       	or	r24, r25
     b6a:	51 f6       	brne	.-108    	; 0xb00 <main+0x9a>
     b6c:	f7 01       	movw	r30, r14
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	89 2b       	or	r24, r25
     b74:	29 f6       	brne	.-118    	; 0xb00 <main+0x9a>
		while(!CHECK_ISROVING()){
			DriveSaber.ParsePacket(127,127);
		}	
	}

	baseStepper.calibrateBase();
     b76:	89 e2       	ldi	r24, 0x29	; 41
     b78:	90 e2       	ldi	r25, 0x20	; 32
     b7a:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN13rotateStepper13calibrateBaseEv>
	MD2_DIR_CLR();
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	e0 e6       	ldi	r30, 0x60	; 96
     b82:	f6 e0       	ldi	r31, 0x06	; 6
     b84:	86 83       	std	Z+6, r24	; 0x06
	baseStepper.rotateBase(0);  //Note that this function takes an angle relative
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	89 e2       	ldi	r24, 0x29	; 41
     b8c:	90 e2       	ldi	r25, 0x20	; 32
     b8e:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN13rotateStepper10rotateBaseEi>
	
	
	gripStepper.enable();							 //to the absolute 0 on the robot
     b92:	85 e3       	ldi	r24, 0x35	; 53
     b94:	90 e2       	ldi	r25, 0x20	; 32
     b96:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN11stepperInfo6enableEv>
	gripStepper.processCommand(RELEASE);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	85 e3       	ldi	r24, 0x35	; 53
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN11stepperInfo14processCommandEi>
					}
				}
				
				IsPacketToParse = false;
				ERROR_CLR();
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     ba6:	0f 2e       	mov	r0, r31
     ba8:	f0 ea       	ldi	r31, 0xA0	; 160
     baa:	ef 2e       	mov	r14, r31
     bac:	f8 e0       	ldi	r31, 0x08	; 8
     bae:	ff 2e       	mov	r15, r31
     bb0:	f0 2d       	mov	r31, r0
				USART_PutChar(&USARTC0, 255);
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
				USART_PutChar(&USARTC0, 0b00000010 | CHECK_GRIP_CLOSE());
     bb2:	00 e0       	ldi	r16, 0x00	; 0
     bb4:	16 e0       	ldi	r17, 0x06	; 6
					upperAct.enable();						//Re-enabled lower actuator

					baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
					checkActPosition();								//Check once to avoid loop is possible
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f2 e6       	ldi	r31, 0x62	; 98
     bba:	cf 2e       	mov	r12, r31
     bbc:	f0 e2       	ldi	r31, 0x20	; 32
     bbe:	df 2e       	mov	r13, r31
     bc0:	f0 2d       	mov	r31, r0
     bc2:	0f 2e       	mov	r0, r31
     bc4:	fa e4       	ldi	r31, 0x4A	; 74
     bc6:	af 2e       	mov	r10, r31
     bc8:	f0 e2       	ldi	r31, 0x20	; 32
     bca:	bf 2e       	mov	r11, r31
     bcc:	f0 2d       	mov	r31, r0
		}else if(CurrentState == ARMControl){
			if(IsPacketToParse){
				if(ShouldRECAL == true){

							
					upperAct.desiredPos = 3.0;
     bce:	41 2c       	mov	r4, r1
     bd0:	51 2c       	mov	r5, r1
     bd2:	68 94       	set
     bd4:	66 24       	eor	r6, r6
     bd6:	66 f8       	bld	r6, 6
     bd8:	76 2c       	mov	r7, r6
	/////////////Initial Calibration and Default Positions//////////////////////

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	while(1){
		if(CurrentState == WaitForHost){
     bda:	80 91 12 20 	lds	r24, 0x2012
     bde:	81 11       	cpse	r24, r1
     be0:	2f c0       	rjmp	.+94     	; 0xc40 <main+0x1da>
			SendStringPC("ID: ArmControl\r\n");
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e2       	ldi	r25, 0x20	; 32
     be6:	0e 94 cd 02 	call	0x59a	; 0x59a <_Z12SendStringPCPc>
     bea:	ff ef       	ldi	r31, 0xFF	; 255
     bec:	23 ed       	ldi	r18, 0xD3	; 211
     bee:	80 e3       	ldi	r24, 0x30	; 48
     bf0:	f1 50       	subi	r31, 0x01	; 1
     bf2:	20 40       	sbci	r18, 0x00	; 0
     bf4:	80 40       	sbci	r24, 0x00	; 0
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <main+0x18a>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <main+0x194>
     bfa:	00 00       	nop
			_delay_ms(500);
			if(recieveBuffer[0] == 'r'){
     bfc:	80 91 13 20 	lds	r24, 0x2013
     c00:	82 37       	cpi	r24, 0x72	; 114
     c02:	d9 f4       	brne	.+54     	; 0xc3a <main+0x1d4>
				CurrentState = ARMControl;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 12 20 	sts	0x2012, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c0a:	d7 01       	movw	r26, r14
     c0c:	11 96       	adiw	r26, 0x01	; 1
     c0e:	8c 91       	ld	r24, X
     c10:	11 97       	sbiw	r26, 0x01	; 1
     c12:	85 ff       	sbrs	r24, 5
     c14:	fa cf       	rjmp	.-12     	; 0xc0a <main+0x1a4>
				USART_PutChar(&USARTC0, 'r');
     c16:	82 e7       	ldi	r24, 0x72	; 114
     c18:	8c 93       	st	X, r24
				TimePrevious = TimeSinceInit;
     c1a:	80 91 21 20 	lds	r24, 0x2021
     c1e:	90 91 22 20 	lds	r25, 0x2022
     c22:	a0 91 23 20 	lds	r26, 0x2023
     c26:	b0 91 24 20 	lds	r27, 0x2024
     c2a:	80 93 1d 20 	sts	0x201D, r24
     c2e:	90 93 1e 20 	sts	0x201E, r25
     c32:	a0 93 1f 20 	sts	0x201F, r26
     c36:	b0 93 20 20 	sts	0x2020, r27
			}
			bufferIndex = 0;
     c3a:	10 92 25 20 	sts	0x2025, r1
     c3e:	cd cf       	rjmp	.-102    	; 0xbda <main+0x174>
		}else if(CurrentState == ARMControl){
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	59 f6       	brne	.-106    	; 0xbda <main+0x174>
			if(IsPacketToParse){
     c44:	80 91 28 20 	lds	r24, 0x2028
     c48:	88 23       	and	r24, r24
     c4a:	39 f2       	breq	.-114    	; 0xbda <main+0x174>
				if(ShouldRECAL == true){
     c4c:	80 91 26 20 	lds	r24, 0x2026
     c50:	88 23       	and	r24, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <main+0x1f0>
     c54:	77 c0       	rjmp	.+238    	; 0xd44 <main+0x2de>

							
					upperAct.desiredPos = 3.0;
     c56:	40 92 50 20 	sts	0x2050, r4
     c5a:	50 92 51 20 	sts	0x2051, r5
     c5e:	60 92 52 20 	sts	0x2052, r6
     c62:	70 92 53 20 	sts	0x2053, r7
					lowerAct.desiredPos = 3.5;
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e6       	ldi	r26, 0x60	; 96
     c6c:	b0 e4       	ldi	r27, 0x40	; 64
     c6e:	80 93 68 20 	sts	0x2068, r24
     c72:	90 93 69 20 	sts	0x2069, r25
     c76:	a0 93 6a 20 	sts	0x206A, r26
     c7a:	b0 93 6b 20 	sts	0x206B, r27
						
					lowerAct.enable();
     c7e:	84 e5       	ldi	r24, 0x54	; 84
     c80:	90 e2       	ldi	r25, 0x20	; 32
     c82:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN9motorInfo6enableEv>
					upperAct.enable();
     c86:	8c e3       	ldi	r24, 0x3C	; 60
     c88:	90 e2       	ldi	r25, 0x20	; 32
     c8a:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN9motorInfo6enableEv>
						
					/////////////Initial Calibration and Default Positions//////////////////////
					while((lowerAct.enabled || upperAct.enabled)){
     c8e:	31 c0       	rjmp	.+98     	; 0xcf2 <main+0x28c>
						checkActPosition();
     c90:	0e 94 11 03 	call	0x622	; 0x622 <_Z16checkActPositionv>
						DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z13getMotorSpeedi>
     c9c:	88 2e       	mov	r8, r24
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11getMotorDiri>
     ca6:	38 2e       	mov	r3, r24
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z13getMotorSpeedi>
     cb0:	98 2e       	mov	r9, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11getMotorDiri>
     cba:	38 9c       	mul	r3, r8
     cbc:	40 2d       	mov	r20, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	41 58       	subi	r20, 0x81	; 129
     cc2:	89 9d       	mul	r24, r9
     cc4:	80 2d       	mov	r24, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	6f e7       	ldi	r22, 0x7F	; 127
     cca:	68 0f       	add	r22, r24
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
						while(!CHECK_ISROVING()){
     cd4:	d8 01       	movw	r26, r16
     cd6:	18 96       	adiw	r26, 0x08	; 8
     cd8:	8c 91       	ld	r24, X
     cda:	84 fd       	sbrc	r24, 4
     cdc:	0a c0       	rjmp	.+20     	; 0xcf2 <main+0x28c>
							DriveSaber.ParsePacket(127,127);
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	6f e7       	ldi	r22, 0x7F	; 127
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
						
					/////////////Initial Calibration and Default Positions//////////////////////
					while((lowerAct.enabled || upperAct.enabled)){
						checkActPosition();
						DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));
						while(!CHECK_ISROVING()){
     cea:	f8 01       	movw	r30, r16
     cec:	80 85       	ldd	r24, Z+8	; 0x08
     cee:	84 ff       	sbrs	r24, 4
     cf0:	f6 cf       	rjmp	.-20     	; 0xcde <main+0x278>
						
					lowerAct.enable();
					upperAct.enable();
						
					/////////////Initial Calibration and Default Positions//////////////////////
					while((lowerAct.enabled || upperAct.enabled)){
     cf2:	d6 01       	movw	r26, r12
     cf4:	8d 91       	ld	r24, X+
     cf6:	9c 91       	ld	r25, X
     cf8:	89 2b       	or	r24, r25
     cfa:	51 f6       	brne	.-108    	; 0xc90 <main+0x22a>
     cfc:	f5 01       	movw	r30, r10
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	89 2b       	or	r24, r25
     d04:	29 f6       	brne	.-118    	; 0xc90 <main+0x22a>
						while(!CHECK_ISROVING()){
							DriveSaber.ParsePacket(127,127);
						}
					}

					baseStepper.calibrateBase();
     d06:	89 e2       	ldi	r24, 0x29	; 41
     d08:	90 e2       	ldi	r25, 0x20	; 32
     d0a:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN13rotateStepper13calibrateBaseEv>
					MD2_DIR_CLR();
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	e0 e6       	ldi	r30, 0x60	; 96
     d12:	f6 e0       	ldi	r31, 0x06	; 6
     d14:	86 83       	std	Z+6, r24	; 0x06
					baseStepper.rotateBase(0);  //Note that this function takes an angle relative
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	89 e2       	ldi	r24, 0x29	; 41
     d1c:	90 e2       	ldi	r25, 0x20	; 32
     d1e:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN13rotateStepper10rotateBaseEi>
						
					if(gripStepper.desiredGripState){
     d22:	80 91 3b 20 	lds	r24, 0x203B
     d26:	88 23       	and	r24, r24
     d28:	51 f0       	breq	.+20     	; 0xd3e <main+0x2d8>
						gripStepper.enable();							 //to the absolute 0 on the robot
     d2a:	85 e3       	ldi	r24, 0x35	; 53
     d2c:	90 e2       	ldi	r25, 0x20	; 32
     d2e:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN11stepperInfo6enableEv>
						gripStepper.processCommand(RELEASE);	
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	85 e3       	ldi	r24, 0x35	; 53
     d38:	90 e2       	ldi	r25, 0x20	; 32
     d3a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN11stepperInfo14processCommandEi>
					}
					
					ShouldRECAL = false;
     d3e:	10 92 26 20 	sts	0x2026, r1
     d42:	74 c0       	rjmp	.+232    	; 0xe2c <main+0x3c6>

				}else{
					ERROR_SET();									//Show light when done with actuators
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	80 93 45 06 	sts	0x0645, r24
					lowerAct.enable();						//Re-enable lower actuator
     d4a:	84 e5       	ldi	r24, 0x54	; 84
     d4c:	90 e2       	ldi	r25, 0x20	; 32
     d4e:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN9motorInfo6enableEv>
					upperAct.enable();						//Re-enabled lower actuator
     d52:	8c e3       	ldi	r24, 0x3C	; 60
     d54:	90 e2       	ldi	r25, 0x20	; 32
     d56:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN9motorInfo6enableEv>

					baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
     d5a:	60 91 33 20 	lds	r22, 0x2033
     d5e:	70 91 34 20 	lds	r23, 0x2034
     d62:	89 e2       	ldi	r24, 0x29	; 41
     d64:	90 e2       	ldi	r25, 0x20	; 32
     d66:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN13rotateStepper10rotateBaseEi>
					
					checkActPosition();								//Check once to avoid loop is possible
     d6a:	0e 94 11 03 	call	0x622	; 0x622 <_Z16checkActPositionv>
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     d6e:	31 c0       	rjmp	.+98     	; 0xdd2 <main+0x36c>
						checkActPosition();							//Check positions
     d70:	0e 94 11 03 	call	0x622	; 0x622 <_Z16checkActPositionv>
						DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z13getMotorSpeedi>
     d7c:	88 2e       	mov	r8, r24
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11getMotorDiri>
     d86:	38 2e       	mov	r3, r24
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z13getMotorSpeedi>
     d90:	98 2e       	mov	r9, r24
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11getMotorDiri>
     d9a:	38 9c       	mul	r3, r8
     d9c:	40 2d       	mov	r20, r0
     d9e:	11 24       	eor	r1, r1
     da0:	41 58       	subi	r20, 0x81	; 129
     da2:	89 9d       	mul	r24, r9
     da4:	80 2d       	mov	r24, r0
     da6:	11 24       	eor	r1, r1
     da8:	6f e7       	ldi	r22, 0x7F	; 127
     daa:	68 0f       	add	r22, r24
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
						while(!CHECK_ISROVING()){
     db4:	d8 01       	movw	r26, r16
     db6:	18 96       	adiw	r26, 0x08	; 8
     db8:	8c 91       	ld	r24, X
     dba:	84 fd       	sbrc	r24, 4
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <main+0x36c>
							DriveSaber.ParsePacket(127,127);
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	6f e7       	ldi	r22, 0x7F	; 127
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
					
					checkActPosition();								//Check once to avoid loop is possible
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
						checkActPosition();							//Check positions
						DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
						while(!CHECK_ISROVING()){
     dca:	f8 01       	movw	r30, r16
     dcc:	80 85       	ldd	r24, Z+8	; 0x08
     dce:	84 ff       	sbrs	r24, 4
     dd0:	f6 cf       	rjmp	.-20     	; 0xdbe <main+0x358>
					upperAct.enable();						//Re-enabled lower actuator

					baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
					checkActPosition();								//Check once to avoid loop is possible
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     dd2:	d6 01       	movw	r26, r12
     dd4:	8d 91       	ld	r24, X+
     dd6:	9c 91       	ld	r25, X
     dd8:	89 2b       	or	r24, r25
     dda:	51 f6       	brne	.-108    	; 0xd70 <main+0x30a>
     ddc:	f5 01       	movw	r30, r10
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	89 2b       	or	r24, r25
     de4:	29 f6       	brne	.-118    	; 0xd70 <main+0x30a>
							DriveSaber.ParsePacket(127,127);
						}  //e-stop check
					}												//Exit when done moving
					

					DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more
     de6:	4f e7       	ldi	r20, 0x7F	; 127
     de8:	6f e7       	ldi	r22, 0x7F	; 127
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN10Sabertooth11ParsePacketEhh>
				
					if((gripStepper.desiredGripState == GRIP)){
     df2:	80 91 3b 20 	lds	r24, 0x203B
     df6:	81 11       	cpse	r24, r1
     df8:	0b c0       	rjmp	.+22     	; 0xe10 <main+0x3aa>
						gripStepper.enable();
     dfa:	85 e3       	ldi	r24, 0x35	; 53
     dfc:	90 e2       	ldi	r25, 0x20	; 32
     dfe:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN11stepperInfo6enableEv>
						gripStepper.processCommand(GRIP);
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	85 e3       	ldi	r24, 0x35	; 53
     e08:	90 e2       	ldi	r25, 0x20	; 32
     e0a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN11stepperInfo14processCommandEi>
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <main+0x3c6>
					}else if(gripStepper.desiredGripState == RELEASE){
     e10:	80 91 3b 20 	lds	r24, 0x203B
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	51 f4       	brne	.+20     	; 0xe2c <main+0x3c6>
						gripStepper.enable();
     e18:	85 e3       	ldi	r24, 0x35	; 53
     e1a:	90 e2       	ldi	r25, 0x20	; 32
     e1c:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN11stepperInfo6enableEv>
						gripStepper.processCommand(RELEASE);
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	85 e3       	ldi	r24, 0x35	; 53
     e26:	90 e2       	ldi	r25, 0x20	; 32
     e28:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_ZN11stepperInfo14processCommandEi>

					}
				}
				
				IsPacketToParse = false;
     e2c:	10 92 28 20 	sts	0x2028, r1
				ERROR_CLR();
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	80 93 46 06 	sts	0x0646, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     e36:	d7 01       	movw	r26, r14
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	8c 91       	ld	r24, X
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	85 ff       	sbrs	r24, 5
     e40:	fa cf       	rjmp	.-12     	; 0xe36 <main+0x3d0>
				USART_PutChar(&USARTC0, 255);
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	8c 93       	st	X, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     e46:	f7 01       	movw	r30, r14
     e48:	81 81       	ldd	r24, Z+1	; 0x01
     e4a:	85 ff       	sbrs	r24, 5
     e4c:	fc cf       	rjmp	.-8      	; 0xe46 <main+0x3e0>
				USART_PutChar(&USARTC0, 0b00000010 | CHECK_GRIP_CLOSE());
     e4e:	d8 01       	movw	r26, r16
     e50:	18 96       	adiw	r26, 0x08	; 8
     e52:	8c 91       	ld	r24, X
     e54:	83 fd       	sbrc	r24, 3
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <main+0x3f6>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <main+0x3f8>
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	f7 01       	movw	r30, r14
     e60:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     e62:	d7 01       	movw	r26, r14
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	8c 91       	ld	r24, X
     e68:	11 97       	sbiw	r26, 0x01	; 1
     e6a:	85 ff       	sbrs	r24, 5
     e6c:	fa cf       	rjmp	.-12     	; 0xe62 <main+0x3fc>
				USART_PutChar(&USARTC0,255);
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	8c 93       	st	X, r24
				bufferIndex = 0;
     e72:	10 92 25 20 	sts	0x2025, r1
				TimePrevious = TimeSinceInit;
     e76:	80 91 21 20 	lds	r24, 0x2021
     e7a:	90 91 22 20 	lds	r25, 0x2022
     e7e:	a0 91 23 20 	lds	r26, 0x2023
     e82:	b0 91 24 20 	lds	r27, 0x2024
     e86:	80 93 1d 20 	sts	0x201D, r24
     e8a:	90 93 1e 20 	sts	0x201E, r25
     e8e:	a0 93 1f 20 	sts	0x201F, r26
     e92:	b0 93 20 20 	sts	0x2020, r27
     e96:	a1 ce       	rjmp	.-702    	; 0xbda <main+0x174>

00000e98 <__vector_77>:
		}
	}

}

ISR(TCD0_OVF_vect){
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	8f 93       	push	r24
     ea4:	9f 93       	push	r25
     ea6:	af 93       	push	r26
     ea8:	bf 93       	push	r27
	TimeSinceInit++;
     eaa:	80 91 21 20 	lds	r24, 0x2021
     eae:	90 91 22 20 	lds	r25, 0x2022
     eb2:	a0 91 23 20 	lds	r26, 0x2023
     eb6:	b0 91 24 20 	lds	r27, 0x2024
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	a1 1d       	adc	r26, r1
     ebe:	b1 1d       	adc	r27, r1
     ec0:	80 93 21 20 	sts	0x2021, r24
     ec4:	90 93 22 20 	sts	0x2022, r25
     ec8:	a0 93 23 20 	sts	0x2023, r26
     ecc:	b0 93 24 20 	sts	0x2024, r27
}
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <_GLOBAL__sub_I_swap>:

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     ee2:	84 e5       	ldi	r24, 0x54	; 84
     ee4:	90 e2       	ldi	r25, 0x20	; 32
     ee6:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     eea:	8c e3       	ldi	r24, 0x3C	; 60
     eec:	90 e2       	ldi	r25, 0x20	; 32
     eee:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     ef2:	85 e3       	ldi	r24, 0x35	; 53
     ef4:	90 e2       	ldi	r25, 0x20	; 32
     ef6:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     efa:	89 e2       	ldi	r24, 0x29	; 41
     efc:	90 e2       	ldi	r25, 0x20	; 32
     efe:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN13rotateStepperC1Ev>
     f02:	08 95       	ret

00000f04 <_GLOBAL__sub_D_swap>:
     f04:	89 e2       	ldi	r24, 0x29	; 41
     f06:	90 e2       	ldi	r25, 0x20	; 32
     f08:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN13rotateStepperD1Ev>
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     f0c:	85 e3       	ldi	r24, 0x35	; 53
     f0e:	90 e2       	ldi	r25, 0x20	; 32
     f10:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN11stepperInfoD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
     f14:	8c e3       	ldi	r24, 0x3C	; 60
     f16:	90 e2       	ldi	r25, 0x20	; 32
     f18:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN9motorInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     f1c:	84 e5       	ldi	r24, 0x54	; 84
     f1e:	90 e2       	ldi	r25, 0x20	; 32
     f20:	0e 94 b1 07 	call	0xf62	; 0xf62 <_ZN9motorInfoD1Ev>
     f24:	08 95       	ret

00000f26 <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     f26:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     f28:	12 82       	std	Z+2, r1	; 0x02
     f2a:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	80 83       	st	Z, r24
     f32:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .2;  //Needs calibration
     f34:	4d ec       	ldi	r20, 0xCD	; 205
     f36:	5c ec       	ldi	r21, 0xCC	; 204
     f38:	6c e4       	ldi	r22, 0x4C	; 76
     f3a:	7e e3       	ldi	r23, 0x3E	; 62
     f3c:	44 83       	std	Z+4, r20	; 0x04
     f3e:	55 83       	std	Z+5, r21	; 0x05
     f40:	66 83       	std	Z+6, r22	; 0x06
     f42:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	60 e4       	ldi	r22, 0x40	; 64
     f4a:	7f e3       	ldi	r23, 0x3F	; 63
     f4c:	40 87       	std	Z+8, r20	; 0x08
     f4e:	51 87       	std	Z+9, r21	; 0x09
     f50:	62 87       	std	Z+10, r22	; 0x0a
     f52:	73 87       	std	Z+11, r23	; 0x0b
	speed = 100;
     f54:	84 e6       	ldi	r24, 0x64	; 100
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	84 87       	std	Z+12, r24	; 0x0c
     f5a:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     f5c:	16 86       	std	Z+14, r1	; 0x0e
     f5e:	17 86       	std	Z+15, r1	; 0x0f
     f60:	08 95       	ret

00000f62 <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     f62:	08 95       	ret

00000f64 <_ZN9motorInfo6enableEv>:
	
} //~motorInfo


void motorInfo::enable(){
	enabled = 1;
     f64:	21 e0       	ldi	r18, 0x01	; 1
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	26 87       	std	Z+14, r18	; 0x0e
     f6c:	37 87       	std	Z+15, r19	; 0x0f
     f6e:	08 95       	ret

00000f70 <_ZN9motorInfo7disableEv>:
}

void motorInfo::disable(){
	enabled = 0;
     f70:	fc 01       	movw	r30, r24
     f72:	16 86       	std	Z+14, r1	; 0x0e
     f74:	17 86       	std	Z+15, r1	; 0x0f
     f76:	08 95       	ret

00000f78 <_ZN9motorInfo10setDesiredEf>:
}


void motorInfo::setDesired(float desired){
	desiredPos = desired; //Mutate desiredPos
     f78:	fc 01       	movw	r30, r24
     f7a:	44 8b       	std	Z+20, r20	; 0x14
     f7c:	55 8b       	std	Z+21, r21	; 0x15
     f7e:	66 8b       	std	Z+22, r22	; 0x16
     f80:	77 8b       	std	Z+23, r23	; 0x17
     f82:	08 95       	ret

00000f84 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     f84:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     f86:	45 e8       	ldi	r20, 0x85	; 133
     f88:	5b e2       	ldi	r21, 0x2B	; 43
     f8a:	61 e8       	ldi	r22, 0x81	; 129
     f8c:	73 e4       	ldi	r23, 0x43	; 67
     f8e:	44 83       	std	Z+4, r20	; 0x04
     f90:	55 83       	std	Z+5, r21	; 0x05
     f92:	66 83       	std	Z+6, r22	; 0x06
     f94:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	60 e8       	ldi	r22, 0x80	; 128
     f9c:	7f eb       	ldi	r23, 0xBF	; 191
     f9e:	40 83       	st	Z, r20
     fa0:	51 83       	std	Z+1, r21	; 0x01
     fa2:	62 83       	std	Z+2, r22	; 0x02
     fa4:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     fa6:	10 86       	std	Z+8, r1	; 0x08
     fa8:	11 86       	std	Z+9, r1	; 0x09
     faa:	08 95       	ret

00000fac <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     fac:	08 95       	ret

00000fae <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	e0 e6       	ldi	r30, 0x60	; 96
     fb8:	f6 e0       	ldi	r31, 0x06	; 6
     fba:	86 83       	std	Z+6, r24	; 0x06

	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     fc0:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		while(!CHECK_ISROVING());
     fc2:	e0 e0       	ldi	r30, 0x00	; 0
     fc4:	f6 e0       	ldi	r31, 0x06	; 6
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     fc6:	a0 e6       	ldi	r26, 0x60	; 96
     fc8:	b6 e0       	ldi	r27, 0x06	; 6
     fca:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     fcc:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		while(!CHECK_ISROVING());
     fce:	80 85       	ldd	r24, Z+8	; 0x08
     fd0:	84 ff       	sbrs	r24, 4
     fd2:	fd cf       	rjmp	.-6      	; 0xfce <_ZN13rotateStepper13calibrateBaseEv+0x20>
		calButtonState = CHECK_CAL();
     fd4:	80 85       	ldd	r24, Z+8	; 0x08

		if(calButtonState && !calFirstPress){
     fd6:	82 ff       	sbrs	r24, 2
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <_ZN13rotateStepper13calibrateBaseEv+0x4c>
     fda:	21 11       	cpse	r18, r1
     fdc:	10 c0       	rjmp	.+32     	; 0xffe <_ZN13rotateStepper13calibrateBaseEv+0x50>
			
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     fde:	15 96       	adiw	r26, 0x05	; 5
     fe0:	3c 93       	st	X, r19
     fe2:	15 97       	sbiw	r26, 0x05	; 5
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	4f e2       	ldi	r20, 0x2F	; 47
     fe8:	85 e7       	ldi	r24, 0x75	; 117
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	40 40       	sbci	r20, 0x00	; 0
     fee:	80 40       	sbci	r24, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <_ZN13rotateStepper13calibrateBaseEv+0x46>
     ff4:	00 00       	nop
		while(!CHECK_ISROVING());
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			
			calFirstPress = true;
     ff6:	23 2f       	mov	r18, r19
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <_ZN13rotateStepper13calibrateBaseEv+0x50>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(1200);  //For gracefulness
		}
		
		if(calFirstPress == true)
     ffa:	22 23       	and	r18, r18
     ffc:	41 f0       	breq	.+16     	; 0x100e <_ZN13rotateStepper13calibrateBaseEv+0x60>
			++stepCount;
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
    1002:	67 39       	cpi	r22, 0x97	; 151
    1004:	71 05       	cpc	r23, r1
    1006:	1c f0       	brlt	.+6      	; 0x100e <_ZN13rotateStepper13calibrateBaseEv+0x60>
    1008:	80 85       	ldd	r24, Z+8	; 0x08
    100a:	82 fd       	sbrc	r24, 2
    100c:	13 c0       	rjmp	.+38     	; 0x1034 <_ZN13rotateStepper13calibrateBaseEv+0x86>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
    100e:	16 96       	adiw	r26, 0x06	; 6
    1010:	5c 93       	st	X, r21
    1012:	16 97       	sbiw	r26, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1014:	8f e7       	ldi	r24, 0x7F	; 127
    1016:	95 e2       	ldi	r25, 0x25	; 37
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <_ZN13rotateStepper13calibrateBaseEv+0x6a>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <_ZN13rotateStepper13calibrateBaseEv+0x70>
    101e:	00 00       	nop
		_delay_us(1200);
		MD2_STEP_SET();
    1020:	15 96       	adiw	r26, 0x05	; 5
    1022:	5c 93       	st	X, r21
    1024:	15 97       	sbiw	r26, 0x05	; 5
    1026:	8f e7       	ldi	r24, 0x7F	; 127
    1028:	95 e2       	ldi	r25, 0x25	; 37
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <_ZN13rotateStepper13calibrateBaseEv+0x7c>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <_ZN13rotateStepper13calibrateBaseEv+0x82>
    1030:	00 00       	nop
    1032:	cd cf       	rjmp	.-102    	; 0xfce <_ZN13rotateStepper13calibrateBaseEv+0x20>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	e0 e6       	ldi	r30, 0x60	; 96
    1038:	f6 e0       	ldi	r31, 0x06	; 6
    103a:	86 83       	std	Z+6, r24	; 0x06
    103c:	8f e7       	ldi	r24, 0x7F	; 127
    103e:	95 e2       	ldi	r25, 0x25	; 37
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <_ZN13rotateStepper13calibrateBaseEv+0x92>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <_ZN13rotateStepper13calibrateBaseEv+0x98>
    1046:	00 00       	nop
		_delay_us(1200);
		MD2_STEP_SET();
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	85 83       	std	Z+5, r24	; 0x05
    104c:	8f e7       	ldi	r24, 0x7F	; 127
    104e:	95 e2       	ldi	r25, 0x25	; 37
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <_ZN13rotateStepper13calibrateBaseEv+0xa2>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <_ZN13rotateStepper13calibrateBaseEv+0xa8>
    1056:	00 00       	nop
		_delay_us(1200);	
		
	}	
	currentAngle = 0;
    1058:	18 86       	std	Y+8, r1	; 0x08
    105a:	19 86       	std	Y+9, r1	; 0x09
	multiplier = stepCount / calSpan;
    105c:	88 27       	eor	r24, r24
    105e:	77 fd       	sbrc	r23, 7
    1060:	80 95       	com	r24
    1062:	98 2f       	mov	r25, r24
    1064:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	4e 81       	ldd	r20, Y+6	; 0x06
    106e:	5f 81       	ldd	r21, Y+7	; 0x07
    1070:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
    1074:	68 83       	st	Y, r22
    1076:	79 83       	std	Y+1, r23	; 0x01
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	9b 83       	std	Y+3, r25	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    107c:	9f ef       	ldi	r25, 0xFF	; 255
    107e:	2f e2       	ldi	r18, 0x2F	; 47
    1080:	45 e7       	ldi	r20, 0x75	; 117
    1082:	91 50       	subi	r25, 0x01	; 1
    1084:	20 40       	sbci	r18, 0x00	; 0
    1086:	40 40       	sbci	r20, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <_ZN13rotateStepper13calibrateBaseEv+0xd4>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <_ZN13rotateStepper13calibrateBaseEv+0xde>
    108c:	00 00       	nop
	_delay_ms(1200);  //For gracefulness
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
    109c:	18 16       	cp	r1, r24
    109e:	19 06       	cpc	r1, r25
    10a0:	2c f4       	brge	.+10     	; 0x10ac <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	e0 e6       	ldi	r30, 0x60	; 96
    10a6:	f6 e0       	ldi	r31, 0x06	; 6
    10a8:	26 83       	std	Z+6, r18	; 0x06
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	e0 e6       	ldi	r30, 0x60	; 96
    10b0:	f6 e0       	ldi	r31, 0x06	; 6
    10b2:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
    10b4:	bc 01       	movw	r22, r24
    10b6:	99 23       	and	r25, r25
    10b8:	24 f4       	brge	.+8      	; 0x10c2 <_ZN13rotateStepper8moveBaseEi+0x2e>
    10ba:	66 27       	eor	r22, r22
    10bc:	77 27       	eor	r23, r23
    10be:	68 1b       	sub	r22, r24
    10c0:	79 0b       	sbc	r23, r25
    10c2:	88 27       	eor	r24, r24
    10c4:	77 fd       	sbrc	r23, 7
    10c6:	80 95       	com	r24
    10c8:	98 2f       	mov	r25, r24
    10ca:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
    10ce:	28 81       	ld	r18, Y
    10d0:	39 81       	ldd	r19, Y+1	; 0x01
    10d2:	4a 81       	ldd	r20, Y+2	; 0x02
    10d4:	5b 81       	ldd	r21, Y+3	; 0x03
    10d6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__mulsf3>
    10da:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
    10de:	16 16       	cp	r1, r22
    10e0:	17 06       	cpc	r1, r23
    10e2:	04 f5       	brge	.+64     	; 0x1124 <_ZN13rotateStepper8moveBaseEi+0x90>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
		while(!CHECK_ISROVING());  //e-stop check
    10e8:	e0 e0       	ldi	r30, 0x00	; 0
    10ea:	f6 e0       	ldi	r31, 0x06	; 6
		
		MD2_STEP_CLR();
    10ec:	a0 e6       	ldi	r26, 0x60	; 96
    10ee:	b6 e0       	ldi	r27, 0x06	; 6
    10f0:	32 e0       	ldi	r19, 0x02	; 2
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
		while(!CHECK_ISROVING());  //e-stop check
    10f2:	20 85       	ldd	r18, Z+8	; 0x08
    10f4:	24 ff       	sbrs	r18, 4
    10f6:	fd cf       	rjmp	.-6      	; 0x10f2 <_ZN13rotateStepper8moveBaseEi+0x5e>
		
		MD2_STEP_CLR();
    10f8:	16 96       	adiw	r26, 0x06	; 6
    10fa:	3c 93       	st	X, r19
    10fc:	16 97       	sbiw	r26, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10fe:	cf ef       	ldi	r28, 0xFF	; 255
    1100:	d8 e1       	ldi	r29, 0x18	; 24
    1102:	21 97       	sbiw	r28, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <_ZN13rotateStepper8moveBaseEi+0x6e>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <_ZN13rotateStepper8moveBaseEi+0x74>
    1108:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
    110a:	15 96       	adiw	r26, 0x05	; 5
    110c:	3c 93       	st	X, r19
    110e:	15 97       	sbiw	r26, 0x05	; 5
    1110:	cf e5       	ldi	r28, 0x5F	; 95
    1112:	d2 e2       	ldi	r29, 0x22	; 34
    1114:	21 97       	sbiw	r28, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <_ZN13rotateStepper8moveBaseEi+0x80>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <_ZN13rotateStepper8moveBaseEi+0x86>
    111a:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	86 17       	cp	r24, r22
    1120:	97 07       	cpc	r25, r23
    1122:	39 f7       	brne	.-50     	; 0x10f2 <_ZN13rotateStepper8moveBaseEi+0x5e>
		_delay_us(800);
		MD2_STEP_SET();
		_delay_us(1100);
	}
	
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
    1138:	88 27       	eor	r24, r24
    113a:	77 fd       	sbrc	r23, 7
    113c:	80 95       	com	r24
    113e:	98 2f       	mov	r25, r24
    1140:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatsisf>
    1144:	2b e7       	ldi	r18, 0x7B	; 123
    1146:	34 e1       	ldi	r19, 0x14	; 20
    1148:	48 e0       	ldi	r20, 0x08	; 8
    114a:	52 e4       	ldi	r21, 0x42	; 66
    114c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__addsf3>
    1150:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
    1154:	6b 01       	movw	r12, r22
    1156:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
    1158:	88 85       	ldd	r24, Y+8	; 0x08
    115a:	99 85       	ldd	r25, Y+9	; 0x09
    115c:	b6 01       	movw	r22, r12
    115e:	68 1b       	sub	r22, r24
    1160:	79 0b       	sbc	r23, r25
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
    1168:	c8 86       	std	Y+8, r12	; 0x08
    116a:	d9 86       	std	Y+9, r13	; 0x09
	
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
    117a:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	11 97       	sbiw	r26, 0x01	; 1
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	85 ff       	sbrs	r24, 5
    1186:	fd cf       	rjmp	.-6      	; 0x1182 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    118c:	ed 91       	ld	r30, X+
    118e:	fc 91       	ld	r31, X
    1190:	11 97       	sbiw	r26, 0x01	; 1
    1192:	81 81       	ldd	r24, Z+1	; 0x01
    1194:	85 ff       	sbrs	r24, 5
    1196:	fd cf       	rjmp	.-6      	; 0x1192 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
    1198:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	11 97       	sbiw	r26, 0x01	; 1
    11a0:	81 81       	ldd	r24, Z+1	; 0x01
    11a2:	85 ff       	sbrs	r24, 5
    11a4:	fd cf       	rjmp	.-6      	; 0x11a0 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
    11a6:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    11a8:	ed 91       	ld	r30, X+
    11aa:	fc 91       	ld	r31, X
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	85 ff       	sbrs	r24, 5
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
    11b2:	64 0f       	add	r22, r20
    11b4:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
    11b6:	60 83       	st	Z, r22
    11b8:	08 95       	ret

000011ba <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	ec 01       	movw	r28, r24
    11c4:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
    11c6:	6f 37       	cpi	r22, 0x7F	; 127
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
    11ca:	6f 37       	cpi	r22, 0x7F	; 127
    11cc:	20 f4       	brcc	.+8      	; 0x11d6 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	0b c0       	rjmp	.+22     	; 0x11ec <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
    11d6:	66 23       	and	r22, r22
    11d8:	3c f4       	brge	.+14     	; 0x11e8 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
    11da:	41 e8       	ldi	r20, 0x81	; 129
    11dc:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
    11e2:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
    11e8:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
    11ea:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
    11ec:	8f 37       	cpi	r24, 0x7F	; 127
    11ee:	61 f0       	breq	.+24     	; 0x1208 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
    11f0:	8f 37       	cpi	r24, 0x7F	; 127
    11f2:	20 f4       	brcc	.+8      	; 0x11fc <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
    11f4:	0f e7       	ldi	r16, 0x7F	; 127
    11f6:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
    11f8:	15 e0       	ldi	r17, 0x05	; 5
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
    11fc:	88 23       	and	r24, r24
    11fe:	3c f4       	brge	.+14     	; 0x120e <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
    1200:	01 e8       	ldi	r16, 0x81	; 129
    1202:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
    1204:	14 e0       	ldi	r17, 0x04	; 4
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
    1208:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
    120a:	14 e0       	ldi	r17, 0x04	; 4
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
    120e:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
    1210:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
    1212:	ce 01       	movw	r24, r28
    1214:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
    1218:	40 2f       	mov	r20, r16
    121a:	61 2f       	mov	r22, r17
    121c:	ce 01       	movw	r24, r28
    121e:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN10Sabertooth12SendDriveCmdEcc>
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	64 e0       	ldi	r22, 0x04	; 4
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN10Sabertooth12SendDriveCmdEcc>
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
    1250:	68 83       	st	Y, r22
    1252:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
    1254:	4a 83       	std	Y+2, r20	; 0x02
    1256:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
    1258:	88 e0       	ldi	r24, 0x08	; 8
    125a:	fa 01       	movw	r30, r20
    125c:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
    125e:	e8 81       	ld	r30, Y
    1260:	f9 81       	ldd	r31, Y+1	; 0x01
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
    1266:	e8 81       	ld	r30, Y
    1268:	f9 81       	ldd	r31, Y+1	; 0x01
    126a:	8f ec       	ldi	r24, 0xCF	; 207
    126c:	86 83       	std	Z+6, r24	; 0x06
    126e:	e8 81       	ld	r30, Y
    1270:	f9 81       	ldd	r31, Y+1	; 0x01
    1272:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
    1274:	e8 81       	ld	r30, Y
    1276:	f9 81       	ldd	r31, Y+1	; 0x01
    1278:	84 81       	ldd	r24, Z+4	; 0x04
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    127e:	ff ef       	ldi	r31, 0xFF	; 255
    1280:	23 ec       	ldi	r18, 0xC3	; 195
    1282:	89 e0       	ldi	r24, 0x09	; 9
    1284:	f1 50       	subi	r31, 0x01	; 1
    1286:	20 40       	sbci	r18, 0x00	; 0
    1288:	80 40       	sbci	r24, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
    128e:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
    1290:	e8 81       	ld	r30, Y
    1292:	f9 81       	ldd	r31, Y+1	; 0x01
    1294:	8a ea       	ldi	r24, 0xAA	; 170
    1296:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
    1298:	44 e1       	ldi	r20, 0x14	; 20
    129a:	6e e0       	ldi	r22, 0x0E	; 14
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
    12a2:	ce 01       	movw	r24, r28
    12a4:	0e 94 16 09 	call	0x122c	; 0x122c <_ZN10Sabertooth7StopAllEv>
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <_ZN11stepperInfoC1Ev>:
};

extern void SendStringPC(char *stufftosend);

// default constructor
stepperInfo::stepperInfo() {
    12ae:	fc 01       	movw	r30, r24
	enabled = 0;
    12b0:	10 82       	st	Z, r1
    12b2:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	84 83       	std	Z+4, r24	; 0x04
    12c2:	95 83       	std	Z+5, r25	; 0x05
    12c4:	08 95       	ret

000012c6 <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
    12c6:	08 95       	ret

000012c8 <_ZN11stepperInfo14processCommandEi>:
{
} //~stepperInfo


//Used for the gripping stepper
void stepperInfo::processCommand(int cmd){
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
	if(!enabled)
    12cc:	ec 01       	movw	r28, r24
    12ce:	28 81       	ld	r18, Y
    12d0:	39 81       	ldd	r19, Y+1	; 0x01
    12d2:	23 2b       	or	r18, r19
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <_ZN11stepperInfo14processCommandEi+0x10>
    12d6:	94 c0       	rjmp	.+296    	; 0x1400 <_ZN11stepperInfo14processCommandEi+0x138>
		return;  //TODO: MAKE BETTER
		
	if(cmd != GRIP && cmd != RELEASE)
    12d8:	62 30       	cpi	r22, 0x02	; 2
    12da:	71 05       	cpc	r23, r1
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <_ZN11stepperInfo14processCommandEi+0x18>
    12de:	90 c0       	rjmp	.+288    	; 0x1400 <_ZN11stepperInfo14processCommandEi+0x138>
		return;
		
	if(cmd == currentState)
    12e0:	2a 81       	ldd	r18, Y+2	; 0x02
    12e2:	3b 81       	ldd	r19, Y+3	; 0x03
    12e4:	26 17       	cp	r18, r22
    12e6:	37 07       	cpc	r19, r23
    12e8:	09 f4       	brne	.+2      	; 0x12ec <_ZN11stepperInfo14processCommandEi+0x24>
    12ea:	8a c0       	rjmp	.+276    	; 0x1400 <_ZN11stepperInfo14processCommandEi+0x138>
		return;
		
	currentState = cmd;
    12ec:	6a 83       	std	Y+2, r22	; 0x02
    12ee:	7b 83       	std	Y+3, r23	; 0x03
	//GET DIRECTION
	//CLR IS OUT
	
	//SET is grip
	//CLR is release
	if(cmd == GRIP)
    12f0:	61 15       	cp	r22, r1
    12f2:	71 05       	cpc	r23, r1
    12f4:	29 f4       	brne	.+10     	; 0x1300 <_ZN11stepperInfo14processCommandEi+0x38>
		MD1_DIR_SET();
    12f6:	20 e1       	ldi	r18, 0x10	; 16
    12f8:	e0 e6       	ldi	r30, 0x60	; 96
    12fa:	f6 e0       	ldi	r31, 0x06	; 6
    12fc:	25 83       	std	Z+5, r18	; 0x05
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <_ZN11stepperInfo14processCommandEi+0x46>
	else if (cmd == RELEASE)
    1300:	61 30       	cpi	r22, 0x01	; 1
    1302:	71 05       	cpc	r23, r1
    1304:	21 f4       	brne	.+8      	; 0x130e <_ZN11stepperInfo14processCommandEi+0x46>
		MD1_DIR_CLR();
    1306:	20 e1       	ldi	r18, 0x10	; 16
    1308:	e0 e6       	ldi	r30, 0x60	; 96
    130a:	f6 e0       	ldi	r31, 0x06	; 6
    130c:	26 83       	std	Z+6, r18	; 0x06
		
	if(!init){
    130e:	fc 01       	movw	r30, r24
    1310:	24 81       	ldd	r18, Z+4	; 0x04
    1312:	35 81       	ldd	r19, Z+5	; 0x05
    1314:	23 2b       	or	r18, r19
    1316:	11 f5       	brne	.+68     	; 0x135c <_ZN11stepperInfo14processCommandEi+0x94>
    1318:	28 e8       	ldi	r18, 0x88	; 136
    131a:	33 e1       	ldi	r19, 0x13	; 19
		for(int i = 0; i < 5000; ++i){
			
			while(!CHECK_ISROVING());  //e-stop check
    131c:	e0 e0       	ldi	r30, 0x00	; 0
    131e:	f6 e0       	ldi	r31, 0x06	; 6

			MD1_STEP_SET();
    1320:	a0 e6       	ldi	r26, 0x60	; 96
    1322:	b6 e0       	ldi	r27, 0x06	; 6
    1324:	50 e2       	ldi	r21, 0x20	; 32
		MD1_DIR_CLR();
		
	if(!init){
		for(int i = 0; i < 5000; ++i){
			
			while(!CHECK_ISROVING());  //e-stop check
    1326:	40 85       	ldd	r20, Z+8	; 0x08
    1328:	44 ff       	sbrs	r20, 4
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <_ZN11stepperInfo14processCommandEi+0x5e>

			MD1_STEP_SET();
    132c:	15 96       	adiw	r26, 0x05	; 5
    132e:	5c 93       	st	X, r21
    1330:	15 97       	sbiw	r26, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1332:	cf e8       	ldi	r28, 0x8F	; 143
    1334:	d1 e0       	ldi	r29, 0x01	; 1
    1336:	21 97       	sbiw	r28, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <_ZN11stepperInfo14processCommandEi+0x6e>
    133a:	00 c0       	rjmp	.+0      	; 0x133c <_ZN11stepperInfo14processCommandEi+0x74>
    133c:	00 00       	nop
			_delay_us(50);
			MD1_STEP_CLR();
    133e:	16 96       	adiw	r26, 0x06	; 6
    1340:	5c 93       	st	X, r21
    1342:	16 97       	sbiw	r26, 0x06	; 6
    1344:	cf e9       	ldi	r28, 0x9F	; 159
    1346:	df e0       	ldi	r29, 0x0F	; 15
    1348:	21 97       	sbiw	r28, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <_ZN11stepperInfo14processCommandEi+0x80>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <_ZN11stepperInfo14processCommandEi+0x86>
    134e:	00 00       	nop
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	31 09       	sbc	r19, r1
		MD1_DIR_SET();
	else if (cmd == RELEASE)
		MD1_DIR_CLR();
		
	if(!init){
		for(int i = 0; i < 5000; ++i){
    1354:	21 15       	cp	r18, r1
    1356:	31 05       	cpc	r19, r1
    1358:	31 f7       	brne	.-52     	; 0x1326 <_ZN11stepperInfo14processCommandEi+0x5e>
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_ZN11stepperInfo14processCommandEi+0x9a>
			MD1_STEP_CLR();
			_delay_us(500);
		}
	}
	else {
		init = 0;
    135c:	fc 01       	movw	r30, r24
    135e:	14 82       	std	Z+4, r1	; 0x04
    1360:	15 82       	std	Z+5, r1	; 0x05
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	if(cmd == GRIP){
    1362:	61 15       	cp	r22, r1
    1364:	71 05       	cpc	r23, r1
    1366:	19 f5       	brne	.+70     	; 0x13ae <_ZN11stepperInfo14processCommandEi+0xe6>
		while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	56 e0       	ldi	r21, 0x06	; 6
    136c:	e0 e0       	ldi	r30, 0x00	; 0
    136e:	f6 e0       	ldi	r31, 0x06	; 6
			while(!CHECK_ISROVING());  //e-stop check
			MD1_STEP_SET();
    1370:	a0 e6       	ldi	r26, 0x60	; 96
    1372:	b6 e0       	ldi	r27, 0x06	; 6
    1374:	30 e2       	ldi	r19, 0x20	; 32
    1376:	13 c0       	rjmp	.+38     	; 0x139e <_ZN11stepperInfo14processCommandEi+0xd6>
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	if(cmd == GRIP){
		while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
			while(!CHECK_ISROVING());  //e-stop check
    1378:	20 85       	ldd	r18, Z+8	; 0x08
    137a:	24 ff       	sbrs	r18, 4
    137c:	fd cf       	rjmp	.-6      	; 0x1378 <_ZN11stepperInfo14processCommandEi+0xb0>
			MD1_STEP_SET();
    137e:	15 96       	adiw	r26, 0x05	; 5
    1380:	3c 93       	st	X, r19
    1382:	15 97       	sbiw	r26, 0x05	; 5
    1384:	25 ed       	ldi	r18, 0xD5	; 213
    1386:	2a 95       	dec	r18
    1388:	f1 f7       	brne	.-4      	; 0x1386 <_ZN11stepperInfo14processCommandEi+0xbe>
    138a:	00 00       	nop
			_delay_us(20);
			MD1_STEP_CLR();
    138c:	16 96       	adiw	r26, 0x06	; 6
    138e:	3c 93       	st	X, r19
    1390:	16 97       	sbiw	r26, 0x06	; 6
    1392:	cf e3       	ldi	r28, 0x3F	; 63
    1394:	d1 e0       	ldi	r29, 0x01	; 1
    1396:	21 97       	sbiw	r28, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <_ZN11stepperInfo14processCommandEi+0xce>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <_ZN11stepperInfo14processCommandEi+0xd4>
    139c:	00 00       	nop
		init = 0;
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	if(cmd == GRIP){
		while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    139e:	ea 01       	movw	r28, r20
    13a0:	28 85       	ldd	r18, Y+8	; 0x08
    13a2:	23 fd       	sbrc	r18, 3
    13a4:	2a c0       	rjmp	.+84     	; 0x13fa <_ZN11stepperInfo14processCommandEi+0x132>
    13a6:	20 85       	ldd	r18, Z+8	; 0x08
    13a8:	23 ff       	sbrs	r18, 3
    13aa:	27 c0       	rjmp	.+78     	; 0x13fa <_ZN11stepperInfo14processCommandEi+0x132>
    13ac:	e5 cf       	rjmp	.-54     	; 0x1378 <_ZN11stepperInfo14processCommandEi+0xb0>
			_delay_us(20);
			MD1_STEP_CLR();
			_delay_us(40);
		}
		
	}else if(cmd == RELEASE){
    13ae:	61 30       	cpi	r22, 0x01	; 1
    13b0:	71 05       	cpc	r23, r1
    13b2:	19 f5       	brne	.+70     	; 0x13fa <_ZN11stepperInfo14processCommandEi+0x132>
		while(!CHECK_GRIP_LIMIT()){
    13b4:	e0 e2       	ldi	r30, 0x20	; 32
    13b6:	f6 e0       	ldi	r31, 0x06	; 6
    13b8:	20 85       	ldd	r18, Z+8	; 0x08
    13ba:	23 fd       	sbrc	r18, 3
    13bc:	1e c0       	rjmp	.+60     	; 0x13fa <_ZN11stepperInfo14processCommandEi+0x132>
			while(!CHECK_ISROVING());  //e-stop check
    13be:	e0 e0       	ldi	r30, 0x00	; 0
    13c0:	f6 e0       	ldi	r31, 0x06	; 6
			MD1_STEP_SET();
    13c2:	a0 e6       	ldi	r26, 0x60	; 96
    13c4:	b6 e0       	ldi	r27, 0x06	; 6
    13c6:	30 e2       	ldi	r19, 0x20	; 32
			MD1_STEP_CLR();
			_delay_us(40);
		}
		
	}else if(cmd == RELEASE){
		while(!CHECK_GRIP_LIMIT()){
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	56 e0       	ldi	r21, 0x06	; 6
			while(!CHECK_ISROVING());  //e-stop check
    13cc:	20 85       	ldd	r18, Z+8	; 0x08
    13ce:	24 ff       	sbrs	r18, 4
    13d0:	fd cf       	rjmp	.-6      	; 0x13cc <_ZN11stepperInfo14processCommandEi+0x104>
			MD1_STEP_SET();
    13d2:	15 96       	adiw	r26, 0x05	; 5
    13d4:	3c 93       	st	X, r19
    13d6:	15 97       	sbiw	r26, 0x05	; 5
    13d8:	d5 ed       	ldi	r29, 0xD5	; 213
    13da:	da 95       	dec	r29
    13dc:	f1 f7       	brne	.-4      	; 0x13da <_ZN11stepperInfo14processCommandEi+0x112>
    13de:	00 00       	nop
			_delay_us(20);
			MD1_STEP_CLR();
    13e0:	16 96       	adiw	r26, 0x06	; 6
    13e2:	3c 93       	st	X, r19
    13e4:	16 97       	sbiw	r26, 0x06	; 6
    13e6:	cf e3       	ldi	r28, 0x3F	; 63
    13e8:	d1 e0       	ldi	r29, 0x01	; 1
    13ea:	21 97       	sbiw	r28, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <_ZN11stepperInfo14processCommandEi+0x122>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <_ZN11stepperInfo14processCommandEi+0x128>
    13f0:	00 00       	nop
			MD1_STEP_CLR();
			_delay_us(40);
		}
		
	}else if(cmd == RELEASE){
		while(!CHECK_GRIP_LIMIT()){
    13f2:	ea 01       	movw	r28, r20
    13f4:	28 85       	ldd	r18, Y+8	; 0x08
    13f6:	23 ff       	sbrs	r18, 3
    13f8:	e9 cf       	rjmp	.-46     	; 0x13cc <_ZN11stepperInfo14processCommandEi+0x104>
			_delay_us(20);
			MD1_STEP_CLR();
			_delay_us(40);
		}	
	}	
	enabled = 0;
    13fa:	fc 01       	movw	r30, r24
    13fc:	10 82       	st	Z, r1
    13fe:	11 82       	std	Z+1, r1	; 0x01
	
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <_ZN11stepperInfo6enableEv>:


void stepperInfo::enable(){
	enabled = 1;
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
    140e:	31 83       	std	Z+1, r19	; 0x01
    1410:	08 95       	ret

00001412 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    1412:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    1414:	60 83       	st	Z, r22
    1416:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    1418:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    141a:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
    141c:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
    141e:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
    1420:	15 86       	std	Z+13, r1	; 0x0d
    1422:	08 95       	ret

00001424 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1424:	fc 01       	movw	r30, r24
    1426:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1428:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	29 13       	cpse	r18, r25
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <USART_RXBufferData_Available+0xe>
    1430:	80 e0       	ldi	r24, 0x00	; 0
}
    1432:	08 95       	ret

00001434 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    1434:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1436:	84 85       	ldd	r24, Z+12	; 0x0c
    1438:	df 01       	movw	r26, r30
    143a:	a8 0f       	add	r26, r24
    143c:	b1 1d       	adc	r27, r1
    143e:	13 96       	adiw	r26, 0x03	; 3
    1440:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    1442:	94 85       	ldd	r25, Z+12	; 0x0c
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	93 70       	andi	r25, 0x03	; 3
    1448:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
    144a:	08 95       	ret

0000144c <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    144c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    144e:	83 85       	ldd	r24, Z+11	; 0x0b
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1454:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
    1456:	a0 81       	ld	r26, Z
    1458:	b1 81       	ldd	r27, Z+1	; 0x01
    145a:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
    145c:	89 17       	cp	r24, r25
    145e:	49 f0       	breq	.+18     	; 0x1472 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1460:	93 85       	ldd	r25, Z+11	; 0x0b
    1462:	df 01       	movw	r26, r30
    1464:	a9 0f       	add	r26, r25
    1466:	b1 1d       	adc	r27, r1
    1468:	13 96       	adiw	r26, 0x03	; 3
    146a:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
    146c:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    1472:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    1474:	08 95       	ret

00001476 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    1476:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    1478:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
    147a:	95 85       	ldd	r25, Z+13	; 0x0d
    147c:	98 13       	cpse	r25, r24
    147e:	07 c0       	rjmp	.+14     	; 0x148e <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    1480:	01 90       	ld	r0, Z+
    1482:	f0 81       	ld	r31, Z
    1484:	e0 2d       	mov	r30, r0
    1486:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1488:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    148a:	83 83       	std	Z+3, r24	; 0x03
    148c:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    148e:	86 85       	ldd	r24, Z+14	; 0x0e
    1490:	df 01       	movw	r26, r30
    1492:	a8 0f       	add	r26, r24
    1494:	b1 1d       	adc	r27, r1
    1496:	17 96       	adiw	r26, 0x07	; 7
    1498:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
    149a:	a0 81       	ld	r26, Z
    149c:	b1 81       	ldd	r27, Z+1	; 0x01
    149e:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    14a0:	86 85       	ldd	r24, Z+14	; 0x0e
    14a2:	8f 5f       	subi	r24, 0xFF	; 255
    14a4:	83 70       	andi	r24, 0x03	; 3
    14a6:	86 87       	std	Z+14, r24	; 0x0e
    14a8:	08 95       	ret

000014aa <__subsf3>:
    14aa:	50 58       	subi	r21, 0x80	; 128

000014ac <__addsf3>:
    14ac:	bb 27       	eor	r27, r27
    14ae:	aa 27       	eor	r26, r26
    14b0:	0e d0       	rcall	.+28     	; 0x14ce <__addsf3x>
    14b2:	4d c1       	rjmp	.+666    	; 0x174e <__fp_round>
    14b4:	3e d1       	rcall	.+636    	; 0x1732 <__fp_pscA>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__addsf3+0x18>
    14b8:	43 d1       	rcall	.+646    	; 0x1740 <__fp_pscB>
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__addsf3+0x18>
    14bc:	31 f4       	brne	.+12     	; 0x14ca <__addsf3+0x1e>
    14be:	9f 3f       	cpi	r25, 0xFF	; 255
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <__addsf3+0x1a>
    14c2:	1e f4       	brtc	.+6      	; 0x14ca <__addsf3+0x1e>
    14c4:	33 c1       	rjmp	.+614    	; 0x172c <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x1e>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	29 c1       	rjmp	.+594    	; 0x1720 <__fp_inf>

000014ce <__addsf3x>:
    14ce:	e9 2f       	mov	r30, r25
    14d0:	4f d1       	rcall	.+670    	; 0x1770 <__fp_split3>
    14d2:	80 f3       	brcs	.-32     	; 0x14b4 <__addsf3+0x8>
    14d4:	ba 17       	cp	r27, r26
    14d6:	62 07       	cpc	r22, r18
    14d8:	73 07       	cpc	r23, r19
    14da:	84 07       	cpc	r24, r20
    14dc:	95 07       	cpc	r25, r21
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <__addsf3x+0x18>
    14e0:	71 f4       	brne	.+28     	; 0x14fe <__addsf3x+0x30>
    14e2:	9e f5       	brtc	.+102    	; 0x154a <__addsf3x+0x7c>
    14e4:	67 c1       	rjmp	.+718    	; 0x17b4 <__fp_zero>
    14e6:	0e f4       	brtc	.+2      	; 0x14ea <__addsf3x+0x1c>
    14e8:	e0 95       	com	r30
    14ea:	0b 2e       	mov	r0, r27
    14ec:	ba 2f       	mov	r27, r26
    14ee:	a0 2d       	mov	r26, r0
    14f0:	0b 01       	movw	r0, r22
    14f2:	b9 01       	movw	r22, r18
    14f4:	90 01       	movw	r18, r0
    14f6:	0c 01       	movw	r0, r24
    14f8:	ca 01       	movw	r24, r20
    14fa:	a0 01       	movw	r20, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	ff 27       	eor	r31, r31
    1500:	59 1b       	sub	r21, r25
    1502:	99 f0       	breq	.+38     	; 0x152a <__addsf3x+0x5c>
    1504:	59 3f       	cpi	r21, 0xF9	; 249
    1506:	50 f4       	brcc	.+20     	; 0x151c <__addsf3x+0x4e>
    1508:	50 3e       	cpi	r21, 0xE0	; 224
    150a:	68 f1       	brcs	.+90     	; 0x1566 <__addsf3x+0x98>
    150c:	1a 16       	cp	r1, r26
    150e:	f0 40       	sbci	r31, 0x00	; 0
    1510:	a2 2f       	mov	r26, r18
    1512:	23 2f       	mov	r18, r19
    1514:	34 2f       	mov	r19, r20
    1516:	44 27       	eor	r20, r20
    1518:	58 5f       	subi	r21, 0xF8	; 248
    151a:	f3 cf       	rjmp	.-26     	; 0x1502 <__addsf3x+0x34>
    151c:	46 95       	lsr	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	a7 95       	ror	r26
    1524:	f0 40       	sbci	r31, 0x00	; 0
    1526:	53 95       	inc	r21
    1528:	c9 f7       	brne	.-14     	; 0x151c <__addsf3x+0x4e>
    152a:	7e f4       	brtc	.+30     	; 0x154a <__addsf3x+0x7c>
    152c:	1f 16       	cp	r1, r31
    152e:	ba 0b       	sbc	r27, r26
    1530:	62 0b       	sbc	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba f0       	brmi	.+46     	; 0x1566 <__addsf3x+0x98>
    1538:	91 50       	subi	r25, 0x01	; 1
    153a:	a1 f0       	breq	.+40     	; 0x1564 <__addsf3x+0x96>
    153c:	ff 0f       	add	r31, r31
    153e:	bb 1f       	adc	r27, r27
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	c2 f7       	brpl	.-16     	; 0x1538 <__addsf3x+0x6a>
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <__addsf3x+0x98>
    154a:	ba 0f       	add	r27, r26
    154c:	62 1f       	adc	r22, r18
    154e:	73 1f       	adc	r23, r19
    1550:	84 1f       	adc	r24, r20
    1552:	48 f4       	brcc	.+18     	; 0x1566 <__addsf3x+0x98>
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	9e 3f       	cpi	r25, 0xFE	; 254
    1560:	08 f0       	brcs	.+2      	; 0x1564 <__addsf3x+0x96>
    1562:	b3 cf       	rjmp	.-154    	; 0x14ca <__addsf3+0x1e>
    1564:	93 95       	inc	r25
    1566:	88 0f       	add	r24, r24
    1568:	08 f0       	brcs	.+2      	; 0x156c <__addsf3x+0x9e>
    156a:	99 27       	eor	r25, r25
    156c:	ee 0f       	add	r30, r30
    156e:	97 95       	ror	r25
    1570:	87 95       	ror	r24
    1572:	08 95       	ret

00001574 <__divsf3>:
    1574:	0c d0       	rcall	.+24     	; 0x158e <__divsf3x>
    1576:	eb c0       	rjmp	.+470    	; 0x174e <__fp_round>
    1578:	e3 d0       	rcall	.+454    	; 0x1740 <__fp_pscB>
    157a:	40 f0       	brcs	.+16     	; 0x158c <__divsf3+0x18>
    157c:	da d0       	rcall	.+436    	; 0x1732 <__fp_pscA>
    157e:	30 f0       	brcs	.+12     	; 0x158c <__divsf3+0x18>
    1580:	21 f4       	brne	.+8      	; 0x158a <__divsf3+0x16>
    1582:	5f 3f       	cpi	r21, 0xFF	; 255
    1584:	19 f0       	breq	.+6      	; 0x158c <__divsf3+0x18>
    1586:	cc c0       	rjmp	.+408    	; 0x1720 <__fp_inf>
    1588:	51 11       	cpse	r21, r1
    158a:	15 c1       	rjmp	.+554    	; 0x17b6 <__fp_szero>
    158c:	cf c0       	rjmp	.+414    	; 0x172c <__fp_nan>

0000158e <__divsf3x>:
    158e:	f0 d0       	rcall	.+480    	; 0x1770 <__fp_split3>
    1590:	98 f3       	brcs	.-26     	; 0x1578 <__divsf3+0x4>

00001592 <__divsf3_pse>:
    1592:	99 23       	and	r25, r25
    1594:	c9 f3       	breq	.-14     	; 0x1588 <__divsf3+0x14>
    1596:	55 23       	and	r21, r21
    1598:	b1 f3       	breq	.-20     	; 0x1586 <__divsf3+0x12>
    159a:	95 1b       	sub	r25, r21
    159c:	55 0b       	sbc	r21, r21
    159e:	bb 27       	eor	r27, r27
    15a0:	aa 27       	eor	r26, r26
    15a2:	62 17       	cp	r22, r18
    15a4:	73 07       	cpc	r23, r19
    15a6:	84 07       	cpc	r24, r20
    15a8:	38 f0       	brcs	.+14     	; 0x15b8 <__divsf3_pse+0x26>
    15aa:	9f 5f       	subi	r25, 0xFF	; 255
    15ac:	5f 4f       	sbci	r21, 0xFF	; 255
    15ae:	22 0f       	add	r18, r18
    15b0:	33 1f       	adc	r19, r19
    15b2:	44 1f       	adc	r20, r20
    15b4:	aa 1f       	adc	r26, r26
    15b6:	a9 f3       	breq	.-22     	; 0x15a2 <__divsf3_pse+0x10>
    15b8:	33 d0       	rcall	.+102    	; 0x1620 <__divsf3_pse+0x8e>
    15ba:	0e 2e       	mov	r0, r30
    15bc:	3a f0       	brmi	.+14     	; 0x15cc <__divsf3_pse+0x3a>
    15be:	e0 e8       	ldi	r30, 0x80	; 128
    15c0:	30 d0       	rcall	.+96     	; 0x1622 <__divsf3_pse+0x90>
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	50 40       	sbci	r21, 0x00	; 0
    15c6:	e6 95       	lsr	r30
    15c8:	00 1c       	adc	r0, r0
    15ca:	ca f7       	brpl	.-14     	; 0x15be <__divsf3_pse+0x2c>
    15cc:	29 d0       	rcall	.+82     	; 0x1620 <__divsf3_pse+0x8e>
    15ce:	fe 2f       	mov	r31, r30
    15d0:	27 d0       	rcall	.+78     	; 0x1620 <__divsf3_pse+0x8e>
    15d2:	66 0f       	add	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	bb 1f       	adc	r27, r27
    15da:	26 17       	cp	r18, r22
    15dc:	37 07       	cpc	r19, r23
    15de:	48 07       	cpc	r20, r24
    15e0:	ab 07       	cpc	r26, r27
    15e2:	b0 e8       	ldi	r27, 0x80	; 128
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <__divsf3_pse+0x56>
    15e6:	bb 0b       	sbc	r27, r27
    15e8:	80 2d       	mov	r24, r0
    15ea:	bf 01       	movw	r22, r30
    15ec:	ff 27       	eor	r31, r31
    15ee:	93 58       	subi	r25, 0x83	; 131
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	2a f0       	brmi	.+10     	; 0x15fe <__divsf3_pse+0x6c>
    15f4:	9e 3f       	cpi	r25, 0xFE	; 254
    15f6:	51 05       	cpc	r21, r1
    15f8:	68 f0       	brcs	.+26     	; 0x1614 <__divsf3_pse+0x82>
    15fa:	92 c0       	rjmp	.+292    	; 0x1720 <__fp_inf>
    15fc:	dc c0       	rjmp	.+440    	; 0x17b6 <__fp_szero>
    15fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1600:	ec f3       	brlt	.-6      	; 0x15fc <__divsf3_pse+0x6a>
    1602:	98 3e       	cpi	r25, 0xE8	; 232
    1604:	dc f3       	brlt	.-10     	; 0x15fc <__divsf3_pse+0x6a>
    1606:	86 95       	lsr	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b7 95       	ror	r27
    160e:	f7 95       	ror	r31
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__divsf3_pse+0x74>
    1614:	88 0f       	add	r24, r24
    1616:	91 1d       	adc	r25, r1
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret
    1620:	e1 e0       	ldi	r30, 0x01	; 1
    1622:	66 0f       	add	r22, r22
    1624:	77 1f       	adc	r23, r23
    1626:	88 1f       	adc	r24, r24
    1628:	bb 1f       	adc	r27, r27
    162a:	62 17       	cp	r22, r18
    162c:	73 07       	cpc	r23, r19
    162e:	84 07       	cpc	r24, r20
    1630:	ba 07       	cpc	r27, r26
    1632:	20 f0       	brcs	.+8      	; 0x163c <__divsf3_pse+0xaa>
    1634:	62 1b       	sub	r22, r18
    1636:	73 0b       	sbc	r23, r19
    1638:	84 0b       	sbc	r24, r20
    163a:	ba 0b       	sbc	r27, r26
    163c:	ee 1f       	adc	r30, r30
    163e:	88 f7       	brcc	.-30     	; 0x1622 <__divsf3_pse+0x90>
    1640:	e0 95       	com	r30
    1642:	08 95       	ret

00001644 <__fixsfsi>:
    1644:	04 d0       	rcall	.+8      	; 0x164e <__fixunssfsi>
    1646:	68 94       	set
    1648:	b1 11       	cpse	r27, r1
    164a:	b5 c0       	rjmp	.+362    	; 0x17b6 <__fp_szero>
    164c:	08 95       	ret

0000164e <__fixunssfsi>:
    164e:	98 d0       	rcall	.+304    	; 0x1780 <__fp_splitA>
    1650:	88 f0       	brcs	.+34     	; 0x1674 <__fixunssfsi+0x26>
    1652:	9f 57       	subi	r25, 0x7F	; 127
    1654:	90 f0       	brcs	.+36     	; 0x167a <__fixunssfsi+0x2c>
    1656:	b9 2f       	mov	r27, r25
    1658:	99 27       	eor	r25, r25
    165a:	b7 51       	subi	r27, 0x17	; 23
    165c:	a0 f0       	brcs	.+40     	; 0x1686 <__fixunssfsi+0x38>
    165e:	d1 f0       	breq	.+52     	; 0x1694 <__fixunssfsi+0x46>
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	1a f0       	brmi	.+6      	; 0x1670 <__fixunssfsi+0x22>
    166a:	ba 95       	dec	r27
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__fixunssfsi+0x12>
    166e:	12 c0       	rjmp	.+36     	; 0x1694 <__fixunssfsi+0x46>
    1670:	b1 30       	cpi	r27, 0x01	; 1
    1672:	81 f0       	breq	.+32     	; 0x1694 <__fixunssfsi+0x46>
    1674:	9f d0       	rcall	.+318    	; 0x17b4 <__fp_zero>
    1676:	b1 e0       	ldi	r27, 0x01	; 1
    1678:	08 95       	ret
    167a:	9c c0       	rjmp	.+312    	; 0x17b4 <__fp_zero>
    167c:	67 2f       	mov	r22, r23
    167e:	78 2f       	mov	r23, r24
    1680:	88 27       	eor	r24, r24
    1682:	b8 5f       	subi	r27, 0xF8	; 248
    1684:	39 f0       	breq	.+14     	; 0x1694 <__fixunssfsi+0x46>
    1686:	b9 3f       	cpi	r27, 0xF9	; 249
    1688:	cc f3       	brlt	.-14     	; 0x167c <__fixunssfsi+0x2e>
    168a:	86 95       	lsr	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b3 95       	inc	r27
    1692:	d9 f7       	brne	.-10     	; 0x168a <__fixunssfsi+0x3c>
    1694:	3e f4       	brtc	.+14     	; 0x16a4 <__fixunssfsi+0x56>
    1696:	90 95       	com	r25
    1698:	80 95       	com	r24
    169a:	70 95       	com	r23
    169c:	61 95       	neg	r22
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8f 4f       	sbci	r24, 0xFF	; 255
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	08 95       	ret

000016a6 <__floatunsisf>:
    16a6:	e8 94       	clt
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <__floatsisf+0x12>

000016aa <__floatsisf>:
    16aa:	97 fb       	bst	r25, 7
    16ac:	3e f4       	brtc	.+14     	; 0x16bc <__floatsisf+0x12>
    16ae:	90 95       	com	r25
    16b0:	80 95       	com	r24
    16b2:	70 95       	com	r23
    16b4:	61 95       	neg	r22
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	99 23       	and	r25, r25
    16be:	a9 f0       	breq	.+42     	; 0x16ea <__floatsisf+0x40>
    16c0:	f9 2f       	mov	r31, r25
    16c2:	96 e9       	ldi	r25, 0x96	; 150
    16c4:	bb 27       	eor	r27, r27
    16c6:	93 95       	inc	r25
    16c8:	f6 95       	lsr	r31
    16ca:	87 95       	ror	r24
    16cc:	77 95       	ror	r23
    16ce:	67 95       	ror	r22
    16d0:	b7 95       	ror	r27
    16d2:	f1 11       	cpse	r31, r1
    16d4:	f8 cf       	rjmp	.-16     	; 0x16c6 <__floatsisf+0x1c>
    16d6:	fa f4       	brpl	.+62     	; 0x1716 <__floatsisf+0x6c>
    16d8:	bb 0f       	add	r27, r27
    16da:	11 f4       	brne	.+4      	; 0x16e0 <__floatsisf+0x36>
    16dc:	60 ff       	sbrs	r22, 0
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <__floatsisf+0x6c>
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	8f 4f       	sbci	r24, 0xFF	; 255
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	16 c0       	rjmp	.+44     	; 0x1716 <__floatsisf+0x6c>
    16ea:	88 23       	and	r24, r24
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <__floatsisf+0x48>
    16ee:	96 e9       	ldi	r25, 0x96	; 150
    16f0:	11 c0       	rjmp	.+34     	; 0x1714 <__floatsisf+0x6a>
    16f2:	77 23       	and	r23, r23
    16f4:	21 f0       	breq	.+8      	; 0x16fe <__floatsisf+0x54>
    16f6:	9e e8       	ldi	r25, 0x8E	; 142
    16f8:	87 2f       	mov	r24, r23
    16fa:	76 2f       	mov	r23, r22
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <__floatsisf+0x5e>
    16fe:	66 23       	and	r22, r22
    1700:	71 f0       	breq	.+28     	; 0x171e <__floatsisf+0x74>
    1702:	96 e8       	ldi	r25, 0x86	; 134
    1704:	86 2f       	mov	r24, r22
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	2a f0       	brmi	.+10     	; 0x1716 <__floatsisf+0x6c>
    170c:	9a 95       	dec	r25
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	da f7       	brpl	.-10     	; 0x170c <__floatsisf+0x62>
    1716:	88 0f       	add	r24, r24
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	97 f9       	bld	r25, 7
    171e:	08 95       	ret

00001720 <__fp_inf>:
    1720:	97 f9       	bld	r25, 7
    1722:	9f 67       	ori	r25, 0x7F	; 127
    1724:	80 e8       	ldi	r24, 0x80	; 128
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	08 95       	ret

0000172c <__fp_nan>:
    172c:	9f ef       	ldi	r25, 0xFF	; 255
    172e:	80 ec       	ldi	r24, 0xC0	; 192
    1730:	08 95       	ret

00001732 <__fp_pscA>:
    1732:	00 24       	eor	r0, r0
    1734:	0a 94       	dec	r0
    1736:	16 16       	cp	r1, r22
    1738:	17 06       	cpc	r1, r23
    173a:	18 06       	cpc	r1, r24
    173c:	09 06       	cpc	r0, r25
    173e:	08 95       	ret

00001740 <__fp_pscB>:
    1740:	00 24       	eor	r0, r0
    1742:	0a 94       	dec	r0
    1744:	12 16       	cp	r1, r18
    1746:	13 06       	cpc	r1, r19
    1748:	14 06       	cpc	r1, r20
    174a:	05 06       	cpc	r0, r21
    174c:	08 95       	ret

0000174e <__fp_round>:
    174e:	09 2e       	mov	r0, r25
    1750:	03 94       	inc	r0
    1752:	00 0c       	add	r0, r0
    1754:	11 f4       	brne	.+4      	; 0x175a <__fp_round+0xc>
    1756:	88 23       	and	r24, r24
    1758:	52 f0       	brmi	.+20     	; 0x176e <__fp_round+0x20>
    175a:	bb 0f       	add	r27, r27
    175c:	40 f4       	brcc	.+16     	; 0x176e <__fp_round+0x20>
    175e:	bf 2b       	or	r27, r31
    1760:	11 f4       	brne	.+4      	; 0x1766 <__fp_round+0x18>
    1762:	60 ff       	sbrs	r22, 0
    1764:	04 c0       	rjmp	.+8      	; 0x176e <__fp_round+0x20>
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	8f 4f       	sbci	r24, 0xFF	; 255
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	08 95       	ret

00001770 <__fp_split3>:
    1770:	57 fd       	sbrc	r21, 7
    1772:	90 58       	subi	r25, 0x80	; 128
    1774:	44 0f       	add	r20, r20
    1776:	55 1f       	adc	r21, r21
    1778:	59 f0       	breq	.+22     	; 0x1790 <__fp_splitA+0x10>
    177a:	5f 3f       	cpi	r21, 0xFF	; 255
    177c:	71 f0       	breq	.+28     	; 0x179a <__fp_splitA+0x1a>
    177e:	47 95       	ror	r20

00001780 <__fp_splitA>:
    1780:	88 0f       	add	r24, r24
    1782:	97 fb       	bst	r25, 7
    1784:	99 1f       	adc	r25, r25
    1786:	61 f0       	breq	.+24     	; 0x17a0 <__fp_splitA+0x20>
    1788:	9f 3f       	cpi	r25, 0xFF	; 255
    178a:	79 f0       	breq	.+30     	; 0x17aa <__fp_splitA+0x2a>
    178c:	87 95       	ror	r24
    178e:	08 95       	ret
    1790:	12 16       	cp	r1, r18
    1792:	13 06       	cpc	r1, r19
    1794:	14 06       	cpc	r1, r20
    1796:	55 1f       	adc	r21, r21
    1798:	f2 cf       	rjmp	.-28     	; 0x177e <__fp_split3+0xe>
    179a:	46 95       	lsr	r20
    179c:	f1 df       	rcall	.-30     	; 0x1780 <__fp_splitA>
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <__fp_splitA+0x30>
    17a0:	16 16       	cp	r1, r22
    17a2:	17 06       	cpc	r1, r23
    17a4:	18 06       	cpc	r1, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	f1 cf       	rjmp	.-30     	; 0x178c <__fp_splitA+0xc>
    17aa:	86 95       	lsr	r24
    17ac:	71 05       	cpc	r23, r1
    17ae:	61 05       	cpc	r22, r1
    17b0:	08 94       	sec
    17b2:	08 95       	ret

000017b4 <__fp_zero>:
    17b4:	e8 94       	clt

000017b6 <__fp_szero>:
    17b6:	bb 27       	eor	r27, r27
    17b8:	66 27       	eor	r22, r22
    17ba:	77 27       	eor	r23, r23
    17bc:	cb 01       	movw	r24, r22
    17be:	97 f9       	bld	r25, 7
    17c0:	08 95       	ret

000017c2 <__gesf2>:
    17c2:	66 d0       	rcall	.+204    	; 0x1890 <__fp_cmp>
    17c4:	08 f4       	brcc	.+2      	; 0x17c8 <__gesf2+0x6>
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	08 95       	ret

000017ca <__mulsf3>:
    17ca:	0b d0       	rcall	.+22     	; 0x17e2 <__mulsf3x>
    17cc:	c0 cf       	rjmp	.-128    	; 0x174e <__fp_round>
    17ce:	b1 df       	rcall	.-158    	; 0x1732 <__fp_pscA>
    17d0:	28 f0       	brcs	.+10     	; 0x17dc <__mulsf3+0x12>
    17d2:	b6 df       	rcall	.-148    	; 0x1740 <__fp_pscB>
    17d4:	18 f0       	brcs	.+6      	; 0x17dc <__mulsf3+0x12>
    17d6:	95 23       	and	r25, r21
    17d8:	09 f0       	breq	.+2      	; 0x17dc <__mulsf3+0x12>
    17da:	a2 cf       	rjmp	.-188    	; 0x1720 <__fp_inf>
    17dc:	a7 cf       	rjmp	.-178    	; 0x172c <__fp_nan>
    17de:	11 24       	eor	r1, r1
    17e0:	ea cf       	rjmp	.-44     	; 0x17b6 <__fp_szero>

000017e2 <__mulsf3x>:
    17e2:	c6 df       	rcall	.-116    	; 0x1770 <__fp_split3>
    17e4:	a0 f3       	brcs	.-24     	; 0x17ce <__mulsf3+0x4>

000017e6 <__mulsf3_pse>:
    17e6:	95 9f       	mul	r25, r21
    17e8:	d1 f3       	breq	.-12     	; 0x17de <__mulsf3+0x14>
    17ea:	95 0f       	add	r25, r21
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	55 1f       	adc	r21, r21
    17f0:	62 9f       	mul	r22, r18
    17f2:	f0 01       	movw	r30, r0
    17f4:	72 9f       	mul	r23, r18
    17f6:	bb 27       	eor	r27, r27
    17f8:	f0 0d       	add	r31, r0
    17fa:	b1 1d       	adc	r27, r1
    17fc:	63 9f       	mul	r22, r19
    17fe:	aa 27       	eor	r26, r26
    1800:	f0 0d       	add	r31, r0
    1802:	b1 1d       	adc	r27, r1
    1804:	aa 1f       	adc	r26, r26
    1806:	64 9f       	mul	r22, r20
    1808:	66 27       	eor	r22, r22
    180a:	b0 0d       	add	r27, r0
    180c:	a1 1d       	adc	r26, r1
    180e:	66 1f       	adc	r22, r22
    1810:	82 9f       	mul	r24, r18
    1812:	22 27       	eor	r18, r18
    1814:	b0 0d       	add	r27, r0
    1816:	a1 1d       	adc	r26, r1
    1818:	62 1f       	adc	r22, r18
    181a:	73 9f       	mul	r23, r19
    181c:	b0 0d       	add	r27, r0
    181e:	a1 1d       	adc	r26, r1
    1820:	62 1f       	adc	r22, r18
    1822:	83 9f       	mul	r24, r19
    1824:	a0 0d       	add	r26, r0
    1826:	61 1d       	adc	r22, r1
    1828:	22 1f       	adc	r18, r18
    182a:	74 9f       	mul	r23, r20
    182c:	33 27       	eor	r19, r19
    182e:	a0 0d       	add	r26, r0
    1830:	61 1d       	adc	r22, r1
    1832:	23 1f       	adc	r18, r19
    1834:	84 9f       	mul	r24, r20
    1836:	60 0d       	add	r22, r0
    1838:	21 1d       	adc	r18, r1
    183a:	82 2f       	mov	r24, r18
    183c:	76 2f       	mov	r23, r22
    183e:	6a 2f       	mov	r22, r26
    1840:	11 24       	eor	r1, r1
    1842:	9f 57       	subi	r25, 0x7F	; 127
    1844:	50 40       	sbci	r21, 0x00	; 0
    1846:	8a f0       	brmi	.+34     	; 0x186a <__mulsf3_pse+0x84>
    1848:	e1 f0       	breq	.+56     	; 0x1882 <__mulsf3_pse+0x9c>
    184a:	88 23       	and	r24, r24
    184c:	4a f0       	brmi	.+18     	; 0x1860 <__mulsf3_pse+0x7a>
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	bb 1f       	adc	r27, r27
    1854:	66 1f       	adc	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	88 1f       	adc	r24, r24
    185a:	91 50       	subi	r25, 0x01	; 1
    185c:	50 40       	sbci	r21, 0x00	; 0
    185e:	a9 f7       	brne	.-22     	; 0x184a <__mulsf3_pse+0x64>
    1860:	9e 3f       	cpi	r25, 0xFE	; 254
    1862:	51 05       	cpc	r21, r1
    1864:	70 f0       	brcs	.+28     	; 0x1882 <__mulsf3_pse+0x9c>
    1866:	5c cf       	rjmp	.-328    	; 0x1720 <__fp_inf>
    1868:	a6 cf       	rjmp	.-180    	; 0x17b6 <__fp_szero>
    186a:	5f 3f       	cpi	r21, 0xFF	; 255
    186c:	ec f3       	brlt	.-6      	; 0x1868 <__mulsf3_pse+0x82>
    186e:	98 3e       	cpi	r25, 0xE8	; 232
    1870:	dc f3       	brlt	.-10     	; 0x1868 <__mulsf3_pse+0x82>
    1872:	86 95       	lsr	r24
    1874:	77 95       	ror	r23
    1876:	67 95       	ror	r22
    1878:	b7 95       	ror	r27
    187a:	f7 95       	ror	r31
    187c:	e7 95       	ror	r30
    187e:	9f 5f       	subi	r25, 0xFF	; 255
    1880:	c1 f7       	brne	.-16     	; 0x1872 <__mulsf3_pse+0x8c>
    1882:	fe 2b       	or	r31, r30
    1884:	88 0f       	add	r24, r24
    1886:	91 1d       	adc	r25, r1
    1888:	96 95       	lsr	r25
    188a:	87 95       	ror	r24
    188c:	97 f9       	bld	r25, 7
    188e:	08 95       	ret

00001890 <__fp_cmp>:
    1890:	99 0f       	add	r25, r25
    1892:	00 08       	sbc	r0, r0
    1894:	55 0f       	add	r21, r21
    1896:	aa 0b       	sbc	r26, r26
    1898:	e0 e8       	ldi	r30, 0x80	; 128
    189a:	fe ef       	ldi	r31, 0xFE	; 254
    189c:	16 16       	cp	r1, r22
    189e:	17 06       	cpc	r1, r23
    18a0:	e8 07       	cpc	r30, r24
    18a2:	f9 07       	cpc	r31, r25
    18a4:	c0 f0       	brcs	.+48     	; 0x18d6 <__fp_cmp+0x46>
    18a6:	12 16       	cp	r1, r18
    18a8:	13 06       	cpc	r1, r19
    18aa:	e4 07       	cpc	r30, r20
    18ac:	f5 07       	cpc	r31, r21
    18ae:	98 f0       	brcs	.+38     	; 0x18d6 <__fp_cmp+0x46>
    18b0:	62 1b       	sub	r22, r18
    18b2:	73 0b       	sbc	r23, r19
    18b4:	84 0b       	sbc	r24, r20
    18b6:	95 0b       	sbc	r25, r21
    18b8:	39 f4       	brne	.+14     	; 0x18c8 <__fp_cmp+0x38>
    18ba:	0a 26       	eor	r0, r26
    18bc:	61 f0       	breq	.+24     	; 0x18d6 <__fp_cmp+0x46>
    18be:	23 2b       	or	r18, r19
    18c0:	24 2b       	or	r18, r20
    18c2:	25 2b       	or	r18, r21
    18c4:	21 f4       	brne	.+8      	; 0x18ce <__fp_cmp+0x3e>
    18c6:	08 95       	ret
    18c8:	0a 26       	eor	r0, r26
    18ca:	09 f4       	brne	.+2      	; 0x18ce <__fp_cmp+0x3e>
    18cc:	a1 40       	sbci	r26, 0x01	; 1
    18ce:	a6 95       	lsr	r26
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	81 1d       	adc	r24, r1
    18d4:	81 1d       	adc	r24, r1
    18d6:	08 95       	ret

000018d8 <__divmodhi4>:
    18d8:	97 fb       	bst	r25, 7
    18da:	07 2e       	mov	r0, r23
    18dc:	16 f4       	brtc	.+4      	; 0x18e2 <__divmodhi4+0xa>
    18de:	00 94       	com	r0
    18e0:	07 d0       	rcall	.+14     	; 0x18f0 <__divmodhi4_neg1>
    18e2:	77 fd       	sbrc	r23, 7
    18e4:	09 d0       	rcall	.+18     	; 0x18f8 <__divmodhi4_neg2>
    18e6:	0e 94 80 0c 	call	0x1900	; 0x1900 <__udivmodhi4>
    18ea:	07 fc       	sbrc	r0, 7
    18ec:	05 d0       	rcall	.+10     	; 0x18f8 <__divmodhi4_neg2>
    18ee:	3e f4       	brtc	.+14     	; 0x18fe <__divmodhi4_exit>

000018f0 <__divmodhi4_neg1>:
    18f0:	90 95       	com	r25
    18f2:	81 95       	neg	r24
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	08 95       	ret

000018f8 <__divmodhi4_neg2>:
    18f8:	70 95       	com	r23
    18fa:	61 95       	neg	r22
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255

000018fe <__divmodhi4_exit>:
    18fe:	08 95       	ret

00001900 <__udivmodhi4>:
    1900:	aa 1b       	sub	r26, r26
    1902:	bb 1b       	sub	r27, r27
    1904:	51 e1       	ldi	r21, 0x11	; 17
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <__udivmodhi4_ep>

00001908 <__udivmodhi4_loop>:
    1908:	aa 1f       	adc	r26, r26
    190a:	bb 1f       	adc	r27, r27
    190c:	a6 17       	cp	r26, r22
    190e:	b7 07       	cpc	r27, r23
    1910:	10 f0       	brcs	.+4      	; 0x1916 <__udivmodhi4_ep>
    1912:	a6 1b       	sub	r26, r22
    1914:	b7 0b       	sbc	r27, r23

00001916 <__udivmodhi4_ep>:
    1916:	88 1f       	adc	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	5a 95       	dec	r21
    191c:	a9 f7       	brne	.-22     	; 0x1908 <__udivmodhi4_loop>
    191e:	80 95       	com	r24
    1920:	90 95       	com	r25
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	08 95       	ret

00001928 <__tablejump2__>:
    1928:	ee 0f       	add	r30, r30
    192a:	ff 1f       	adc	r31, r31

0000192c <__tablejump__>:
    192c:	05 90       	lpm	r0, Z+
    192e:	f4 91       	lpm	r31, Z
    1930:	e0 2d       	mov	r30, r0
    1932:	09 94       	ijmp

00001934 <__do_global_dtors>:
    1934:	11 e0       	ldi	r17, 0x01	; 1
    1936:	ce e6       	ldi	r28, 0x6E	; 110
    1938:	d1 e0       	ldi	r29, 0x01	; 1
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <__do_global_dtors+0x10>
    193c:	fe 01       	movw	r30, r28
    193e:	0e 94 96 0c 	call	0x192c	; 0x192c <__tablejump__>
    1942:	22 96       	adiw	r28, 0x02	; 2
    1944:	c0 37       	cpi	r28, 0x70	; 112
    1946:	d1 07       	cpc	r29, r17
    1948:	c9 f7       	brne	.-14     	; 0x193c <__do_global_dtors+0x8>
    194a:	f8 94       	cli

0000194c <__stop_program>:
    194c:	ff cf       	rjmp	.-2      	; 0x194c <__stop_program>
