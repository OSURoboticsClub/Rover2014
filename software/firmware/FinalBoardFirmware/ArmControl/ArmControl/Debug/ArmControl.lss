
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  000017f4  00001888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00802012  00802012  0000189a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000045f2  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012de  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011ca  00000000  00000000  000073ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005c8  00000000  00000000  000085b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c75  00000000  00000000  00008b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018ee  00000000  00000000  0000a7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0000c0df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_25>
      68:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_26>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_77>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	f1 06       	cpc	r15, r17

0000016e <__ctors_end>:
     16e:	02 07       	cpc	r16, r18

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	e4 ef       	ldi	r30, 0xF4	; 244
     184:	f7 e1       	ldi	r31, 0x17	; 23
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 31       	cpi	r26, 0x12	; 18
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a2 e1       	ldi	r26, 0x12	; 18
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	ab 37       	cpi	r26, 0x7B	; 123
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <main>
     1bc:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
#include "adc.h"


uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     1d0:	1c 92       	st	X, r1
	return Result;
}
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:

uint16_t ReadADC(uint8_t Channel, uint8_t ADCMode) // Mode = 1 for single ended, 0 for internal
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
		ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc; // Signed Mode
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
		ADCA.REFCTRL = ADC_REFSEL_VCC_gc; // Internal 1v ref
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
		ADCA.EVCTRL = 0; // no events
     1f8:	1b 82       	std	Y+3, r1	; 0x03
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc ;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
		_delay_us(400); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
	ADCA.CH0.MUXCTRL = (Channel<<3);
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     22c:	12 a2       	std	Z+34, r1	; 0x22
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADCMode ; // Gain = 1, Single Ended
	ADCA.CH0.MUXCTRL = (Channel<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(uint8_t Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
	 }
	return ADCA.CH0RES ;
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <_Z15SetupResetTimerv>:
	WaitForHost,
	ARMControl
} CurrentState = WaitForHost;

void SetupResetTimer(){
	TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; //31250 counts per second with 32Mhz Processor
     264:	e0 e0       	ldi	r30, 0x00	; 0
     266:	f9 e0       	ldi	r31, 0x09	; 9
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	80 83       	st	Z, r24
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
     26c:	11 82       	std	Z+1, r1	; 0x01
	TCD0.PER = 31250;
     26e:	82 e1       	ldi	r24, 0x12	; 18
     270:	9a e7       	ldi	r25, 0x7A	; 122
     272:	86 a3       	std	Z+38, r24	; 0x26
     274:	97 a3       	std	Z+39, r25	; 0x27
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	08 95       	ret

0000027c <_Z17FlushSerialBufferP16Usart_and_buffer>:
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
     282:	03 c0       	rjmp	.+6      	; 0x28a <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
     284:	ce 01       	movw	r24, r28
     286:	0e 94 6d 09 	call	0x12da	; 0x12da <USART_RXBuffer_GetByte>
	TCD0.PER = 31250;
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 65 09 	call	0x12ca	; 0x12ca <USART_RXBufferData_Available>
     290:	81 11       	cpse	r24, r1
     292:	f8 cf       	rjmp	.-16     	; 0x284 <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <__vector_25>:

ISR(USARTC0_RXC_vect){
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
     2c0:	8c e6       	ldi	r24, 0x6C	; 108
     2c2:	90 e2       	ldi	r25, 0x20	; 32
     2c4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_RXComplete>
	
	if(USART_RXBufferData_Available(&USART_PC_Data)){
     2c8:	8c e6       	ldi	r24, 0x6C	; 108
     2ca:	90 e2       	ldi	r25, 0x20	; 32
     2cc:	0e 94 65 09 	call	0x12ca	; 0x12ca <USART_RXBufferData_Available>
     2d0:	88 23       	and	r24, r24
     2d2:	79 f0       	breq	.+30     	; 0x2f2 <__vector_25+0x58>
		recieveBuffer[bufferIndex] = USART_RXBuffer_GetByte(&USART_PC_Data);
     2d4:	c0 91 25 20 	lds	r28, 0x2025
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	8c e6       	ldi	r24, 0x6C	; 108
     2dc:	90 e2       	ldi	r25, 0x20	; 32
     2de:	0e 94 6d 09 	call	0x12da	; 0x12da <USART_RXBuffer_GetByte>
     2e2:	cd 5e       	subi	r28, 0xED	; 237
     2e4:	df 4d       	sbci	r29, 0xDF	; 223
     2e6:	88 83       	st	Y, r24
		bufferIndex++;
     2e8:	80 91 25 20 	lds	r24, 0x2025
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	80 93 25 20 	sts	0x2025, r24
	}
	
	if((bufferIndex == PACKETSIZE)){
     2f2:	80 91 25 20 	lds	r24, 0x2025
     2f6:	8a 30       	cpi	r24, 0x0A	; 10
     2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_25+0x62>
     2fa:	82 c0       	rjmp	.+260    	; 0x400 <__vector_25+0x166>
		FlushSerialBuffer(&USART_PC_Data);
     2fc:	8c e6       	ldi	r24, 0x6C	; 108
     2fe:	90 e2       	ldi	r25, 0x20	; 32
     300:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17FlushSerialBufferP16Usart_and_buffer>
		if(recieveBuffer[8] == (recieveBuffer[1] ^ recieveBuffer[2] ^ recieveBuffer[3] ^ recieveBuffer[4] ^ recieveBuffer[5] ^ recieveBuffer[6] ^ recieveBuffer[7])){
     304:	90 91 1b 20 	lds	r25, 0x201B
     308:	80 91 14 20 	lds	r24, 0x2014
     30c:	70 91 15 20 	lds	r23, 0x2015
     310:	60 91 16 20 	lds	r22, 0x2016
     314:	50 91 17 20 	lds	r21, 0x2017
     318:	40 91 18 20 	lds	r20, 0x2018
     31c:	30 91 19 20 	lds	r19, 0x2019
     320:	20 91 1a 20 	lds	r18, 0x201A
     324:	87 27       	eor	r24, r23
     326:	86 27       	eor	r24, r22
     328:	85 27       	eor	r24, r21
     32a:	84 27       	eor	r24, r20
     32c:	83 27       	eor	r24, r19
     32e:	82 27       	eor	r24, r18
     330:	98 13       	cpse	r25, r24
     332:	4d c0       	rjmp	.+154    	; 0x3ce <__vector_25+0x134>
			ARM_Dock_State = recieveBuffer[1] & 0b00000100;
     334:	e4 e1       	ldi	r30, 0x14	; 20
     336:	f0 e2       	ldi	r31, 0x20	; 32
     338:	80 81       	ld	r24, Z
     33a:	84 70       	andi	r24, 0x04	; 4
     33c:	80 93 27 20 	sts	0x2027, r24
			gripStepper.desiredGripState = !(recieveBuffer[1] & GRIP_BM_SERIAL); //0b00000010	
     340:	80 81       	ld	r24, Z
     342:	c1 e0       	ldi	r28, 0x01	; 1
     344:	86 95       	lsr	r24
     346:	81 70       	andi	r24, 0x01	; 1
     348:	8c 27       	eor	r24, r28
     34a:	80 93 3b 20 	sts	0x203B, r24
			baseStepper.desiredPos = (recieveBuffer[3]+recieveBuffer[2]);
     34e:	20 91 16 20 	lds	r18, 0x2016
     352:	80 91 15 20 	lds	r24, 0x2015
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	82 0f       	add	r24, r18
     35a:	91 1d       	adc	r25, r1
     35c:	80 93 33 20 	sts	0x2033, r24
     360:	90 93 34 20 	sts	0x2034, r25
			lowerAct.setDesired((double(recieveBuffer[5]+recieveBuffer[4]) / double(100)));
     364:	80 91 18 20 	lds	r24, 0x2018
     368:	60 91 17 20 	lds	r22, 0x2017
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	68 0f       	add	r22, r24
     370:	71 1d       	adc	r23, r1
     372:	88 27       	eor	r24, r24
     374:	77 fd       	sbrc	r23, 7
     376:	80 95       	com	r24
     378:	98 2f       	mov	r25, r24
     37a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	48 ec       	ldi	r20, 0xC8	; 200
     384:	52 e4       	ldi	r21, 0x42	; 66
     386:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
     38a:	ab 01       	movw	r20, r22
     38c:	bc 01       	movw	r22, r24
     38e:	84 e5       	ldi	r24, 0x54	; 84
     390:	90 e2       	ldi	r25, 0x20	; 32
     392:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN9motorInfo10setDesiredEf>
			upperAct.setDesired((double(recieveBuffer[7]+recieveBuffer[6]) / double(100)));
     396:	80 91 1a 20 	lds	r24, 0x201A
     39a:	60 91 19 20 	lds	r22, 0x2019
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	68 0f       	add	r22, r24
     3a2:	71 1d       	adc	r23, r1
     3a4:	88 27       	eor	r24, r24
     3a6:	77 fd       	sbrc	r23, 7
     3a8:	80 95       	com	r24
     3aa:	98 2f       	mov	r25, r24
     3ac:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	48 ec       	ldi	r20, 0xC8	; 200
     3b6:	52 e4       	ldi	r21, 0x42	; 66
     3b8:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
     3bc:	ab 01       	movw	r20, r22
     3be:	bc 01       	movw	r22, r24
     3c0:	8c e3       	ldi	r24, 0x3C	; 60
     3c2:	90 e2       	ldi	r25, 0x20	; 32
     3c4:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN9motorInfo10setDesiredEf>
			IsPacketToParse = true;
     3c8:	c0 93 28 20 	sts	0x2028, r28
     3cc:	19 c0       	rjmp	.+50     	; 0x400 <__vector_25+0x166>
		}else{
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3ce:	e0 ea       	ldi	r30, 0xA0	; 160
     3d0:	f8 e0       	ldi	r31, 0x08	; 8
     3d2:	81 81       	ldd	r24, Z+1	; 0x01
     3d4:	85 ff       	sbrs	r24, 5
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <__vector_25+0x138>
			USART_PutChar(&USARTC0, 255);
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	80 93 a0 08 	sts	0x08A0, r24
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3de:	e0 ea       	ldi	r30, 0xA0	; 160
     3e0:	f8 e0       	ldi	r31, 0x08	; 8
     3e2:	81 81       	ldd	r24, Z+1	; 0x01
     3e4:	85 ff       	sbrs	r24, 5
     3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <__vector_25+0x148>
			USART_PutChar(&USARTC0,0);  //Checksum failed
     3e8:	10 92 a0 08 	sts	0x08A0, r1
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3ec:	e0 ea       	ldi	r30, 0xA0	; 160
     3ee:	f8 e0       	ldi	r31, 0x08	; 8
     3f0:	81 81       	ldd	r24, Z+1	; 0x01
     3f2:	85 ff       	sbrs	r24, 5
     3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <__vector_25+0x156>
			USART_PutChar(&USARTC0,255);
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	80 93 a0 08 	sts	0x08A0, r24

			bufferIndex = 0;	
     3fc:	10 92 25 20 	sts	0x2025, r1
		}
		
	}

}
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	7f 91       	pop	r23
     412:	6f 91       	pop	r22
     414:	5f 91       	pop	r21
     416:	4f 91       	pop	r20
     418:	3f 91       	pop	r19
     41a:	2f 91       	pop	r18
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti

00000426 <__vector_26>:

ISR(USARTC0_DRE_vect){
     426:	1f 92       	push	r1
     428:	0f 92       	push	r0
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	0f 92       	push	r0
     42e:	11 24       	eor	r1, r1
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
     448:	8c e6       	ldi	r24, 0x6C	; 108
     44a:	90 e2       	ldi	r25, 0x20	; 32
     44c:	0e 94 8e 09 	call	0x131c	; 0x131c <USART_DataRegEmpty>
}
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	bf 91       	pop	r27
     456:	af 91       	pop	r26
     458:	9f 91       	pop	r25
     45a:	8f 91       	pop	r24
     45c:	7f 91       	pop	r23
     45e:	6f 91       	pop	r22
     460:	5f 91       	pop	r21
     462:	4f 91       	pop	r20
     464:	3f 91       	pop	r19
     466:	2f 91       	pop	r18
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	0f 90       	pop	r0
     46e:	1f 90       	pop	r1
     470:	18 95       	reti

00000472 <_Z23SetXMEGA32MhzCalibratedv>:


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     472:	88 ed       	ldi	r24, 0xD8	; 216
     474:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     47c:	e0 e5       	ldi	r30, 0x50	; 80
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	81 81       	ldd	r24, Z+1	; 0x01
     482:	81 ff       	sbrs	r24, 1
     484:	fd cf       	rjmp	.-6      	; 0x480 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     486:	88 ed       	ldi	r24, 0xD8	; 216
     488:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     490:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     492:	e0 e5       	ldi	r30, 0x50	; 80
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	84 60       	ori	r24, 0x04	; 4
     49a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     49c:	81 81       	ldd	r24, Z+1	; 0x01
     49e:	82 ff       	sbrs	r24, 2
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     4a2:	e0 e5       	ldi	r30, 0x50	; 80
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	86 81       	ldd	r24, Z+6	; 0x06
     4a8:	8d 7f       	andi	r24, 0xFD	; 253
     4aa:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     4ac:	e0 e6       	ldi	r30, 0x60	; 96
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	80 83       	st	Z, r24
     4b6:	08 95       	ret

000004b8 <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     4b8:	e0 e4       	ldi	r30, 0x40	; 64
     4ba:	f6 e0       	ldi	r31, 0x06	; 6
     4bc:	88 e0       	ldi	r24, 0x08	; 8
     4be:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	60 ea       	ldi	r22, 0xA0	; 160
     4c8:	78 e0       	ldi	r23, 0x08	; 8
     4ca:	8c e6       	ldi	r24, 0x6C	; 108
     4cc:	90 e2       	ldi	r25, 0x20	; 32
     4ce:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     4d2:	e0 91 6c 20 	lds	r30, 0x206C
     4d6:	f0 91 6d 20 	lds	r31, 0x206D
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     4de:	83 81       	ldd	r24, Z+3	; 0x03
     4e0:	8f 7c       	andi	r24, 0xCF	; 207
     4e2:	80 61       	ori	r24, 0x10	; 16
     4e4:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     4e6:	a0 ea       	ldi	r26, 0xA0	; 160
     4e8:	b8 e0       	ldi	r27, 0x08	; 8
     4ea:	8f ec       	ldi	r24, 0xCF	; 207
     4ec:	16 96       	adiw	r26, 0x06	; 6
     4ee:	8c 93       	st	X, r24
     4f0:	16 97       	sbiw	r26, 0x06	; 6
     4f2:	17 96       	adiw	r26, 0x07	; 7
     4f4:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     4f6:	84 81       	ldd	r24, Z+4	; 0x04
     4f8:	80 61       	ori	r24, 0x10	; 16
     4fa:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     4fc:	84 81       	ldd	r24, Z+4	; 0x04
     4fe:	88 60       	ori	r24, 0x08	; 8
     500:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     502:	e0 ea       	ldi	r30, 0xA0	; 160
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	82 81       	ldd	r24, Z+2	; 0x02
     508:	81 60       	ori	r24, 0x01	; 1
     50a:	82 83       	std	Z+2, r24	; 0x02
     50c:	08 95       	ret

0000050e <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     512:	0e 94 39 02 	call	0x472	; 0x472 <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     516:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z12SetupPCCommsv>
	SetupResetTimer();
     51a:	0e 94 32 01 	call	0x264	; 0x264 <_Z15SetupResetTimerv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     51e:	80 ee       	ldi	r24, 0xE0	; 224
     520:	e0 e4       	ldi	r30, 0x40	; 64
     522:	f6 e0       	ldi	r31, 0x06	; 6
     524:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     526:	e0 e6       	ldi	r30, 0x60	; 96
     528:	f6 e0       	ldi	r31, 0x06	; 6
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b6 e0       	ldi	r27, 0x06	; 6
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	8c 93       	st	X, r24
     536:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     538:	c0 e2       	ldi	r28, 0x20	; 32
     53a:	d6 e0       	ldi	r29, 0x06	; 6
     53c:	87 e0       	ldi	r24, 0x07	; 7
     53e:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	12 96       	adiw	r26, 0x02	; 2
     544:	8c 93       	st	X, r24
     546:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     548:	98 e0       	ldi	r25, 0x08	; 8
     54a:	12 96       	adiw	r26, 0x02	; 2
     54c:	9c 93       	st	X, r25
     54e:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit
     550:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = (PIN4_bm); //'IsRoving' check
     552:	20 e1       	ldi	r18, 0x10	; 16
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	2c 93       	st	X, r18
     558:	12 97       	sbiw	r26, 0x02	; 2
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_ENABLE();
     55a:	30 e4       	ldi	r19, 0x40	; 64
     55c:	36 83       	std	Z+6, r19	; 0x06
	
	//Setup Microstepping
	MD1_M0_CLR();
     55e:	90 e2       	ldi	r25, 0x20	; 32
     560:	16 96       	adiw	r26, 0x06	; 6
     562:	9c 93       	st	X, r25
     564:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     566:	16 96       	adiw	r26, 0x06	; 6
     568:	3c 93       	st	X, r19
     56a:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_SET();
     56c:	30 e8       	ldi	r19, 0x80	; 128
     56e:	15 96       	adiw	r26, 0x05	; 5
     570:	3c 93       	st	X, r19
	
	MD1_DIR_CLR();
     572:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     574:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     576:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_SET();
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	9d 83       	std	Y+5, r25	; 0x05
	MD2_M2_CLR();
     580:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     582:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     584:	96 83       	std	Z+6, r25	; 0x06
	
	sei();
     586:	78 94       	sei
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <_Z12SendStringPCPc>:

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     58e:	fc 01       	movw	r30, r24
     590:	20 81       	ld	r18, Z
     592:	22 23       	and	r18, r18
     594:	59 f0       	breq	.+22     	; 0x5ac <_Z12SendStringPCPc+0x1e>
     596:	dc 01       	movw	r26, r24
     598:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     59a:	e0 ea       	ldi	r30, 0xA0	; 160
     59c:	f8 e0       	ldi	r31, 0x08	; 8
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	85 ff       	sbrs	r24, 5
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);	
     5a4:	20 83       	st	Z, r18
	
	sei();
}

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     5a6:	2d 91       	ld	r18, X+
     5a8:	21 11       	cpse	r18, r1
     5aa:	f9 cf       	rjmp	.-14     	; 0x59e <_Z12SendStringPCPc+0x10>
     5ac:	08 95       	ret

000005ae <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	8c 01       	movw	r16, r24
     5bc:	c7 e0       	ldi	r28, 0x07	; 7
     5be:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     5c0:	e1 2c       	mov	r14, r1
     5c2:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     5c4:	01 15       	cp	r16, r1
     5c6:	11 05       	cpc	r17, r1
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5d2:	e8 0e       	add	r14, r24
     5d4:	f9 1e       	adc	r15, r25
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     5d8:	01 30       	cpi	r16, 0x01	; 1
     5da:	11 05       	cpc	r17, r1
     5dc:	31 f4       	brne	.+12     	; 0x5ea <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5e6:	e8 0e       	add	r14, r24
     5e8:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ea:	8f e3       	ldi	r24, 0x3F	; 63
     5ec:	9f e1       	ldi	r25, 0x1F	; 31
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <_Z9smoothADCi+0x40>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <_Z9smoothADCi+0x46>
     5f4:	00 00       	nop
     5f6:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     5f8:	20 97       	sbiw	r28, 0x00	; 0
     5fa:	21 f7       	brne	.-56     	; 0x5c4 <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     5fc:	c7 01       	movw	r24, r14
     5fe:	67 e0       	ldi	r22, 0x07	; 7
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	0e 94 bf 0b 	call	0x177e	; 0x177e <__divmodhi4>
     606:	cb 01       	movw	r24, r22
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	08 95       	ret

00000616 <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     61e:	20 91 68 20 	lds	r18, 0x2068
     622:	30 91 69 20 	lds	r19, 0x2069
     626:	40 91 6a 20 	lds	r20, 0x206A
     62a:	50 91 6b 20 	lds	r21, 0x206B
     62e:	60 91 64 20 	lds	r22, 0x2064
     632:	70 91 65 20 	lds	r23, 0x2065
     636:	80 91 66 20 	lds	r24, 0x2066
     63a:	90 91 67 20 	lds	r25, 0x2067
     63e:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     642:	6b 01       	movw	r12, r22
     644:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	a9 01       	movw	r20, r18
     64c:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     650:	18 16       	cp	r1, r24
     652:	24 f0       	brlt	.+8      	; 0x65c <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     654:	f7 fa       	bst	r15, 7
     656:	f0 94       	com	r15
     658:	f7 f8       	bld	r15, 7
     65a:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     65c:	a7 01       	movw	r20, r14
     65e:	96 01       	movw	r18, r12
     660:	60 91 58 20 	lds	r22, 0x2058
     664:	70 91 59 20 	lds	r23, 0x2059
     668:	80 91 5a 20 	lds	r24, 0x205A
     66c:	90 91 5b 20 	lds	r25, 0x205B
     670:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	44 f4       	brge	.+16     	; 0x688 <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     678:	e6 e5       	ldi	r30, 0x56	; 86
     67a:	f0 e2       	ldi	r31, 0x20	; 32
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	80 83       	st	Z, r24
     684:	91 83       	std	Z+1, r25	; 0x01
     686:	04 c0       	rjmp	.+8      	; 0x690 <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     688:	10 92 56 20 	sts	0x2056, r1
     68c:	10 92 57 20 	sts	0x2057, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     690:	20 91 50 20 	lds	r18, 0x2050
     694:	30 91 51 20 	lds	r19, 0x2051
     698:	40 91 52 20 	lds	r20, 0x2052
     69c:	50 91 53 20 	lds	r21, 0x2053
     6a0:	60 91 4c 20 	lds	r22, 0x204C
     6a4:	70 91 4d 20 	lds	r23, 0x204D
     6a8:	80 91 4e 20 	lds	r24, 0x204E
     6ac:	90 91 4f 20 	lds	r25, 0x204F
     6b0:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     6b4:	6b 01       	movw	r12, r22
     6b6:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	a9 01       	movw	r20, r18
     6be:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     6c2:	18 16       	cp	r1, r24
     6c4:	24 f0       	brlt	.+8      	; 0x6ce <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     6c6:	f7 fa       	bst	r15, 7
     6c8:	f0 94       	com	r15
     6ca:	f7 f8       	bld	r15, 7
     6cc:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     6ce:	a7 01       	movw	r20, r14
     6d0:	96 01       	movw	r18, r12
     6d2:	60 91 40 20 	lds	r22, 0x2040
     6d6:	70 91 41 20 	lds	r23, 0x2041
     6da:	80 91 42 20 	lds	r24, 0x2042
     6de:	90 91 43 20 	lds	r25, 0x2043
     6e2:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     6e6:	18 16       	cp	r1, r24
     6e8:	44 f4       	brge	.+16     	; 0x6fa <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     6ea:	ee e3       	ldi	r30, 0x3E	; 62
     6ec:	f0 e2       	ldi	r31, 0x20	; 32
     6ee:	80 81       	ld	r24, Z
     6f0:	91 81       	ldd	r25, Z+1	; 0x01
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	80 83       	st	Z, r24
     6f6:	91 83       	std	Z+1, r25	; 0x01
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     6fa:	10 92 3e 20 	sts	0x203E, r1
     6fe:	10 92 3f 20 	sts	0x203F, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     702:	20 91 3e 20 	lds	r18, 0x203E
     706:	30 91 3f 20 	lds	r19, 0x203F
     70a:	80 91 3c 20 	lds	r24, 0x203C
     70e:	90 91 3d 20 	lds	r25, 0x203D
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	24 f0       	brlt	.+8      	; 0x720 <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     718:	8c e3       	ldi	r24, 0x3C	; 60
     71a:	90 e2       	ldi	r25, 0x20	; 32
     71c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     720:	20 91 56 20 	lds	r18, 0x2056
     724:	30 91 57 20 	lds	r19, 0x2057
     728:	80 91 3c 20 	lds	r24, 0x203C
     72c:	90 91 3d 20 	lds	r25, 0x203D
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	24 f0       	brlt	.+8      	; 0x73e <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     736:	84 e5       	ldi	r24, 0x54	; 84
     738:	90 e2       	ldi	r25, 0x20	; 32
     73a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z9smoothADCi>
     746:	bc 01       	movw	r22, r24
     748:	88 27       	eor	r24, r24
     74a:	77 fd       	sbrc	r23, 7
     74c:	80 95       	com	r24
     74e:	98 2f       	mov	r25, r24
     750:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     754:	2f e1       	ldi	r18, 0x1F	; 31
     756:	35 e8       	ldi	r19, 0x85	; 133
     758:	48 e6       	ldi	r20, 0x68	; 104
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
     760:	25 e8       	ldi	r18, 0x85	; 133
     762:	3b ee       	ldi	r19, 0xEB	; 235
     764:	41 ed       	ldi	r20, 0xD1	; 209
     766:	5e e3       	ldi	r21, 0x3E	; 62
     768:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     76c:	60 93 64 20 	sts	0x2064, r22
     770:	70 93 65 20 	sts	0x2065, r23
     774:	80 93 66 20 	sts	0x2066, r24
     778:	90 93 67 20 	sts	0x2067, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z9smoothADCi>
     784:	bc 01       	movw	r22, r24
     786:	88 27       	eor	r24, r24
     788:	77 fd       	sbrc	r23, 7
     78a:	80 95       	com	r24
     78c:	98 2f       	mov	r25, r24
     78e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     792:	2f e1       	ldi	r18, 0x1F	; 31
     794:	35 e8       	ldi	r19, 0x85	; 133
     796:	48 e6       	ldi	r20, 0x68	; 104
     798:	52 e4       	ldi	r21, 0x42	; 66
     79a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
     79e:	25 e8       	ldi	r18, 0x85	; 133
     7a0:	3b ee       	ldi	r19, 0xEB	; 235
     7a2:	41 ed       	ldi	r20, 0xD1	; 209
     7a4:	5e e3       	ldi	r21, 0x3E	; 62
     7a6:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     7aa:	60 93 4c 20 	sts	0x204C, r22
     7ae:	70 93 4d 20 	sts	0x204D, r23
     7b2:	80 93 4e 20 	sts	0x204E, r24
     7b6:	90 93 4f 20 	sts	0x204F, r25
}
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
		
	if(act == LOWER){
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	09 f0       	breq	.+2      	; 0x7e2 <_Z13getMotorSpeedi+0x1e>
     7e0:	71 c0       	rjmp	.+226    	; 0x8c4 <_Z13getMotorSpeedi+0x100>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     7e2:	40 90 64 20 	lds	r4, 0x2064
     7e6:	50 90 65 20 	lds	r5, 0x2065
     7ea:	60 90 66 20 	lds	r6, 0x2066
     7ee:	70 90 67 20 	lds	r7, 0x2067
     7f2:	20 91 68 20 	lds	r18, 0x2068
     7f6:	30 91 69 20 	lds	r19, 0x2069
     7fa:	40 91 6a 20 	lds	r20, 0x206A
     7fe:	50 91 6b 20 	lds	r21, 0x206B
     802:	c3 01       	movw	r24, r6
     804:	b2 01       	movw	r22, r4
     806:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     80a:	6b 01       	movw	r12, r22
     80c:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	a9 01       	movw	r20, r18
     814:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     818:	18 16       	cp	r1, r24
     81a:	24 f0       	brlt	.+8      	; 0x824 <_Z13getMotorSpeedi+0x60>
		return input;
	else
		return input * -1;
     81c:	f7 fa       	bst	r15, 7
     81e:	f0 94       	com	r15
     820:	f7 f8       	bld	r15, 7
     822:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     824:	80 90 5c 20 	lds	r8, 0x205C
     828:	90 90 5d 20 	lds	r9, 0x205D
     82c:	a0 90 5e 20 	lds	r10, 0x205E
     830:	b0 90 5f 20 	lds	r11, 0x205F
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	c5 01       	movw	r24, r10
     83e:	b4 01       	movw	r22, r8
     840:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3>
     844:	a7 01       	movw	r20, r14
     846:	96 01       	movw	r18, r12
     848:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     84c:	18 16       	cp	r1, r24
     84e:	54 f4       	brge	.+20     	; 0x864 <_Z13getMotorSpeedi+0xa0>
			return lowerAct.speed / 3;
     850:	80 91 60 20 	lds	r24, 0x2060
     854:	90 91 61 20 	lds	r25, 0x2061
     858:	63 e0       	ldi	r22, 0x03	; 3
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	0e 94 bf 0b 	call	0x177e	; 0x177e <__divmodhi4>
     860:	cb 01       	movw	r24, r22
     862:	a6 c0       	rjmp	.+332    	; 0x9b0 <_Z13getMotorSpeedi+0x1ec>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     864:	20 91 68 20 	lds	r18, 0x2068
     868:	30 91 69 20 	lds	r19, 0x2069
     86c:	40 91 6a 20 	lds	r20, 0x206A
     870:	50 91 6b 20 	lds	r21, 0x206B
     874:	c3 01       	movw	r24, r6
     876:	b2 01       	movw	r22, r4
     878:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     88a:	18 16       	cp	r1, r24
     88c:	24 f0       	brlt	.+8      	; 0x896 <_Z13getMotorSpeedi+0xd2>
		return input;
	else
		return input * -1;
     88e:	f7 fa       	bst	r15, 7
     890:	f0 94       	com	r15
     892:	f7 f8       	bld	r15, 7
     894:	f0 94       	com	r15
int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
			return lowerAct.speed / 3;
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     896:	a7 01       	movw	r20, r14
     898:	96 01       	movw	r18, r12
     89a:	c5 01       	movw	r24, r10
     89c:	b4 01       	movw	r22, r8
     89e:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     8a2:	18 16       	cp	r1, r24
     8a4:	54 f4       	brge	.+20     	; 0x8ba <_Z13getMotorSpeedi+0xf6>
			return lowerAct.speed / 2;
     8a6:	80 91 60 20 	lds	r24, 0x2060
     8aa:	90 91 61 20 	lds	r25, 0x2061
     8ae:	99 23       	and	r25, r25
     8b0:	0c f4       	brge	.+2      	; 0x8b4 <_Z13getMotorSpeedi+0xf0>
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	95 95       	asr	r25
     8b6:	87 95       	ror	r24
     8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <_Z13getMotorSpeedi+0x1ec>
		else
			return lowerAct.speed;
     8ba:	80 91 60 20 	lds	r24, 0x2060
     8be:	90 91 61 20 	lds	r25, 0x2061
     8c2:	76 c0       	rjmp	.+236    	; 0x9b0 <_Z13getMotorSpeedi+0x1ec>
	}
	else if (act == UPPER){
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	09 f0       	breq	.+2      	; 0x8ca <_Z13getMotorSpeedi+0x106>
     8c8:	71 c0       	rjmp	.+226    	; 0x9ac <_Z13getMotorSpeedi+0x1e8>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     8ca:	40 90 4c 20 	lds	r4, 0x204C
     8ce:	50 90 4d 20 	lds	r5, 0x204D
     8d2:	60 90 4e 20 	lds	r6, 0x204E
     8d6:	70 90 4f 20 	lds	r7, 0x204F
     8da:	20 91 50 20 	lds	r18, 0x2050
     8de:	30 91 51 20 	lds	r19, 0x2051
     8e2:	40 91 52 20 	lds	r20, 0x2052
     8e6:	50 91 53 20 	lds	r21, 0x2053
     8ea:	c3 01       	movw	r24, r6
     8ec:	b2 01       	movw	r22, r4
     8ee:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     8f2:	6b 01       	movw	r12, r22
     8f4:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	a9 01       	movw	r20, r18
     8fc:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     900:	18 16       	cp	r1, r24
     902:	24 f0       	brlt	.+8      	; 0x90c <_Z13getMotorSpeedi+0x148>
		return input;
	else
		return input * -1;
     904:	f7 fa       	bst	r15, 7
     906:	f0 94       	com	r15
     908:	f7 f8       	bld	r15, 7
     90a:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     90c:	80 90 44 20 	lds	r8, 0x2044
     910:	90 90 45 20 	lds	r9, 0x2045
     914:	a0 90 46 20 	lds	r10, 0x2046
     918:	b0 90 47 20 	lds	r11, 0x2047
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	c5 01       	movw	r24, r10
     926:	b4 01       	movw	r22, r8
     928:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3>
     92c:	a7 01       	movw	r20, r14
     92e:	96 01       	movw	r18, r12
     930:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     934:	18 16       	cp	r1, r24
     936:	54 f4       	brge	.+20     	; 0x94c <_Z13getMotorSpeedi+0x188>
			return upperAct.speed / 3;
     938:	80 91 48 20 	lds	r24, 0x2048
     93c:	90 91 49 20 	lds	r25, 0x2049
     940:	63 e0       	ldi	r22, 0x03	; 3
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	0e 94 bf 0b 	call	0x177e	; 0x177e <__divmodhi4>
     948:	cb 01       	movw	r24, r22
     94a:	32 c0       	rjmp	.+100    	; 0x9b0 <_Z13getMotorSpeedi+0x1ec>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     94c:	20 91 50 20 	lds	r18, 0x2050
     950:	30 91 51 20 	lds	r19, 0x2051
     954:	40 91 52 20 	lds	r20, 0x2052
     958:	50 91 53 20 	lds	r21, 0x2053
     95c:	c3 01       	movw	r24, r6
     95e:	b2 01       	movw	r22, r4
     960:	0e 94 a8 09 	call	0x1350	; 0x1350 <__subsf3>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	a9 01       	movw	r20, r18
     96e:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     972:	18 16       	cp	r1, r24
     974:	24 f0       	brlt	.+8      	; 0x97e <_Z13getMotorSpeedi+0x1ba>
		return input;
	else
		return input * -1;
     976:	f7 fa       	bst	r15, 7
     978:	f0 94       	com	r15
     97a:	f7 f8       	bld	r15, 7
     97c:	f0 94       	com	r15
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
			return upperAct.speed / 3;
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     97e:	a7 01       	movw	r20, r14
     980:	96 01       	movw	r18, r12
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     98a:	18 16       	cp	r1, r24
     98c:	54 f4       	brge	.+20     	; 0x9a2 <_Z13getMotorSpeedi+0x1de>
			return upperAct.speed / 2;
     98e:	80 91 48 20 	lds	r24, 0x2048
     992:	90 91 49 20 	lds	r25, 0x2049
     996:	99 23       	and	r25, r25
     998:	0c f4       	brge	.+2      	; 0x99c <_Z13getMotorSpeedi+0x1d8>
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	95 95       	asr	r25
     99e:	87 95       	ror	r24
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <_Z13getMotorSpeedi+0x1ec>
		else
			return upperAct.speed;
     9a2:	80 91 48 20 	lds	r24, 0x2048
     9a6:	90 91 49 20 	lds	r25, 0x2049
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <_Z13getMotorSpeedi+0x1ec>
	}
	
	
	////////
	return 0;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
}
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	9f 90       	pop	r9
     9be:	8f 90       	pop	r8
     9c0:	7f 90       	pop	r7
     9c2:	6f 90       	pop	r6
     9c4:	5f 90       	pop	r5
     9c6:	4f 90       	pop	r4
     9c8:	08 95       	ret

000009ca <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	f1 f4       	brne	.+60     	; 0xa0a <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     9ce:	80 91 62 20 	lds	r24, 0x2062
     9d2:	90 91 63 20 	lds	r25, 0x2063
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	09 f4       	brne	.+2      	; 0x9dc <_Z11getMotorDiri+0x12>
     9da:	3e c0       	rjmp	.+124    	; 0xa58 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     9dc:	20 91 68 20 	lds	r18, 0x2068
     9e0:	30 91 69 20 	lds	r19, 0x2069
     9e4:	40 91 6a 20 	lds	r20, 0x206A
     9e8:	50 91 6b 20 	lds	r21, 0x206B
     9ec:	60 91 64 20 	lds	r22, 0x2064
     9f0:	70 91 65 20 	lds	r23, 0x2065
     9f4:	80 91 66 20 	lds	r24, 0x2066
     9f8:	90 91 67 20 	lds	r25, 0x2067
     9fc:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     a00:	18 16       	cp	r1, r24
     a02:	14 f5       	brge	.+68     	; 0xa48 <_Z11getMotorDiri+0x7e>
			return -1;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	01 f5       	brne	.+64     	; 0xa4e <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     a0e:	80 91 4a 20 	lds	r24, 0x204A
     a12:	90 91 4b 20 	lds	r25, 0x204B
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	f9 f0       	breq	.+62     	; 0xa58 <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     a1a:	20 91 50 20 	lds	r18, 0x2050
     a1e:	30 91 51 20 	lds	r19, 0x2051
     a22:	40 91 52 20 	lds	r20, 0x2052
     a26:	50 91 53 20 	lds	r21, 0x2053
     a2a:	60 91 4c 20 	lds	r22, 0x204C
     a2e:	70 91 4d 20 	lds	r23, 0x204D
     a32:	80 91 4e 20 	lds	r24, 0x204E
     a36:	90 91 4f 20 	lds	r25, 0x204F
     a3a:	0e 94 34 0b 	call	0x1668	; 0x1668 <__gesf2>
     a3e:	18 16       	cp	r1, r24
     a40:	4c f4       	brge	.+18     	; 0xa54 <_Z11getMotorDiri+0x8a>
			return -1;
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     a58:	08 95       	ret

00000a5a <main>:

int main(void)
{
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <main+0x6>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <main+0x8>
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     a66:	0e 94 87 02 	call	0x50e	; 0x50e <_Z25DemInitThingsYouBeenDoingv>
     a6a:	2f ef       	ldi	r18, 0xFF	; 255
     a6c:	87 ea       	ldi	r24, 0xA7	; 167
     a6e:	91 e6       	ldi	r25, 0x61	; 97
     a70:	21 50       	subi	r18, 0x01	; 1
     a72:	80 40       	sbci	r24, 0x00	; 0
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <main+0x16>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <main+0x20>
     a7a:	00 00       	nop
	_delay_ms(1000);

	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     a7c:	40 e6       	ldi	r20, 0x60	; 96
     a7e:	56 e0       	ldi	r21, 0x06	; 6
     a80:	60 ea       	ldi	r22, 0xA0	; 160
     a82:	79 e0       	ldi	r23, 0x09	; 9
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 3.0;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e4       	ldi	r26, 0x40	; 64
     a92:	b0 e4       	ldi	r27, 0x40	; 64
     a94:	80 93 50 20 	sts	0x2050, r24
     a98:	90 93 51 20 	sts	0x2051, r25
     a9c:	a0 93 52 20 	sts	0x2052, r26
     aa0:	b0 93 53 20 	sts	0x2053, r27
	lowerAct.desiredPos = 3.5;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e6       	ldi	r26, 0x60	; 96
     aaa:	b0 e4       	ldi	r27, 0x40	; 64
     aac:	80 93 68 20 	sts	0x2068, r24
     ab0:	90 93 69 20 	sts	0x2069, r25
     ab4:	a0 93 6a 20 	sts	0x206A, r26
     ab8:	b0 93 6b 20 	sts	0x206B, r27
	
	//Wait until rover is unpaused
	while(!CHECK_ISROVING());
     abc:	e0 e0       	ldi	r30, 0x00	; 0
     abe:	f6 e0       	ldi	r31, 0x06	; 6
     ac0:	80 85       	ldd	r24, Z+8	; 0x08
     ac2:	84 ff       	sbrs	r24, 4
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <main+0x66>
	
	lowerAct.enable();
     ac6:	84 e5       	ldi	r24, 0x54	; 84
     ac8:	90 e2       	ldi	r25, 0x20	; 32
     aca:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9motorInfo6enableEv>
	upperAct.enable();
     ace:	8c e3       	ldi	r24, 0x3C	; 60
     ad0:	90 e2       	ldi	r25, 0x20	; 32
     ad2:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9motorInfo6enableEv>
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled) && CHECK_ISROVING()){
     ad6:	0f 2e       	mov	r0, r31
     ad8:	f2 e6       	ldi	r31, 0x62	; 98
     ada:	cf 2e       	mov	r12, r31
     adc:	f0 e2       	ldi	r31, 0x20	; 32
     ade:	df 2e       	mov	r13, r31
     ae0:	f0 2d       	mov	r31, r0
     ae2:	0f 2e       	mov	r0, r31
     ae4:	fa e4       	ldi	r31, 0x4A	; 74
     ae6:	ef 2e       	mov	r14, r31
     ae8:	f0 e2       	ldi	r31, 0x20	; 32
     aea:	ff 2e       	mov	r15, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	00 e0       	ldi	r16, 0x00	; 0
     af0:	16 e0       	ldi	r17, 0x06	; 6
     af2:	f6 01       	movw	r30, r12
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	89 2b       	or	r24, r25
     afa:	31 f4       	brne	.+12     	; 0xb08 <main+0xae>
     afc:	f7 01       	movw	r30, r14
     afe:	80 81       	ld	r24, Z
     b00:	91 81       	ldd	r25, Z+1	; 0x01
     b02:	89 2b       	or	r24, r25
     b04:	09 f4       	brne	.+2      	; 0xb08 <main+0xae>
     b06:	ed c0       	rjmp	.+474    	; 0xce2 <main+0x288>
     b08:	f8 01       	movw	r30, r16
     b0a:	80 85       	ldd	r24, Z+8	; 0x08
     b0c:	84 fd       	sbrc	r24, 4
     b0e:	21 c1       	rjmp	.+578    	; 0xd52 <main+0x2f8>
     b10:	e8 c0       	rjmp	.+464    	; 0xce2 <main+0x288>
	/////////////Initial Calibration and Default Positions//////////////////////

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	while(1){
		if(CurrentState == WaitForHost){
     b12:	80 91 12 20 	lds	r24, 0x2012
     b16:	81 11       	cpse	r24, r1
     b18:	2d c0       	rjmp	.+90     	; 0xb74 <main+0x11a>
			SendStringPC("ID: ArmControl\r\n");
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e2       	ldi	r25, 0x20	; 32
     b1e:	0e 94 c7 02 	call	0x58e	; 0x58e <_Z12SendStringPCPc>
     b22:	ff ef       	ldi	r31, 0xFF	; 255
     b24:	23 ed       	ldi	r18, 0xD3	; 211
     b26:	80 e3       	ldi	r24, 0x30	; 48
     b28:	f1 50       	subi	r31, 0x01	; 1
     b2a:	20 40       	sbci	r18, 0x00	; 0
     b2c:	80 40       	sbci	r24, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0xce>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <main+0xd8>
     b32:	00 00       	nop
			_delay_ms(500);
			if(recieveBuffer[0] == 'r'){
     b34:	80 91 13 20 	lds	r24, 0x2013
     b38:	82 37       	cpi	r24, 0x72	; 114
     b3a:	c9 f4       	brne	.+50     	; 0xb6e <main+0x114>
				CurrentState = ARMControl;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 12 20 	sts	0x2012, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     b42:	f8 01       	movw	r30, r16
     b44:	81 81       	ldd	r24, Z+1	; 0x01
     b46:	85 ff       	sbrs	r24, 5
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <main+0xe8>
				USART_PutChar(&USARTC0, 'r');
     b4a:	82 e7       	ldi	r24, 0x72	; 114
     b4c:	80 83       	st	Z, r24
				TimePrevious = TimeSinceInit;
     b4e:	80 91 21 20 	lds	r24, 0x2021
     b52:	90 91 22 20 	lds	r25, 0x2022
     b56:	a0 91 23 20 	lds	r26, 0x2023
     b5a:	b0 91 24 20 	lds	r27, 0x2024
     b5e:	80 93 1d 20 	sts	0x201D, r24
     b62:	90 93 1e 20 	sts	0x201E, r25
     b66:	a0 93 1f 20 	sts	0x201F, r26
     b6a:	b0 93 20 20 	sts	0x2020, r27
			}
			bufferIndex = 0;
     b6e:	10 92 25 20 	sts	0x2025, r1
     b72:	cf cf       	rjmp	.-98     	; 0xb12 <main+0xb8>
		}else if(CurrentState == ARMControl){
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	69 f6       	brne	.-102    	; 0xb12 <main+0xb8>
			if(IsPacketToParse){
     b78:	80 91 28 20 	lds	r24, 0x2028
     b7c:	88 23       	and	r24, r24
     b7e:	49 f2       	breq	.-110    	; 0xb12 <main+0xb8>
				if(ARM_Dock_State != ARM_Dock_State_Prev){
     b80:	80 91 27 20 	lds	r24, 0x2027
     b84:	90 91 26 20 	lds	r25, 0x2026
     b88:	89 17       	cp	r24, r25
     b8a:	39 f0       	breq	.+14     	; 0xb9a <main+0x140>
					DockArm(ARM_Dock_State);
     b8c:	0e 94 13 07 	call	0xe26	; 0xe26 <_Z7DockArmh>
					ARM_Dock_State_Prev = ARM_Dock_State;
     b90:	80 91 27 20 	lds	r24, 0x2027
     b94:	80 93 26 20 	sts	0x2026, r24
     b98:	73 c0       	rjmp	.+230    	; 0xc80 <main+0x226>
				}else{
					ERROR_SET();									//Show light when done with actuators
     b9a:	80 e8       	ldi	r24, 0x80	; 128
     b9c:	f4 01       	movw	r30, r8
     b9e:	85 83       	std	Z+5, r24	; 0x05
					lowerAct.enable();						//Re-enable lower actuator
     ba0:	84 e5       	ldi	r24, 0x54	; 84
     ba2:	90 e2       	ldi	r25, 0x20	; 32
     ba4:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9motorInfo6enableEv>
					upperAct.enable();						//Re-enabled lower actuator
     ba8:	8c e3       	ldi	r24, 0x3C	; 60
     baa:	90 e2       	ldi	r25, 0x20	; 32
     bac:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN9motorInfo6enableEv>

					baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
     bb0:	e3 e3       	ldi	r30, 0x33	; 51
     bb2:	f0 e2       	ldi	r31, 0x20	; 32
     bb4:	60 81       	ld	r22, Z
     bb6:	71 81       	ldd	r23, Z+1	; 0x01
     bb8:	89 e2       	ldi	r24, 0x29	; 41
     bba:	90 e2       	ldi	r25, 0x20	; 32
     bbc:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN13rotateStepper10rotateBaseEi>
					
					checkActPosition();								//Check once to avoid loop is possible
     bc0:	0e 94 0b 03 	call	0x616	; 0x616 <_Z16checkActPositionv>
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     bc4:	30 c0       	rjmp	.+96     	; 0xc26 <main+0x1cc>
						checkActPosition();							//Check positions
     bc6:	0e 94 0b 03 	call	0x616	; 0x616 <_Z16checkActPositionv>
						DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z13getMotorSpeedi>
     bd2:	48 2e       	mov	r4, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z11getMotorDiri>
     bdc:	38 2e       	mov	r3, r24
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z13getMotorSpeedi>
     be6:	58 2e       	mov	r5, r24
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z11getMotorDiri>
     bf0:	34 9c       	mul	r3, r4
     bf2:	40 2d       	mov	r20, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	41 58       	subi	r20, 0x81	; 129
     bf8:	85 9d       	mul	r24, r5
     bfa:	80 2d       	mov	r24, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	6f e7       	ldi	r22, 0x7F	; 127
     c00:	68 0f       	add	r22, r24
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN10Sabertooth11ParsePacketEhh>
						while(!CHECK_ISROVING()){
     c0a:	f7 01       	movw	r30, r14
     c0c:	80 85       	ldd	r24, Z+8	; 0x08
     c0e:	84 fd       	sbrc	r24, 4
     c10:	0a c0       	rjmp	.+20     	; 0xc26 <main+0x1cc>
							DriveSaber.ParsePacket(127,127);
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	6f e7       	ldi	r22, 0x7F	; 127
     c16:	ce 01       	movw	r24, r28
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN10Sabertooth11ParsePacketEhh>
					
					checkActPosition();								//Check once to avoid loop is possible
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
						checkActPosition();							//Check positions
						DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
						while(!CHECK_ISROVING()){
     c1e:	f7 01       	movw	r30, r14
     c20:	80 85       	ldd	r24, Z+8	; 0x08
     c22:	84 ff       	sbrs	r24, 4
     c24:	f6 cf       	rjmp	.-20     	; 0xc12 <main+0x1b8>
					upperAct.enable();						//Re-enabled lower actuator

					baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
					checkActPosition();								//Check once to avoid loop is possible
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     c26:	f6 01       	movw	r30, r12
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	89 2b       	or	r24, r25
     c2e:	59 f6       	brne	.-106    	; 0xbc6 <main+0x16c>
     c30:	f5 01       	movw	r30, r10
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	89 2b       	or	r24, r25
     c38:	31 f6       	brne	.-116    	; 0xbc6 <main+0x16c>
							DriveSaber.ParsePacket(127,127);
						}  //e-stop check
					}												//Exit when done moving
					

					DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more
     c3a:	4f e7       	ldi	r20, 0x7F	; 127
     c3c:	6f e7       	ldi	r22, 0x7F	; 127
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN10Sabertooth11ParsePacketEhh>
				
					if(gripStepper.desiredGripState == GRIP){
     c46:	f3 01       	movw	r30, r6
     c48:	80 81       	ld	r24, Z
     c4a:	81 11       	cpse	r24, r1
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <main+0x20a>
						gripStepper.enable();
     c4e:	85 e3       	ldi	r24, 0x35	; 53
     c50:	90 e2       	ldi	r25, 0x20	; 32
     c52:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN11stepperInfo6enableEv>
						gripStepper.processCommand(GRIP);
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	85 e3       	ldi	r24, 0x35	; 53
     c5c:	90 e2       	ldi	r25, 0x20	; 32
     c5e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN11stepperInfo14processCommandEi>
     c62:	0e c0       	rjmp	.+28     	; 0xc80 <main+0x226>
					}else if(gripStepper.desiredGripState == RELEASE){
     c64:	f3 01       	movw	r30, r6
     c66:	80 81       	ld	r24, Z
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	51 f4       	brne	.+20     	; 0xc80 <main+0x226>
						gripStepper.enable();
     c6c:	85 e3       	ldi	r24, 0x35	; 53
     c6e:	90 e2       	ldi	r25, 0x20	; 32
     c70:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN11stepperInfo6enableEv>
						gripStepper.processCommand(RELEASE);
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	85 e3       	ldi	r24, 0x35	; 53
     c7a:	90 e2       	ldi	r25, 0x20	; 32
     c7c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN11stepperInfo14processCommandEi>

					}
				}
				
				IsPacketToParse = false;
     c80:	10 92 28 20 	sts	0x2028, r1
				ERROR_CLR();
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	f4 01       	movw	r30, r8
     c88:	86 83       	std	Z+6, r24	; 0x06
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c8a:	f8 01       	movw	r30, r16
     c8c:	81 81       	ldd	r24, Z+1	; 0x01
     c8e:	85 ff       	sbrs	r24, 5
     c90:	fc cf       	rjmp	.-8      	; 0xc8a <main+0x230>
				USART_PutChar(&USARTC0, 255);
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c96:	f8 01       	movw	r30, r16
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	85 ff       	sbrs	r24, 5
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <main+0x23c>
				USART_PutChar(&USARTC0, 0b00000010 | CHECK_GRIP_CLOSE());
     c9e:	f7 01       	movw	r30, r14
     ca0:	80 85       	ldd	r24, Z+8	; 0x08
     ca2:	83 fd       	sbrc	r24, 3
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <main+0x250>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <main+0x252>
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	f8 01       	movw	r30, r16
     cae:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     cb0:	f8 01       	movw	r30, r16
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	85 ff       	sbrs	r24, 5
     cb6:	fc cf       	rjmp	.-8      	; 0xcb0 <main+0x256>
				USART_PutChar(&USARTC0,255);
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	80 83       	st	Z, r24
				bufferIndex = 0;
     cbc:	10 92 25 20 	sts	0x2025, r1
				TimePrevious = TimeSinceInit;
     cc0:	80 91 21 20 	lds	r24, 0x2021
     cc4:	90 91 22 20 	lds	r25, 0x2022
     cc8:	a0 91 23 20 	lds	r26, 0x2023
     ccc:	b0 91 24 20 	lds	r27, 0x2024
     cd0:	80 93 1d 20 	sts	0x201D, r24
     cd4:	90 93 1e 20 	sts	0x201E, r25
     cd8:	a0 93 1f 20 	sts	0x201F, r26
     cdc:	b0 93 20 20 	sts	0x2020, r27
     ce0:	18 cf       	rjmp	.-464    	; 0xb12 <main+0xb8>
	while((lowerAct.enabled || upperAct.enabled) && CHECK_ISROVING()){
		checkActPosition();
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
	}

	baseStepper.calibrateBase();
     ce2:	89 e2       	ldi	r24, 0x29	; 41
     ce4:	90 e2       	ldi	r25, 0x20	; 32
     ce6:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN13rotateStepper13calibrateBaseEv>
	MD2_DIR_CLR();
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	e0 e6       	ldi	r30, 0x60	; 96
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	86 83       	std	Z+6, r24	; 0x06
	baseStepper.rotateBase(0);  //Note that this function takes an angle relative
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	89 e2       	ldi	r24, 0x29	; 41
     cf8:	90 e2       	ldi	r25, 0x20	; 32
     cfa:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN13rotateStepper10rotateBaseEi>
	
	
	gripStepper.enable();							 //to the absolute 0 on the robot
     cfe:	85 e3       	ldi	r24, 0x35	; 53
     d00:	90 e2       	ldi	r25, 0x20	; 32
     d02:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN11stepperInfo6enableEv>
	gripStepper.processCommand(RELEASE);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	85 e3       	ldi	r24, 0x35	; 53
     d0c:	90 e2       	ldi	r25, 0x20	; 32
     d0e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN11stepperInfo14processCommandEi>

					}
				}
				
				IsPacketToParse = false;
				ERROR_CLR();
     d12:	0f 2e       	mov	r0, r31
     d14:	f0 e4       	ldi	r31, 0x40	; 64
     d16:	8f 2e       	mov	r8, r31
     d18:	f6 e0       	ldi	r31, 0x06	; 6
     d1a:	9f 2e       	mov	r9, r31
     d1c:	f0 2d       	mov	r31, r0
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     d1e:	00 ea       	ldi	r16, 0xA0	; 160
     d20:	18 e0       	ldi	r17, 0x08	; 8
				USART_PutChar(&USARTC0, 255);
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
				USART_PutChar(&USARTC0, 0b00000010 | CHECK_GRIP_CLOSE());
     d22:	0f 2e       	mov	r0, r31
     d24:	e1 2c       	mov	r14, r1
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	ff 2e       	mov	r15, r31
     d2a:	f0 2d       	mov	r31, r0
					upperAct.enable();						//Re-enabled lower actuator

					baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
					checkActPosition();								//Check once to avoid loop is possible
					while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f2 e6       	ldi	r31, 0x62	; 98
     d30:	cf 2e       	mov	r12, r31
     d32:	f0 e2       	ldi	r31, 0x20	; 32
     d34:	df 2e       	mov	r13, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	0f 2e       	mov	r0, r31
     d3a:	fa e4       	ldi	r31, 0x4A	; 74
     d3c:	af 2e       	mov	r10, r31
     d3e:	f0 e2       	ldi	r31, 0x20	; 32
     d40:	bf 2e       	mov	r11, r31
     d42:	f0 2d       	mov	r31, r0
					}												//Exit when done moving
					

					DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more
				
					if(gripStepper.desiredGripState == GRIP){
     d44:	0f 2e       	mov	r0, r31
     d46:	fb e3       	ldi	r31, 0x3B	; 59
     d48:	6f 2e       	mov	r6, r31
     d4a:	f0 e2       	ldi	r31, 0x20	; 32
     d4c:	7f 2e       	mov	r7, r31
     d4e:	f0 2d       	mov	r31, r0
     d50:	e0 ce       	rjmp	.-576    	; 0xb12 <main+0xb8>
	upperAct.enable();
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled) && CHECK_ISROVING()){
		checkActPosition();
     d52:	0e 94 0b 03 	call	0x616	; 0x616 <_Z16checkActPositionv>
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z13getMotorSpeedi>
     d5e:	a8 2e       	mov	r10, r24
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z11getMotorDiri>
     d68:	98 2e       	mov	r9, r24
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z13getMotorSpeedi>
     d72:	b8 2e       	mov	r11, r24
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_Z11getMotorDiri>
     d7c:	9a 9c       	mul	r9, r10
     d7e:	40 2d       	mov	r20, r0
     d80:	11 24       	eor	r1, r1
     d82:	41 58       	subi	r20, 0x81	; 129
     d84:	8b 9d       	mul	r24, r11
     d86:	80 2d       	mov	r24, r0
     d88:	11 24       	eor	r1, r1
     d8a:	6f e7       	ldi	r22, 0x7F	; 127
     d8c:	68 0f       	add	r22, r24
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_ZN10Sabertooth11ParsePacketEhh>
     d96:	ad ce       	rjmp	.-678    	; 0xaf2 <main+0x98>

00000d98 <__vector_77>:
		}
	}

}

ISR(TCD0_OVF_vect){
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
	TimeSinceInit++;
     daa:	80 91 21 20 	lds	r24, 0x2021
     dae:	90 91 22 20 	lds	r25, 0x2022
     db2:	a0 91 23 20 	lds	r26, 0x2023
     db6:	b0 91 24 20 	lds	r27, 0x2024
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	a1 1d       	adc	r26, r1
     dbe:	b1 1d       	adc	r27, r1
     dc0:	80 93 21 20 	sts	0x2021, r24
     dc4:	90 93 22 20 	sts	0x2022, r25
     dc8:	a0 93 23 20 	sts	0x2023, r26
     dcc:	b0 93 24 20 	sts	0x2024, r27
}
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <_GLOBAL__sub_I_swap>:

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     de2:	84 e5       	ldi	r24, 0x54	; 84
     de4:	90 e2       	ldi	r25, 0x20	; 32
     de6:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     dea:	8c e3       	ldi	r24, 0x3C	; 60
     dec:	90 e2       	ldi	r25, 0x20	; 32
     dee:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     df2:	85 e3       	ldi	r24, 0x35	; 53
     df4:	90 e2       	ldi	r25, 0x20	; 32
     df6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     dfa:	89 e2       	ldi	r24, 0x29	; 41
     dfc:	90 e2       	ldi	r25, 0x20	; 32
     dfe:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN13rotateStepperC1Ev>
     e02:	08 95       	ret

00000e04 <_GLOBAL__sub_D_swap>:
     e04:	89 e2       	ldi	r24, 0x29	; 41
     e06:	90 e2       	ldi	r25, 0x20	; 32
     e08:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN13rotateStepperD1Ev>
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     e0c:	85 e3       	ldi	r24, 0x35	; 53
     e0e:	90 e2       	ldi	r25, 0x20	; 32
     e10:	0e 94 df 08 	call	0x11be	; 0x11be <_ZN11stepperInfoD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
     e14:	8c e3       	ldi	r24, 0x3C	; 60
     e16:	90 e2       	ldi	r25, 0x20	; 32
     e18:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN9motorInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     e1c:	84 e5       	ldi	r24, 0x54	; 84
     e1e:	90 e2       	ldi	r25, 0x20	; 32
     e20:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN9motorInfoD1Ev>
     e24:	08 95       	ret

00000e26 <_Z7DockArmh>:
#include "Misc.h"
#include <avr/io.h>
#include "XMegaMacros.h"

void DockArm(unsigned char dockState){
	if(dockState == DOCK_ARM){
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	21 f4       	brne	.+8      	; 0xe32 <_Z7DockArmh+0xc>
		ERROR_SET();
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	e0 e4       	ldi	r30, 0x40	; 64
     e2e:	f6 e0       	ldi	r31, 0x06	; 6
     e30:	85 83       	std	Z+5, r24	; 0x05
     e32:	08 95       	ret

00000e34 <_ZN9motorInfoC1Ev>:


#include "motorInfo.h"

// default constructor
motorInfo::motorInfo() {
     e34:	fc 01       	movw	r30, r24
	acceptableCount = 0;
     e36:	12 82       	std	Z+2, r1	; 0x02
     e38:	13 82       	std	Z+3, r1	; 0x03
	acceptableCountMax = 5;
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	80 83       	st	Z, r24
     e40:	91 83       	std	Z+1, r25	; 0x01
	acceptableError = .2;  //Needs calibration
     e42:	4d ec       	ldi	r20, 0xCD	; 205
     e44:	5c ec       	ldi	r21, 0xCC	; 204
     e46:	6c e4       	ldi	r22, 0x4C	; 76
     e48:	7e e3       	ldi	r23, 0x3E	; 62
     e4a:	44 83       	std	Z+4, r20	; 0x04
     e4c:	55 83       	std	Z+5, r21	; 0x05
     e4e:	66 83       	std	Z+6, r22	; 0x06
     e50:	77 83       	std	Z+7, r23	; 0x07
	slowRange = .75;
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e4       	ldi	r22, 0x40	; 64
     e58:	7f e3       	ldi	r23, 0x3F	; 63
     e5a:	40 87       	std	Z+8, r20	; 0x08
     e5c:	51 87       	std	Z+9, r21	; 0x09
     e5e:	62 87       	std	Z+10, r22	; 0x0a
     e60:	73 87       	std	Z+11, r23	; 0x0b
	speed = 100;
     e62:	84 e6       	ldi	r24, 0x64	; 100
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	84 87       	std	Z+12, r24	; 0x0c
     e68:	95 87       	std	Z+13, r25	; 0x0d
	enabled = 0;
     e6a:	16 86       	std	Z+14, r1	; 0x0e
     e6c:	17 86       	std	Z+15, r1	; 0x0f
     e6e:	08 95       	ret

00000e70 <_ZN9motorInfoD1Ev>:
	
	//currentPos = 0;
} //motorInfo

// default destructor
motorInfo::~motorInfo() {
     e70:	08 95       	ret

00000e72 <_ZN9motorInfo6enableEv>:
	
} //~motorInfo


void motorInfo::enable(){
	enabled = 1;
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	26 87       	std	Z+14, r18	; 0x0e
     e7a:	37 87       	std	Z+15, r19	; 0x0f
     e7c:	08 95       	ret

00000e7e <_ZN9motorInfo7disableEv>:
}

void motorInfo::disable(){
	enabled = 0;
     e7e:	fc 01       	movw	r30, r24
     e80:	16 86       	std	Z+14, r1	; 0x0e
     e82:	17 86       	std	Z+15, r1	; 0x0f
     e84:	08 95       	ret

00000e86 <_ZN9motorInfo10setDesiredEf>:
}


void motorInfo::setDesired(float desired){
	desiredPos = desired; //Mutate desiredPos
     e86:	fc 01       	movw	r30, r24
     e88:	44 8b       	std	Z+20, r20	; 0x14
     e8a:	55 8b       	std	Z+21, r21	; 0x15
     e8c:	66 8b       	std	Z+22, r22	; 0x16
     e8e:	77 8b       	std	Z+23, r23	; 0x17
     e90:	08 95       	ret

00000e92 <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     e92:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     e94:	45 e8       	ldi	r20, 0x85	; 133
     e96:	5b e2       	ldi	r21, 0x2B	; 43
     e98:	61 e8       	ldi	r22, 0x81	; 129
     e9a:	73 e4       	ldi	r23, 0x43	; 67
     e9c:	44 83       	std	Z+4, r20	; 0x04
     e9e:	55 83       	std	Z+5, r21	; 0x05
     ea0:	66 83       	std	Z+6, r22	; 0x06
     ea2:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	60 e8       	ldi	r22, 0x80	; 128
     eaa:	7f eb       	ldi	r23, 0xBF	; 191
     eac:	40 83       	st	Z, r20
     eae:	51 83       	std	Z+1, r21	; 0x01
     eb0:	62 83       	std	Z+2, r22	; 0x02
     eb2:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     eb4:	10 86       	std	Z+8, r1	; 0x08
     eb6:	11 86       	std	Z+9, r1	; 0x09
     eb8:	08 95       	ret

00000eba <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     eba:	08 95       	ret

00000ebc <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	e0 e6       	ldi	r30, 0x60	; 96
     ec6:	f6 e0       	ldi	r31, 0x06	; 6
     ec8:	86 83       	std	Z+6, r24	; 0x06
	bool calFirstPress = false;
	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     ece:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		while(!CHECK_ISROVING());
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f6 e0       	ldi	r31, 0x06	; 6
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     ed4:	a0 e6       	ldi	r26, 0x60	; 96
     ed6:	b6 e0       	ldi	r27, 0x06	; 6
     ed8:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     eda:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		while(!CHECK_ISROVING());
     edc:	80 85       	ldd	r24, Z+8	; 0x08
     ede:	84 ff       	sbrs	r24, 4
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <_ZN13rotateStepper13calibrateBaseEv+0x20>
		calButtonState = CHECK_CAL();
     ee2:	80 85       	ldd	r24, Z+8	; 0x08

		if(calButtonState && !calFirstPress){
     ee4:	82 ff       	sbrs	r24, 2
     ee6:	10 c0       	rjmp	.+32     	; 0xf08 <_ZN13rotateStepper13calibrateBaseEv+0x4c>
     ee8:	21 11       	cpse	r18, r1
     eea:	10 c0       	rjmp	.+32     	; 0xf0c <_ZN13rotateStepper13calibrateBaseEv+0x50>
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     eec:	15 96       	adiw	r26, 0x05	; 5
     eee:	3c 93       	st	X, r19
     ef0:	15 97       	sbiw	r26, 0x05	; 5
     ef2:	2f ef       	ldi	r18, 0xFF	; 255
     ef4:	43 ec       	ldi	r20, 0xC3	; 195
     ef6:	89 e0       	ldi	r24, 0x09	; 9
     ef8:	21 50       	subi	r18, 0x01	; 1
     efa:	40 40       	sbci	r20, 0x00	; 0
     efc:	80 40       	sbci	r24, 0x00	; 0
     efe:	e1 f7       	brne	.-8      	; 0xef8 <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <_ZN13rotateStepper13calibrateBaseEv+0x46>
     f02:	00 00       	nop
	while (calInProgress){
		while(!CHECK_ISROVING());
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
     f04:	23 2f       	mov	r18, r19
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <_ZN13rotateStepper13calibrateBaseEv+0x50>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(100);  //For gracefulness
		}
		
		if(calFirstPress == true)
     f08:	22 23       	and	r18, r18
     f0a:	41 f0       	breq	.+16     	; 0xf1c <_ZN13rotateStepper13calibrateBaseEv+0x60>
			++stepCount;
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
     f10:	67 39       	cpi	r22, 0x97	; 151
     f12:	71 05       	cpc	r23, r1
     f14:	1c f0       	brlt	.+6      	; 0xf1c <_ZN13rotateStepper13calibrateBaseEv+0x60>
     f16:	80 85       	ldd	r24, Z+8	; 0x08
     f18:	82 fd       	sbrc	r24, 2
     f1a:	13 c0       	rjmp	.+38     	; 0xf42 <_ZN13rotateStepper13calibrateBaseEv+0x86>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     f1c:	16 96       	adiw	r26, 0x06	; 6
     f1e:	5c 93       	st	X, r21
     f20:	16 97       	sbiw	r26, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f22:	8f e7       	ldi	r24, 0x7F	; 127
     f24:	95 e2       	ldi	r25, 0x25	; 37
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <_ZN13rotateStepper13calibrateBaseEv+0x6a>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <_ZN13rotateStepper13calibrateBaseEv+0x70>
     f2c:	00 00       	nop
		_delay_us(1200);
		MD2_STEP_SET();
     f2e:	15 96       	adiw	r26, 0x05	; 5
     f30:	5c 93       	st	X, r21
     f32:	15 97       	sbiw	r26, 0x05	; 5
     f34:	8f e7       	ldi	r24, 0x7F	; 127
     f36:	95 e2       	ldi	r25, 0x25	; 37
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <_ZN13rotateStepper13calibrateBaseEv+0x7c>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <_ZN13rotateStepper13calibrateBaseEv+0x82>
     f3e:	00 00       	nop
     f40:	cd cf       	rjmp	.-102    	; 0xedc <_ZN13rotateStepper13calibrateBaseEv+0x20>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	e0 e6       	ldi	r30, 0x60	; 96
     f46:	f6 e0       	ldi	r31, 0x06	; 6
     f48:	86 83       	std	Z+6, r24	; 0x06
     f4a:	8f e7       	ldi	r24, 0x7F	; 127
     f4c:	95 e2       	ldi	r25, 0x25	; 37
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <_ZN13rotateStepper13calibrateBaseEv+0x92>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <_ZN13rotateStepper13calibrateBaseEv+0x98>
     f54:	00 00       	nop
		_delay_us(1200);
		MD2_STEP_SET();
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	85 83       	std	Z+5, r24	; 0x05
     f5a:	8f e7       	ldi	r24, 0x7F	; 127
     f5c:	95 e2       	ldi	r25, 0x25	; 37
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <_ZN13rotateStepper13calibrateBaseEv+0xa2>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <_ZN13rotateStepper13calibrateBaseEv+0xa8>
     f64:	00 00       	nop
		_delay_us(1200);	
		
	}	
	multiplier = stepCount / calSpan;
     f66:	88 27       	eor	r24, r24
     f68:	77 fd       	sbrc	r23, 7
     f6a:	80 95       	com	r24
     f6c:	98 2f       	mov	r25, r24
     f6e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     f72:	2c 81       	ldd	r18, Y+4	; 0x04
     f74:	3d 81       	ldd	r19, Y+5	; 0x05
     f76:	4e 81       	ldd	r20, Y+6	; 0x06
     f78:	5f 81       	ldd	r21, Y+7	; 0x07
     f7a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
     f7e:	68 83       	st	Y, r22
     f80:	79 83       	std	Y+1, r23	; 0x01
     f82:	8a 83       	std	Y+2, r24	; 0x02
     f84:	9b 83       	std	Y+3, r25	; 0x03
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ec 01       	movw	r28, r24
     f92:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
     f94:	18 16       	cp	r1, r24
     f96:	19 06       	cpc	r1, r25
     f98:	2c f4       	brge	.+10     	; 0xfa4 <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	e0 e6       	ldi	r30, 0x60	; 96
     f9e:	f6 e0       	ldi	r31, 0x06	; 6
     fa0:	26 83       	std	Z+6, r18	; 0x06
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	e0 e6       	ldi	r30, 0x60	; 96
     fa8:	f6 e0       	ldi	r31, 0x06	; 6
     faa:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
     fac:	bc 01       	movw	r22, r24
     fae:	99 23       	and	r25, r25
     fb0:	24 f4       	brge	.+8      	; 0xfba <_ZN13rotateStepper8moveBaseEi+0x2e>
     fb2:	66 27       	eor	r22, r22
     fb4:	77 27       	eor	r23, r23
     fb6:	68 1b       	sub	r22, r24
     fb8:	79 0b       	sbc	r23, r25
     fba:	88 27       	eor	r24, r24
     fbc:	77 fd       	sbrc	r23, 7
     fbe:	80 95       	com	r24
     fc0:	98 2f       	mov	r25, r24
     fc2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     fc6:	28 81       	ld	r18, Y
     fc8:	39 81       	ldd	r19, Y+1	; 0x01
     fca:	4a 81       	ldd	r20, Y+2	; 0x02
     fcc:	5b 81       	ldd	r21, Y+3	; 0x03
     fce:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3>
     fd2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	04 f5       	brge	.+64     	; 0x101c <_ZN13rotateStepper8moveBaseEi+0x90>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
		while(!CHECK_ISROVING());  //e-stop check
     fe0:	e0 e0       	ldi	r30, 0x00	; 0
     fe2:	f6 e0       	ldi	r31, 0x06	; 6
		
		MD2_STEP_CLR();
     fe4:	a0 e6       	ldi	r26, 0x60	; 96
     fe6:	b6 e0       	ldi	r27, 0x06	; 6
     fe8:	32 e0       	ldi	r19, 0x02	; 2
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
		while(!CHECK_ISROVING());  //e-stop check
     fea:	20 85       	ldd	r18, Z+8	; 0x08
     fec:	24 ff       	sbrs	r18, 4
     fee:	fd cf       	rjmp	.-6      	; 0xfea <_ZN13rotateStepper8moveBaseEi+0x5e>
		
		MD2_STEP_CLR();
     ff0:	16 96       	adiw	r26, 0x06	; 6
     ff2:	3c 93       	st	X, r19
     ff4:	16 97       	sbiw	r26, 0x06	; 6
     ff6:	cf ef       	ldi	r28, 0xFF	; 255
     ff8:	d8 e1       	ldi	r29, 0x18	; 24
     ffa:	21 97       	sbiw	r28, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <_ZN13rotateStepper8moveBaseEi+0x6e>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <_ZN13rotateStepper8moveBaseEi+0x74>
    1000:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
    1002:	15 96       	adiw	r26, 0x05	; 5
    1004:	3c 93       	st	X, r19
    1006:	15 97       	sbiw	r26, 0x05	; 5
    1008:	cf e5       	ldi	r28, 0x5F	; 95
    100a:	d2 e2       	ldi	r29, 0x22	; 34
    100c:	21 97       	sbiw	r28, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <_ZN13rotateStepper8moveBaseEi+0x80>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <_ZN13rotateStepper8moveBaseEi+0x86>
    1012:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	86 17       	cp	r24, r22
    1018:	97 07       	cpc	r25, r23
    101a:	39 f7       	brne	.-50     	; 0xfea <_ZN13rotateStepper8moveBaseEi+0x5e>
		_delay_us(800);
		MD2_STEP_SET();
		_delay_us(1100);
	}
	
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
    1030:	88 27       	eor	r24, r24
    1032:	77 fd       	sbrc	r23, 7
    1034:	80 95       	com	r24
    1036:	98 2f       	mov	r25, r24
    1038:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
    103c:	2b e7       	ldi	r18, 0x7B	; 123
    103e:	34 e1       	ldi	r19, 0x14	; 20
    1040:	48 e0       	ldi	r20, 0x08	; 8
    1042:	52 e4       	ldi	r21, 0x42	; 66
    1044:	0e 94 a9 09 	call	0x1352	; 0x1352 <__addsf3>
    1048:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fixsfsi>
    104c:	6b 01       	movw	r12, r22
    104e:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
    1050:	88 85       	ldd	r24, Y+8	; 0x08
    1052:	99 85       	ldd	r25, Y+9	; 0x09
    1054:	b6 01       	movw	r22, r12
    1056:	68 1b       	sub	r22, r24
    1058:	79 0b       	sbc	r23, r25
    105a:	ce 01       	movw	r24, r28
    105c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
    1060:	c8 86       	std	Y+8, r12	; 0x08
    1062:	d9 86       	std	Y+9, r13	; 0x09
	
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <_ZN10Sabertooth12SendDriveCmdEcc>:

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
}

void Sabertooth::SendDriveCmd(char command, char value){
    1072:	dc 01       	movw	r26, r24
	////////////////////////////////Testing.....
	//while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
	//USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);								//Send the autobaud byte to get the sabertooth communicating
	////////////////////////////////
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));						//Necessary to make sure we don't overwrite data in the buffer
    1074:	ed 91       	ld	r30, X+
    1076:	fc 91       	ld	r31, X
    1078:	11 97       	sbiw	r26, 0x01	; 1
    107a:	81 81       	ldd	r24, Z+1	; 0x01
    107c:	85 ff       	sbrs	r24, 5
    107e:	fd cf       	rjmp	.-6      	; 0x107a <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
	USART_PutChar(Sabertooth_USART, SABERTOOTHADDRESS);							//Sends the address to the sabertooth
    1080:	80 e8       	ldi	r24, 0x80	; 128
    1082:	80 83       	st	Z, r24
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    1084:	ed 91       	ld	r30, X+
    1086:	fc 91       	ld	r31, X
    1088:	11 97       	sbiw	r26, 0x01	; 1
    108a:	81 81       	ldd	r24, Z+1	; 0x01
    108c:	85 ff       	sbrs	r24, 5
    108e:	fd cf       	rjmp	.-6      	; 0x108a <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
    1090:	60 83       	st	Z, r22
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	11 97       	sbiw	r26, 0x01	; 1
    1098:	81 81       	ldd	r24, Z+1	; 0x01
    109a:	85 ff       	sbrs	r24, 5
    109c:	fd cf       	rjmp	.-6      	; 0x1098 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
    109e:	40 83       	st	Z, r20
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	81 81       	ldd	r24, Z+1	; 0x01
    10a6:	85 ff       	sbrs	r24, 5
    10a8:	fd cf       	rjmp	.-6      	; 0x10a4 <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
	SendDriveCmd(LEFT_FORWARD, 0);
	SendDriveCmd(RIGHT_FORWARD, 0);
}

unsigned char Sabertooth::SaberChecksum(unsigned char command, unsigned char value){
	return ((SABERTOOTHADDRESS+command+value) & 127);
    10aa:	64 0f       	add	r22, r20
    10ac:	6f 77       	andi	r22, 0x7F	; 127
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, command);									//Sends the command to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, value);										//Sends the value or speed to the sabertooth
	while(!USART_IsTXDataRegisterEmpty(Sabertooth_USART));
	USART_PutChar(Sabertooth_USART, SaberChecksum(command, value));				//Send the checksum of all these values to the sabertooth
    10ae:	60 83       	st	Z, r22
    10b0:	08 95       	ret

000010b2 <_ZN10Sabertooth11ParsePacketEhh>:
}


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    10bc:	84 2f       	mov	r24, r20
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
    10be:	6f 37       	cpi	r22, 0x7F	; 127
    10c0:	61 f0       	breq	.+24     	; 0x10da <_ZN10Sabertooth11ParsePacketEhh+0x28>
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
    10c2:	6f 37       	cpi	r22, 0x7F	; 127
    10c4:	20 f4       	brcc	.+8      	; 0x10ce <_ZN10Sabertooth11ParsePacketEhh+0x1c>
		command_left = LEFT_BACK;
		value_left = (127-left);
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	46 1b       	sub	r20, r22
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <_ZN10Sabertooth11ParsePacketEhh+0x32>
		value_left = (127-left);
	}else if(left > 127){
    10ce:	66 23       	and	r22, r22
    10d0:	3c f4       	brge	.+14     	; 0x10e0 <_ZN10Sabertooth11ParsePacketEhh+0x2e>
		command_left = LEFT_FORWARD;
		value_left = (left-127);
    10d2:	41 e8       	ldi	r20, 0x81	; 129
    10d4:	46 0f       	add	r20, r22
		value_left = 0;
	}else if(left < 127){
		command_left = LEFT_BACK;
		value_left = (127-left);
	}else if(left > 127){
		command_left = LEFT_FORWARD;
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <_ZN10Sabertooth11ParsePacketEhh+0x32>
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
		value_left = 0;
    10da:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
	
	if(left == 127){
		command_left = LEFT_FORWARD;
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <_ZN10Sabertooth11ParsePacketEhh+0x32>

//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
    10e0:	40 e0       	ldi	r20, 0x00	; 0


//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
    10e2:	60 e0       	ldi	r22, 0x00	; 0
	}else if(left > 127){
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
    10e4:	8f 37       	cpi	r24, 0x7F	; 127
    10e6:	61 f0       	breq	.+24     	; 0x1100 <_ZN10Sabertooth11ParsePacketEhh+0x4e>
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
    10e8:	8f 37       	cpi	r24, 0x7F	; 127
    10ea:	20 f4       	brcc	.+8      	; 0x10f4 <_ZN10Sabertooth11ParsePacketEhh+0x42>
		command_right = RIGHT_BACK;
		value_right = (127-right);
    10ec:	0f e7       	ldi	r16, 0x7F	; 127
    10ee:	08 1b       	sub	r16, r24
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
    10f0:	15 e0       	ldi	r17, 0x05	; 5
    10f2:	0b c0       	rjmp	.+22     	; 0x110a <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_right = (127-right);
		}else if(right > 127){
    10f4:	88 23       	and	r24, r24
    10f6:	3c f4       	brge	.+14     	; 0x1106 <_ZN10Sabertooth11ParsePacketEhh+0x54>
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
    10f8:	01 e8       	ldi	r16, 0x81	; 129
    10fa:	08 0f       	add	r16, r24
		value_right = 0;
		}else if(right < 127){
		command_right = RIGHT_BACK;
		value_right = (127-right);
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
    10fc:	14 e0       	ldi	r17, 0x04	; 4
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <_ZN10Sabertooth11ParsePacketEhh+0x58>
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
		value_right = 0;
    1100:	00 e0       	ldi	r16, 0x00	; 0
		command_left = LEFT_FORWARD;
		value_left = (left-127);
	}
	
	if(right == 127){
		command_right = RIGHT_FORWARD;
    1102:	14 e0       	ldi	r17, 0x04	; 4
    1104:	02 c0       	rjmp	.+4      	; 0x110a <_ZN10Sabertooth11ParsePacketEhh+0x58>
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
	unsigned char value_right = 0;
    1106:	00 e0       	ldi	r16, 0x00	; 0
//Left = lower act
//Right = upper act
void Sabertooth::ParsePacket(unsigned char left, unsigned char right){
	unsigned char command_left = LEFT_FORWARD;
	unsigned char value_left = 0;
	unsigned char command_right = RIGHT_FORWARD;
    1108:	14 e0       	ldi	r17, 0x04	; 4
		}else if(right > 127){
		command_right = RIGHT_FORWARD;
		value_right = (right-127);
	}
	
	SendDriveCmd(command_left, value_left);
    110a:	ce 01       	movw	r24, r28
    110c:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(command_right, value_right);
    1110:	40 2f       	mov	r20, r16
    1112:	61 2f       	mov	r22, r17
    1114:	ce 01       	movw	r24, r28
    1116:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN10Sabertooth12SendDriveCmdEcc>
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <_ZN10Sabertooth7StopAllEv>:

void Sabertooth::StopAll(){
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
	SendDriveCmd(LEFT_FORWARD, 0);
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN10Sabertooth12SendDriveCmdEcc>
	SendDriveCmd(RIGHT_FORWARD, 0);
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	64 e0       	ldi	r22, 0x04	; 4
    1136:	ce 01       	movw	r24, r28
    1138:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN10Sabertooth12SendDriveCmdEcc>
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
#include "Sabertooth.h"
#include <avr/io.h>
#include <util/delay.h>


Sabertooth::Sabertooth(USART_t *USART_SaberUsart, PORT_t * SaberPORT)
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
{
	Sabertooth_USART = USART_SaberUsart;				//Sets the private variable to the USART being used
    1148:	68 83       	st	Y, r22
    114a:	79 83       	std	Y+1, r23	; 0x01
	Sabertooth_PORT = SaberPORT;						//Sets the private variable for the PORT the USART is on
    114c:	4a 83       	std	Y+2, r20	; 0x02
    114e:	5b 83       	std	Y+3, r21	; 0x03
	
	Sabertooth_PORT->DIRSET = PIN3_bm;					//Sets the TX pin for the USART to an output
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	fa 01       	movw	r30, r20
    1154:	81 83       	std	Z+1, r24	; 0x01
	USART_Format_Set(Sabertooth_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Sets the Sabertooth USART to run in 8 bit data, no parity, and 1 stop bit, 
    1156:	e8 81       	ld	r30, Y
    1158:	f9 81       	ldd	r31, Y+1	; 0x01
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(Sabertooth_USART, 207 , 0);		//Sets the Sabertooth baud rate to 9600 when running at 32Mhz system clock
    115e:	e8 81       	ld	r30, Y
    1160:	f9 81       	ldd	r31, Y+1	; 0x01
    1162:	8f ec       	ldi	r24, 0xCF	; 207
    1164:	86 83       	std	Z+6, r24	; 0x06
    1166:	e8 81       	ld	r30, Y
    1168:	f9 81       	ldd	r31, Y+1	; 0x01
    116a:	17 82       	std	Z+7, r1	; 0x07
	USART_Tx_Enable(Sabertooth_USART);					//Enable the USART transmit capabilities
    116c:	e8 81       	ld	r30, Y
    116e:	f9 81       	ldd	r31, Y+1	; 0x01
    1170:	84 81       	ldd	r24, Z+4	; 0x04
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1176:	ff ef       	ldi	r31, 0xFF	; 255
    1178:	23 ec       	ldi	r18, 0xC3	; 195
    117a:	89 e0       	ldi	r24, 0x09	; 9
    117c:	f1 50       	subi	r31, 0x01	; 1
    117e:	20 40       	sbci	r18, 0x00	; 0
    1180:	80 40       	sbci	r24, 0x00	; 0
    1182:	e1 f7       	brne	.-8      	; 0x117c <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
    1186:	00 00       	nop
	_delay_ms(100);										//Delay to let things settle
	
	USART_PutChar(Sabertooth_USART, AUTOBAUD_BYTE);		//Send the autobaud byte to get the sabertooth communicating
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	8a ea       	ldi	r24, 0xAA	; 170
    118e:	80 83       	st	Z, r24
	SendDriveCmd(14, 20);								//Sets the communication watchdog on the sabertooth to (x*100ms) It's currently set to two seconds.
    1190:	44 e1       	ldi	r20, 0x14	; 20
    1192:	6e e0       	ldi	r22, 0x0E	; 14
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN10Sabertooth12SendDriveCmdEcc>
	StopAll();											//Everything is now initialized, stop all motor movement to account for random noise or failed startups
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN10Sabertooth7StopAllEv>
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <_ZN11stepperInfoC1Ev>:
    11a6:	fc 01       	movw	r30, r24
    11a8:	10 82       	st	Z, r1
    11aa:	11 82       	std	Z+1, r1	; 0x01
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	82 83       	std	Z+2, r24	; 0x02
    11b2:	93 83       	std	Z+3, r25	; 0x03
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	84 83       	std	Z+4, r24	; 0x04
    11ba:	95 83       	std	Z+5, r25	; 0x05
    11bc:	08 95       	ret

000011be <_ZN11stepperInfoD1Ev>:
    11be:	08 95       	ret

000011c0 <_ZN11stepperInfo14processCommandEi>:
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ac 01       	movw	r20, r24
    11c6:	ec 01       	movw	r28, r24
    11c8:	88 81       	ld	r24, Y
    11ca:	99 81       	ldd	r25, Y+1	; 0x01
    11cc:	89 2b       	or	r24, r25
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <_ZN11stepperInfo14processCommandEi+0x12>
    11d0:	6a c0       	rjmp	.+212    	; 0x12a6 <_ZN11stepperInfo14processCommandEi+0xe6>
    11d2:	62 30       	cpi	r22, 0x02	; 2
    11d4:	71 05       	cpc	r23, r1
    11d6:	08 f0       	brcs	.+2      	; 0x11da <_ZN11stepperInfo14processCommandEi+0x1a>
    11d8:	66 c0       	rjmp	.+204    	; 0x12a6 <_ZN11stepperInfo14processCommandEi+0xe6>
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	9b 81       	ldd	r25, Y+3	; 0x03
    11de:	86 17       	cp	r24, r22
    11e0:	97 07       	cpc	r25, r23
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <_ZN11stepperInfo14processCommandEi+0x26>
    11e4:	60 c0       	rjmp	.+192    	; 0x12a6 <_ZN11stepperInfo14processCommandEi+0xe6>
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	7b 83       	std	Y+3, r23	; 0x03
    11ea:	61 15       	cp	r22, r1
    11ec:	71 05       	cpc	r23, r1
    11ee:	29 f4       	brne	.+10     	; 0x11fa <_ZN11stepperInfo14processCommandEi+0x3a>
    11f0:	80 e1       	ldi	r24, 0x10	; 16
    11f2:	e0 e6       	ldi	r30, 0x60	; 96
    11f4:	f6 e0       	ldi	r31, 0x06	; 6
    11f6:	85 83       	std	Z+5, r24	; 0x05
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <_ZN11stepperInfo14processCommandEi+0x48>
    11fa:	61 30       	cpi	r22, 0x01	; 1
    11fc:	71 05       	cpc	r23, r1
    11fe:	21 f4       	brne	.+8      	; 0x1208 <_ZN11stepperInfo14processCommandEi+0x48>
    1200:	80 e1       	ldi	r24, 0x10	; 16
    1202:	e0 e6       	ldi	r30, 0x60	; 96
    1204:	f6 e0       	ldi	r31, 0x06	; 6
    1206:	86 83       	std	Z+6, r24	; 0x06
    1208:	fa 01       	movw	r30, r20
    120a:	84 81       	ldd	r24, Z+4	; 0x04
    120c:	95 81       	ldd	r25, Z+5	; 0x05
    120e:	89 2b       	or	r24, r25
    1210:	11 f5       	brne	.+68     	; 0x1256 <_ZN11stepperInfo14processCommandEi+0x96>
    1212:	28 e8       	ldi	r18, 0x88	; 136
    1214:	33 e1       	ldi	r19, 0x13	; 19
    1216:	e0 e0       	ldi	r30, 0x00	; 0
    1218:	f6 e0       	ldi	r31, 0x06	; 6
    121a:	a0 e6       	ldi	r26, 0x60	; 96
    121c:	b6 e0       	ldi	r27, 0x06	; 6
    121e:	90 e2       	ldi	r25, 0x20	; 32
    1220:	80 85       	ldd	r24, Z+8	; 0x08
    1222:	84 ff       	sbrs	r24, 4
    1224:	fd cf       	rjmp	.-6      	; 0x1220 <_ZN11stepperInfo14processCommandEi+0x60>
    1226:	15 96       	adiw	r26, 0x05	; 5
    1228:	9c 93       	st	X, r25
    122a:	15 97       	sbiw	r26, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    122c:	cf e8       	ldi	r28, 0x8F	; 143
    122e:	d1 e0       	ldi	r29, 0x01	; 1
    1230:	21 97       	sbiw	r28, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <_ZN11stepperInfo14processCommandEi+0x70>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <_ZN11stepperInfo14processCommandEi+0x76>
    1236:	00 00       	nop
    1238:	16 96       	adiw	r26, 0x06	; 6
    123a:	9c 93       	st	X, r25
    123c:	16 97       	sbiw	r26, 0x06	; 6
    123e:	cf e9       	ldi	r28, 0x9F	; 159
    1240:	df e0       	ldi	r29, 0x0F	; 15
    1242:	21 97       	sbiw	r28, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <_ZN11stepperInfo14processCommandEi+0x82>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <_ZN11stepperInfo14processCommandEi+0x88>
    1248:	00 00       	nop
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	31 09       	sbc	r19, r1
    124e:	21 15       	cp	r18, r1
    1250:	31 05       	cpc	r19, r1
    1252:	31 f7       	brne	.-52     	; 0x1220 <_ZN11stepperInfo14processCommandEi+0x60>
    1254:	03 c0       	rjmp	.+6      	; 0x125c <_ZN11stepperInfo14processCommandEi+0x9c>
    1256:	fa 01       	movw	r30, r20
    1258:	14 82       	std	Z+4, r1	; 0x04
    125a:	15 82       	std	Z+5, r1	; 0x05
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	96 e0       	ldi	r25, 0x06	; 6
    1260:	e0 e0       	ldi	r30, 0x00	; 0
    1262:	f6 e0       	ldi	r31, 0x06	; 6
    1264:	a0 e6       	ldi	r26, 0x60	; 96
    1266:	b6 e0       	ldi	r27, 0x06	; 6
    1268:	30 e2       	ldi	r19, 0x20	; 32
    126a:	13 c0       	rjmp	.+38     	; 0x1292 <_ZN11stepperInfo14processCommandEi+0xd2>
    126c:	20 85       	ldd	r18, Z+8	; 0x08
    126e:	24 ff       	sbrs	r18, 4
    1270:	fd cf       	rjmp	.-6      	; 0x126c <_ZN11stepperInfo14processCommandEi+0xac>
    1272:	15 96       	adiw	r26, 0x05	; 5
    1274:	3c 93       	st	X, r19
    1276:	15 97       	sbiw	r26, 0x05	; 5
    1278:	25 ed       	ldi	r18, 0xD5	; 213
    127a:	2a 95       	dec	r18
    127c:	f1 f7       	brne	.-4      	; 0x127a <_ZN11stepperInfo14processCommandEi+0xba>
    127e:	00 00       	nop
    1280:	16 96       	adiw	r26, 0x06	; 6
    1282:	3c 93       	st	X, r19
    1284:	16 97       	sbiw	r26, 0x06	; 6
    1286:	cf e3       	ldi	r28, 0x3F	; 63
    1288:	d1 e0       	ldi	r29, 0x01	; 1
    128a:	21 97       	sbiw	r28, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <_ZN11stepperInfo14processCommandEi+0xca>
    128e:	00 c0       	rjmp	.+0      	; 0x1290 <_ZN11stepperInfo14processCommandEi+0xd0>
    1290:	00 00       	nop
    1292:	ec 01       	movw	r28, r24
    1294:	28 85       	ldd	r18, Y+8	; 0x08
    1296:	23 fd       	sbrc	r18, 3
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <_ZN11stepperInfo14processCommandEi+0xe0>
    129a:	20 85       	ldd	r18, Z+8	; 0x08
    129c:	23 fd       	sbrc	r18, 3
    129e:	e6 cf       	rjmp	.-52     	; 0x126c <_ZN11stepperInfo14processCommandEi+0xac>
    12a0:	fa 01       	movw	r30, r20
    12a2:	10 82       	st	Z, r1
    12a4:	11 82       	std	Z+1, r1	; 0x01
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <_ZN11stepperInfo6enableEv>:
    12ac:	21 e0       	ldi	r18, 0x01	; 1
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
    12b4:	31 83       	std	Z+1, r19	; 0x01
    12b6:	08 95       	ret

000012b8 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    12b8:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    12ba:	60 83       	st	Z, r22
    12bc:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    12be:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
    12c0:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
    12c2:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
    12c4:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
    12c6:	15 86       	std	Z+13, r1	; 0x0d
    12c8:	08 95       	ret

000012ca <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    12ca:	fc 01       	movw	r30, r24
    12cc:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    12ce:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	29 13       	cpse	r18, r25
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <USART_RXBufferData_Available+0xe>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
}
    12d8:	08 95       	ret

000012da <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    12da:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    12dc:	84 85       	ldd	r24, Z+12	; 0x0c
    12de:	df 01       	movw	r26, r30
    12e0:	a8 0f       	add	r26, r24
    12e2:	b1 1d       	adc	r27, r1
    12e4:	13 96       	adiw	r26, 0x03	; 3
    12e6:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    12e8:	94 85       	ldd	r25, Z+12	; 0x0c
    12ea:	9f 5f       	subi	r25, 0xFF	; 255
    12ec:	93 70       	andi	r25, 0x03	; 3
    12ee:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
    12f0:	08 95       	ret

000012f2 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    12f2:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    12f4:	83 85       	ldd	r24, Z+11	; 0x0b
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    12fa:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
    12fc:	a0 81       	ld	r26, Z
    12fe:	b1 81       	ldd	r27, Z+1	; 0x01
    1300:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
    1302:	89 17       	cp	r24, r25
    1304:	49 f0       	breq	.+18     	; 0x1318 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1306:	93 85       	ldd	r25, Z+11	; 0x0b
    1308:	df 01       	movw	r26, r30
    130a:	a9 0f       	add	r26, r25
    130c:	b1 1d       	adc	r27, r1
    130e:	13 96       	adiw	r26, 0x03	; 3
    1310:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
    1312:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    1318:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    131a:	08 95       	ret

0000131c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    131c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    131e:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
    1320:	95 85       	ldd	r25, Z+13	; 0x0d
    1322:	98 13       	cpse	r25, r24
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    1326:	01 90       	ld	r0, Z+
    1328:	f0 81       	ld	r31, Z
    132a:	e0 2d       	mov	r30, r0
    132c:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    132e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1330:	83 83       	std	Z+3, r24	; 0x03
    1332:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    1334:	86 85       	ldd	r24, Z+14	; 0x0e
    1336:	df 01       	movw	r26, r30
    1338:	a8 0f       	add	r26, r24
    133a:	b1 1d       	adc	r27, r1
    133c:	17 96       	adiw	r26, 0x07	; 7
    133e:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
    1340:	a0 81       	ld	r26, Z
    1342:	b1 81       	ldd	r27, Z+1	; 0x01
    1344:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1346:	86 85       	ldd	r24, Z+14	; 0x0e
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	83 70       	andi	r24, 0x03	; 3
    134c:	86 87       	std	Z+14, r24	; 0x0e
    134e:	08 95       	ret

00001350 <__subsf3>:
    1350:	50 58       	subi	r21, 0x80	; 128

00001352 <__addsf3>:
    1352:	bb 27       	eor	r27, r27
    1354:	aa 27       	eor	r26, r26
    1356:	0e d0       	rcall	.+28     	; 0x1374 <__addsf3x>
    1358:	4d c1       	rjmp	.+666    	; 0x15f4 <__fp_round>
    135a:	3e d1       	rcall	.+636    	; 0x15d8 <__fp_pscA>
    135c:	30 f0       	brcs	.+12     	; 0x136a <__addsf3+0x18>
    135e:	43 d1       	rcall	.+646    	; 0x15e6 <__fp_pscB>
    1360:	20 f0       	brcs	.+8      	; 0x136a <__addsf3+0x18>
    1362:	31 f4       	brne	.+12     	; 0x1370 <__addsf3+0x1e>
    1364:	9f 3f       	cpi	r25, 0xFF	; 255
    1366:	11 f4       	brne	.+4      	; 0x136c <__addsf3+0x1a>
    1368:	1e f4       	brtc	.+6      	; 0x1370 <__addsf3+0x1e>
    136a:	33 c1       	rjmp	.+614    	; 0x15d2 <__fp_nan>
    136c:	0e f4       	brtc	.+2      	; 0x1370 <__addsf3+0x1e>
    136e:	e0 95       	com	r30
    1370:	e7 fb       	bst	r30, 7
    1372:	29 c1       	rjmp	.+594    	; 0x15c6 <__fp_inf>

00001374 <__addsf3x>:
    1374:	e9 2f       	mov	r30, r25
    1376:	4f d1       	rcall	.+670    	; 0x1616 <__fp_split3>
    1378:	80 f3       	brcs	.-32     	; 0x135a <__addsf3+0x8>
    137a:	ba 17       	cp	r27, r26
    137c:	62 07       	cpc	r22, r18
    137e:	73 07       	cpc	r23, r19
    1380:	84 07       	cpc	r24, r20
    1382:	95 07       	cpc	r25, r21
    1384:	18 f0       	brcs	.+6      	; 0x138c <__addsf3x+0x18>
    1386:	71 f4       	brne	.+28     	; 0x13a4 <__addsf3x+0x30>
    1388:	9e f5       	brtc	.+102    	; 0x13f0 <__addsf3x+0x7c>
    138a:	67 c1       	rjmp	.+718    	; 0x165a <__fp_zero>
    138c:	0e f4       	brtc	.+2      	; 0x1390 <__addsf3x+0x1c>
    138e:	e0 95       	com	r30
    1390:	0b 2e       	mov	r0, r27
    1392:	ba 2f       	mov	r27, r26
    1394:	a0 2d       	mov	r26, r0
    1396:	0b 01       	movw	r0, r22
    1398:	b9 01       	movw	r22, r18
    139a:	90 01       	movw	r18, r0
    139c:	0c 01       	movw	r0, r24
    139e:	ca 01       	movw	r24, r20
    13a0:	a0 01       	movw	r20, r0
    13a2:	11 24       	eor	r1, r1
    13a4:	ff 27       	eor	r31, r31
    13a6:	59 1b       	sub	r21, r25
    13a8:	99 f0       	breq	.+38     	; 0x13d0 <__addsf3x+0x5c>
    13aa:	59 3f       	cpi	r21, 0xF9	; 249
    13ac:	50 f4       	brcc	.+20     	; 0x13c2 <__addsf3x+0x4e>
    13ae:	50 3e       	cpi	r21, 0xE0	; 224
    13b0:	68 f1       	brcs	.+90     	; 0x140c <__addsf3x+0x98>
    13b2:	1a 16       	cp	r1, r26
    13b4:	f0 40       	sbci	r31, 0x00	; 0
    13b6:	a2 2f       	mov	r26, r18
    13b8:	23 2f       	mov	r18, r19
    13ba:	34 2f       	mov	r19, r20
    13bc:	44 27       	eor	r20, r20
    13be:	58 5f       	subi	r21, 0xF8	; 248
    13c0:	f3 cf       	rjmp	.-26     	; 0x13a8 <__addsf3x+0x34>
    13c2:	46 95       	lsr	r20
    13c4:	37 95       	ror	r19
    13c6:	27 95       	ror	r18
    13c8:	a7 95       	ror	r26
    13ca:	f0 40       	sbci	r31, 0x00	; 0
    13cc:	53 95       	inc	r21
    13ce:	c9 f7       	brne	.-14     	; 0x13c2 <__addsf3x+0x4e>
    13d0:	7e f4       	brtc	.+30     	; 0x13f0 <__addsf3x+0x7c>
    13d2:	1f 16       	cp	r1, r31
    13d4:	ba 0b       	sbc	r27, r26
    13d6:	62 0b       	sbc	r22, r18
    13d8:	73 0b       	sbc	r23, r19
    13da:	84 0b       	sbc	r24, r20
    13dc:	ba f0       	brmi	.+46     	; 0x140c <__addsf3x+0x98>
    13de:	91 50       	subi	r25, 0x01	; 1
    13e0:	a1 f0       	breq	.+40     	; 0x140a <__addsf3x+0x96>
    13e2:	ff 0f       	add	r31, r31
    13e4:	bb 1f       	adc	r27, r27
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	c2 f7       	brpl	.-16     	; 0x13de <__addsf3x+0x6a>
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <__addsf3x+0x98>
    13f0:	ba 0f       	add	r27, r26
    13f2:	62 1f       	adc	r22, r18
    13f4:	73 1f       	adc	r23, r19
    13f6:	84 1f       	adc	r24, r20
    13f8:	48 f4       	brcc	.+18     	; 0x140c <__addsf3x+0x98>
    13fa:	87 95       	ror	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b7 95       	ror	r27
    1402:	f7 95       	ror	r31
    1404:	9e 3f       	cpi	r25, 0xFE	; 254
    1406:	08 f0       	brcs	.+2      	; 0x140a <__addsf3x+0x96>
    1408:	b3 cf       	rjmp	.-154    	; 0x1370 <__addsf3+0x1e>
    140a:	93 95       	inc	r25
    140c:	88 0f       	add	r24, r24
    140e:	08 f0       	brcs	.+2      	; 0x1412 <__addsf3x+0x9e>
    1410:	99 27       	eor	r25, r25
    1412:	ee 0f       	add	r30, r30
    1414:	97 95       	ror	r25
    1416:	87 95       	ror	r24
    1418:	08 95       	ret

0000141a <__divsf3>:
    141a:	0c d0       	rcall	.+24     	; 0x1434 <__divsf3x>
    141c:	eb c0       	rjmp	.+470    	; 0x15f4 <__fp_round>
    141e:	e3 d0       	rcall	.+454    	; 0x15e6 <__fp_pscB>
    1420:	40 f0       	brcs	.+16     	; 0x1432 <__divsf3+0x18>
    1422:	da d0       	rcall	.+436    	; 0x15d8 <__fp_pscA>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__divsf3+0x18>
    1426:	21 f4       	brne	.+8      	; 0x1430 <__divsf3+0x16>
    1428:	5f 3f       	cpi	r21, 0xFF	; 255
    142a:	19 f0       	breq	.+6      	; 0x1432 <__divsf3+0x18>
    142c:	cc c0       	rjmp	.+408    	; 0x15c6 <__fp_inf>
    142e:	51 11       	cpse	r21, r1
    1430:	15 c1       	rjmp	.+554    	; 0x165c <__fp_szero>
    1432:	cf c0       	rjmp	.+414    	; 0x15d2 <__fp_nan>

00001434 <__divsf3x>:
    1434:	f0 d0       	rcall	.+480    	; 0x1616 <__fp_split3>
    1436:	98 f3       	brcs	.-26     	; 0x141e <__divsf3+0x4>

00001438 <__divsf3_pse>:
    1438:	99 23       	and	r25, r25
    143a:	c9 f3       	breq	.-14     	; 0x142e <__divsf3+0x14>
    143c:	55 23       	and	r21, r21
    143e:	b1 f3       	breq	.-20     	; 0x142c <__divsf3+0x12>
    1440:	95 1b       	sub	r25, r21
    1442:	55 0b       	sbc	r21, r21
    1444:	bb 27       	eor	r27, r27
    1446:	aa 27       	eor	r26, r26
    1448:	62 17       	cp	r22, r18
    144a:	73 07       	cpc	r23, r19
    144c:	84 07       	cpc	r24, r20
    144e:	38 f0       	brcs	.+14     	; 0x145e <__divsf3_pse+0x26>
    1450:	9f 5f       	subi	r25, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	44 1f       	adc	r20, r20
    145a:	aa 1f       	adc	r26, r26
    145c:	a9 f3       	breq	.-22     	; 0x1448 <__divsf3_pse+0x10>
    145e:	33 d0       	rcall	.+102    	; 0x14c6 <__divsf3_pse+0x8e>
    1460:	0e 2e       	mov	r0, r30
    1462:	3a f0       	brmi	.+14     	; 0x1472 <__divsf3_pse+0x3a>
    1464:	e0 e8       	ldi	r30, 0x80	; 128
    1466:	30 d0       	rcall	.+96     	; 0x14c8 <__divsf3_pse+0x90>
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	50 40       	sbci	r21, 0x00	; 0
    146c:	e6 95       	lsr	r30
    146e:	00 1c       	adc	r0, r0
    1470:	ca f7       	brpl	.-14     	; 0x1464 <__divsf3_pse+0x2c>
    1472:	29 d0       	rcall	.+82     	; 0x14c6 <__divsf3_pse+0x8e>
    1474:	fe 2f       	mov	r31, r30
    1476:	27 d0       	rcall	.+78     	; 0x14c6 <__divsf3_pse+0x8e>
    1478:	66 0f       	add	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	88 1f       	adc	r24, r24
    147e:	bb 1f       	adc	r27, r27
    1480:	26 17       	cp	r18, r22
    1482:	37 07       	cpc	r19, r23
    1484:	48 07       	cpc	r20, r24
    1486:	ab 07       	cpc	r26, r27
    1488:	b0 e8       	ldi	r27, 0x80	; 128
    148a:	09 f0       	breq	.+2      	; 0x148e <__divsf3_pse+0x56>
    148c:	bb 0b       	sbc	r27, r27
    148e:	80 2d       	mov	r24, r0
    1490:	bf 01       	movw	r22, r30
    1492:	ff 27       	eor	r31, r31
    1494:	93 58       	subi	r25, 0x83	; 131
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	2a f0       	brmi	.+10     	; 0x14a4 <__divsf3_pse+0x6c>
    149a:	9e 3f       	cpi	r25, 0xFE	; 254
    149c:	51 05       	cpc	r21, r1
    149e:	68 f0       	brcs	.+26     	; 0x14ba <__divsf3_pse+0x82>
    14a0:	92 c0       	rjmp	.+292    	; 0x15c6 <__fp_inf>
    14a2:	dc c0       	rjmp	.+440    	; 0x165c <__fp_szero>
    14a4:	5f 3f       	cpi	r21, 0xFF	; 255
    14a6:	ec f3       	brlt	.-6      	; 0x14a2 <__divsf3_pse+0x6a>
    14a8:	98 3e       	cpi	r25, 0xE8	; 232
    14aa:	dc f3       	brlt	.-10     	; 0x14a2 <__divsf3_pse+0x6a>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b7 95       	ror	r27
    14b4:	f7 95       	ror	r31
    14b6:	9f 5f       	subi	r25, 0xFF	; 255
    14b8:	c9 f7       	brne	.-14     	; 0x14ac <__divsf3_pse+0x74>
    14ba:	88 0f       	add	r24, r24
    14bc:	91 1d       	adc	r25, r1
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret
    14c6:	e1 e0       	ldi	r30, 0x01	; 1
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	bb 1f       	adc	r27, r27
    14d0:	62 17       	cp	r22, r18
    14d2:	73 07       	cpc	r23, r19
    14d4:	84 07       	cpc	r24, r20
    14d6:	ba 07       	cpc	r27, r26
    14d8:	20 f0       	brcs	.+8      	; 0x14e2 <__divsf3_pse+0xaa>
    14da:	62 1b       	sub	r22, r18
    14dc:	73 0b       	sbc	r23, r19
    14de:	84 0b       	sbc	r24, r20
    14e0:	ba 0b       	sbc	r27, r26
    14e2:	ee 1f       	adc	r30, r30
    14e4:	88 f7       	brcc	.-30     	; 0x14c8 <__divsf3_pse+0x90>
    14e6:	e0 95       	com	r30
    14e8:	08 95       	ret

000014ea <__fixsfsi>:
    14ea:	04 d0       	rcall	.+8      	; 0x14f4 <__fixunssfsi>
    14ec:	68 94       	set
    14ee:	b1 11       	cpse	r27, r1
    14f0:	b5 c0       	rjmp	.+362    	; 0x165c <__fp_szero>
    14f2:	08 95       	ret

000014f4 <__fixunssfsi>:
    14f4:	98 d0       	rcall	.+304    	; 0x1626 <__fp_splitA>
    14f6:	88 f0       	brcs	.+34     	; 0x151a <__fixunssfsi+0x26>
    14f8:	9f 57       	subi	r25, 0x7F	; 127
    14fa:	90 f0       	brcs	.+36     	; 0x1520 <__fixunssfsi+0x2c>
    14fc:	b9 2f       	mov	r27, r25
    14fe:	99 27       	eor	r25, r25
    1500:	b7 51       	subi	r27, 0x17	; 23
    1502:	a0 f0       	brcs	.+40     	; 0x152c <__fixunssfsi+0x38>
    1504:	d1 f0       	breq	.+52     	; 0x153a <__fixunssfsi+0x46>
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	1a f0       	brmi	.+6      	; 0x1516 <__fixunssfsi+0x22>
    1510:	ba 95       	dec	r27
    1512:	c9 f7       	brne	.-14     	; 0x1506 <__fixunssfsi+0x12>
    1514:	12 c0       	rjmp	.+36     	; 0x153a <__fixunssfsi+0x46>
    1516:	b1 30       	cpi	r27, 0x01	; 1
    1518:	81 f0       	breq	.+32     	; 0x153a <__fixunssfsi+0x46>
    151a:	9f d0       	rcall	.+318    	; 0x165a <__fp_zero>
    151c:	b1 e0       	ldi	r27, 0x01	; 1
    151e:	08 95       	ret
    1520:	9c c0       	rjmp	.+312    	; 0x165a <__fp_zero>
    1522:	67 2f       	mov	r22, r23
    1524:	78 2f       	mov	r23, r24
    1526:	88 27       	eor	r24, r24
    1528:	b8 5f       	subi	r27, 0xF8	; 248
    152a:	39 f0       	breq	.+14     	; 0x153a <__fixunssfsi+0x46>
    152c:	b9 3f       	cpi	r27, 0xF9	; 249
    152e:	cc f3       	brlt	.-14     	; 0x1522 <__fixunssfsi+0x2e>
    1530:	86 95       	lsr	r24
    1532:	77 95       	ror	r23
    1534:	67 95       	ror	r22
    1536:	b3 95       	inc	r27
    1538:	d9 f7       	brne	.-10     	; 0x1530 <__fixunssfsi+0x3c>
    153a:	3e f4       	brtc	.+14     	; 0x154a <__fixunssfsi+0x56>
    153c:	90 95       	com	r25
    153e:	80 95       	com	r24
    1540:	70 95       	com	r23
    1542:	61 95       	neg	r22
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	8f 4f       	sbci	r24, 0xFF	; 255
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	08 95       	ret

0000154c <__floatunsisf>:
    154c:	e8 94       	clt
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <__floatsisf+0x12>

00001550 <__floatsisf>:
    1550:	97 fb       	bst	r25, 7
    1552:	3e f4       	brtc	.+14     	; 0x1562 <__floatsisf+0x12>
    1554:	90 95       	com	r25
    1556:	80 95       	com	r24
    1558:	70 95       	com	r23
    155a:	61 95       	neg	r22
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	99 23       	and	r25, r25
    1564:	a9 f0       	breq	.+42     	; 0x1590 <__floatsisf+0x40>
    1566:	f9 2f       	mov	r31, r25
    1568:	96 e9       	ldi	r25, 0x96	; 150
    156a:	bb 27       	eor	r27, r27
    156c:	93 95       	inc	r25
    156e:	f6 95       	lsr	r31
    1570:	87 95       	ror	r24
    1572:	77 95       	ror	r23
    1574:	67 95       	ror	r22
    1576:	b7 95       	ror	r27
    1578:	f1 11       	cpse	r31, r1
    157a:	f8 cf       	rjmp	.-16     	; 0x156c <__floatsisf+0x1c>
    157c:	fa f4       	brpl	.+62     	; 0x15bc <__floatsisf+0x6c>
    157e:	bb 0f       	add	r27, r27
    1580:	11 f4       	brne	.+4      	; 0x1586 <__floatsisf+0x36>
    1582:	60 ff       	sbrs	r22, 0
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <__floatsisf+0x6c>
    1586:	6f 5f       	subi	r22, 0xFF	; 255
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	16 c0       	rjmp	.+44     	; 0x15bc <__floatsisf+0x6c>
    1590:	88 23       	and	r24, r24
    1592:	11 f0       	breq	.+4      	; 0x1598 <__floatsisf+0x48>
    1594:	96 e9       	ldi	r25, 0x96	; 150
    1596:	11 c0       	rjmp	.+34     	; 0x15ba <__floatsisf+0x6a>
    1598:	77 23       	and	r23, r23
    159a:	21 f0       	breq	.+8      	; 0x15a4 <__floatsisf+0x54>
    159c:	9e e8       	ldi	r25, 0x8E	; 142
    159e:	87 2f       	mov	r24, r23
    15a0:	76 2f       	mov	r23, r22
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <__floatsisf+0x5e>
    15a4:	66 23       	and	r22, r22
    15a6:	71 f0       	breq	.+28     	; 0x15c4 <__floatsisf+0x74>
    15a8:	96 e8       	ldi	r25, 0x86	; 134
    15aa:	86 2f       	mov	r24, r22
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	2a f0       	brmi	.+10     	; 0x15bc <__floatsisf+0x6c>
    15b2:	9a 95       	dec	r25
    15b4:	66 0f       	add	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	88 1f       	adc	r24, r24
    15ba:	da f7       	brpl	.-10     	; 0x15b2 <__floatsisf+0x62>
    15bc:	88 0f       	add	r24, r24
    15be:	96 95       	lsr	r25
    15c0:	87 95       	ror	r24
    15c2:	97 f9       	bld	r25, 7
    15c4:	08 95       	ret

000015c6 <__fp_inf>:
    15c6:	97 f9       	bld	r25, 7
    15c8:	9f 67       	ori	r25, 0x7F	; 127
    15ca:	80 e8       	ldi	r24, 0x80	; 128
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	08 95       	ret

000015d2 <__fp_nan>:
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	80 ec       	ldi	r24, 0xC0	; 192
    15d6:	08 95       	ret

000015d8 <__fp_pscA>:
    15d8:	00 24       	eor	r0, r0
    15da:	0a 94       	dec	r0
    15dc:	16 16       	cp	r1, r22
    15de:	17 06       	cpc	r1, r23
    15e0:	18 06       	cpc	r1, r24
    15e2:	09 06       	cpc	r0, r25
    15e4:	08 95       	ret

000015e6 <__fp_pscB>:
    15e6:	00 24       	eor	r0, r0
    15e8:	0a 94       	dec	r0
    15ea:	12 16       	cp	r1, r18
    15ec:	13 06       	cpc	r1, r19
    15ee:	14 06       	cpc	r1, r20
    15f0:	05 06       	cpc	r0, r21
    15f2:	08 95       	ret

000015f4 <__fp_round>:
    15f4:	09 2e       	mov	r0, r25
    15f6:	03 94       	inc	r0
    15f8:	00 0c       	add	r0, r0
    15fa:	11 f4       	brne	.+4      	; 0x1600 <__fp_round+0xc>
    15fc:	88 23       	and	r24, r24
    15fe:	52 f0       	brmi	.+20     	; 0x1614 <__fp_round+0x20>
    1600:	bb 0f       	add	r27, r27
    1602:	40 f4       	brcc	.+16     	; 0x1614 <__fp_round+0x20>
    1604:	bf 2b       	or	r27, r31
    1606:	11 f4       	brne	.+4      	; 0x160c <__fp_round+0x18>
    1608:	60 ff       	sbrs	r22, 0
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <__fp_round+0x20>
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	8f 4f       	sbci	r24, 0xFF	; 255
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	08 95       	ret

00001616 <__fp_split3>:
    1616:	57 fd       	sbrc	r21, 7
    1618:	90 58       	subi	r25, 0x80	; 128
    161a:	44 0f       	add	r20, r20
    161c:	55 1f       	adc	r21, r21
    161e:	59 f0       	breq	.+22     	; 0x1636 <__fp_splitA+0x10>
    1620:	5f 3f       	cpi	r21, 0xFF	; 255
    1622:	71 f0       	breq	.+28     	; 0x1640 <__fp_splitA+0x1a>
    1624:	47 95       	ror	r20

00001626 <__fp_splitA>:
    1626:	88 0f       	add	r24, r24
    1628:	97 fb       	bst	r25, 7
    162a:	99 1f       	adc	r25, r25
    162c:	61 f0       	breq	.+24     	; 0x1646 <__fp_splitA+0x20>
    162e:	9f 3f       	cpi	r25, 0xFF	; 255
    1630:	79 f0       	breq	.+30     	; 0x1650 <__fp_splitA+0x2a>
    1632:	87 95       	ror	r24
    1634:	08 95       	ret
    1636:	12 16       	cp	r1, r18
    1638:	13 06       	cpc	r1, r19
    163a:	14 06       	cpc	r1, r20
    163c:	55 1f       	adc	r21, r21
    163e:	f2 cf       	rjmp	.-28     	; 0x1624 <__fp_split3+0xe>
    1640:	46 95       	lsr	r20
    1642:	f1 df       	rcall	.-30     	; 0x1626 <__fp_splitA>
    1644:	08 c0       	rjmp	.+16     	; 0x1656 <__fp_splitA+0x30>
    1646:	16 16       	cp	r1, r22
    1648:	17 06       	cpc	r1, r23
    164a:	18 06       	cpc	r1, r24
    164c:	99 1f       	adc	r25, r25
    164e:	f1 cf       	rjmp	.-30     	; 0x1632 <__fp_splitA+0xc>
    1650:	86 95       	lsr	r24
    1652:	71 05       	cpc	r23, r1
    1654:	61 05       	cpc	r22, r1
    1656:	08 94       	sec
    1658:	08 95       	ret

0000165a <__fp_zero>:
    165a:	e8 94       	clt

0000165c <__fp_szero>:
    165c:	bb 27       	eor	r27, r27
    165e:	66 27       	eor	r22, r22
    1660:	77 27       	eor	r23, r23
    1662:	cb 01       	movw	r24, r22
    1664:	97 f9       	bld	r25, 7
    1666:	08 95       	ret

00001668 <__gesf2>:
    1668:	66 d0       	rcall	.+204    	; 0x1736 <__fp_cmp>
    166a:	08 f4       	brcc	.+2      	; 0x166e <__gesf2+0x6>
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	08 95       	ret

00001670 <__mulsf3>:
    1670:	0b d0       	rcall	.+22     	; 0x1688 <__mulsf3x>
    1672:	c0 cf       	rjmp	.-128    	; 0x15f4 <__fp_round>
    1674:	b1 df       	rcall	.-158    	; 0x15d8 <__fp_pscA>
    1676:	28 f0       	brcs	.+10     	; 0x1682 <__mulsf3+0x12>
    1678:	b6 df       	rcall	.-148    	; 0x15e6 <__fp_pscB>
    167a:	18 f0       	brcs	.+6      	; 0x1682 <__mulsf3+0x12>
    167c:	95 23       	and	r25, r21
    167e:	09 f0       	breq	.+2      	; 0x1682 <__mulsf3+0x12>
    1680:	a2 cf       	rjmp	.-188    	; 0x15c6 <__fp_inf>
    1682:	a7 cf       	rjmp	.-178    	; 0x15d2 <__fp_nan>
    1684:	11 24       	eor	r1, r1
    1686:	ea cf       	rjmp	.-44     	; 0x165c <__fp_szero>

00001688 <__mulsf3x>:
    1688:	c6 df       	rcall	.-116    	; 0x1616 <__fp_split3>
    168a:	a0 f3       	brcs	.-24     	; 0x1674 <__mulsf3+0x4>

0000168c <__mulsf3_pse>:
    168c:	95 9f       	mul	r25, r21
    168e:	d1 f3       	breq	.-12     	; 0x1684 <__mulsf3+0x14>
    1690:	95 0f       	add	r25, r21
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	55 1f       	adc	r21, r21
    1696:	62 9f       	mul	r22, r18
    1698:	f0 01       	movw	r30, r0
    169a:	72 9f       	mul	r23, r18
    169c:	bb 27       	eor	r27, r27
    169e:	f0 0d       	add	r31, r0
    16a0:	b1 1d       	adc	r27, r1
    16a2:	63 9f       	mul	r22, r19
    16a4:	aa 27       	eor	r26, r26
    16a6:	f0 0d       	add	r31, r0
    16a8:	b1 1d       	adc	r27, r1
    16aa:	aa 1f       	adc	r26, r26
    16ac:	64 9f       	mul	r22, r20
    16ae:	66 27       	eor	r22, r22
    16b0:	b0 0d       	add	r27, r0
    16b2:	a1 1d       	adc	r26, r1
    16b4:	66 1f       	adc	r22, r22
    16b6:	82 9f       	mul	r24, r18
    16b8:	22 27       	eor	r18, r18
    16ba:	b0 0d       	add	r27, r0
    16bc:	a1 1d       	adc	r26, r1
    16be:	62 1f       	adc	r22, r18
    16c0:	73 9f       	mul	r23, r19
    16c2:	b0 0d       	add	r27, r0
    16c4:	a1 1d       	adc	r26, r1
    16c6:	62 1f       	adc	r22, r18
    16c8:	83 9f       	mul	r24, r19
    16ca:	a0 0d       	add	r26, r0
    16cc:	61 1d       	adc	r22, r1
    16ce:	22 1f       	adc	r18, r18
    16d0:	74 9f       	mul	r23, r20
    16d2:	33 27       	eor	r19, r19
    16d4:	a0 0d       	add	r26, r0
    16d6:	61 1d       	adc	r22, r1
    16d8:	23 1f       	adc	r18, r19
    16da:	84 9f       	mul	r24, r20
    16dc:	60 0d       	add	r22, r0
    16de:	21 1d       	adc	r18, r1
    16e0:	82 2f       	mov	r24, r18
    16e2:	76 2f       	mov	r23, r22
    16e4:	6a 2f       	mov	r22, r26
    16e6:	11 24       	eor	r1, r1
    16e8:	9f 57       	subi	r25, 0x7F	; 127
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	8a f0       	brmi	.+34     	; 0x1710 <__mulsf3_pse+0x84>
    16ee:	e1 f0       	breq	.+56     	; 0x1728 <__mulsf3_pse+0x9c>
    16f0:	88 23       	and	r24, r24
    16f2:	4a f0       	brmi	.+18     	; 0x1706 <__mulsf3_pse+0x7a>
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	bb 1f       	adc	r27, r27
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	91 50       	subi	r25, 0x01	; 1
    1702:	50 40       	sbci	r21, 0x00	; 0
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__mulsf3_pse+0x64>
    1706:	9e 3f       	cpi	r25, 0xFE	; 254
    1708:	51 05       	cpc	r21, r1
    170a:	70 f0       	brcs	.+28     	; 0x1728 <__mulsf3_pse+0x9c>
    170c:	5c cf       	rjmp	.-328    	; 0x15c6 <__fp_inf>
    170e:	a6 cf       	rjmp	.-180    	; 0x165c <__fp_szero>
    1710:	5f 3f       	cpi	r21, 0xFF	; 255
    1712:	ec f3       	brlt	.-6      	; 0x170e <__mulsf3_pse+0x82>
    1714:	98 3e       	cpi	r25, 0xE8	; 232
    1716:	dc f3       	brlt	.-10     	; 0x170e <__mulsf3_pse+0x82>
    1718:	86 95       	lsr	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f7 95       	ror	r31
    1722:	e7 95       	ror	r30
    1724:	9f 5f       	subi	r25, 0xFF	; 255
    1726:	c1 f7       	brne	.-16     	; 0x1718 <__mulsf3_pse+0x8c>
    1728:	fe 2b       	or	r31, r30
    172a:	88 0f       	add	r24, r24
    172c:	91 1d       	adc	r25, r1
    172e:	96 95       	lsr	r25
    1730:	87 95       	ror	r24
    1732:	97 f9       	bld	r25, 7
    1734:	08 95       	ret

00001736 <__fp_cmp>:
    1736:	99 0f       	add	r25, r25
    1738:	00 08       	sbc	r0, r0
    173a:	55 0f       	add	r21, r21
    173c:	aa 0b       	sbc	r26, r26
    173e:	e0 e8       	ldi	r30, 0x80	; 128
    1740:	fe ef       	ldi	r31, 0xFE	; 254
    1742:	16 16       	cp	r1, r22
    1744:	17 06       	cpc	r1, r23
    1746:	e8 07       	cpc	r30, r24
    1748:	f9 07       	cpc	r31, r25
    174a:	c0 f0       	brcs	.+48     	; 0x177c <__fp_cmp+0x46>
    174c:	12 16       	cp	r1, r18
    174e:	13 06       	cpc	r1, r19
    1750:	e4 07       	cpc	r30, r20
    1752:	f5 07       	cpc	r31, r21
    1754:	98 f0       	brcs	.+38     	; 0x177c <__fp_cmp+0x46>
    1756:	62 1b       	sub	r22, r18
    1758:	73 0b       	sbc	r23, r19
    175a:	84 0b       	sbc	r24, r20
    175c:	95 0b       	sbc	r25, r21
    175e:	39 f4       	brne	.+14     	; 0x176e <__fp_cmp+0x38>
    1760:	0a 26       	eor	r0, r26
    1762:	61 f0       	breq	.+24     	; 0x177c <__fp_cmp+0x46>
    1764:	23 2b       	or	r18, r19
    1766:	24 2b       	or	r18, r20
    1768:	25 2b       	or	r18, r21
    176a:	21 f4       	brne	.+8      	; 0x1774 <__fp_cmp+0x3e>
    176c:	08 95       	ret
    176e:	0a 26       	eor	r0, r26
    1770:	09 f4       	brne	.+2      	; 0x1774 <__fp_cmp+0x3e>
    1772:	a1 40       	sbci	r26, 0x01	; 1
    1774:	a6 95       	lsr	r26
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	81 1d       	adc	r24, r1
    177a:	81 1d       	adc	r24, r1
    177c:	08 95       	ret

0000177e <__divmodhi4>:
    177e:	97 fb       	bst	r25, 7
    1780:	07 2e       	mov	r0, r23
    1782:	16 f4       	brtc	.+4      	; 0x1788 <__divmodhi4+0xa>
    1784:	00 94       	com	r0
    1786:	07 d0       	rcall	.+14     	; 0x1796 <__divmodhi4_neg1>
    1788:	77 fd       	sbrc	r23, 7
    178a:	09 d0       	rcall	.+18     	; 0x179e <__divmodhi4_neg2>
    178c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__udivmodhi4>
    1790:	07 fc       	sbrc	r0, 7
    1792:	05 d0       	rcall	.+10     	; 0x179e <__divmodhi4_neg2>
    1794:	3e f4       	brtc	.+14     	; 0x17a4 <__divmodhi4_exit>

00001796 <__divmodhi4_neg1>:
    1796:	90 95       	com	r25
    1798:	81 95       	neg	r24
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	08 95       	ret

0000179e <__divmodhi4_neg2>:
    179e:	70 95       	com	r23
    17a0:	61 95       	neg	r22
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255

000017a4 <__divmodhi4_exit>:
    17a4:	08 95       	ret

000017a6 <__udivmodhi4>:
    17a6:	aa 1b       	sub	r26, r26
    17a8:	bb 1b       	sub	r27, r27
    17aa:	51 e1       	ldi	r21, 0x11	; 17
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <__udivmodhi4_ep>

000017ae <__udivmodhi4_loop>:
    17ae:	aa 1f       	adc	r26, r26
    17b0:	bb 1f       	adc	r27, r27
    17b2:	a6 17       	cp	r26, r22
    17b4:	b7 07       	cpc	r27, r23
    17b6:	10 f0       	brcs	.+4      	; 0x17bc <__udivmodhi4_ep>
    17b8:	a6 1b       	sub	r26, r22
    17ba:	b7 0b       	sbc	r27, r23

000017bc <__udivmodhi4_ep>:
    17bc:	88 1f       	adc	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	5a 95       	dec	r21
    17c2:	a9 f7       	brne	.-22     	; 0x17ae <__udivmodhi4_loop>
    17c4:	80 95       	com	r24
    17c6:	90 95       	com	r25
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	08 95       	ret

000017ce <__tablejump2__>:
    17ce:	ee 0f       	add	r30, r30
    17d0:	ff 1f       	adc	r31, r31

000017d2 <__tablejump__>:
    17d2:	05 90       	lpm	r0, Z+
    17d4:	f4 91       	lpm	r31, Z
    17d6:	e0 2d       	mov	r30, r0
    17d8:	09 94       	ijmp

000017da <__do_global_dtors>:
    17da:	11 e0       	ldi	r17, 0x01	; 1
    17dc:	ce e6       	ldi	r28, 0x6E	; 110
    17de:	d1 e0       	ldi	r29, 0x01	; 1
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <__do_global_dtors+0x10>
    17e2:	fe 01       	movw	r30, r28
    17e4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__tablejump__>
    17e8:	22 96       	adiw	r28, 0x02	; 2
    17ea:	c0 37       	cpi	r28, 0x70	; 112
    17ec:	d1 07       	cpc	r29, r17
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <__do_global_dtors+0x8>
    17f0:	f8 94       	cli

000017f2 <__stop_program>:
    17f2:	ff cf       	rjmp	.-2      	; 0x17f2 <__stop_program>
