
ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  000017be  00001852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00802012  00802012  00001864  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000435b  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001228  00000000  00000000  00005e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001096  00000000  00000000  00007047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a4  00000000  00000000  000080e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c26  00000000  00000000  00008684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018cd  00000000  00000000  0000a2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0000bb77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__dtors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_25>
      68:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_26>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ac:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      b8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      bc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      c8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      d8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      dc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      e8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      ec:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      f8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      fc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     100:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     108:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     10c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     110:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     114:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     118:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     11c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     120:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     124:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     128:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     12c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     130:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     134:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_77>
     138:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     13c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     140:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     144:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     148:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     14c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     150:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     154:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     158:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     15c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     160:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     164:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
     168:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000016c <__ctors_start>:
     16c:	e4 06       	cpc	r14, r20

0000016e <__ctors_end>:
     16e:	f5 06       	cpc	r15, r21

00000170 <__dtors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df e2       	ldi	r29, 0x2F	; 47
     17a:	de bf       	out	0x3e, r29	; 62

0000017c <__do_copy_data>:
     17c:	10 e2       	ldi	r17, 0x20	; 32
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b0 e2       	ldi	r27, 0x20	; 32
     182:	ee eb       	ldi	r30, 0xBE	; 190
     184:	f7 e1       	ldi	r31, 0x17	; 23
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a2 31       	cpi	r26, 0x12	; 18
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	20 e2       	ldi	r18, 0x20	; 32
     194:	a2 e1       	ldi	r26, 0x12	; 18
     196:	b0 e2       	ldi	r27, 0x20	; 32
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a9 37       	cpi	r26, 0x79	; 121
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>

000001a2 <__do_global_ctors>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	ce e6       	ldi	r28, 0x6E	; 110
     1a6:	d1 e0       	ldi	r29, 0x01	; 1
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_global_ctors+0x10>
     1aa:	22 97       	sbiw	r28, 0x02	; 2
     1ac:	fe 01       	movw	r30, r28
     1ae:	0e 94 ce 0b 	call	0x179c	; 0x179c <__tablejump__>
     1b2:	cc 36       	cpi	r28, 0x6C	; 108
     1b4:	d1 07       	cpc	r29, r17
     1b6:	c9 f7       	brne	.-14     	; 0x1aa <__do_global_ctors+0x8>
     1b8:	0e 94 28 05 	call	0xa50	; 0xa50 <main>
     1bc:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__do_global_dtors>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <_Z17ReadSignatureBytej>:
     1c4:	aa ec       	ldi	r26, 0xCA	; 202
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	22 e0       	ldi	r18, 0x02	; 2
     1ca:	2c 93       	st	X, r18
     1cc:	fc 01       	movw	r30, r24
     1ce:	84 91       	lpm	r24, Z
     1d0:	1c 92       	st	X, r1
     1d2:	08 95       	ret

000001d4 <_Z7ReadADChh>:
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	18 2f       	mov	r17, r24
     1de:	06 2f       	mov	r16, r22
     1e0:	80 91 00 02 	lds	r24, 0x0200
     1e4:	80 fd       	sbrc	r24, 0
     1e6:	1b c0       	rjmp	.+54     	; 0x21e <_Z7ReadADChh+0x4a>
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d2 e0       	ldi	r29, 0x02	; 2
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	88 83       	st	Y, r24
     1f0:	84 e0       	ldi	r24, 0x04	; 4
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	8a 83       	std	Y+2, r24	; 0x02
     1f8:	1b 82       	std	Y+3, r1	; 0x03
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	8c 83       	std	Y+4, r24	; 0x04
     1fe:	80 e2       	ldi	r24, 0x20	; 32
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     206:	8c 87       	std	Y+12, r24	; 0x0c
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z17ReadSignatureBytej>
     210:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	9c e0       	ldi	r25, 0x0C	; 12
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z7ReadADChh+0x42>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z7ReadADChh+0x48>
     21c:	00 00       	nop
     21e:	e0 e0       	ldi	r30, 0x00	; 0
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	00 a3       	std	Z+32, r16	; 0x20
     224:	11 0f       	add	r17, r17
     226:	11 0f       	add	r17, r17
     228:	11 0f       	add	r17, r17
     22a:	11 a3       	std	Z+33, r17	; 0x21
     22c:	12 a2       	std	Z+34, r1	; 0x22
     22e:	80 a1       	ldd	r24, Z+32	; 0x20
     230:	80 68       	ori	r24, 0x80	; 128
     232:	80 a3       	std	Z+32, r24	; 0x20
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	88 23       	and	r24, r24
     238:	e9 f3       	breq	.-6      	; 0x234 <_Z7ReadADChh+0x60>
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f2 e0       	ldi	r31, 0x02	; 2
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	86 83       	std	Z+6, r24	; 0x06
     242:	80 a1       	ldd	r24, Z+32	; 0x20
     244:	80 68       	ori	r24, 0x80	; 128
     246:	80 a3       	std	Z+32, r24	; 0x20
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	e9 f3       	breq	.-6      	; 0x248 <_Z7ReadADChh+0x74>
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	86 81       	ldd	r24, Z+6	; 0x06
     254:	86 83       	std	Z+6, r24	; 0x06
     256:	80 89       	ldd	r24, Z+16	; 0x10
     258:	91 89       	ldd	r25, Z+17	; 0x11
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <_Z15SetupResetTimerv>:
	WaitForHost,
	ARMControl
} CurrentState = WaitForHost;

void SetupResetTimer(){
	TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; //31250 counts per second with 32Mhz Processor
     264:	e0 e0       	ldi	r30, 0x00	; 0
     266:	f9 e0       	ldi	r31, 0x09	; 9
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	80 83       	st	Z, r24
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
     26c:	11 82       	std	Z+1, r1	; 0x01
	TCD0.PER = 31250;
     26e:	82 e1       	ldi	r24, 0x12	; 18
     270:	9a e7       	ldi	r25, 0x7A	; 122
     272:	86 a3       	std	Z+38, r24	; 0x26
     274:	97 a3       	std	Z+39, r25	; 0x27
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	08 95       	ret

0000027c <_Z17FlushSerialBufferP16Usart_and_buffer>:
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	while(USART_RXBufferData_Available(UsartBuffer)){
     282:	03 c0       	rjmp	.+6      	; 0x28a <_Z17FlushSerialBufferP16Usart_and_buffer+0xe>
		USART_RXBuffer_GetByte(UsartBuffer);
     284:	ce 01       	movw	r24, r28
     286:	0e 94 52 09 	call	0x12a4	; 0x12a4 <USART_RXBuffer_GetByte>
	TCD0.PER = 31250;
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
}
	
void FlushSerialBuffer(USART_data_t *UsartBuffer){
	while(USART_RXBufferData_Available(UsartBuffer)){
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_RXBufferData_Available>
     290:	81 11       	cpse	r24, r1
     292:	f8 cf       	rjmp	.-16     	; 0x284 <_Z17FlushSerialBufferP16Usart_and_buffer+0x8>
		USART_RXBuffer_GetByte(UsartBuffer);
	}
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <__vector_25>:

ISR(USARTC0_RXC_vect){
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
     2c0:	8a e6       	ldi	r24, 0x6A	; 106
     2c2:	90 e2       	ldi	r25, 0x20	; 32
     2c4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <USART_RXComplete>
	
	if(USART_RXBufferData_Available(&USART_PC_Data)){
     2c8:	8a e6       	ldi	r24, 0x6A	; 106
     2ca:	90 e2       	ldi	r25, 0x20	; 32
     2cc:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_RXBufferData_Available>
     2d0:	88 23       	and	r24, r24
     2d2:	79 f0       	breq	.+30     	; 0x2f2 <__vector_25+0x58>
		recieveBuffer[bufferIndex] = USART_RXBuffer_GetByte(&USART_PC_Data);
     2d4:	c0 91 25 20 	lds	r28, 0x2025
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	8a e6       	ldi	r24, 0x6A	; 106
     2dc:	90 e2       	ldi	r25, 0x20	; 32
     2de:	0e 94 52 09 	call	0x12a4	; 0x12a4 <USART_RXBuffer_GetByte>
     2e2:	cd 5e       	subi	r28, 0xED	; 237
     2e4:	df 4d       	sbci	r29, 0xDF	; 223
     2e6:	88 83       	st	Y, r24
		bufferIndex++;
     2e8:	80 91 25 20 	lds	r24, 0x2025
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	80 93 25 20 	sts	0x2025, r24
	}
	
	if((bufferIndex == PACKETSIZE)){
     2f2:	80 91 25 20 	lds	r24, 0x2025
     2f6:	8a 30       	cpi	r24, 0x0A	; 10
     2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_25+0x62>
     2fa:	7d c0       	rjmp	.+250    	; 0x3f6 <__vector_25+0x15c>
		FlushSerialBuffer(&USART_PC_Data);
     2fc:	8a e6       	ldi	r24, 0x6A	; 106
     2fe:	90 e2       	ldi	r25, 0x20	; 32
     300:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17FlushSerialBufferP16Usart_and_buffer>
		if(recieveBuffer[8] == (recieveBuffer[1] ^ recieveBuffer[2] ^ recieveBuffer[3] ^ recieveBuffer[4] ^ recieveBuffer[5] ^ recieveBuffer[6] ^ recieveBuffer[7])){
     304:	90 91 1b 20 	lds	r25, 0x201B
     308:	80 91 14 20 	lds	r24, 0x2014
     30c:	70 91 15 20 	lds	r23, 0x2015
     310:	60 91 16 20 	lds	r22, 0x2016
     314:	50 91 17 20 	lds	r21, 0x2017
     318:	40 91 18 20 	lds	r20, 0x2018
     31c:	30 91 19 20 	lds	r19, 0x2019
     320:	20 91 1a 20 	lds	r18, 0x201A
     324:	87 27       	eor	r24, r23
     326:	86 27       	eor	r24, r22
     328:	85 27       	eor	r24, r21
     32a:	84 27       	eor	r24, r20
     32c:	83 27       	eor	r24, r19
     32e:	82 27       	eor	r24, r18
     330:	98 13       	cpse	r25, r24
     332:	48 c0       	rjmp	.+144    	; 0x3c4 <__vector_25+0x12a>
			//if(recieveBuffer[1] == 2){
			//sprintf(SendBuffer)
			gripStepper.desiredGripState = !(recieveBuffer[1] & GRIP_BM_SERIAL); //0b00000010	
     334:	80 91 14 20 	lds	r24, 0x2014
     338:	c1 e0       	ldi	r28, 0x01	; 1
     33a:	86 95       	lsr	r24
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	8c 27       	eor	r24, r28
     340:	80 93 39 20 	sts	0x2039, r24
			//}else if(recieveBuffer[1] != 2){
				
				//STATUS1_CLR();
			//}

			baseStepper.desiredPos = (recieveBuffer[3]+recieveBuffer[2]);
     344:	20 91 16 20 	lds	r18, 0x2016
     348:	80 91 15 20 	lds	r24, 0x2015
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	82 0f       	add	r24, r18
     350:	91 1d       	adc	r25, r1
     352:	80 93 31 20 	sts	0x2031, r24
     356:	90 93 32 20 	sts	0x2032, r25
			lowerAct.setDesired((double(recieveBuffer[5]+recieveBuffer[4]) / double(100)));
     35a:	80 91 18 20 	lds	r24, 0x2018
     35e:	60 91 17 20 	lds	r22, 0x2017
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	68 0f       	add	r22, r24
     366:	71 1d       	adc	r23, r1
     368:	88 27       	eor	r24, r24
     36a:	77 fd       	sbrc	r23, 7
     36c:	80 95       	com	r24
     36e:	98 2f       	mov	r25, r24
     370:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	48 ec       	ldi	r20, 0xC8	; 200
     37a:	52 e4       	ldi	r21, 0x42	; 66
     37c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__divsf3>
     380:	ab 01       	movw	r20, r22
     382:	bc 01       	movw	r22, r24
     384:	82 e5       	ldi	r24, 0x52	; 82
     386:	90 e2       	ldi	r25, 0x20	; 32
     388:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZN9motorInfo10setDesiredEf>
			upperAct.setDesired((double(recieveBuffer[7]+recieveBuffer[6]) / double(100)));
     38c:	80 91 1a 20 	lds	r24, 0x201A
     390:	60 91 19 20 	lds	r22, 0x2019
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	68 0f       	add	r22, r24
     398:	71 1d       	adc	r23, r1
     39a:	88 27       	eor	r24, r24
     39c:	77 fd       	sbrc	r23, 7
     39e:	80 95       	com	r24
     3a0:	98 2f       	mov	r25, r24
     3a2:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	48 ec       	ldi	r20, 0xC8	; 200
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__divsf3>
     3b2:	ab 01       	movw	r20, r22
     3b4:	bc 01       	movw	r22, r24
     3b6:	8a e3       	ldi	r24, 0x3A	; 58
     3b8:	90 e2       	ldi	r25, 0x20	; 32
     3ba:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZN9motorInfo10setDesiredEf>
			IsPacketToParse = true;
     3be:	c0 93 26 20 	sts	0x2026, r28
     3c2:	19 c0       	rjmp	.+50     	; 0x3f6 <__vector_25+0x15c>
		}else{
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3c4:	e0 ea       	ldi	r30, 0xA0	; 160
     3c6:	f8 e0       	ldi	r31, 0x08	; 8
     3c8:	81 81       	ldd	r24, Z+1	; 0x01
     3ca:	85 ff       	sbrs	r24, 5
     3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <__vector_25+0x12e>
			USART_PutChar(&USARTC0, 255);
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	80 93 a0 08 	sts	0x08A0, r24
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3d4:	e0 ea       	ldi	r30, 0xA0	; 160
     3d6:	f8 e0       	ldi	r31, 0x08	; 8
     3d8:	81 81       	ldd	r24, Z+1	; 0x01
     3da:	85 ff       	sbrs	r24, 5
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <__vector_25+0x13e>
			USART_PutChar(&USARTC0,0);  //Checksum failed
     3de:	10 92 a0 08 	sts	0x08A0, r1
			while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3e2:	e0 ea       	ldi	r30, 0xA0	; 160
     3e4:	f8 e0       	ldi	r31, 0x08	; 8
     3e6:	81 81       	ldd	r24, Z+1	; 0x01
     3e8:	85 ff       	sbrs	r24, 5
     3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <__vector_25+0x14c>
			USART_PutChar(&USARTC0,255);
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	80 93 a0 08 	sts	0x08A0, r24

			bufferIndex = 0;	
     3f2:	10 92 25 20 	sts	0x2025, r1
		}
		
	}

}
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <__vector_26>:

ISR(USARTC0_DRE_vect){
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	ef 93       	push	r30
     43c:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
     43e:	8a e6       	ldi	r24, 0x6A	; 106
     440:	90 e2       	ldi	r25, 0x20	; 32
     442:	0e 94 73 09 	call	0x12e6	; 0x12e6 <USART_DataRegEmpty>
}
     446:	ff 91       	pop	r31
     448:	ef 91       	pop	r30
     44a:	bf 91       	pop	r27
     44c:	af 91       	pop	r26
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	7f 91       	pop	r23
     454:	6f 91       	pop	r22
     456:	5f 91       	pop	r21
     458:	4f 91       	pop	r20
     45a:	3f 91       	pop	r19
     45c:	2f 91       	pop	r18
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <_Z23SetXMEGA32MhzCalibratedv>:


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     468:	88 ed       	ldi	r24, 0xD8	; 216
     46a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
     472:	e0 e5       	ldi	r30, 0x50	; 80
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	81 81       	ldd	r24, Z+1	; 0x01
     478:	81 ff       	sbrs	r24, 1
     47a:	fd cf       	rjmp	.-6      	; 0x476 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
     47c:	88 ed       	ldi	r24, 0xD8	; 216
     47e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
     486:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
     488:	e0 e5       	ldi	r30, 0x50	; 80
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	84 60       	ori	r24, 0x04	; 4
     490:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
     492:	81 81       	ldd	r24, Z+1	; 0x01
     494:	82 ff       	sbrs	r24, 2
     496:	fd cf       	rjmp	.-6      	; 0x492 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
     498:	e0 e5       	ldi	r30, 0x50	; 80
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	86 81       	ldd	r24, Z+6	; 0x06
     49e:	8d 7f       	andi	r24, 0xFD	; 253
     4a0:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator
     4a2:	e0 e6       	ldi	r30, 0x60	; 96
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	81 60       	ori	r24, 0x01	; 1
     4aa:	80 83       	st	Z, r24
     4ac:	08 95       	ret

000004ae <_Z12SetupPCCommsv>:
}

void SetupPCComms(){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
     4ae:	e0 e4       	ldi	r30, 0x40	; 64
     4b0:	f6 e0       	ldi	r31, 0x06	; 6
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	60 ea       	ldi	r22, 0xA0	; 160
     4be:	78 e0       	ldi	r23, 0x08	; 8
     4c0:	8a e6       	ldi	r24, 0x6A	; 106
     4c2:	90 e2       	ldi	r25, 0x20	; 32
     4c4:	0e 94 41 09 	call	0x1282	; 0x1282 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
     4c8:	e0 91 6a 20 	lds	r30, 0x206A
     4cc:	f0 91 6b 20 	lds	r31, 0x206B
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
     4d4:	83 81       	ldd	r24, Z+3	; 0x03
     4d6:	8f 7c       	andi	r24, 0xCF	; 207
     4d8:	80 61       	ori	r24, 0x10	; 16
     4da:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
     4dc:	a0 ea       	ldi	r26, 0xA0	; 160
     4de:	b8 e0       	ldi	r27, 0x08	; 8
     4e0:	8f ec       	ldi	r24, 0xCF	; 207
     4e2:	16 96       	adiw	r26, 0x06	; 6
     4e4:	8c 93       	st	X, r24
     4e6:	16 97       	sbiw	r26, 0x06	; 6
     4e8:	17 96       	adiw	r26, 0x07	; 7
     4ea:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
     4ec:	84 81       	ldd	r24, Z+4	; 0x04
     4ee:	80 61       	ori	r24, 0x10	; 16
     4f0:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
     4f2:	84 81       	ldd	r24, Z+4	; 0x04
     4f4:	88 60       	ori	r24, 0x08	; 8
     4f6:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;																	//Enable PMIC interrupt level low (No idea what this does, but is necessary)
     4f8:	e0 ea       	ldi	r30, 0xA0	; 160
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	82 81       	ldd	r24, Z+2	; 0x02
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	82 83       	std	Z+2, r24	; 0x02
     502:	08 95       	ret

00000504 <_Z25DemInitThingsYouBeenDoingv>:
}


//Motor 1 is Gripper
//Motor 2 is Base Stepper
void DemInitThingsYouBeenDoing(){
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	SetXMEGA32MhzCalibrated();
     508:	0e 94 34 02 	call	0x468	; 0x468 <_Z23SetXMEGA32MhzCalibratedv>
	SetupPCComms();
     50c:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z12SetupPCCommsv>
	SetupResetTimer();
     510:	0e 94 32 01 	call	0x264	; 0x264 <_Z15SetupResetTimerv>
	
	//Setup Status and Error LEDS
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);
     514:	80 ee       	ldi	r24, 0xE0	; 224
     516:	e0 e4       	ldi	r30, 0x40	; 64
     518:	f6 e0       	ldi	r31, 0x06	; 6
     51a:	81 83       	std	Z+1, r24	; 0x01
	
	//Setup Outputs
	PORTD.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     51c:	e0 e6       	ldi	r30, 0x60	; 96
     51e:	f6 e0       	ldi	r31, 0x06	; 6
     520:	9f ef       	ldi	r25, 0xFF	; 255
     522:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm);  //First set of M settings
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b6 e0       	ldi	r27, 0x06	; 6
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	8c 93       	st	X, r24
     52c:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm);  //Second set of M settings
     52e:	c0 e2       	ldi	r28, 0x20	; 32
     530:	d6 e0       	ldi	r29, 0x06	; 6
     532:	87 e0       	ldi	r24, 0x07	; 7
     534:	89 83       	std	Y+1, r24	; 0x01

	//Setup Inputs
	PORTA.DIRCLR = (PIN2_bm); //Rotation Calibration
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	12 96       	adiw	r26, 0x02	; 2
     53a:	8c 93       	st	X, r24
     53c:	12 97       	sbiw	r26, 0x02	; 2
	PORTA.DIRCLR = (PIN3_bm); //Grip Close
     53e:	98 e0       	ldi	r25, 0x08	; 8
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	9c 93       	st	X, r25
     544:	12 97       	sbiw	r26, 0x02	; 2
	PORTB.DIRCLR = (PIN3_bm); //Grip Limit
     546:	9a 83       	std	Y+2, r25	; 0x02
	PORTA.DIRCLR = (PIN4_bm); //'IsRoving' check
     548:	20 e1       	ldi	r18, 0x10	; 16
     54a:	12 96       	adiw	r26, 0x02	; 2
     54c:	2c 93       	st	X, r18
     54e:	12 97       	sbiw	r26, 0x02	; 2
		

	//GRIP STEPPER is MD1

	//SETUP "UPPER" DRIVER
	MD1_ENABLE();
     550:	30 e4       	ldi	r19, 0x40	; 64
     552:	36 83       	std	Z+6, r19	; 0x06
	
	//Setup Microstepping
	MD1_M0_CLR();
     554:	90 e2       	ldi	r25, 0x20	; 32
     556:	16 96       	adiw	r26, 0x06	; 6
     558:	9c 93       	st	X, r25
     55a:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M1_CLR();
     55c:	16 96       	adiw	r26, 0x06	; 6
     55e:	3c 93       	st	X, r19
     560:	16 97       	sbiw	r26, 0x06	; 6
	MD1_M2_SET();
     562:	30 e8       	ldi	r19, 0x80	; 128
     564:	15 96       	adiw	r26, 0x05	; 5
     566:	3c 93       	st	X, r19
	
	MD1_DIR_CLR();
     568:	26 83       	std	Z+6, r18	; 0x06
	MD1_STEP_CLR();
     56a:	96 83       	std	Z+6, r25	; 0x06
	
	
	//BASE STEPPER is MD2
	
	//Motor Driver 2 setup
	MD2_ENABLE();
     56c:	86 83       	std	Z+6, r24	; 0x06
	
	//Setup Microstepping
	MD2_M0_SET();  //Small amount of micro stepping is sufficient 
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	2d 83       	std	Y+5, r18	; 0x05
	MD2_M1_SET();
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	9d 83       	std	Y+5, r25	; 0x05
	MD2_M2_CLR();
     576:	8e 83       	std	Y+6, r24	; 0x06
	
	MD2_DIR_CLR();
     578:	26 83       	std	Z+6, r18	; 0x06
	MD2_STEP_CLR();
     57a:	96 83       	std	Z+6, r25	; 0x06
	
	sei();
     57c:	78 94       	sei
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <_Z12SendStringPCPc>:

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     584:	fc 01       	movw	r30, r24
     586:	20 81       	ld	r18, Z
     588:	22 23       	and	r18, r18
     58a:	59 f0       	breq	.+22     	; 0x5a2 <_Z12SendStringPCPc+0x1e>
     58c:	dc 01       	movw	r26, r24
     58e:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     590:	e0 ea       	ldi	r30, 0xA0	; 160
     592:	f8 e0       	ldi	r31, 0x08	; 8
     594:	81 81       	ldd	r24, Z+1	; 0x01
     596:	85 ff       	sbrs	r24, 5
     598:	fd cf       	rjmp	.-6      	; 0x594 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);	
     59a:	20 83       	st	Z, r18
	
	sei();
}

void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
     59c:	2d 91       	ld	r18, X+
     59e:	21 11       	cpse	r18, r1
     5a0:	f9 cf       	rjmp	.-14     	; 0x594 <_Z12SendStringPCPc+0x10>
     5a2:	08 95       	ret

000005a4 <_Z9smoothADCi>:
//PA1 is lower act

//If a 0 is passed in, then the lower act is read
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	8c 01       	movw	r16, r24
     5b2:	c7 e0       	ldi	r28, 0x07	; 7
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
	const int smoothFactor = 7;
	int count = 0;
     5b6:	e1 2c       	mov	r14, r1
     5b8:	f1 2c       	mov	r15, r1
	for(int i = 0; i < smoothFactor; ++i){
		if(act == LOWER){ 
     5ba:	01 15       	cp	r16, r1
     5bc:	11 05       	cpc	r17, r1
     5be:	39 f4       	brne	.+14     	; 0x5ce <_Z9smoothADCi+0x2a>
			count += ReadADC(1,1);	
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5c8:	e8 0e       	add	r14, r24
     5ca:	f9 1e       	adc	r15, r25
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <_Z9smoothADCi+0x3c>
		}
		else if(act == UPPER) {
     5ce:	01 30       	cpi	r16, 0x01	; 1
     5d0:	11 05       	cpc	r17, r1
     5d2:	31 f4       	brne	.+12     	; 0x5e0 <_Z9smoothADCi+0x3c>
			count += ReadADC(0,1);
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z7ReadADChh>
     5dc:	e8 0e       	add	r14, r24
     5de:	f9 1e       	adc	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e0:	8f e3       	ldi	r24, 0x3F	; 63
     5e2:	9f e1       	ldi	r25, 0x1F	; 31
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <_Z9smoothADCi+0x40>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <_Z9smoothADCi+0x46>
     5ea:	00 00       	nop
     5ec:	21 97       	sbiw	r28, 0x01	; 1
//0 = LOWER ACT
//1 = UPPER ACT
int smoothADC(int act){
	const int smoothFactor = 7;
	int count = 0;
	for(int i = 0; i < smoothFactor; ++i){
     5ee:	20 97       	sbiw	r28, 0x00	; 0
     5f0:	21 f7       	brne	.-56     	; 0x5ba <_Z9smoothADCi+0x16>
		else if(act == UPPER) {
			count += ReadADC(0,1);
		}
		_delay_ms(1);
	}
	return count/smoothFactor;
     5f2:	c7 01       	movw	r24, r14
     5f4:	67 e0       	ldi	r22, 0x07	; 7
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divmodhi4>
     5fc:	cb 01       	movw	r24, r22
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	08 95       	ret

0000060c <_Z16checkActPositionv>:

//lowerAct   upperAct
void checkActPosition(){
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     614:	20 91 66 20 	lds	r18, 0x2066
     618:	30 91 67 20 	lds	r19, 0x2067
     61c:	40 91 68 20 	lds	r20, 0x2068
     620:	50 91 69 20 	lds	r21, 0x2069
     624:	60 91 62 20 	lds	r22, 0x2062
     628:	70 91 63 20 	lds	r23, 0x2063
     62c:	80 91 64 20 	lds	r24, 0x2064
     630:	90 91 65 20 	lds	r25, 0x2065
     634:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	a9 01       	movw	r20, r18
     642:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     646:	18 16       	cp	r1, r24
     648:	24 f0       	brlt	.+8      	; 0x652 <_Z16checkActPositionv+0x46>
		return input;
	else
		return input * -1;
     64a:	f7 fa       	bst	r15, 7
     64c:	f0 94       	com	r15
     64e:	f7 f8       	bld	r15, 7
     650:	f0 94       	com	r15
}

//lowerAct   upperAct
void checkActPosition(){
	
	if (abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.acceptableError){
     652:	a7 01       	movw	r20, r14
     654:	96 01       	movw	r18, r12
     656:	60 91 56 20 	lds	r22, 0x2056
     65a:	70 91 57 20 	lds	r23, 0x2057
     65e:	80 91 58 20 	lds	r24, 0x2058
     662:	90 91 59 20 	lds	r25, 0x2059
     666:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     66a:	18 16       	cp	r1, r24
     66c:	44 f4       	brge	.+16     	; 0x67e <_Z16checkActPositionv+0x72>
		++lowerAct.acceptableCount;
     66e:	e4 e5       	ldi	r30, 0x54	; 84
     670:	f0 e2       	ldi	r31, 0x20	; 32
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	04 c0       	rjmp	.+8      	; 0x686 <_Z16checkActPositionv+0x7a>
	}
	else{
		lowerAct.acceptableCount = 0;
     67e:	10 92 54 20 	sts	0x2054, r1
     682:	10 92 55 20 	sts	0x2055, r1
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     686:	20 91 4e 20 	lds	r18, 0x204E
     68a:	30 91 4f 20 	lds	r19, 0x204F
     68e:	40 91 50 20 	lds	r20, 0x2050
     692:	50 91 51 20 	lds	r21, 0x2051
     696:	60 91 4a 20 	lds	r22, 0x204A
     69a:	70 91 4b 20 	lds	r23, 0x204B
     69e:	80 91 4c 20 	lds	r24, 0x204C
     6a2:	90 91 4d 20 	lds	r25, 0x204D
     6a6:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     6b8:	18 16       	cp	r1, r24
     6ba:	24 f0       	brlt	.+8      	; 0x6c4 <_Z16checkActPositionv+0xb8>
		return input;
	else
		return input * -1;
     6bc:	f7 fa       	bst	r15, 7
     6be:	f0 94       	com	r15
     6c0:	f7 f8       	bld	r15, 7
     6c2:	f0 94       	com	r15
		++lowerAct.acceptableCount;
	}
	else{
		lowerAct.acceptableCount = 0;
	}
	if (abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.acceptableError){
     6c4:	a7 01       	movw	r20, r14
     6c6:	96 01       	movw	r18, r12
     6c8:	60 91 3e 20 	lds	r22, 0x203E
     6cc:	70 91 3f 20 	lds	r23, 0x203F
     6d0:	80 91 40 20 	lds	r24, 0x2040
     6d4:	90 91 41 20 	lds	r25, 0x2041
     6d8:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     6dc:	18 16       	cp	r1, r24
     6de:	44 f4       	brge	.+16     	; 0x6f0 <_Z16checkActPositionv+0xe4>
		++upperAct.acceptableCount;
     6e0:	ec e3       	ldi	r30, 0x3C	; 60
     6e2:	f0 e2       	ldi	r31, 0x20	; 32
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <_Z16checkActPositionv+0xec>
	}
	else{
		upperAct.acceptableCount = 0;
     6f0:	10 92 3c 20 	sts	0x203C, r1
     6f4:	10 92 3d 20 	sts	0x203D, r1
	}
	
	if(upperAct.acceptableCount >= upperAct.acceptableCountMax){
     6f8:	20 91 3c 20 	lds	r18, 0x203C
     6fc:	30 91 3d 20 	lds	r19, 0x203D
     700:	80 91 3a 20 	lds	r24, 0x203A
     704:	90 91 3b 20 	lds	r25, 0x203B
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	24 f0       	brlt	.+8      	; 0x716 <_Z16checkActPositionv+0x10a>
		upperAct.disable();
     70e:	8a e3       	ldi	r24, 0x3A	; 58
     710:	90 e2       	ldi	r25, 0x20	; 32
     712:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN9motorInfo7disableEv>
	}
	if(lowerAct.acceptableCount >= upperAct.acceptableCountMax){
     716:	20 91 54 20 	lds	r18, 0x2054
     71a:	30 91 55 20 	lds	r19, 0x2055
     71e:	80 91 3a 20 	lds	r24, 0x203A
     722:	90 91 3b 20 	lds	r25, 0x203B
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	24 f0       	brlt	.+8      	; 0x734 <_Z16checkActPositionv+0x128>
		lowerAct.disable();
     72c:	82 e5       	ldi	r24, 0x52	; 82
     72e:	90 e2       	ldi	r25, 0x20	; 32
     730:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN9motorInfo7disableEv>
	}
	
	
	lowerAct.currentPos = smoothADC(LOWER)/58.13 -.41;
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9smoothADCi>
     73c:	bc 01       	movw	r22, r24
     73e:	88 27       	eor	r24, r24
     740:	77 fd       	sbrc	r23, 7
     742:	80 95       	com	r24
     744:	98 2f       	mov	r25, r24
     746:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
     74a:	2f e1       	ldi	r18, 0x1F	; 31
     74c:	35 e8       	ldi	r19, 0x85	; 133
     74e:	48 e6       	ldi	r20, 0x68	; 104
     750:	52 e4       	ldi	r21, 0x42	; 66
     752:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__divsf3>
     756:	25 e8       	ldi	r18, 0x85	; 133
     758:	3b ee       	ldi	r19, 0xEB	; 235
     75a:	41 ed       	ldi	r20, 0xD1	; 209
     75c:	5e e3       	ldi	r21, 0x3E	; 62
     75e:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     762:	60 93 62 20 	sts	0x2062, r22
     766:	70 93 63 20 	sts	0x2063, r23
     76a:	80 93 64 20 	sts	0x2064, r24
     76e:	90 93 65 20 	sts	0x2065, r25
	upperAct.currentPos = smoothADC(UPPER)/58.13 -.41;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9smoothADCi>
     77a:	bc 01       	movw	r22, r24
     77c:	88 27       	eor	r24, r24
     77e:	77 fd       	sbrc	r23, 7
     780:	80 95       	com	r24
     782:	98 2f       	mov	r25, r24
     784:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
     788:	2f e1       	ldi	r18, 0x1F	; 31
     78a:	35 e8       	ldi	r19, 0x85	; 133
     78c:	48 e6       	ldi	r20, 0x68	; 104
     78e:	52 e4       	ldi	r21, 0x42	; 66
     790:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__divsf3>
     794:	25 e8       	ldi	r18, 0x85	; 133
     796:	3b ee       	ldi	r19, 0xEB	; 235
     798:	41 ed       	ldi	r20, 0xD1	; 209
     79a:	5e e3       	ldi	r21, 0x3E	; 62
     79c:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     7a0:	60 93 4a 20 	sts	0x204A, r22
     7a4:	70 93 4b 20 	sts	0x204B, r23
     7a8:	80 93 4c 20 	sts	0x204C, r24
     7ac:	90 93 4d 20 	sts	0x204D, r25
}
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	08 95       	ret

000007ba <_Z13getMotorSpeedi>:

int getMotorSpeed(int act){
     7ba:	4f 92       	push	r4
     7bc:	5f 92       	push	r5
     7be:	6f 92       	push	r6
     7c0:	7f 92       	push	r7
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
		
	if(act == LOWER){
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <_Z13getMotorSpeedi+0x1e>
     7d6:	71 c0       	rjmp	.+226    	; 0x8ba <_Z13getMotorSpeedi+0x100>
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     7d8:	40 90 62 20 	lds	r4, 0x2062
     7dc:	50 90 63 20 	lds	r5, 0x2063
     7e0:	60 90 64 20 	lds	r6, 0x2064
     7e4:	70 90 65 20 	lds	r7, 0x2065
     7e8:	20 91 66 20 	lds	r18, 0x2066
     7ec:	30 91 67 20 	lds	r19, 0x2067
     7f0:	40 91 68 20 	lds	r20, 0x2068
     7f4:	50 91 69 20 	lds	r21, 0x2069
     7f8:	c3 01       	movw	r24, r6
     7fa:	b2 01       	movw	r22, r4
     7fc:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     800:	6b 01       	movw	r12, r22
     802:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	a9 01       	movw	r20, r18
     80a:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     80e:	18 16       	cp	r1, r24
     810:	24 f0       	brlt	.+8      	; 0x81a <_Z13getMotorSpeedi+0x60>
		return input;
	else
		return input * -1;
     812:	f7 fa       	bst	r15, 7
     814:	f0 94       	com	r15
     816:	f7 f8       	bld	r15, 7
     818:	f0 94       	com	r15
}

int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
     81a:	80 90 5a 20 	lds	r8, 0x205A
     81e:	90 90 5b 20 	lds	r9, 0x205B
     822:	a0 90 5c 20 	lds	r10, 0x205C
     826:	b0 90 5d 20 	lds	r11, 0x205D
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	5f e3       	ldi	r21, 0x3F	; 63
     832:	c5 01       	movw	r24, r10
     834:	b4 01       	movw	r22, r8
     836:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     83a:	a7 01       	movw	r20, r14
     83c:	96 01       	movw	r18, r12
     83e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     842:	18 16       	cp	r1, r24
     844:	54 f4       	brge	.+20     	; 0x85a <_Z13getMotorSpeedi+0xa0>
			return lowerAct.speed / 3;
     846:	80 91 5e 20 	lds	r24, 0x205E
     84a:	90 91 5f 20 	lds	r25, 0x205F
     84e:	63 e0       	ldi	r22, 0x03	; 3
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divmodhi4>
     856:	cb 01       	movw	r24, r22
     858:	a6 c0       	rjmp	.+332    	; 0x9a6 <_Z13getMotorSpeedi+0x1ec>
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     85a:	20 91 66 20 	lds	r18, 0x2066
     85e:	30 91 67 20 	lds	r19, 0x2067
     862:	40 91 68 20 	lds	r20, 0x2068
     866:	50 91 69 20 	lds	r21, 0x2069
     86a:	c3 01       	movw	r24, r6
     86c:	b2 01       	movw	r22, r4
     86e:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     872:	6b 01       	movw	r12, r22
     874:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	a9 01       	movw	r20, r18
     87c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	24 f0       	brlt	.+8      	; 0x88c <_Z13getMotorSpeedi+0xd2>
		return input;
	else
		return input * -1;
     884:	f7 fa       	bst	r15, 7
     886:	f0 94       	com	r15
     888:	f7 f8       	bld	r15, 7
     88a:	f0 94       	com	r15
int getMotorSpeed(int act){
		
	if(act == LOWER){
		if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange/2)
			return lowerAct.speed / 3;
		else if(abs(lowerAct.currentPos - lowerAct.desiredPos) < lowerAct.slowRange)
     88c:	a7 01       	movw	r20, r14
     88e:	96 01       	movw	r18, r12
     890:	c5 01       	movw	r24, r10
     892:	b4 01       	movw	r22, r8
     894:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     898:	18 16       	cp	r1, r24
     89a:	54 f4       	brge	.+20     	; 0x8b0 <_Z13getMotorSpeedi+0xf6>
			return lowerAct.speed / 2;
     89c:	80 91 5e 20 	lds	r24, 0x205E
     8a0:	90 91 5f 20 	lds	r25, 0x205F
     8a4:	99 23       	and	r25, r25
     8a6:	0c f4       	brge	.+2      	; 0x8aa <_Z13getMotorSpeedi+0xf0>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	95 95       	asr	r25
     8ac:	87 95       	ror	r24
     8ae:	7b c0       	rjmp	.+246    	; 0x9a6 <_Z13getMotorSpeedi+0x1ec>
		else
			return lowerAct.speed;
     8b0:	80 91 5e 20 	lds	r24, 0x205E
     8b4:	90 91 5f 20 	lds	r25, 0x205F
     8b8:	76 c0       	rjmp	.+236    	; 0x9a6 <_Z13getMotorSpeedi+0x1ec>
	}
	else if (act == UPPER){
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <_Z13getMotorSpeedi+0x106>
     8be:	71 c0       	rjmp	.+226    	; 0x9a2 <_Z13getMotorSpeedi+0x1e8>
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     8c0:	40 90 4a 20 	lds	r4, 0x204A
     8c4:	50 90 4b 20 	lds	r5, 0x204B
     8c8:	60 90 4c 20 	lds	r6, 0x204C
     8cc:	70 90 4d 20 	lds	r7, 0x204D
     8d0:	20 91 4e 20 	lds	r18, 0x204E
     8d4:	30 91 4f 20 	lds	r19, 0x204F
     8d8:	40 91 50 20 	lds	r20, 0x2050
     8dc:	50 91 51 20 	lds	r21, 0x2051
     8e0:	c3 01       	movw	r24, r6
     8e2:	b2 01       	movw	r22, r4
     8e4:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     8e8:	6b 01       	movw	r12, r22
     8ea:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	a9 01       	movw	r20, r18
     8f2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	24 f0       	brlt	.+8      	; 0x902 <_Z13getMotorSpeedi+0x148>
		return input;
	else
		return input * -1;
     8fa:	f7 fa       	bst	r15, 7
     8fc:	f0 94       	com	r15
     8fe:	f7 f8       	bld	r15, 7
     900:	f0 94       	com	r15
			return lowerAct.speed / 2;
		else
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
     902:	80 90 42 20 	lds	r8, 0x2042
     906:	90 90 43 20 	lds	r9, 0x2043
     90a:	a0 90 44 20 	lds	r10, 0x2044
     90e:	b0 90 45 20 	lds	r11, 0x2045
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	5f e3       	ldi	r21, 0x3F	; 63
     91a:	c5 01       	movw	r24, r10
     91c:	b4 01       	movw	r22, r8
     91e:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     922:	a7 01       	movw	r20, r14
     924:	96 01       	movw	r18, r12
     926:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     92a:	18 16       	cp	r1, r24
     92c:	54 f4       	brge	.+20     	; 0x942 <_Z13getMotorSpeedi+0x188>
			return upperAct.speed / 3;
     92e:	80 91 46 20 	lds	r24, 0x2046
     932:	90 91 47 20 	lds	r25, 0x2047
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divmodhi4>
     93e:	cb 01       	movw	r24, r22
     940:	32 c0       	rjmp	.+100    	; 0x9a6 <_Z13getMotorSpeedi+0x1ec>
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     942:	20 91 4e 20 	lds	r18, 0x204E
     946:	30 91 4f 20 	lds	r19, 0x204F
     94a:	40 91 50 20 	lds	r20, 0x2050
     94e:	50 91 51 20 	lds	r21, 0x2051
     952:	c3 01       	movw	r24, r6
     954:	b2 01       	movw	r22, r4
     956:	0e 94 8d 09 	call	0x131a	; 0x131a <__subsf3>
     95a:	6b 01       	movw	r12, r22
     95c:	7c 01       	movw	r14, r24
}


//DOCUMENTATION NEEDED :D
double abs(double input){
	if(input > 0)
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	a9 01       	movw	r20, r18
     964:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     968:	18 16       	cp	r1, r24
     96a:	24 f0       	brlt	.+8      	; 0x974 <_Z13getMotorSpeedi+0x1ba>
		return input;
	else
		return input * -1;
     96c:	f7 fa       	bst	r15, 7
     96e:	f0 94       	com	r15
     970:	f7 f8       	bld	r15, 7
     972:	f0 94       	com	r15
			return lowerAct.speed;
	}
	else if (act == UPPER){
		if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange/2)
			return upperAct.speed / 3;
		else if(abs(upperAct.currentPos - upperAct.desiredPos) < upperAct.slowRange)
     974:	a7 01       	movw	r20, r14
     976:	96 01       	movw	r18, r12
     978:	c5 01       	movw	r24, r10
     97a:	b4 01       	movw	r22, r8
     97c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     980:	18 16       	cp	r1, r24
     982:	54 f4       	brge	.+20     	; 0x998 <_Z13getMotorSpeedi+0x1de>
			return upperAct.speed / 2;
     984:	80 91 46 20 	lds	r24, 0x2046
     988:	90 91 47 20 	lds	r25, 0x2047
     98c:	99 23       	and	r25, r25
     98e:	0c f4       	brge	.+2      	; 0x992 <_Z13getMotorSpeedi+0x1d8>
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	95 95       	asr	r25
     994:	87 95       	ror	r24
     996:	07 c0       	rjmp	.+14     	; 0x9a6 <_Z13getMotorSpeedi+0x1ec>
		else
			return upperAct.speed;
     998:	80 91 46 20 	lds	r24, 0x2046
     99c:	90 91 47 20 	lds	r25, 0x2047
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <_Z13getMotorSpeedi+0x1ec>
	}
	
	
	////////
	return 0;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
}
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	bf 90       	pop	r11
     9b0:	af 90       	pop	r10
     9b2:	9f 90       	pop	r9
     9b4:	8f 90       	pop	r8
     9b6:	7f 90       	pop	r7
     9b8:	6f 90       	pop	r6
     9ba:	5f 90       	pop	r5
     9bc:	4f 90       	pop	r4
     9be:	08 95       	ret

000009c0 <_Z11getMotorDiri>:

/*Returns a 1 or a -1, depending on whether the actuator needs to retract 
  or extend
*/
int getMotorDir(int act){
	if(act == LOWER){
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	f1 f4       	brne	.+60     	; 0xa00 <_Z11getMotorDiri+0x40>
		if(!lowerAct.enabled)
     9c4:	80 91 60 20 	lds	r24, 0x2060
     9c8:	90 91 61 20 	lds	r25, 0x2061
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <_Z11getMotorDiri+0x12>
     9d0:	3e c0       	rjmp	.+124    	; 0xa4e <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
     9d2:	20 91 66 20 	lds	r18, 0x2066
     9d6:	30 91 67 20 	lds	r19, 0x2067
     9da:	40 91 68 20 	lds	r20, 0x2068
     9de:	50 91 69 20 	lds	r21, 0x2069
     9e2:	60 91 62 20 	lds	r22, 0x2062
     9e6:	70 91 63 20 	lds	r23, 0x2063
     9ea:	80 91 64 20 	lds	r24, 0x2064
     9ee:	90 91 65 20 	lds	r25, 0x2065
     9f2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     9f6:	18 16       	cp	r1, r24
     9f8:	14 f5       	brge	.+68     	; 0xa3e <_Z11getMotorDiri+0x7e>
			return -1;
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	08 95       	ret
		else
			return 1;
	}
	else if(act == UPPER){
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	01 f5       	brne	.+64     	; 0xa44 <_Z11getMotorDiri+0x84>
		if(!upperAct.enabled)
     a04:	80 91 48 20 	lds	r24, 0x2048
     a08:	90 91 49 20 	lds	r25, 0x2049
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	f9 f0       	breq	.+62     	; 0xa4e <_Z11getMotorDiri+0x8e>
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
     a10:	20 91 4e 20 	lds	r18, 0x204E
     a14:	30 91 4f 20 	lds	r19, 0x204F
     a18:	40 91 50 20 	lds	r20, 0x2050
     a1c:	50 91 51 20 	lds	r21, 0x2051
     a20:	60 91 4a 20 	lds	r22, 0x204A
     a24:	70 91 4b 20 	lds	r23, 0x204B
     a28:	80 91 4c 20 	lds	r24, 0x204C
     a2c:	90 91 4d 20 	lds	r25, 0x204D
     a30:	0e 94 19 0b 	call	0x1632	; 0x1632 <__gesf2>
     a34:	18 16       	cp	r1, r24
     a36:	4c f4       	brge	.+18     	; 0xa4a <_Z11getMotorDiri+0x8a>
			return -1;
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	08 95       	ret
			return 0;
		
		if(lowerAct.currentPos > lowerAct.desiredPos)
			return -1;
		else
			return 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	08 95       	ret
			return -1;
		else
			return 1;
	}
	/////////
	return 0;
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	08 95       	ret
			return 0;
		
		if(upperAct.currentPos > upperAct.desiredPos)
			return -1;
		else
			return 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
	}
	/////////
	return 0;
}
     a4e:	08 95       	ret

00000a50 <main>:

int main(void)
{
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <main+0x6>
     a56:	00 d0       	rcall	.+0      	; 0xa58 <main+0x8>
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
	DemInitThingsYouBeenDoing();							//All init moved to nicer spot
     a5c:	0e 94 82 02 	call	0x504	; 0x504 <_Z25DemInitThingsYouBeenDoingv>
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	87 ea       	ldi	r24, 0xA7	; 167
     a64:	91 e6       	ldi	r25, 0x61	; 97
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <main+0x16>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <main+0x20>
     a70:	00 00       	nop
	_delay_ms(1000);

	
	Sabertooth DriveSaber(&USARTD0, &PORTD);
     a72:	40 e6       	ldi	r20, 0x60	; 96
     a74:	56 e0       	ldi	r21, 0x06	; 6
     a76:	60 ea       	ldi	r22, 0xA0	; 160
     a78:	79 e0       	ldi	r23, 0x09	; 9
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN10SabertoothC1EP12USART_structP11PORT_struct>
	
	upperAct.desiredPos = 3.0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	a0 e4       	ldi	r26, 0x40	; 64
     a88:	b0 e4       	ldi	r27, 0x40	; 64
     a8a:	80 93 4e 20 	sts	0x204E, r24
     a8e:	90 93 4f 20 	sts	0x204F, r25
     a92:	a0 93 50 20 	sts	0x2050, r26
     a96:	b0 93 51 20 	sts	0x2051, r27
	lowerAct.desiredPos = 3.5;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e6       	ldi	r26, 0x60	; 96
     aa0:	b0 e4       	ldi	r27, 0x40	; 64
     aa2:	80 93 66 20 	sts	0x2066, r24
     aa6:	90 93 67 20 	sts	0x2067, r25
     aaa:	a0 93 68 20 	sts	0x2068, r26
     aae:	b0 93 69 20 	sts	0x2069, r27
	
	//Wait until rover is unpaused
	while(!CHECK_ISROVING());
     ab2:	e0 e0       	ldi	r30, 0x00	; 0
     ab4:	f6 e0       	ldi	r31, 0x06	; 6
     ab6:	80 85       	ldd	r24, Z+8	; 0x08
     ab8:	84 ff       	sbrs	r24, 4
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <main+0x66>
	
	lowerAct.enable();
     abc:	82 e5       	ldi	r24, 0x52	; 82
     abe:	90 e2       	ldi	r25, 0x20	; 32
     ac0:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN9motorInfo6enableEv>
	upperAct.enable();
     ac4:	8a e3       	ldi	r24, 0x3A	; 58
     ac6:	90 e2       	ldi	r25, 0x20	; 32
     ac8:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN9motorInfo6enableEv>
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled) && CHECK_ISROVING()){
     acc:	0f 2e       	mov	r0, r31
     ace:	f0 e6       	ldi	r31, 0x60	; 96
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f0 e2       	ldi	r31, 0x20	; 32
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	0f 2e       	mov	r0, r31
     ada:	f8 e4       	ldi	r31, 0x48	; 72
     adc:	ef 2e       	mov	r14, r31
     ade:	f0 e2       	ldi	r31, 0x20	; 32
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	00 e0       	ldi	r16, 0x00	; 0
     ae6:	16 e0       	ldi	r17, 0x06	; 6
     ae8:	f6 01       	movw	r30, r12
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	89 2b       	or	r24, r25
     af0:	31 f4       	brne	.+12     	; 0xafe <main+0xae>
     af2:	f7 01       	movw	r30, r14
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	89 2b       	or	r24, r25
     afa:	09 f4       	brne	.+2      	; 0xafe <main+0xae>
     afc:	e4 c0       	rjmp	.+456    	; 0xcc6 <main+0x276>
     afe:	f8 01       	movw	r30, r16
     b00:	80 85       	ldd	r24, Z+8	; 0x08
     b02:	84 fd       	sbrc	r24, 4
     b04:	19 c1       	rjmp	.+562    	; 0xd38 <main+0x2e8>
     b06:	df c0       	rjmp	.+446    	; 0xcc6 <main+0x276>
	/////////////Initial Calibration and Default Positions//////////////////////

//	sprintf(SendBuffer, "Multiplier: %d \r\n  \r\n", (int) baseStepper.multiplier);
//	SendStringPC(SendBuffer);								//Send Dem Strings
	while(1){
		if(CurrentState == WaitForHost){
     b08:	80 91 12 20 	lds	r24, 0x2012
     b0c:	81 11       	cpse	r24, r1
     b0e:	2d c0       	rjmp	.+90     	; 0xb6a <main+0x11a>
			SendStringPC("ID: ArmControl\r\n");
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e2       	ldi	r25, 0x20	; 32
     b14:	0e 94 c2 02 	call	0x584	; 0x584 <_Z12SendStringPCPc>
     b18:	ff ef       	ldi	r31, 0xFF	; 255
     b1a:	23 ed       	ldi	r18, 0xD3	; 211
     b1c:	80 e3       	ldi	r24, 0x30	; 48
     b1e:	f1 50       	subi	r31, 0x01	; 1
     b20:	20 40       	sbci	r18, 0x00	; 0
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <main+0xce>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <main+0xd8>
     b28:	00 00       	nop
			_delay_ms(500);
			if(recieveBuffer[0] == 'r'){
     b2a:	80 91 13 20 	lds	r24, 0x2013
     b2e:	82 37       	cpi	r24, 0x72	; 114
     b30:	c9 f4       	brne	.+50     	; 0xb64 <main+0x114>
				CurrentState = ARMControl;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 12 20 	sts	0x2012, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     b38:	f7 01       	movw	r30, r14
     b3a:	81 81       	ldd	r24, Z+1	; 0x01
     b3c:	85 ff       	sbrs	r24, 5
     b3e:	fc cf       	rjmp	.-8      	; 0xb38 <main+0xe8>
				USART_PutChar(&USARTC0, 'r');
     b40:	82 e7       	ldi	r24, 0x72	; 114
     b42:	80 83       	st	Z, r24
				TimePrevious = TimeSinceInit;
     b44:	80 91 21 20 	lds	r24, 0x2021
     b48:	90 91 22 20 	lds	r25, 0x2022
     b4c:	a0 91 23 20 	lds	r26, 0x2023
     b50:	b0 91 24 20 	lds	r27, 0x2024
     b54:	80 93 1d 20 	sts	0x201D, r24
     b58:	90 93 1e 20 	sts	0x201E, r25
     b5c:	a0 93 1f 20 	sts	0x201F, r26
     b60:	b0 93 20 20 	sts	0x2020, r27
			}
			bufferIndex = 0;
     b64:	10 92 25 20 	sts	0x2025, r1
     b68:	cf cf       	rjmp	.-98     	; 0xb08 <main+0xb8>
		}else if(CurrentState == ARMControl){
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	69 f6       	brne	.-102    	; 0xb08 <main+0xb8>
			if(IsPacketToParse){
     b6e:	80 91 26 20 	lds	r24, 0x2026
     b72:	88 23       	and	r24, r24
     b74:	09 f4       	brne	.+2      	; 0xb78 <main+0x128>
     b76:	89 c0       	rjmp	.+274    	; 0xc8a <main+0x23a>
				ERROR_SET();									//Show light when done with actuators
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	f4 01       	movw	r30, r8
     b7c:	85 83       	std	Z+5, r24	; 0x05
				lowerAct.enable();						//Re-enable lower actuator
     b7e:	82 e5       	ldi	r24, 0x52	; 82
     b80:	90 e2       	ldi	r25, 0x20	; 32
     b82:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN9motorInfo6enableEv>
				upperAct.enable();						//Re-enabled lower actuator
     b86:	8a e3       	ldi	r24, 0x3A	; 58
     b88:	90 e2       	ldi	r25, 0x20	; 32
     b8a:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN9motorInfo6enableEv>

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
     b8e:	e1 e3       	ldi	r30, 0x31	; 49
     b90:	f0 e2       	ldi	r31, 0x20	; 32
     b92:	60 81       	ld	r22, Z
     b94:	71 81       	ldd	r23, Z+1	; 0x01
     b96:	87 e2       	ldi	r24, 0x27	; 39
     b98:	90 e2       	ldi	r25, 0x20	; 32
     b9a:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN13rotateStepper10rotateBaseEi>
					
				checkActPosition();								//Check once to avoid loop is possible
     b9e:	0e 94 06 03 	call	0x60c	; 0x60c <_Z16checkActPositionv>
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     ba2:	26 c0       	rjmp	.+76     	; 0xbf0 <main+0x1a0>
					checkActPosition();							//Check positions
     ba4:	0e 94 06 03 	call	0x60c	; 0x60c <_Z16checkActPositionv>
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z13getMotorSpeedi>
     bb0:	48 2e       	mov	r4, r24
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_Z11getMotorDiri>
     bba:	38 2e       	mov	r3, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z13getMotorSpeedi>
     bc4:	58 2e       	mov	r5, r24
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_Z11getMotorDiri>
     bce:	34 9c       	mul	r3, r4
     bd0:	40 2d       	mov	r20, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	41 58       	subi	r20, 0x81	; 129
     bd6:	85 9d       	mul	r24, r5
     bd8:	80 2d       	mov	r24, r0
     bda:	11 24       	eor	r1, r1
     bdc:	6f e7       	ldi	r22, 0x7F	; 127
     bde:	68 0f       	add	r22, r24
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN10Sabertooth11ParsePacketEhh>
					while(!CHECK_ISROVING());  //e-stop check
     be8:	f8 01       	movw	r30, r16
     bea:	80 85       	ldd	r24, Z+8	; 0x08
     bec:	84 ff       	sbrs	r24, 4
     bee:	fc cf       	rjmp	.-8      	; 0xbe8 <main+0x198>
				upperAct.enable();						//Re-enabled lower actuator

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
				checkActPosition();								//Check once to avoid loop is possible
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     bf0:	f6 01       	movw	r30, r12
     bf2:	80 81       	ld	r24, Z
     bf4:	91 81       	ldd	r25, Z+1	; 0x01
     bf6:	89 2b       	or	r24, r25
     bf8:	a9 f6       	brne	.-86     	; 0xba4 <main+0x154>
     bfa:	f5 01       	movw	r30, r10
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	89 2b       	or	r24, r25
     c02:	81 f6       	brne	.-96     	; 0xba4 <main+0x154>
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
					while(!CHECK_ISROVING());  //e-stop check
				}												//Exit when done moving
					

				DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	6f e7       	ldi	r22, 0x7F	; 127
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN10Sabertooth11ParsePacketEhh>

				
				
				if(gripStepper.desiredGripState == GRIP){
     c10:	f3 01       	movw	r30, r6
     c12:	80 81       	ld	r24, Z
     c14:	81 11       	cpse	r24, r1
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <main+0x1de>
					gripStepper.enable();
     c18:	83 e3       	ldi	r24, 0x33	; 51
     c1a:	90 e2       	ldi	r25, 0x20	; 32
     c1c:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN11stepperInfo6enableEv>
					gripStepper.processCommand(GRIP);
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	83 e3       	ldi	r24, 0x33	; 51
     c26:	90 e2       	ldi	r25, 0x20	; 32
     c28:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN11stepperInfo14processCommandEi>
     c2c:	0e c0       	rjmp	.+28     	; 0xc4a <main+0x1fa>
				}else if(gripStepper.desiredGripState == RELEASE){
     c2e:	f3 01       	movw	r30, r6
     c30:	80 81       	ld	r24, Z
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	51 f4       	brne	.+20     	; 0xc4a <main+0x1fa>
					gripStepper.enable();
     c36:	83 e3       	ldi	r24, 0x33	; 51
     c38:	90 e2       	ldi	r25, 0x20	; 32
     c3a:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN11stepperInfo6enableEv>
					gripStepper.processCommand(RELEASE);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	83 e3       	ldi	r24, 0x33	; 51
     c44:	90 e2       	ldi	r25, 0x20	; 32
     c46:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN11stepperInfo14processCommandEi>

				}
				
				
				IsPacketToParse = false;
     c4a:	10 92 26 20 	sts	0x2026, r1
				ERROR_CLR();
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	f4 01       	movw	r30, r8
     c52:	86 83       	std	Z+6, r24	; 0x06
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c54:	f7 01       	movw	r30, r14
     c56:	81 81       	ldd	r24, Z+1	; 0x01
     c58:	85 ff       	sbrs	r24, 5
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <main+0x204>
				USART_PutChar(&USARTC0, 255);
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c60:	f7 01       	movw	r30, r14
     c62:	81 81       	ldd	r24, Z+1	; 0x01
     c64:	85 ff       	sbrs	r24, 5
     c66:	fc cf       	rjmp	.-8      	; 0xc60 <main+0x210>
				USART_PutChar(&USARTC0, 0b00000010 | CHECK_GRIP_CLOSE());
     c68:	f8 01       	movw	r30, r16
     c6a:	80 85       	ldd	r24, Z+8	; 0x08
     c6c:	83 fd       	sbrc	r24, 3
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <main+0x224>
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <main+0x226>
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	f7 01       	movw	r30, r14
     c78:	80 83       	st	Z, r24
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     c7a:	f7 01       	movw	r30, r14
     c7c:	81 81       	ldd	r24, Z+1	; 0x01
     c7e:	85 ff       	sbrs	r24, 5
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <main+0x22a>
				USART_PutChar(&USARTC0,255);
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	80 83       	st	Z, r24
				bufferIndex = 0;
     c86:	10 92 25 20 	sts	0x2025, r1
			}
			
			if((TimePrevious - TimeSinceInit) > MAXTIMEOUT){
     c8a:	40 91 21 20 	lds	r20, 0x2021
     c8e:	50 91 22 20 	lds	r21, 0x2022
     c92:	60 91 23 20 	lds	r22, 0x2023
     c96:	70 91 24 20 	lds	r23, 0x2024
     c9a:	80 91 1d 20 	lds	r24, 0x201D
     c9e:	90 91 1e 20 	lds	r25, 0x201E
     ca2:	a0 91 1f 20 	lds	r26, 0x201F
     ca6:	b0 91 20 20 	lds	r27, 0x2020
     caa:	84 1b       	sub	r24, r20
     cac:	95 0b       	sbc	r25, r21
     cae:	a6 0b       	sbc	r26, r22
     cb0:	b7 0b       	sbc	r27, r23
     cb2:	06 97       	sbiw	r24, 0x06	; 6
     cb4:	a1 05       	cpc	r26, r1
     cb6:	b1 05       	cpc	r27, r1
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <main+0x26c>
     cba:	26 cf       	rjmp	.-436    	; 0xb08 <main+0xb8>
				CurrentState = WaitForHost;
     cbc:	10 92 12 20 	sts	0x2012, r1
				bufferIndex = 0;
     cc0:	10 92 25 20 	sts	0x2025, r1
     cc4:	21 cf       	rjmp	.-446    	; 0xb08 <main+0xb8>
	while((lowerAct.enabled || upperAct.enabled) && CHECK_ISROVING()){
		checkActPosition();
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
	}

	baseStepper.calibrateBase();
     cc6:	87 e2       	ldi	r24, 0x27	; 39
     cc8:	90 e2       	ldi	r25, 0x20	; 32
     cca:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN13rotateStepper13calibrateBaseEv>
	MD2_DIR_CLR();
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	e0 e6       	ldi	r30, 0x60	; 96
     cd2:	f6 e0       	ldi	r31, 0x06	; 6
     cd4:	86 83       	std	Z+6, r24	; 0x06
	baseStepper.rotateBase(0);  //Note that this function takes an angle relative
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	87 e2       	ldi	r24, 0x27	; 39
     cdc:	90 e2       	ldi	r25, 0x20	; 32
     cde:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN13rotateStepper10rotateBaseEi>
	
	
	gripStepper.enable();							 //to the absolute 0 on the robot
     ce2:	83 e3       	ldi	r24, 0x33	; 51
     ce4:	90 e2       	ldi	r25, 0x20	; 32
     ce6:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN11stepperInfo6enableEv>
	gripStepper.processCommand(RELEASE);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	83 e3       	ldi	r24, 0x33	; 51
     cf0:	90 e2       	ldi	r25, 0x20	; 32
     cf2:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN11stepperInfo14processCommandEi>
				TimePrevious = TimeSinceInit;
			}
			bufferIndex = 0;
		}else if(CurrentState == ARMControl){
			if(IsPacketToParse){
				ERROR_SET();									//Show light when done with actuators
     cf6:	0f 2e       	mov	r0, r31
     cf8:	f0 e4       	ldi	r31, 0x40	; 64
     cfa:	8f 2e       	mov	r8, r31
     cfc:	f6 e0       	ldi	r31, 0x06	; 6
     cfe:	9f 2e       	mov	r9, r31
     d00:	f0 2d       	mov	r31, r0
				upperAct.enable();						//Re-enabled lower actuator

				baseStepper.rotateBase(baseStepper.desiredPos);	//Move base to position
					
				checkActPosition();								//Check once to avoid loop is possible
				while(lowerAct.enabled || upperAct.enabled){	//If a motor needs to move, do below
     d02:	0f 2e       	mov	r0, r31
     d04:	f0 e6       	ldi	r31, 0x60	; 96
     d06:	cf 2e       	mov	r12, r31
     d08:	f0 e2       	ldi	r31, 0x20	; 32
     d0a:	df 2e       	mov	r13, r31
     d0c:	f0 2d       	mov	r31, r0
     d0e:	0f 2e       	mov	r0, r31
     d10:	f8 e4       	ldi	r31, 0x48	; 72
     d12:	af 2e       	mov	r10, r31
     d14:	f0 e2       	ldi	r31, 0x20	; 32
     d16:	bf 2e       	mov	r11, r31
     d18:	f0 2d       	mov	r31, r0
					checkActPosition();							//Check positions
					DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(LOWER)*getMotorDir(UPPER));	//Move to position
					while(!CHECK_ISROVING());  //e-stop check
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	16 e0       	ldi	r17, 0x06	; 6

				DriveSaber.ParsePacket(127,127);				//Stop actuators from moving any more

				
				
				if(gripStepper.desiredGripState == GRIP){
     d1e:	0f 2e       	mov	r0, r31
     d20:	f9 e3       	ldi	r31, 0x39	; 57
     d22:	6f 2e       	mov	r6, r31
     d24:	f0 e2       	ldi	r31, 0x20	; 32
     d26:	7f 2e       	mov	r7, r31
     d28:	f0 2d       	mov	r31, r0
				}
				
				
				IsPacketToParse = false;
				ERROR_CLR();
				while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     d2a:	0f 2e       	mov	r0, r31
     d2c:	f0 ea       	ldi	r31, 0xA0	; 160
     d2e:	ef 2e       	mov	r14, r31
     d30:	f8 e0       	ldi	r31, 0x08	; 8
     d32:	ff 2e       	mov	r15, r31
     d34:	f0 2d       	mov	r31, r0
     d36:	e8 ce       	rjmp	.-560    	; 0xb08 <main+0xb8>
	upperAct.enable();
	
	
	/////////////Initial Calibration and Default Positions//////////////////////
	while((lowerAct.enabled || upperAct.enabled) && CHECK_ISROVING()){
		checkActPosition();
     d38:	0e 94 06 03 	call	0x60c	; 0x60c <_Z16checkActPositionv>
		DriveSaber.ParsePacket(127+getMotorSpeed(LOWER)*getMotorDir(LOWER), 127+getMotorSpeed(UPPER)*getMotorDir(UPPER));	
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z13getMotorSpeedi>
     d44:	a8 2e       	mov	r10, r24
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_Z11getMotorDiri>
     d4e:	98 2e       	mov	r9, r24
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z13getMotorSpeedi>
     d58:	b8 2e       	mov	r11, r24
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_Z11getMotorDiri>
     d62:	9a 9c       	mul	r9, r10
     d64:	40 2d       	mov	r20, r0
     d66:	11 24       	eor	r1, r1
     d68:	41 58       	subi	r20, 0x81	; 129
     d6a:	8b 9d       	mul	r24, r11
     d6c:	80 2d       	mov	r24, r0
     d6e:	11 24       	eor	r1, r1
     d70:	6f e7       	ldi	r22, 0x7F	; 127
     d72:	68 0f       	add	r22, r24
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN10Sabertooth11ParsePacketEhh>
     d7c:	b5 ce       	rjmp	.-662    	; 0xae8 <main+0x98>

00000d7e <__vector_77>:
		}
	}

}

ISR(TCD0_OVF_vect){
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
	TimeSinceInit++;
     d90:	80 91 21 20 	lds	r24, 0x2021
     d94:	90 91 22 20 	lds	r25, 0x2022
     d98:	a0 91 23 20 	lds	r26, 0x2023
     d9c:	b0 91 24 20 	lds	r27, 0x2024
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	a1 1d       	adc	r26, r1
     da4:	b1 1d       	adc	r27, r1
     da6:	80 93 21 20 	sts	0x2021, r24
     daa:	90 93 22 20 	sts	0x2022, r25
     dae:	a0 93 23 20 	sts	0x2023, r26
     db2:	b0 93 24 20 	sts	0x2024, r27
}
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <_GLOBAL__sub_I_swap>:

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     dc8:	82 e5       	ldi	r24, 0x52	; 82
     dca:	90 e2       	ldi	r25, 0x20	; 32
     dcc:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN9motorInfoC1Ev>
motorInfo upperAct;
     dd0:	8a e3       	ldi	r24, 0x3A	; 58
     dd2:	90 e2       	ldi	r25, 0x20	; 32
     dd4:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN9motorInfoC1Ev>
stepperInfo gripStepper;
     dd8:	83 e3       	ldi	r24, 0x33	; 51
     dda:	90 e2       	ldi	r25, 0x20	; 32
     ddc:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN11stepperInfoC1Ev>
rotateStepper baseStepper;
     de0:	87 e2       	ldi	r24, 0x27	; 39
     de2:	90 e2       	ldi	r25, 0x20	; 32
     de4:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN13rotateStepperC1Ev>
     de8:	08 95       	ret

00000dea <_GLOBAL__sub_D_swap>:
     dea:	87 e2       	ldi	r24, 0x27	; 39
     dec:	90 e2       	ldi	r25, 0x20	; 32
     dee:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN13rotateStepperD1Ev>
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
stepperInfo gripStepper;
     df2:	83 e3       	ldi	r24, 0x33	; 51
     df4:	90 e2       	ldi	r25, 0x20	; 32
     df6:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN11stepperInfoD1Ev>
int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
motorInfo upperAct;
     dfa:	8a e3       	ldi	r24, 0x3A	; 58
     dfc:	90 e2       	ldi	r25, 0x20	; 32
     dfe:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN9motorInfoD1Ev>

int swap = 0;
USART_data_t USART_PC_Data;


motorInfo lowerAct;
     e02:	82 e5       	ldi	r24, 0x52	; 82
     e04:	90 e2       	ldi	r25, 0x20	; 32
     e06:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN9motorInfoD1Ev>
     e0a:	08 95       	ret

00000e0c <_ZN9motorInfoC1Ev>:
     e0c:	fc 01       	movw	r30, r24
     e0e:	12 82       	std	Z+2, r1	; 0x02
     e10:	13 82       	std	Z+3, r1	; 0x03
     e12:	85 e0       	ldi	r24, 0x05	; 5
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	80 83       	st	Z, r24
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	4d ec       	ldi	r20, 0xCD	; 205
     e1c:	5c ec       	ldi	r21, 0xCC	; 204
     e1e:	6c e4       	ldi	r22, 0x4C	; 76
     e20:	7e e3       	ldi	r23, 0x3E	; 62
     e22:	44 83       	std	Z+4, r20	; 0x04
     e24:	55 83       	std	Z+5, r21	; 0x05
     e26:	66 83       	std	Z+6, r22	; 0x06
     e28:	77 83       	std	Z+7, r23	; 0x07
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	60 e4       	ldi	r22, 0x40	; 64
     e30:	7f e3       	ldi	r23, 0x3F	; 63
     e32:	40 87       	std	Z+8, r20	; 0x08
     e34:	51 87       	std	Z+9, r21	; 0x09
     e36:	62 87       	std	Z+10, r22	; 0x0a
     e38:	73 87       	std	Z+11, r23	; 0x0b
     e3a:	84 e6       	ldi	r24, 0x64	; 100
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	84 87       	std	Z+12, r24	; 0x0c
     e40:	95 87       	std	Z+13, r25	; 0x0d
     e42:	16 86       	std	Z+14, r1	; 0x0e
     e44:	17 86       	std	Z+15, r1	; 0x0f
     e46:	08 95       	ret

00000e48 <_ZN9motorInfoD1Ev>:
     e48:	08 95       	ret

00000e4a <_ZN9motorInfo6enableEv>:
     e4a:	21 e0       	ldi	r18, 0x01	; 1
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	26 87       	std	Z+14, r18	; 0x0e
     e52:	37 87       	std	Z+15, r19	; 0x0f
     e54:	08 95       	ret

00000e56 <_ZN9motorInfo7disableEv>:
     e56:	fc 01       	movw	r30, r24
     e58:	16 86       	std	Z+14, r1	; 0x0e
     e5a:	17 86       	std	Z+15, r1	; 0x0f
     e5c:	08 95       	ret

00000e5e <_ZN9motorInfo10setDesiredEf>:
     e5e:	fc 01       	movw	r30, r24
     e60:	44 8b       	std	Z+20, r20	; 0x14
     e62:	55 8b       	std	Z+21, r21	; 0x15
     e64:	66 8b       	std	Z+22, r22	; 0x16
     e66:	77 8b       	std	Z+23, r23	; 0x17
     e68:	08 95       	ret

00000e6a <_ZN13rotateStepperC1Ev>:
	#include "avr_compiler.h"
	#include "usart_driver.h"
};

// default constructor
rotateStepper::rotateStepper() {
     e6a:	fc 01       	movw	r30, r24
	calSpan = 258.34; //TODO: Set to actual value
     e6c:	45 e8       	ldi	r20, 0x85	; 133
     e6e:	5b e2       	ldi	r21, 0x2B	; 43
     e70:	61 e8       	ldi	r22, 0x81	; 129
     e72:	73 e4       	ldi	r23, 0x43	; 67
     e74:	44 83       	std	Z+4, r20	; 0x04
     e76:	55 83       	std	Z+5, r21	; 0x05
     e78:	66 83       	std	Z+6, r22	; 0x06
     e7a:	77 83       	std	Z+7, r23	; 0x07
	multiplier = -1; //Invalid (not set) state
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	60 e8       	ldi	r22, 0x80	; 128
     e82:	7f eb       	ldi	r23, 0xBF	; 191
     e84:	40 83       	st	Z, r20
     e86:	51 83       	std	Z+1, r21	; 0x01
     e88:	62 83       	std	Z+2, r22	; 0x02
     e8a:	73 83       	std	Z+3, r23	; 0x03
	
	currentAngle = 0; //It will have its reference based off of the 2nd limit switch,
     e8c:	10 86       	std	Z+8, r1	; 0x08
     e8e:	11 86       	std	Z+9, r1	; 0x09
     e90:	08 95       	ret

00000e92 <_ZN13rotateStepperD1Ev>:
					  //but the interface function will minus the amount to make 0 forward
} //rotateStepper

// default destructor
rotateStepper::~rotateStepper()
     e92:	08 95       	ret

00000e94 <_ZN13rotateStepper13calibrateBaseEv>:
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
	
}


void rotateStepper::calibrateBase(){
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
	
	int calButtonState;
	
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	e0 e6       	ldi	r30, 0x60	; 96
     e9e:	f6 e0       	ldi	r31, 0x06	; 6
     ea0:	86 83       	std	Z+6, r24	; 0x06
	bool calFirstPress = false;
	//bool calSecondPress = false;
	
	int calButtonState;
	
	int stepCount = 0;
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
}


void rotateStepper::calibrateBase(){
	bool calInProgress = true;
	bool calFirstPress = false;
     ea6:	20 e0       	ldi	r18, 0x00	; 0
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b6 e0       	ldi	r27, 0x06	; 6

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     eac:	31 e0       	ldi	r19, 0x01	; 1
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     eae:	52 e0       	ldi	r21, 0x02	; 2
	int stepCount = 0;
	
	MD2_DIR_CLR(); //Set arm to turn counter-clockwise
	
	while (calInProgress){
		calButtonState = CHECK_CAL();
     eb0:	18 96       	adiw	r26, 0x08	; 8
     eb2:	8c 91       	ld	r24, X
     eb4:	18 97       	sbiw	r26, 0x08	; 8

		if(calButtonState && !calFirstPress){
     eb6:	82 ff       	sbrs	r24, 2
     eb8:	0e c0       	rjmp	.+28     	; 0xed6 <_ZN13rotateStepper13calibrateBaseEv+0x42>
     eba:	21 11       	cpse	r18, r1
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <_ZN13rotateStepper13calibrateBaseEv+0x46>
			calFirstPress = true;
			MD2_DIR_SET();  //Sets arm to clockwise
     ebe:	35 83       	std	Z+5, r19	; 0x05
     ec0:	2f ef       	ldi	r18, 0xFF	; 255
     ec2:	43 ec       	ldi	r20, 0xC3	; 195
     ec4:	89 e0       	ldi	r24, 0x09	; 9
     ec6:	21 50       	subi	r18, 0x01	; 1
     ec8:	40 40       	sbci	r20, 0x00	; 0
     eca:	80 40       	sbci	r24, 0x00	; 0
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <_ZN13rotateStepper13calibrateBaseEv+0x32>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <_ZN13rotateStepper13calibrateBaseEv+0x3c>
     ed0:	00 00       	nop
	
	while (calInProgress){
		calButtonState = CHECK_CAL();

		if(calButtonState && !calFirstPress){
			calFirstPress = true;
     ed2:	23 2f       	mov	r18, r19
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <_ZN13rotateStepper13calibrateBaseEv+0x46>
			MD2_DIR_SET();  //Sets arm to clockwise
			_delay_ms(100);  //For gracefulness
		}
		
		if(calFirstPress == true)
     ed6:	22 23       	and	r18, r18
     ed8:	51 f0       	breq	.+20     	; 0xeee <_ZN13rotateStepper13calibrateBaseEv+0x5a>
			++stepCount;
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
     ede:	67 39       	cpi	r22, 0x97	; 151
     ee0:	71 05       	cpc	r23, r1
     ee2:	2c f0       	brlt	.+10     	; 0xeee <_ZN13rotateStepper13calibrateBaseEv+0x5a>
     ee4:	18 96       	adiw	r26, 0x08	; 8
     ee6:	8c 91       	ld	r24, X
     ee8:	18 97       	sbiw	r26, 0x08	; 8
     eea:	82 fd       	sbrc	r24, 2
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <_ZN13rotateStepper13calibrateBaseEv+0x78>
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     eee:	56 83       	std	Z+6, r21	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	98 e1       	ldi	r25, 0x18	; 24
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <_ZN13rotateStepper13calibrateBaseEv+0x60>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <_ZN13rotateStepper13calibrateBaseEv+0x66>
     efa:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
     efc:	55 83       	std	Z+5, r21	; 0x05
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	98 e1       	ldi	r25, 0x18	; 24
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <_ZN13rotateStepper13calibrateBaseEv+0x6e>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <_ZN13rotateStepper13calibrateBaseEv+0x74>
     f08:	00 00       	nop
     f0a:	d2 cf       	rjmp	.-92     	; 0xeb0 <_ZN13rotateStepper13calibrateBaseEv+0x1c>
			
		if(calFirstPress && stepCount > 150 && CHECK_CAL()){
			calInProgress = false;
		}
		
		MD2_STEP_CLR();
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	e0 e6       	ldi	r30, 0x60	; 96
     f10:	f6 e0       	ldi	r31, 0x06	; 6
     f12:	86 83       	std	Z+6, r24	; 0x06
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	98 e1       	ldi	r25, 0x18	; 24
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <_ZN13rotateStepper13calibrateBaseEv+0x84>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <_ZN13rotateStepper13calibrateBaseEv+0x8a>
     f1e:	00 00       	nop
		_delay_us(800);
		MD2_STEP_SET();
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	85 83       	std	Z+5, r24	; 0x05
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	98 e1       	ldi	r25, 0x18	; 24
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <_ZN13rotateStepper13calibrateBaseEv+0x94>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <_ZN13rotateStepper13calibrateBaseEv+0x9a>
     f2e:	00 00       	nop
		_delay_us(800);	
		
	}	
	multiplier = stepCount / calSpan;
     f30:	88 27       	eor	r24, r24
     f32:	77 fd       	sbrc	r23, 7
     f34:	80 95       	com	r24
     f36:	98 2f       	mov	r25, r24
     f38:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	4e 81       	ldd	r20, Y+6	; 0x06
     f42:	5f 81       	ldd	r21, Y+7	; 0x07
     f44:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__divsf3>
     f48:	68 83       	st	Y, r22
     f4a:	79 83       	std	Y+1, r23	; 0x01
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	9b 83       	std	Y+3, r25	; 0x03
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <_ZN13rotateStepper8moveBaseEi>:


//Multiplier is steps per degree

//Helper function
void rotateStepper::moveBase(int degreesToMove){
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
     f5c:	cb 01       	movw	r24, r22

	if (degreesToMove > 0)
     f5e:	18 16       	cp	r1, r24
     f60:	19 06       	cpc	r1, r25
     f62:	2c f4       	brge	.+10     	; 0xf6e <_ZN13rotateStepper8moveBaseEi+0x18>
		MD2_DIR_CLR();  //Counter Clockwise
     f64:	21 e0       	ldi	r18, 0x01	; 1
     f66:	e0 e6       	ldi	r30, 0x60	; 96
     f68:	f6 e0       	ldi	r31, 0x06	; 6
     f6a:	26 83       	std	Z+6, r18	; 0x06
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <_ZN13rotateStepper8moveBaseEi+0x20>
	else
		MD2_DIR_SET();  //Clockwise
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	e0 e6       	ldi	r30, 0x60	; 96
     f72:	f6 e0       	ldi	r31, 0x06	; 6
     f74:	25 83       	std	Z+5, r18	; 0x05
	
	int stepsToMove = abs(degreesToMove) * multiplier;
     f76:	bc 01       	movw	r22, r24
     f78:	99 23       	and	r25, r25
     f7a:	24 f4       	brge	.+8      	; 0xf84 <_ZN13rotateStepper8moveBaseEi+0x2e>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	68 1b       	sub	r22, r24
     f82:	79 0b       	sbc	r23, r25
     f84:	88 27       	eor	r24, r24
     f86:	77 fd       	sbrc	r23, 7
     f88:	80 95       	com	r24
     f8a:	98 2f       	mov	r25, r24
     f8c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
     f90:	28 81       	ld	r18, Y
     f92:	39 81       	ldd	r19, Y+1	; 0x01
     f94:	4a 81       	ldd	r20, Y+2	; 0x02
     f96:	5b 81       	ldd	r21, Y+3	; 0x03
     f98:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     f9c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixsfsi>
	
	for(int i = 0; i < stepsToMove; ++i){
     fa0:	16 16       	cp	r1, r22
     fa2:	17 06       	cpc	r1, r23
     fa4:	04 f5       	brge	.+64     	; 0xfe6 <_ZN13rotateStepper8moveBaseEi+0x90>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
		while(!CHECK_ISROVING());  //e-stop check
     faa:	e0 e0       	ldi	r30, 0x00	; 0
     fac:	f6 e0       	ldi	r31, 0x06	; 6
		
		MD2_STEP_CLR();
     fae:	a0 e6       	ldi	r26, 0x60	; 96
     fb0:	b6 e0       	ldi	r27, 0x06	; 6
     fb2:	32 e0       	ldi	r19, 0x02	; 2
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
		while(!CHECK_ISROVING());  //e-stop check
     fb4:	20 85       	ldd	r18, Z+8	; 0x08
     fb6:	24 ff       	sbrs	r18, 4
     fb8:	fd cf       	rjmp	.-6      	; 0xfb4 <_ZN13rotateStepper8moveBaseEi+0x5e>
		
		MD2_STEP_CLR();
     fba:	16 96       	adiw	r26, 0x06	; 6
     fbc:	3c 93       	st	X, r19
     fbe:	16 97       	sbiw	r26, 0x06	; 6
     fc0:	cf eb       	ldi	r28, 0xBF	; 191
     fc2:	d2 e1       	ldi	r29, 0x12	; 18
     fc4:	21 97       	sbiw	r28, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <_ZN13rotateStepper8moveBaseEi+0x6e>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_ZN13rotateStepper8moveBaseEi+0x74>
     fca:	00 00       	nop
		_delay_us(600);
		MD2_STEP_SET();
     fcc:	15 96       	adiw	r26, 0x05	; 5
     fce:	3c 93       	st	X, r19
     fd0:	15 97       	sbiw	r26, 0x05	; 5
     fd2:	cf e1       	ldi	r28, 0x1F	; 31
     fd4:	dc e1       	ldi	r29, 0x1C	; 28
     fd6:	21 97       	sbiw	r28, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <_ZN13rotateStepper8moveBaseEi+0x80>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <_ZN13rotateStepper8moveBaseEi+0x86>
     fdc:	00 00       	nop
	else
		MD2_DIR_SET();  //Clockwise
	
	int stepsToMove = abs(degreesToMove) * multiplier;
	
	for(int i = 0; i < stepsToMove; ++i){
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	86 17       	cp	r24, r22
     fe2:	97 07       	cpc	r25, r23
     fe4:	39 f7       	brne	.-50     	; 0xfb4 <_ZN13rotateStepper8moveBaseEi+0x5e>
		_delay_us(600);
		MD2_STEP_SET();
		_delay_us(900);
	}
	
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <_ZN13rotateStepper10rotateBaseEi>:
// default destructor
rotateStepper::~rotateStepper()
{
} //~rotateStepper

void rotateStepper::rotateBase(int desiredAngle){
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
	//NEED INPUT CHEKCING
	
	int zeroedAngle = desiredAngle + 34.02;
     ffa:	88 27       	eor	r24, r24
     ffc:	77 fd       	sbrc	r23, 7
     ffe:	80 95       	com	r24
    1000:	98 2f       	mov	r25, r24
    1002:	0e 94 8d 0a 	call	0x151a	; 0x151a <__floatsisf>
    1006:	2b e7       	ldi	r18, 0x7B	; 123
    1008:	34 e1       	ldi	r19, 0x14	; 20
    100a:	48 e0       	ldi	r20, 0x08	; 8
    100c:	52 e4       	ldi	r21, 0x42	; 66
    100e:	0e 94 8e 09 	call	0x131c	; 0x131c <__addsf3>
    1012:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixsfsi>
    1016:	6b 01       	movw	r12, r22
    1018:	7c 01       	movw	r14, r24
	
	moveBase(zeroedAngle - currentAngle);
    101a:	88 85       	ldd	r24, Y+8	; 0x08
    101c:	99 85       	ldd	r25, Y+9	; 0x09
    101e:	b6 01       	movw	r22, r12
    1020:	68 1b       	sub	r22, r24
    1022:	79 0b       	sbc	r23, r25
    1024:	ce 01       	movw	r24, r28
    1026:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN13rotateStepper8moveBaseEi>
	currentAngle = currentAngle + (zeroedAngle - currentAngle);
    102a:	c8 86       	std	Y+8, r12	; 0x08
    102c:	d9 86       	std	Y+9, r13	; 0x09
	
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	08 95       	ret

0000103c <_ZN10Sabertooth12SendDriveCmdEcc>:
    103c:	dc 01       	movw	r26, r24
    103e:	ed 91       	ld	r30, X+
    1040:	fc 91       	ld	r31, X
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	81 81       	ldd	r24, Z+1	; 0x01
    1046:	85 ff       	sbrs	r24, 5
    1048:	fd cf       	rjmp	.-6      	; 0x1044 <_ZN10Sabertooth12SendDriveCmdEcc+0x8>
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	80 83       	st	Z, r24
    104e:	ed 91       	ld	r30, X+
    1050:	fc 91       	ld	r31, X
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	81 81       	ldd	r24, Z+1	; 0x01
    1056:	85 ff       	sbrs	r24, 5
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <_ZN10Sabertooth12SendDriveCmdEcc+0x18>
    105a:	60 83       	st	Z, r22
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	85 ff       	sbrs	r24, 5
    1066:	fd cf       	rjmp	.-6      	; 0x1062 <_ZN10Sabertooth12SendDriveCmdEcc+0x26>
    1068:	40 83       	st	Z, r20
    106a:	ed 91       	ld	r30, X+
    106c:	fc 91       	ld	r31, X
    106e:	81 81       	ldd	r24, Z+1	; 0x01
    1070:	85 ff       	sbrs	r24, 5
    1072:	fd cf       	rjmp	.-6      	; 0x106e <_ZN10Sabertooth12SendDriveCmdEcc+0x32>
    1074:	64 0f       	add	r22, r20
    1076:	6f 77       	andi	r22, 0x7F	; 127
    1078:	60 83       	st	Z, r22
    107a:	08 95       	ret

0000107c <_ZN10Sabertooth11ParsePacketEhh>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	84 2f       	mov	r24, r20
    1088:	6f 37       	cpi	r22, 0x7F	; 127
    108a:	61 f0       	breq	.+24     	; 0x10a4 <_ZN10Sabertooth11ParsePacketEhh+0x28>
    108c:	6f 37       	cpi	r22, 0x7F	; 127
    108e:	20 f4       	brcc	.+8      	; 0x1098 <_ZN10Sabertooth11ParsePacketEhh+0x1c>
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	46 1b       	sub	r20, r22
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <_ZN10Sabertooth11ParsePacketEhh+0x32>
    1098:	66 23       	and	r22, r22
    109a:	3c f4       	brge	.+14     	; 0x10aa <_ZN10Sabertooth11ParsePacketEhh+0x2e>
    109c:	41 e8       	ldi	r20, 0x81	; 129
    109e:	46 0f       	add	r20, r22
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <_ZN10Sabertooth11ParsePacketEhh+0x32>
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <_ZN10Sabertooth11ParsePacketEhh+0x32>
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	8f 37       	cpi	r24, 0x7F	; 127
    10b0:	61 f0       	breq	.+24     	; 0x10ca <_ZN10Sabertooth11ParsePacketEhh+0x4e>
    10b2:	8f 37       	cpi	r24, 0x7F	; 127
    10b4:	20 f4       	brcc	.+8      	; 0x10be <_ZN10Sabertooth11ParsePacketEhh+0x42>
    10b6:	0f e7       	ldi	r16, 0x7F	; 127
    10b8:	08 1b       	sub	r16, r24
    10ba:	15 e0       	ldi	r17, 0x05	; 5
    10bc:	0b c0       	rjmp	.+22     	; 0x10d4 <_ZN10Sabertooth11ParsePacketEhh+0x58>
    10be:	88 23       	and	r24, r24
    10c0:	3c f4       	brge	.+14     	; 0x10d0 <_ZN10Sabertooth11ParsePacketEhh+0x54>
    10c2:	01 e8       	ldi	r16, 0x81	; 129
    10c4:	08 0f       	add	r16, r24
    10c6:	14 e0       	ldi	r17, 0x04	; 4
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <_ZN10Sabertooth11ParsePacketEhh+0x58>
    10ca:	00 e0       	ldi	r16, 0x00	; 0
    10cc:	14 e0       	ldi	r17, 0x04	; 4
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <_ZN10Sabertooth11ParsePacketEhh+0x58>
    10d0:	00 e0       	ldi	r16, 0x00	; 0
    10d2:	14 e0       	ldi	r17, 0x04	; 4
    10d4:	ce 01       	movw	r24, r28
    10d6:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10Sabertooth12SendDriveCmdEcc>
    10da:	40 2f       	mov	r20, r16
    10dc:	61 2f       	mov	r22, r17
    10de:	ce 01       	movw	r24, r28
    10e0:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10Sabertooth12SendDriveCmdEcc>
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <_ZN10Sabertooth7StopAllEv>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10Sabertooth12SendDriveCmdEcc>
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	64 e0       	ldi	r22, 0x04	; 4
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10Sabertooth12SendDriveCmdEcc>
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <_ZN10SabertoothC1EP12USART_structP11PORT_struct>:
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ec 01       	movw	r28, r24
    1112:	68 83       	st	Y, r22
    1114:	79 83       	std	Y+1, r23	; 0x01
    1116:	4a 83       	std	Y+2, r20	; 0x02
    1118:	5b 83       	std	Y+3, r21	; 0x03
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	fa 01       	movw	r30, r20
    111e:	81 83       	std	Z+1, r24	; 0x01
    1120:	e8 81       	ld	r30, Y
    1122:	f9 81       	ldd	r31, Y+1	; 0x01
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	85 83       	std	Z+5, r24	; 0x05
    1128:	e8 81       	ld	r30, Y
    112a:	f9 81       	ldd	r31, Y+1	; 0x01
    112c:	8f ec       	ldi	r24, 0xCF	; 207
    112e:	86 83       	std	Z+6, r24	; 0x06
    1130:	e8 81       	ld	r30, Y
    1132:	f9 81       	ldd	r31, Y+1	; 0x01
    1134:	17 82       	std	Z+7, r1	; 0x07
    1136:	e8 81       	ld	r30, Y
    1138:	f9 81       	ldd	r31, Y+1	; 0x01
    113a:	84 81       	ldd	r24, Z+4	; 0x04
    113c:	88 60       	ori	r24, 0x08	; 8
    113e:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1140:	ff ef       	ldi	r31, 0xFF	; 255
    1142:	23 ec       	ldi	r18, 0xC3	; 195
    1144:	89 e0       	ldi	r24, 0x09	; 9
    1146:	f1 50       	subi	r31, 0x01	; 1
    1148:	20 40       	sbci	r18, 0x00	; 0
    114a:	80 40       	sbci	r24, 0x00	; 0
    114c:	e1 f7       	brne	.-8      	; 0x1146 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x3a>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <_ZN10SabertoothC1EP12USART_structP11PORT_struct+0x44>
    1150:	00 00       	nop
    1152:	e8 81       	ld	r30, Y
    1154:	f9 81       	ldd	r31, Y+1	; 0x01
    1156:	8a ea       	ldi	r24, 0xAA	; 170
    1158:	80 83       	st	Z, r24
    115a:	44 e1       	ldi	r20, 0x14	; 20
    115c:	6e e0       	ldi	r22, 0x0E	; 14
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN10Sabertooth12SendDriveCmdEcc>
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN10Sabertooth7StopAllEv>
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <_ZN11stepperInfoC1Ev>:
};

extern void SendStringPC(char *stufftosend);

// default constructor
stepperInfo::stepperInfo() {
    1170:	fc 01       	movw	r30, r24
	enabled = 0;
    1172:	10 82       	st	Z, r1
    1174:	11 82       	std	Z+1, r1	; 0x01
	currentState = -1;
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	82 83       	std	Z+2, r24	; 0x02
    117c:	93 83       	std	Z+3, r25	; 0x03
	init = 1; //Init state (ignore first push)
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	84 83       	std	Z+4, r24	; 0x04
    1184:	95 83       	std	Z+5, r25	; 0x05
    1186:	08 95       	ret

00001188 <_ZN11stepperInfoD1Ev>:
} //stepperInfo

// default destructor
stepperInfo::~stepperInfo()
    1188:	08 95       	ret

0000118a <_ZN11stepperInfo14processCommandEi>:
{
} //~stepperInfo


//Used for the gripping stepper
void stepperInfo::processCommand(int cmd){
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ac 01       	movw	r20, r24
	if(!enabled)
    1190:	ec 01       	movw	r28, r24
    1192:	88 81       	ld	r24, Y
    1194:	99 81       	ldd	r25, Y+1	; 0x01
    1196:	89 2b       	or	r24, r25
    1198:	09 f4       	brne	.+2      	; 0x119c <_ZN11stepperInfo14processCommandEi+0x12>
    119a:	6a c0       	rjmp	.+212    	; 0x1270 <_ZN11stepperInfo14processCommandEi+0xe6>
		return;  //TODO: MAKE BETTER
		
	if(cmd != GRIP && cmd != RELEASE)
    119c:	62 30       	cpi	r22, 0x02	; 2
    119e:	71 05       	cpc	r23, r1
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <_ZN11stepperInfo14processCommandEi+0x1a>
    11a2:	66 c0       	rjmp	.+204    	; 0x1270 <_ZN11stepperInfo14processCommandEi+0xe6>
		return;
		
	if(cmd == currentState)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	86 17       	cp	r24, r22
    11aa:	97 07       	cpc	r25, r23
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <_ZN11stepperInfo14processCommandEi+0x26>
    11ae:	60 c0       	rjmp	.+192    	; 0x1270 <_ZN11stepperInfo14processCommandEi+0xe6>
		return;
		
	currentState = cmd;
    11b0:	6a 83       	std	Y+2, r22	; 0x02
    11b2:	7b 83       	std	Y+3, r23	; 0x03
	//GET DIRECTION
	//CLR IS OUT
	
	//SET is grip
	//CLR is release
	if(cmd == GRIP)
    11b4:	61 15       	cp	r22, r1
    11b6:	71 05       	cpc	r23, r1
    11b8:	29 f4       	brne	.+10     	; 0x11c4 <_ZN11stepperInfo14processCommandEi+0x3a>
		MD1_DIR_SET();
    11ba:	80 e1       	ldi	r24, 0x10	; 16
    11bc:	e0 e6       	ldi	r30, 0x60	; 96
    11be:	f6 e0       	ldi	r31, 0x06	; 6
    11c0:	85 83       	std	Z+5, r24	; 0x05
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <_ZN11stepperInfo14processCommandEi+0x48>
	else if (cmd == RELEASE)
    11c4:	61 30       	cpi	r22, 0x01	; 1
    11c6:	71 05       	cpc	r23, r1
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <_ZN11stepperInfo14processCommandEi+0x48>
		MD1_DIR_CLR();
    11ca:	80 e1       	ldi	r24, 0x10	; 16
    11cc:	e0 e6       	ldi	r30, 0x60	; 96
    11ce:	f6 e0       	ldi	r31, 0x06	; 6
    11d0:	86 83       	std	Z+6, r24	; 0x06
		
	if(!init){
    11d2:	fa 01       	movw	r30, r20
    11d4:	84 81       	ldd	r24, Z+4	; 0x04
    11d6:	95 81       	ldd	r25, Z+5	; 0x05
    11d8:	89 2b       	or	r24, r25
    11da:	11 f5       	brne	.+68     	; 0x1220 <_ZN11stepperInfo14processCommandEi+0x96>
    11dc:	28 e8       	ldi	r18, 0x88	; 136
    11de:	33 e1       	ldi	r19, 0x13	; 19
		for(int i = 0; i < 5000; ++i){
			
			while(!CHECK_ISROVING());  //e-stop check
    11e0:	e0 e0       	ldi	r30, 0x00	; 0
    11e2:	f6 e0       	ldi	r31, 0x06	; 6

			MD1_STEP_SET();
    11e4:	a0 e6       	ldi	r26, 0x60	; 96
    11e6:	b6 e0       	ldi	r27, 0x06	; 6
    11e8:	90 e2       	ldi	r25, 0x20	; 32
		MD1_DIR_CLR();
		
	if(!init){
		for(int i = 0; i < 5000; ++i){
			
			while(!CHECK_ISROVING());  //e-stop check
    11ea:	80 85       	ldd	r24, Z+8	; 0x08
    11ec:	84 ff       	sbrs	r24, 4
    11ee:	fd cf       	rjmp	.-6      	; 0x11ea <_ZN11stepperInfo14processCommandEi+0x60>

			MD1_STEP_SET();
    11f0:	15 96       	adiw	r26, 0x05	; 5
    11f2:	9c 93       	st	X, r25
    11f4:	15 97       	sbiw	r26, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11f6:	cf e8       	ldi	r28, 0x8F	; 143
    11f8:	d1 e0       	ldi	r29, 0x01	; 1
    11fa:	21 97       	sbiw	r28, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <_ZN11stepperInfo14processCommandEi+0x70>
    11fe:	00 c0       	rjmp	.+0      	; 0x1200 <_ZN11stepperInfo14processCommandEi+0x76>
    1200:	00 00       	nop
			_delay_us(50);
			MD1_STEP_CLR();
    1202:	16 96       	adiw	r26, 0x06	; 6
    1204:	9c 93       	st	X, r25
    1206:	16 97       	sbiw	r26, 0x06	; 6
    1208:	cf e9       	ldi	r28, 0x9F	; 159
    120a:	df e0       	ldi	r29, 0x0F	; 15
    120c:	21 97       	sbiw	r28, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <_ZN11stepperInfo14processCommandEi+0x82>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <_ZN11stepperInfo14processCommandEi+0x88>
    1212:	00 00       	nop
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	31 09       	sbc	r19, r1
		MD1_DIR_SET();
	else if (cmd == RELEASE)
		MD1_DIR_CLR();
		
	if(!init){
		for(int i = 0; i < 5000; ++i){
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	31 f7       	brne	.-52     	; 0x11ea <_ZN11stepperInfo14processCommandEi+0x60>
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <_ZN11stepperInfo14processCommandEi+0x9c>
			MD1_STEP_CLR();
			_delay_us(500);
		}
	}
	else {
		init = 0;
    1220:	fa 01       	movw	r30, r20
    1222:	14 82       	std	Z+4, r1	; 0x04
    1224:	15 82       	std	Z+5, r1	; 0x05
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	96 e0       	ldi	r25, 0x06	; 6
    122a:	e0 e0       	ldi	r30, 0x00	; 0
    122c:	f6 e0       	ldi	r31, 0x06	; 6
		while(!CHECK_ISROVING());  //e-stop check
		MD1_STEP_SET();
    122e:	a0 e6       	ldi	r26, 0x60	; 96
    1230:	b6 e0       	ldi	r27, 0x06	; 6
    1232:	30 e2       	ldi	r19, 0x20	; 32
    1234:	13 c0       	rjmp	.+38     	; 0x125c <_ZN11stepperInfo14processCommandEi+0xd2>
		init = 0;
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
		while(!CHECK_ISROVING());  //e-stop check
    1236:	20 85       	ldd	r18, Z+8	; 0x08
    1238:	24 ff       	sbrs	r18, 4
    123a:	fd cf       	rjmp	.-6      	; 0x1236 <_ZN11stepperInfo14processCommandEi+0xac>
		MD1_STEP_SET();
    123c:	15 96       	adiw	r26, 0x05	; 5
    123e:	3c 93       	st	X, r19
    1240:	15 97       	sbiw	r26, 0x05	; 5
    1242:	25 ed       	ldi	r18, 0xD5	; 213
    1244:	2a 95       	dec	r18
    1246:	f1 f7       	brne	.-4      	; 0x1244 <_ZN11stepperInfo14processCommandEi+0xba>
    1248:	00 00       	nop
		_delay_us(20);
		MD1_STEP_CLR();
    124a:	16 96       	adiw	r26, 0x06	; 6
    124c:	3c 93       	st	X, r19
    124e:	16 97       	sbiw	r26, 0x06	; 6
    1250:	cf e3       	ldi	r28, 0x3F	; 63
    1252:	d1 e0       	ldi	r29, 0x01	; 1
    1254:	21 97       	sbiw	r28, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <_ZN11stepperInfo14processCommandEi+0xca>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <_ZN11stepperInfo14processCommandEi+0xd0>
    125a:	00 00       	nop
	else {
		init = 0;
	}
	
	//MOVE UNTIL LIMIT OR GRIP
	while(!CHECK_GRIP_LIMIT() && !CHECK_GRIP_CLOSE()){
    125c:	ec 01       	movw	r28, r24
    125e:	28 85       	ldd	r18, Y+8	; 0x08
    1260:	23 fd       	sbrc	r18, 3
    1262:	03 c0       	rjmp	.+6      	; 0x126a <_ZN11stepperInfo14processCommandEi+0xe0>
    1264:	20 85       	ldd	r18, Z+8	; 0x08
    1266:	23 fd       	sbrc	r18, 3
    1268:	e6 cf       	rjmp	.-52     	; 0x1236 <_ZN11stepperInfo14processCommandEi+0xac>
		_delay_us(20);
		MD1_STEP_CLR();
		_delay_us(40);
	}
	
	enabled = 0;
    126a:	fa 01       	movw	r30, r20
    126c:	10 82       	st	Z, r1
    126e:	11 82       	std	Z+1, r1	; 0x01
	
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <_ZN11stepperInfo6enableEv>:


void stepperInfo::enable(){
	enabled = 1;
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
    127e:	31 83       	std	Z+1, r19	; 0x01
    1280:	08 95       	ret

00001282 <USART_InterruptDriver_Initialize>:
    1282:	fc 01       	movw	r30, r24
    1284:	60 83       	st	Z, r22
    1286:	71 83       	std	Z+1, r23	; 0x01
    1288:	42 83       	std	Z+2, r20	; 0x02
    128a:	14 86       	std	Z+12, r1	; 0x0c
    128c:	13 86       	std	Z+11, r1	; 0x0b
    128e:	16 86       	std	Z+14, r1	; 0x0e
    1290:	15 86       	std	Z+13, r1	; 0x0d
    1292:	08 95       	ret

00001294 <USART_RXBufferData_Available>:
    1294:	fc 01       	movw	r30, r24
    1296:	23 85       	ldd	r18, Z+11	; 0x0b
    1298:	94 85       	ldd	r25, Z+12	; 0x0c
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	29 13       	cpse	r18, r25
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <USART_RXBufferData_Available+0xe>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <USART_RXBuffer_GetByte>:
    12a4:	fc 01       	movw	r30, r24
    12a6:	84 85       	ldd	r24, Z+12	; 0x0c
    12a8:	df 01       	movw	r26, r30
    12aa:	a8 0f       	add	r26, r24
    12ac:	b1 1d       	adc	r27, r1
    12ae:	13 96       	adiw	r26, 0x03	; 3
    12b0:	8c 91       	ld	r24, X
    12b2:	94 85       	ldd	r25, Z+12	; 0x0c
    12b4:	9f 5f       	subi	r25, 0xFF	; 255
    12b6:	93 70       	andi	r25, 0x03	; 3
    12b8:	94 87       	std	Z+12, r25	; 0x0c
    12ba:	08 95       	ret

000012bc <USART_RXComplete>:
    12bc:	fc 01       	movw	r30, r24
    12be:	83 85       	ldd	r24, Z+11	; 0x0b
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	83 70       	andi	r24, 0x03	; 3
    12c4:	94 85       	ldd	r25, Z+12	; 0x0c
    12c6:	a0 81       	ld	r26, Z
    12c8:	b1 81       	ldd	r27, Z+1	; 0x01
    12ca:	2c 91       	ld	r18, X
    12cc:	89 17       	cp	r24, r25
    12ce:	49 f0       	breq	.+18     	; 0x12e2 <USART_RXComplete+0x26>
    12d0:	93 85       	ldd	r25, Z+11	; 0x0b
    12d2:	df 01       	movw	r26, r30
    12d4:	a9 0f       	add	r26, r25
    12d6:	b1 1d       	adc	r27, r1
    12d8:	13 96       	adiw	r26, 0x03	; 3
    12da:	2c 93       	st	X, r18
    12dc:	83 87       	std	Z+11, r24	; 0x0b
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	08 95       	ret
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret

000012e6 <USART_DataRegEmpty>:
    12e6:	fc 01       	movw	r30, r24
    12e8:	86 85       	ldd	r24, Z+14	; 0x0e
    12ea:	95 85       	ldd	r25, Z+13	; 0x0d
    12ec:	98 13       	cpse	r25, r24
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <USART_DataRegEmpty+0x18>
    12f0:	01 90       	ld	r0, Z+
    12f2:	f0 81       	ld	r31, Z
    12f4:	e0 2d       	mov	r30, r0
    12f6:	83 81       	ldd	r24, Z+3	; 0x03
    12f8:	8c 7f       	andi	r24, 0xFC	; 252
    12fa:	83 83       	std	Z+3, r24	; 0x03
    12fc:	08 95       	ret
    12fe:	86 85       	ldd	r24, Z+14	; 0x0e
    1300:	df 01       	movw	r26, r30
    1302:	a8 0f       	add	r26, r24
    1304:	b1 1d       	adc	r27, r1
    1306:	17 96       	adiw	r26, 0x07	; 7
    1308:	8c 91       	ld	r24, X
    130a:	a0 81       	ld	r26, Z
    130c:	b1 81       	ldd	r27, Z+1	; 0x01
    130e:	8c 93       	st	X, r24
    1310:	86 85       	ldd	r24, Z+14	; 0x0e
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	83 70       	andi	r24, 0x03	; 3
    1316:	86 87       	std	Z+14, r24	; 0x0e
    1318:	08 95       	ret

0000131a <__subsf3>:
    131a:	50 58       	subi	r21, 0x80	; 128

0000131c <__addsf3>:
    131c:	bb 27       	eor	r27, r27
    131e:	aa 27       	eor	r26, r26
    1320:	0e d0       	rcall	.+28     	; 0x133e <__addsf3x>
    1322:	4d c1       	rjmp	.+666    	; 0x15be <__fp_round>
    1324:	3e d1       	rcall	.+636    	; 0x15a2 <__fp_pscA>
    1326:	30 f0       	brcs	.+12     	; 0x1334 <__addsf3+0x18>
    1328:	43 d1       	rcall	.+646    	; 0x15b0 <__fp_pscB>
    132a:	20 f0       	brcs	.+8      	; 0x1334 <__addsf3+0x18>
    132c:	31 f4       	brne	.+12     	; 0x133a <__addsf3+0x1e>
    132e:	9f 3f       	cpi	r25, 0xFF	; 255
    1330:	11 f4       	brne	.+4      	; 0x1336 <__addsf3+0x1a>
    1332:	1e f4       	brtc	.+6      	; 0x133a <__addsf3+0x1e>
    1334:	33 c1       	rjmp	.+614    	; 0x159c <__fp_nan>
    1336:	0e f4       	brtc	.+2      	; 0x133a <__addsf3+0x1e>
    1338:	e0 95       	com	r30
    133a:	e7 fb       	bst	r30, 7
    133c:	29 c1       	rjmp	.+594    	; 0x1590 <__fp_inf>

0000133e <__addsf3x>:
    133e:	e9 2f       	mov	r30, r25
    1340:	4f d1       	rcall	.+670    	; 0x15e0 <__fp_split3>
    1342:	80 f3       	brcs	.-32     	; 0x1324 <__addsf3+0x8>
    1344:	ba 17       	cp	r27, r26
    1346:	62 07       	cpc	r22, r18
    1348:	73 07       	cpc	r23, r19
    134a:	84 07       	cpc	r24, r20
    134c:	95 07       	cpc	r25, r21
    134e:	18 f0       	brcs	.+6      	; 0x1356 <__addsf3x+0x18>
    1350:	71 f4       	brne	.+28     	; 0x136e <__addsf3x+0x30>
    1352:	9e f5       	brtc	.+102    	; 0x13ba <__addsf3x+0x7c>
    1354:	67 c1       	rjmp	.+718    	; 0x1624 <__fp_zero>
    1356:	0e f4       	brtc	.+2      	; 0x135a <__addsf3x+0x1c>
    1358:	e0 95       	com	r30
    135a:	0b 2e       	mov	r0, r27
    135c:	ba 2f       	mov	r27, r26
    135e:	a0 2d       	mov	r26, r0
    1360:	0b 01       	movw	r0, r22
    1362:	b9 01       	movw	r22, r18
    1364:	90 01       	movw	r18, r0
    1366:	0c 01       	movw	r0, r24
    1368:	ca 01       	movw	r24, r20
    136a:	a0 01       	movw	r20, r0
    136c:	11 24       	eor	r1, r1
    136e:	ff 27       	eor	r31, r31
    1370:	59 1b       	sub	r21, r25
    1372:	99 f0       	breq	.+38     	; 0x139a <__addsf3x+0x5c>
    1374:	59 3f       	cpi	r21, 0xF9	; 249
    1376:	50 f4       	brcc	.+20     	; 0x138c <__addsf3x+0x4e>
    1378:	50 3e       	cpi	r21, 0xE0	; 224
    137a:	68 f1       	brcs	.+90     	; 0x13d6 <__addsf3x+0x98>
    137c:	1a 16       	cp	r1, r26
    137e:	f0 40       	sbci	r31, 0x00	; 0
    1380:	a2 2f       	mov	r26, r18
    1382:	23 2f       	mov	r18, r19
    1384:	34 2f       	mov	r19, r20
    1386:	44 27       	eor	r20, r20
    1388:	58 5f       	subi	r21, 0xF8	; 248
    138a:	f3 cf       	rjmp	.-26     	; 0x1372 <__addsf3x+0x34>
    138c:	46 95       	lsr	r20
    138e:	37 95       	ror	r19
    1390:	27 95       	ror	r18
    1392:	a7 95       	ror	r26
    1394:	f0 40       	sbci	r31, 0x00	; 0
    1396:	53 95       	inc	r21
    1398:	c9 f7       	brne	.-14     	; 0x138c <__addsf3x+0x4e>
    139a:	7e f4       	brtc	.+30     	; 0x13ba <__addsf3x+0x7c>
    139c:	1f 16       	cp	r1, r31
    139e:	ba 0b       	sbc	r27, r26
    13a0:	62 0b       	sbc	r22, r18
    13a2:	73 0b       	sbc	r23, r19
    13a4:	84 0b       	sbc	r24, r20
    13a6:	ba f0       	brmi	.+46     	; 0x13d6 <__addsf3x+0x98>
    13a8:	91 50       	subi	r25, 0x01	; 1
    13aa:	a1 f0       	breq	.+40     	; 0x13d4 <__addsf3x+0x96>
    13ac:	ff 0f       	add	r31, r31
    13ae:	bb 1f       	adc	r27, r27
    13b0:	66 1f       	adc	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	c2 f7       	brpl	.-16     	; 0x13a8 <__addsf3x+0x6a>
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <__addsf3x+0x98>
    13ba:	ba 0f       	add	r27, r26
    13bc:	62 1f       	adc	r22, r18
    13be:	73 1f       	adc	r23, r19
    13c0:	84 1f       	adc	r24, r20
    13c2:	48 f4       	brcc	.+18     	; 0x13d6 <__addsf3x+0x98>
    13c4:	87 95       	ror	r24
    13c6:	77 95       	ror	r23
    13c8:	67 95       	ror	r22
    13ca:	b7 95       	ror	r27
    13cc:	f7 95       	ror	r31
    13ce:	9e 3f       	cpi	r25, 0xFE	; 254
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__addsf3x+0x96>
    13d2:	b3 cf       	rjmp	.-154    	; 0x133a <__addsf3+0x1e>
    13d4:	93 95       	inc	r25
    13d6:	88 0f       	add	r24, r24
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <__addsf3x+0x9e>
    13da:	99 27       	eor	r25, r25
    13dc:	ee 0f       	add	r30, r30
    13de:	97 95       	ror	r25
    13e0:	87 95       	ror	r24
    13e2:	08 95       	ret

000013e4 <__divsf3>:
    13e4:	0c d0       	rcall	.+24     	; 0x13fe <__divsf3x>
    13e6:	eb c0       	rjmp	.+470    	; 0x15be <__fp_round>
    13e8:	e3 d0       	rcall	.+454    	; 0x15b0 <__fp_pscB>
    13ea:	40 f0       	brcs	.+16     	; 0x13fc <__divsf3+0x18>
    13ec:	da d0       	rcall	.+436    	; 0x15a2 <__fp_pscA>
    13ee:	30 f0       	brcs	.+12     	; 0x13fc <__divsf3+0x18>
    13f0:	21 f4       	brne	.+8      	; 0x13fa <__divsf3+0x16>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	19 f0       	breq	.+6      	; 0x13fc <__divsf3+0x18>
    13f6:	cc c0       	rjmp	.+408    	; 0x1590 <__fp_inf>
    13f8:	51 11       	cpse	r21, r1
    13fa:	15 c1       	rjmp	.+554    	; 0x1626 <__fp_szero>
    13fc:	cf c0       	rjmp	.+414    	; 0x159c <__fp_nan>

000013fe <__divsf3x>:
    13fe:	f0 d0       	rcall	.+480    	; 0x15e0 <__fp_split3>
    1400:	98 f3       	brcs	.-26     	; 0x13e8 <__divsf3+0x4>

00001402 <__divsf3_pse>:
    1402:	99 23       	and	r25, r25
    1404:	c9 f3       	breq	.-14     	; 0x13f8 <__divsf3+0x14>
    1406:	55 23       	and	r21, r21
    1408:	b1 f3       	breq	.-20     	; 0x13f6 <__divsf3+0x12>
    140a:	95 1b       	sub	r25, r21
    140c:	55 0b       	sbc	r21, r21
    140e:	bb 27       	eor	r27, r27
    1410:	aa 27       	eor	r26, r26
    1412:	62 17       	cp	r22, r18
    1414:	73 07       	cpc	r23, r19
    1416:	84 07       	cpc	r24, r20
    1418:	38 f0       	brcs	.+14     	; 0x1428 <__divsf3_pse+0x26>
    141a:	9f 5f       	subi	r25, 0xFF	; 255
    141c:	5f 4f       	sbci	r21, 0xFF	; 255
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	44 1f       	adc	r20, r20
    1424:	aa 1f       	adc	r26, r26
    1426:	a9 f3       	breq	.-22     	; 0x1412 <__divsf3_pse+0x10>
    1428:	33 d0       	rcall	.+102    	; 0x1490 <__divsf3_pse+0x8e>
    142a:	0e 2e       	mov	r0, r30
    142c:	3a f0       	brmi	.+14     	; 0x143c <__divsf3_pse+0x3a>
    142e:	e0 e8       	ldi	r30, 0x80	; 128
    1430:	30 d0       	rcall	.+96     	; 0x1492 <__divsf3_pse+0x90>
    1432:	91 50       	subi	r25, 0x01	; 1
    1434:	50 40       	sbci	r21, 0x00	; 0
    1436:	e6 95       	lsr	r30
    1438:	00 1c       	adc	r0, r0
    143a:	ca f7       	brpl	.-14     	; 0x142e <__divsf3_pse+0x2c>
    143c:	29 d0       	rcall	.+82     	; 0x1490 <__divsf3_pse+0x8e>
    143e:	fe 2f       	mov	r31, r30
    1440:	27 d0       	rcall	.+78     	; 0x1490 <__divsf3_pse+0x8e>
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	88 1f       	adc	r24, r24
    1448:	bb 1f       	adc	r27, r27
    144a:	26 17       	cp	r18, r22
    144c:	37 07       	cpc	r19, r23
    144e:	48 07       	cpc	r20, r24
    1450:	ab 07       	cpc	r26, r27
    1452:	b0 e8       	ldi	r27, 0x80	; 128
    1454:	09 f0       	breq	.+2      	; 0x1458 <__divsf3_pse+0x56>
    1456:	bb 0b       	sbc	r27, r27
    1458:	80 2d       	mov	r24, r0
    145a:	bf 01       	movw	r22, r30
    145c:	ff 27       	eor	r31, r31
    145e:	93 58       	subi	r25, 0x83	; 131
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	2a f0       	brmi	.+10     	; 0x146e <__divsf3_pse+0x6c>
    1464:	9e 3f       	cpi	r25, 0xFE	; 254
    1466:	51 05       	cpc	r21, r1
    1468:	68 f0       	brcs	.+26     	; 0x1484 <__divsf3_pse+0x82>
    146a:	92 c0       	rjmp	.+292    	; 0x1590 <__fp_inf>
    146c:	dc c0       	rjmp	.+440    	; 0x1626 <__fp_szero>
    146e:	5f 3f       	cpi	r21, 0xFF	; 255
    1470:	ec f3       	brlt	.-6      	; 0x146c <__divsf3_pse+0x6a>
    1472:	98 3e       	cpi	r25, 0xE8	; 232
    1474:	dc f3       	brlt	.-10     	; 0x146c <__divsf3_pse+0x6a>
    1476:	86 95       	lsr	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	b7 95       	ror	r27
    147e:	f7 95       	ror	r31
    1480:	9f 5f       	subi	r25, 0xFF	; 255
    1482:	c9 f7       	brne	.-14     	; 0x1476 <__divsf3_pse+0x74>
    1484:	88 0f       	add	r24, r24
    1486:	91 1d       	adc	r25, r1
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	97 f9       	bld	r25, 7
    148e:	08 95       	ret
    1490:	e1 e0       	ldi	r30, 0x01	; 1
    1492:	66 0f       	add	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	bb 1f       	adc	r27, r27
    149a:	62 17       	cp	r22, r18
    149c:	73 07       	cpc	r23, r19
    149e:	84 07       	cpc	r24, r20
    14a0:	ba 07       	cpc	r27, r26
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__divsf3_pse+0xaa>
    14a4:	62 1b       	sub	r22, r18
    14a6:	73 0b       	sbc	r23, r19
    14a8:	84 0b       	sbc	r24, r20
    14aa:	ba 0b       	sbc	r27, r26
    14ac:	ee 1f       	adc	r30, r30
    14ae:	88 f7       	brcc	.-30     	; 0x1492 <__divsf3_pse+0x90>
    14b0:	e0 95       	com	r30
    14b2:	08 95       	ret

000014b4 <__fixsfsi>:
    14b4:	04 d0       	rcall	.+8      	; 0x14be <__fixunssfsi>
    14b6:	68 94       	set
    14b8:	b1 11       	cpse	r27, r1
    14ba:	b5 c0       	rjmp	.+362    	; 0x1626 <__fp_szero>
    14bc:	08 95       	ret

000014be <__fixunssfsi>:
    14be:	98 d0       	rcall	.+304    	; 0x15f0 <__fp_splitA>
    14c0:	88 f0       	brcs	.+34     	; 0x14e4 <__fixunssfsi+0x26>
    14c2:	9f 57       	subi	r25, 0x7F	; 127
    14c4:	90 f0       	brcs	.+36     	; 0x14ea <__fixunssfsi+0x2c>
    14c6:	b9 2f       	mov	r27, r25
    14c8:	99 27       	eor	r25, r25
    14ca:	b7 51       	subi	r27, 0x17	; 23
    14cc:	a0 f0       	brcs	.+40     	; 0x14f6 <__fixunssfsi+0x38>
    14ce:	d1 f0       	breq	.+52     	; 0x1504 <__fixunssfsi+0x46>
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	1a f0       	brmi	.+6      	; 0x14e0 <__fixunssfsi+0x22>
    14da:	ba 95       	dec	r27
    14dc:	c9 f7       	brne	.-14     	; 0x14d0 <__fixunssfsi+0x12>
    14de:	12 c0       	rjmp	.+36     	; 0x1504 <__fixunssfsi+0x46>
    14e0:	b1 30       	cpi	r27, 0x01	; 1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <__fixunssfsi+0x46>
    14e4:	9f d0       	rcall	.+318    	; 0x1624 <__fp_zero>
    14e6:	b1 e0       	ldi	r27, 0x01	; 1
    14e8:	08 95       	ret
    14ea:	9c c0       	rjmp	.+312    	; 0x1624 <__fp_zero>
    14ec:	67 2f       	mov	r22, r23
    14ee:	78 2f       	mov	r23, r24
    14f0:	88 27       	eor	r24, r24
    14f2:	b8 5f       	subi	r27, 0xF8	; 248
    14f4:	39 f0       	breq	.+14     	; 0x1504 <__fixunssfsi+0x46>
    14f6:	b9 3f       	cpi	r27, 0xF9	; 249
    14f8:	cc f3       	brlt	.-14     	; 0x14ec <__fixunssfsi+0x2e>
    14fa:	86 95       	lsr	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b3 95       	inc	r27
    1502:	d9 f7       	brne	.-10     	; 0x14fa <__fixunssfsi+0x3c>
    1504:	3e f4       	brtc	.+14     	; 0x1514 <__fixunssfsi+0x56>
    1506:	90 95       	com	r25
    1508:	80 95       	com	r24
    150a:	70 95       	com	r23
    150c:	61 95       	neg	r22
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	08 95       	ret

00001516 <__floatunsisf>:
    1516:	e8 94       	clt
    1518:	09 c0       	rjmp	.+18     	; 0x152c <__floatsisf+0x12>

0000151a <__floatsisf>:
    151a:	97 fb       	bst	r25, 7
    151c:	3e f4       	brtc	.+14     	; 0x152c <__floatsisf+0x12>
    151e:	90 95       	com	r25
    1520:	80 95       	com	r24
    1522:	70 95       	com	r23
    1524:	61 95       	neg	r22
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	99 23       	and	r25, r25
    152e:	a9 f0       	breq	.+42     	; 0x155a <__floatsisf+0x40>
    1530:	f9 2f       	mov	r31, r25
    1532:	96 e9       	ldi	r25, 0x96	; 150
    1534:	bb 27       	eor	r27, r27
    1536:	93 95       	inc	r25
    1538:	f6 95       	lsr	r31
    153a:	87 95       	ror	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	b7 95       	ror	r27
    1542:	f1 11       	cpse	r31, r1
    1544:	f8 cf       	rjmp	.-16     	; 0x1536 <__floatsisf+0x1c>
    1546:	fa f4       	brpl	.+62     	; 0x1586 <__floatsisf+0x6c>
    1548:	bb 0f       	add	r27, r27
    154a:	11 f4       	brne	.+4      	; 0x1550 <__floatsisf+0x36>
    154c:	60 ff       	sbrs	r22, 0
    154e:	1b c0       	rjmp	.+54     	; 0x1586 <__floatsisf+0x6c>
    1550:	6f 5f       	subi	r22, 0xFF	; 255
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	16 c0       	rjmp	.+44     	; 0x1586 <__floatsisf+0x6c>
    155a:	88 23       	and	r24, r24
    155c:	11 f0       	breq	.+4      	; 0x1562 <__floatsisf+0x48>
    155e:	96 e9       	ldi	r25, 0x96	; 150
    1560:	11 c0       	rjmp	.+34     	; 0x1584 <__floatsisf+0x6a>
    1562:	77 23       	and	r23, r23
    1564:	21 f0       	breq	.+8      	; 0x156e <__floatsisf+0x54>
    1566:	9e e8       	ldi	r25, 0x8E	; 142
    1568:	87 2f       	mov	r24, r23
    156a:	76 2f       	mov	r23, r22
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <__floatsisf+0x5e>
    156e:	66 23       	and	r22, r22
    1570:	71 f0       	breq	.+28     	; 0x158e <__floatsisf+0x74>
    1572:	96 e8       	ldi	r25, 0x86	; 134
    1574:	86 2f       	mov	r24, r22
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	2a f0       	brmi	.+10     	; 0x1586 <__floatsisf+0x6c>
    157c:	9a 95       	dec	r25
    157e:	66 0f       	add	r22, r22
    1580:	77 1f       	adc	r23, r23
    1582:	88 1f       	adc	r24, r24
    1584:	da f7       	brpl	.-10     	; 0x157c <__floatsisf+0x62>
    1586:	88 0f       	add	r24, r24
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret

00001590 <__fp_inf>:
    1590:	97 f9       	bld	r25, 7
    1592:	9f 67       	ori	r25, 0x7F	; 127
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	08 95       	ret

0000159c <__fp_nan>:
    159c:	9f ef       	ldi	r25, 0xFF	; 255
    159e:	80 ec       	ldi	r24, 0xC0	; 192
    15a0:	08 95       	ret

000015a2 <__fp_pscA>:
    15a2:	00 24       	eor	r0, r0
    15a4:	0a 94       	dec	r0
    15a6:	16 16       	cp	r1, r22
    15a8:	17 06       	cpc	r1, r23
    15aa:	18 06       	cpc	r1, r24
    15ac:	09 06       	cpc	r0, r25
    15ae:	08 95       	ret

000015b0 <__fp_pscB>:
    15b0:	00 24       	eor	r0, r0
    15b2:	0a 94       	dec	r0
    15b4:	12 16       	cp	r1, r18
    15b6:	13 06       	cpc	r1, r19
    15b8:	14 06       	cpc	r1, r20
    15ba:	05 06       	cpc	r0, r21
    15bc:	08 95       	ret

000015be <__fp_round>:
    15be:	09 2e       	mov	r0, r25
    15c0:	03 94       	inc	r0
    15c2:	00 0c       	add	r0, r0
    15c4:	11 f4       	brne	.+4      	; 0x15ca <__fp_round+0xc>
    15c6:	88 23       	and	r24, r24
    15c8:	52 f0       	brmi	.+20     	; 0x15de <__fp_round+0x20>
    15ca:	bb 0f       	add	r27, r27
    15cc:	40 f4       	brcc	.+16     	; 0x15de <__fp_round+0x20>
    15ce:	bf 2b       	or	r27, r31
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <__fp_round+0x18>
    15d2:	60 ff       	sbrs	r22, 0
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <__fp_round+0x20>
    15d6:	6f 5f       	subi	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	08 95       	ret

000015e0 <__fp_split3>:
    15e0:	57 fd       	sbrc	r21, 7
    15e2:	90 58       	subi	r25, 0x80	; 128
    15e4:	44 0f       	add	r20, r20
    15e6:	55 1f       	adc	r21, r21
    15e8:	59 f0       	breq	.+22     	; 0x1600 <__fp_splitA+0x10>
    15ea:	5f 3f       	cpi	r21, 0xFF	; 255
    15ec:	71 f0       	breq	.+28     	; 0x160a <__fp_splitA+0x1a>
    15ee:	47 95       	ror	r20

000015f0 <__fp_splitA>:
    15f0:	88 0f       	add	r24, r24
    15f2:	97 fb       	bst	r25, 7
    15f4:	99 1f       	adc	r25, r25
    15f6:	61 f0       	breq	.+24     	; 0x1610 <__fp_splitA+0x20>
    15f8:	9f 3f       	cpi	r25, 0xFF	; 255
    15fa:	79 f0       	breq	.+30     	; 0x161a <__fp_splitA+0x2a>
    15fc:	87 95       	ror	r24
    15fe:	08 95       	ret
    1600:	12 16       	cp	r1, r18
    1602:	13 06       	cpc	r1, r19
    1604:	14 06       	cpc	r1, r20
    1606:	55 1f       	adc	r21, r21
    1608:	f2 cf       	rjmp	.-28     	; 0x15ee <__fp_split3+0xe>
    160a:	46 95       	lsr	r20
    160c:	f1 df       	rcall	.-30     	; 0x15f0 <__fp_splitA>
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <__fp_splitA+0x30>
    1610:	16 16       	cp	r1, r22
    1612:	17 06       	cpc	r1, r23
    1614:	18 06       	cpc	r1, r24
    1616:	99 1f       	adc	r25, r25
    1618:	f1 cf       	rjmp	.-30     	; 0x15fc <__fp_splitA+0xc>
    161a:	86 95       	lsr	r24
    161c:	71 05       	cpc	r23, r1
    161e:	61 05       	cpc	r22, r1
    1620:	08 94       	sec
    1622:	08 95       	ret

00001624 <__fp_zero>:
    1624:	e8 94       	clt

00001626 <__fp_szero>:
    1626:	bb 27       	eor	r27, r27
    1628:	66 27       	eor	r22, r22
    162a:	77 27       	eor	r23, r23
    162c:	cb 01       	movw	r24, r22
    162e:	97 f9       	bld	r25, 7
    1630:	08 95       	ret

00001632 <__gesf2>:
    1632:	66 d0       	rcall	.+204    	; 0x1700 <__fp_cmp>
    1634:	08 f4       	brcc	.+2      	; 0x1638 <__gesf2+0x6>
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	08 95       	ret

0000163a <__mulsf3>:
    163a:	0b d0       	rcall	.+22     	; 0x1652 <__mulsf3x>
    163c:	c0 cf       	rjmp	.-128    	; 0x15be <__fp_round>
    163e:	b1 df       	rcall	.-158    	; 0x15a2 <__fp_pscA>
    1640:	28 f0       	brcs	.+10     	; 0x164c <__mulsf3+0x12>
    1642:	b6 df       	rcall	.-148    	; 0x15b0 <__fp_pscB>
    1644:	18 f0       	brcs	.+6      	; 0x164c <__mulsf3+0x12>
    1646:	95 23       	and	r25, r21
    1648:	09 f0       	breq	.+2      	; 0x164c <__mulsf3+0x12>
    164a:	a2 cf       	rjmp	.-188    	; 0x1590 <__fp_inf>
    164c:	a7 cf       	rjmp	.-178    	; 0x159c <__fp_nan>
    164e:	11 24       	eor	r1, r1
    1650:	ea cf       	rjmp	.-44     	; 0x1626 <__fp_szero>

00001652 <__mulsf3x>:
    1652:	c6 df       	rcall	.-116    	; 0x15e0 <__fp_split3>
    1654:	a0 f3       	brcs	.-24     	; 0x163e <__mulsf3+0x4>

00001656 <__mulsf3_pse>:
    1656:	95 9f       	mul	r25, r21
    1658:	d1 f3       	breq	.-12     	; 0x164e <__mulsf3+0x14>
    165a:	95 0f       	add	r25, r21
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	55 1f       	adc	r21, r21
    1660:	62 9f       	mul	r22, r18
    1662:	f0 01       	movw	r30, r0
    1664:	72 9f       	mul	r23, r18
    1666:	bb 27       	eor	r27, r27
    1668:	f0 0d       	add	r31, r0
    166a:	b1 1d       	adc	r27, r1
    166c:	63 9f       	mul	r22, r19
    166e:	aa 27       	eor	r26, r26
    1670:	f0 0d       	add	r31, r0
    1672:	b1 1d       	adc	r27, r1
    1674:	aa 1f       	adc	r26, r26
    1676:	64 9f       	mul	r22, r20
    1678:	66 27       	eor	r22, r22
    167a:	b0 0d       	add	r27, r0
    167c:	a1 1d       	adc	r26, r1
    167e:	66 1f       	adc	r22, r22
    1680:	82 9f       	mul	r24, r18
    1682:	22 27       	eor	r18, r18
    1684:	b0 0d       	add	r27, r0
    1686:	a1 1d       	adc	r26, r1
    1688:	62 1f       	adc	r22, r18
    168a:	73 9f       	mul	r23, r19
    168c:	b0 0d       	add	r27, r0
    168e:	a1 1d       	adc	r26, r1
    1690:	62 1f       	adc	r22, r18
    1692:	83 9f       	mul	r24, r19
    1694:	a0 0d       	add	r26, r0
    1696:	61 1d       	adc	r22, r1
    1698:	22 1f       	adc	r18, r18
    169a:	74 9f       	mul	r23, r20
    169c:	33 27       	eor	r19, r19
    169e:	a0 0d       	add	r26, r0
    16a0:	61 1d       	adc	r22, r1
    16a2:	23 1f       	adc	r18, r19
    16a4:	84 9f       	mul	r24, r20
    16a6:	60 0d       	add	r22, r0
    16a8:	21 1d       	adc	r18, r1
    16aa:	82 2f       	mov	r24, r18
    16ac:	76 2f       	mov	r23, r22
    16ae:	6a 2f       	mov	r22, r26
    16b0:	11 24       	eor	r1, r1
    16b2:	9f 57       	subi	r25, 0x7F	; 127
    16b4:	50 40       	sbci	r21, 0x00	; 0
    16b6:	8a f0       	brmi	.+34     	; 0x16da <__mulsf3_pse+0x84>
    16b8:	e1 f0       	breq	.+56     	; 0x16f2 <__mulsf3_pse+0x9c>
    16ba:	88 23       	and	r24, r24
    16bc:	4a f0       	brmi	.+18     	; 0x16d0 <__mulsf3_pse+0x7a>
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	bb 1f       	adc	r27, r27
    16c4:	66 1f       	adc	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	91 50       	subi	r25, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	a9 f7       	brne	.-22     	; 0x16ba <__mulsf3_pse+0x64>
    16d0:	9e 3f       	cpi	r25, 0xFE	; 254
    16d2:	51 05       	cpc	r21, r1
    16d4:	70 f0       	brcs	.+28     	; 0x16f2 <__mulsf3_pse+0x9c>
    16d6:	5c cf       	rjmp	.-328    	; 0x1590 <__fp_inf>
    16d8:	a6 cf       	rjmp	.-180    	; 0x1626 <__fp_szero>
    16da:	5f 3f       	cpi	r21, 0xFF	; 255
    16dc:	ec f3       	brlt	.-6      	; 0x16d8 <__mulsf3_pse+0x82>
    16de:	98 3e       	cpi	r25, 0xE8	; 232
    16e0:	dc f3       	brlt	.-10     	; 0x16d8 <__mulsf3_pse+0x82>
    16e2:	86 95       	lsr	r24
    16e4:	77 95       	ror	r23
    16e6:	67 95       	ror	r22
    16e8:	b7 95       	ror	r27
    16ea:	f7 95       	ror	r31
    16ec:	e7 95       	ror	r30
    16ee:	9f 5f       	subi	r25, 0xFF	; 255
    16f0:	c1 f7       	brne	.-16     	; 0x16e2 <__mulsf3_pse+0x8c>
    16f2:	fe 2b       	or	r31, r30
    16f4:	88 0f       	add	r24, r24
    16f6:	91 1d       	adc	r25, r1
    16f8:	96 95       	lsr	r25
    16fa:	87 95       	ror	r24
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret

00001700 <__fp_cmp>:
    1700:	99 0f       	add	r25, r25
    1702:	00 08       	sbc	r0, r0
    1704:	55 0f       	add	r21, r21
    1706:	aa 0b       	sbc	r26, r26
    1708:	e0 e8       	ldi	r30, 0x80	; 128
    170a:	fe ef       	ldi	r31, 0xFE	; 254
    170c:	16 16       	cp	r1, r22
    170e:	17 06       	cpc	r1, r23
    1710:	e8 07       	cpc	r30, r24
    1712:	f9 07       	cpc	r31, r25
    1714:	c0 f0       	brcs	.+48     	; 0x1746 <__fp_cmp+0x46>
    1716:	12 16       	cp	r1, r18
    1718:	13 06       	cpc	r1, r19
    171a:	e4 07       	cpc	r30, r20
    171c:	f5 07       	cpc	r31, r21
    171e:	98 f0       	brcs	.+38     	; 0x1746 <__fp_cmp+0x46>
    1720:	62 1b       	sub	r22, r18
    1722:	73 0b       	sbc	r23, r19
    1724:	84 0b       	sbc	r24, r20
    1726:	95 0b       	sbc	r25, r21
    1728:	39 f4       	brne	.+14     	; 0x1738 <__fp_cmp+0x38>
    172a:	0a 26       	eor	r0, r26
    172c:	61 f0       	breq	.+24     	; 0x1746 <__fp_cmp+0x46>
    172e:	23 2b       	or	r18, r19
    1730:	24 2b       	or	r18, r20
    1732:	25 2b       	or	r18, r21
    1734:	21 f4       	brne	.+8      	; 0x173e <__fp_cmp+0x3e>
    1736:	08 95       	ret
    1738:	0a 26       	eor	r0, r26
    173a:	09 f4       	brne	.+2      	; 0x173e <__fp_cmp+0x3e>
    173c:	a1 40       	sbci	r26, 0x01	; 1
    173e:	a6 95       	lsr	r26
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	81 1d       	adc	r24, r1
    1744:	81 1d       	adc	r24, r1
    1746:	08 95       	ret

00001748 <__divmodhi4>:
    1748:	97 fb       	bst	r25, 7
    174a:	07 2e       	mov	r0, r23
    174c:	16 f4       	brtc	.+4      	; 0x1752 <__divmodhi4+0xa>
    174e:	00 94       	com	r0
    1750:	07 d0       	rcall	.+14     	; 0x1760 <__divmodhi4_neg1>
    1752:	77 fd       	sbrc	r23, 7
    1754:	09 d0       	rcall	.+18     	; 0x1768 <__divmodhi4_neg2>
    1756:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__udivmodhi4>
    175a:	07 fc       	sbrc	r0, 7
    175c:	05 d0       	rcall	.+10     	; 0x1768 <__divmodhi4_neg2>
    175e:	3e f4       	brtc	.+14     	; 0x176e <__divmodhi4_exit>

00001760 <__divmodhi4_neg1>:
    1760:	90 95       	com	r25
    1762:	81 95       	neg	r24
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	08 95       	ret

00001768 <__divmodhi4_neg2>:
    1768:	70 95       	com	r23
    176a:	61 95       	neg	r22
    176c:	7f 4f       	sbci	r23, 0xFF	; 255

0000176e <__divmodhi4_exit>:
    176e:	08 95       	ret

00001770 <__udivmodhi4>:
    1770:	aa 1b       	sub	r26, r26
    1772:	bb 1b       	sub	r27, r27
    1774:	51 e1       	ldi	r21, 0x11	; 17
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <__udivmodhi4_ep>

00001778 <__udivmodhi4_loop>:
    1778:	aa 1f       	adc	r26, r26
    177a:	bb 1f       	adc	r27, r27
    177c:	a6 17       	cp	r26, r22
    177e:	b7 07       	cpc	r27, r23
    1780:	10 f0       	brcs	.+4      	; 0x1786 <__udivmodhi4_ep>
    1782:	a6 1b       	sub	r26, r22
    1784:	b7 0b       	sbc	r27, r23

00001786 <__udivmodhi4_ep>:
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	5a 95       	dec	r21
    178c:	a9 f7       	brne	.-22     	; 0x1778 <__udivmodhi4_loop>
    178e:	80 95       	com	r24
    1790:	90 95       	com	r25
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	08 95       	ret

00001798 <__tablejump2__>:
    1798:	ee 0f       	add	r30, r30
    179a:	ff 1f       	adc	r31, r31

0000179c <__tablejump__>:
    179c:	05 90       	lpm	r0, Z+
    179e:	f4 91       	lpm	r31, Z
    17a0:	e0 2d       	mov	r30, r0
    17a2:	09 94       	ijmp

000017a4 <__do_global_dtors>:
    17a4:	11 e0       	ldi	r17, 0x01	; 1
    17a6:	ce e6       	ldi	r28, 0x6E	; 110
    17a8:	d1 e0       	ldi	r29, 0x01	; 1
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <__do_global_dtors+0x10>
    17ac:	fe 01       	movw	r30, r28
    17ae:	0e 94 ce 0b 	call	0x179c	; 0x179c <__tablejump__>
    17b2:	22 96       	adiw	r28, 0x02	; 2
    17b4:	c0 37       	cpi	r28, 0x70	; 112
    17b6:	d1 07       	cpc	r29, r17
    17b8:	c9 f7       	brne	.-14     	; 0x17ac <__do_global_dtors+0x8>
    17ba:	f8 94       	cli

000017bc <__stop_program>:
    17bc:	ff cf       	rjmp	.-2      	; 0x17bc <__stop_program>
