
bin/Debug/MainDriveFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800200  00001336  000013ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001336  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800276  00800276  00001460  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000222c  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000017b5  00000000  00000000  00003690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00004e45  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e3       	ldi	r30, 0x36	; 54
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 37       	cpi	r26, 0x76	; 118
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a6 e7       	ldi	r26, 0x76	; 118
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 37       	cpi	r26, 0x77	; 119
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 08 09 	call	0x1210	; 0x1210 <main>
     122:	0c 94 99 09 	jmp	0x1332	; 0x1332 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Initialize_Mega2560>:
#include <inttypes.h>
#include <util/delay_basic.h>
#include <math.h>

void Initialize_Mega2560(void){
    DDRB |= (1<<PB7);
     12a:	27 9a       	sbi	0x04, 7	; 4
     12c:	08 95       	ret

0000012e <Mega2560_delay_ms>:
}

void Mega2560_delay_ms(double __ms){
     12e:	8f 92       	push	r8
     130:	9f 92       	push	r9
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	4b 01       	movw	r8, r22
     140:	5c 01       	movw	r10, r24
	uint16_t __ticks;
	double __tmp ;

	__tmp = ((F_CPU) / 4e3) * __ms;
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	4a e7       	ldi	r20, 0x7A	; 122
     148:	55 e4       	ldi	r21, 0x45	; 69
     14a:	0e 94 0a 05 	call	0xa14	; 0xa14 <__mulsf3>
     14e:	8b 01       	movw	r16, r22
     150:	d8 2f       	mov	r29, r24
     152:	c9 2f       	mov	r28, r25
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	fe 01       	movw	r30, r28
     15e:	71 2f       	mov	r23, r17
     160:	8f 2f       	mov	r24, r31
     162:	9e 2f       	mov	r25, r30
     164:	0e 94 f0 06 	call	0xde0	; 0xde0 <__ltsf2>
     168:	87 fd       	sbrc	r24, 7
     16a:	36 c0       	rjmp	.+108    	; 0x1d8 <Mega2560_delay_ms+0xaa>
		__ticks = 1;
	else if (__tmp > 65535)
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	3f ef       	ldi	r19, 0xFF	; 255
     170:	4f e7       	ldi	r20, 0x7F	; 127
     172:	57 e4       	ldi	r21, 0x47	; 71
     174:	fe 01       	movw	r30, r28
     176:	60 2f       	mov	r22, r16
     178:	71 2f       	mov	r23, r17
     17a:	8f 2f       	mov	r24, r31
     17c:	9e 2f       	mov	r25, r30
     17e:	0e 94 92 06 	call	0xd24	; 0xd24 <__gtsf2>
     182:	18 16       	cp	r1, r24
     184:	b4 f4       	brge	.+44     	; 0x1b2 <Mega2560_delay_ms+0x84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e2       	ldi	r20, 0x20	; 32
     18c:	51 e4       	ldi	r21, 0x41	; 65
     18e:	c5 01       	movw	r24, r10
     190:	b4 01       	movw	r22, r8
     192:	0e 94 0a 05 	call	0xa14	; 0xa14 <__mulsf3>
     196:	0e 94 25 03 	call	0x64a	; 0x64a <__fixunssfsi>
		while(__ticks)
     19a:	61 15       	cp	r22, r1
     19c:	71 05       	cpc	r23, r1
     19e:	99 f0       	breq	.+38     	; 0x1c6 <Mega2560_delay_ms+0x98>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a0:	20 e9       	ldi	r18, 0x90	; 144
     1a2:	31 e0       	ldi	r19, 0x01	; 1
     1a4:	c9 01       	movw	r24, r18
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Mega2560_delay_ms+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1aa:	61 50       	subi	r22, 0x01	; 1
     1ac:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ae:	d1 f7       	brne	.-12     	; 0x1a4 <Mega2560_delay_ms+0x76>
     1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <Mega2560_delay_ms+0x98>
			__ticks --;
		}
		return;
	}
	else
    __ticks = (uint16_t)__tmp;
     1b2:	9e 01       	movw	r18, r28
     1b4:	60 2f       	mov	r22, r16
     1b6:	71 2f       	mov	r23, r17
     1b8:	83 2f       	mov	r24, r19
     1ba:	92 2f       	mov	r25, r18
     1bc:	0e 94 25 03 	call	0x64a	; 0x64a <__fixunssfsi>
     1c0:	cb 01       	movw	r24, r22
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Mega2560_delay_ms+0x94>
	_delay_loop_2(__ticks);
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	bf 90       	pop	r11
     1d0:	af 90       	pop	r10
     1d2:	9f 90       	pop	r9
     1d4:	8f 90       	pop	r8
     1d6:	08 95       	ret
	uint16_t __ticks;
	double __tmp ;

	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	f1 cf       	rjmp	.-30     	; 0x1c0 <Mega2560_delay_ms+0x92>

000001de <Initialize_Sabertooth>:
#include <util/delay.h>
#include <main.h>
#include <Mega2560.h>

void Initialize_Sabertooth(void){
    SendByteUSART1(AUTOBAUD_BYTE);                                          //This byte tells the controller to automatically determine the usart communication speed.
     1de:	8a ea       	ldi	r24, 0xAA	; 170
     1e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 1;                                                        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     1e4:	80 e8       	ldi	r24, 0x80	; 128
     1e6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(command);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
        command = 4;        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 5;        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     1fc:	80 e8       	ldi	r24, 0x80	; 128
     1fe:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(command);
     202:	84 e0       	ldi	r24, 0x04	; 4
     204:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <SendByteUSART1>

00000214 <Sabertooth_SetMotors>:
void Initialize_Sabertooth(void){
    SendByteUSART1(AUTOBAUD_BYTE);                                          //This byte tells the controller to automatically determine the usart communication speed.
    Sabertooth_HardStop();
}

void Sabertooth_SetMotors(unsigned char address, unsigned char LeftDir, unsigned char LeftSpeed, unsigned char RightDir, unsigned char RightSpeed){
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	1f 92       	push	r1
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	d8 2e       	mov	r13, r24

    if(LeftDir == DRIVE_FORWARD){
     22c:	61 30       	cpi	r22, 0x01	; 1
     22e:	09 f4       	brne	.+2      	; 0x232 <Sabertooth_SetMotors+0x1e>
     230:	49 c0       	rjmp	.+146    	; 0x2c4 <Sabertooth_SetMotors+0xb0>
        LeftDir = LEFT_FORWARD;
    }else if(LeftDir == DRIVE_BACKWARD){
     232:	66 23       	and	r22, r22
     234:	b1 f1       	breq	.+108    	; 0x2a2 <Sabertooth_SetMotors+0x8e>
        LeftDir = LEFT_BACK;
    }else if(LeftDir == DRIVE_STOP){
     236:	62 30       	cpi	r22, 0x02	; 2
     238:	09 f4       	brne	.+2      	; 0x23c <Sabertooth_SetMotors+0x28>
     23a:	4d c0       	rjmp	.+154    	; 0x2d6 <Sabertooth_SetMotors+0xc2>
     23c:	16 2f       	mov	r17, r22
     23e:	f4 2e       	mov	r15, r20
     240:	46 0f       	add	r20, r22
        LeftDir = LEFT_FORWARD;
        LeftSpeed = 0;
    }

    if(RightDir == DRIVE_FORWARD){
     242:	21 30       	cpi	r18, 0x01	; 1
     244:	99 f1       	breq	.+102    	; 0x2ac <Sabertooth_SetMotors+0x98>
        RightDir = RIGHT_FORWARD;
    }else if(RightDir == DRIVE_BACKWARD){
     246:	22 23       	and	r18, r18
     248:	b9 f1       	breq	.+110    	; 0x2b8 <Sabertooth_SetMotors+0xa4>
        RightDir = RIGHT_BACK;
    }else if(RightDir == DRIVE_STOP){
     24a:	22 30       	cpi	r18, 0x02	; 2
     24c:	f1 f1       	breq	.+124    	; 0x2ca <Sabertooth_SetMotors+0xb6>
     24e:	c2 2e       	mov	r12, r18
     250:	e0 2e       	mov	r14, r16
     252:	e2 0e       	add	r14, r18

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     254:	8d 2d       	mov	r24, r13
     256:	49 83       	std	Y+1, r20	; 0x01
     258:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     25c:	81 2f       	mov	r24, r17
     25e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftSpeed);
     262:	8f 2d       	mov	r24, r15
     264:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     268:	49 81       	ldd	r20, Y+1	; 0x01
     26a:	84 2f       	mov	r24, r20
     26c:	8d 0d       	add	r24, r13


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
    SendByteUSART1(LeftChecksum);
     26e:	8f 77       	andi	r24, 0x7F	; 127
     270:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>

    SendByteUSART1(address);
     274:	8d 2d       	mov	r24, r13
     276:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightDir);
     27a:	8c 2d       	mov	r24, r12
     27c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     280:	80 2f       	mov	r24, r16
     282:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     286:	8e 2d       	mov	r24, r14
     288:	8d 0d       	add	r24, r13
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     28a:	8f 77       	andi	r24, 0x7F	; 127
}
     28c:	0f 90       	pop	r0
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     29e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <SendByteUSART1>
     2a2:	f4 2e       	mov	r15, r20
     2a4:	4f 5f       	subi	r20, 0xFF	; 255

void Sabertooth_SetMotors(unsigned char address, unsigned char LeftDir, unsigned char LeftSpeed, unsigned char RightDir, unsigned char RightSpeed){

    if(LeftDir == DRIVE_FORWARD){
        LeftDir = LEFT_FORWARD;
    }else if(LeftDir == DRIVE_BACKWARD){
     2a6:	11 e0       	ldi	r17, 0x01	; 1
    }else if(LeftDir == DRIVE_STOP){
        LeftDir = LEFT_FORWARD;
        LeftSpeed = 0;
    }

    if(RightDir == DRIVE_FORWARD){
     2a8:	21 30       	cpi	r18, 0x01	; 1
     2aa:	69 f6       	brne	.-102    	; 0x246 <Sabertooth_SetMotors+0x32>
     2ac:	54 e0       	ldi	r21, 0x04	; 4
     2ae:	e5 2e       	mov	r14, r21
     2b0:	e0 0e       	add	r14, r16
     2b2:	64 e0       	ldi	r22, 0x04	; 4
     2b4:	c6 2e       	mov	r12, r22
     2b6:	ce cf       	rjmp	.-100    	; 0x254 <Sabertooth_SetMotors+0x40>
     2b8:	25 e0       	ldi	r18, 0x05	; 5
     2ba:	e2 2e       	mov	r14, r18
     2bc:	e0 0e       	add	r14, r16
        RightDir = RIGHT_FORWARD;
    }else if(RightDir == DRIVE_BACKWARD){
     2be:	35 e0       	ldi	r19, 0x05	; 5
     2c0:	c3 2e       	mov	r12, r19
     2c2:	c8 cf       	rjmp	.-112    	; 0x254 <Sabertooth_SetMotors+0x40>
     2c4:	f4 2e       	mov	r15, r20
    Sabertooth_HardStop();
}

void Sabertooth_SetMotors(unsigned char address, unsigned char LeftDir, unsigned char LeftSpeed, unsigned char RightDir, unsigned char RightSpeed){

    if(LeftDir == DRIVE_FORWARD){
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	bc cf       	rjmp	.-136    	; 0x242 <Sabertooth_SetMotors+0x2e>

    if(RightDir == DRIVE_FORWARD){
        RightDir = RIGHT_FORWARD;
    }else if(RightDir == DRIVE_BACKWARD){
        RightDir = RIGHT_BACK;
    }else if(RightDir == DRIVE_STOP){
     2ca:	84 e0       	ldi	r24, 0x04	; 4
     2cc:	e8 2e       	mov	r14, r24
     2ce:	00 e0       	ldi	r16, 0x00	; 0
     2d0:	94 e0       	ldi	r25, 0x04	; 4
     2d2:	c9 2e       	mov	r12, r25
     2d4:	bf cf       	rjmp	.-130    	; 0x254 <Sabertooth_SetMotors+0x40>

    if(LeftDir == DRIVE_FORWARD){
        LeftDir = LEFT_FORWARD;
    }else if(LeftDir == DRIVE_BACKWARD){
        LeftDir = LEFT_BACK;
    }else if(LeftDir == DRIVE_STOP){
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	f1 2c       	mov	r15, r1
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	b2 cf       	rjmp	.-156    	; 0x242 <Sabertooth_SetMotors+0x2e>

000002de <Sabertooth_LeftDrive>:
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
}

void Sabertooth_LeftDrive(unsigned char direction, unsigned char speed){
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	d9 f0       	breq	.+54     	; 0x326 <Sabertooth_LeftDrive+0x48>
     2f0:	06 2f       	mov	r16, r22
        command = 0;
        speed = 0;
    }else if(direction == 1){
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	e1 f0       	breq	.+56     	; 0x32e <Sabertooth_LeftDrive+0x50>
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
     2f6:	81 11       	cpse	r24, r1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <Sabertooth_LeftDrive+0x1e>
        command = 1;                                                        //Sabertooth command for driving motor 1 backwards
     2fa:	11 e0       	ldi	r17, 0x01	; 1
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     2fc:	80 e8       	ldi	r24, 0x80	; 128
     2fe:	69 83       	std	Y+1, r22	; 0x01
     300:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(command);
     304:	81 2f       	mov	r24, r17
     306:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
     30a:	80 2f       	mov	r24, r16
     30c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     310:	69 81       	ldd	r22, Y+1	; 0x01
     312:	86 2f       	mov	r24, r22
     314:	81 0f       	add	r24, r17
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     316:	8f 77       	andi	r24, 0x7F	; 127
}
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     322:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <SendByteUSART1>

void Sabertooth_LeftDrive(unsigned char direction, unsigned char speed){
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     326:	00 e0       	ldi	r16, 0x00	; 0
        command = 0;
     328:	10 e0       	ldi	r17, 0x00	; 0
        speed = 0;
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	e7 cf       	rjmp	.-50     	; 0x2fc <Sabertooth_LeftDrive+0x1e>
    }else if(direction == 1){
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	e5 cf       	rjmp	.-54     	; 0x2fc <Sabertooth_LeftDrive+0x1e>

00000332 <Sabertooth_RightDrive>:
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

void Sabertooth_RightDrive(unsigned char direction, unsigned char speed){
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	1f 92       	push	r1
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	d9 f0       	breq	.+54     	; 0x37a <Sabertooth_RightDrive+0x48>
     344:	06 2f       	mov	r16, r22
        command = 0;
        speed = 0;
    }else if(direction == 1){
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	e1 f0       	breq	.+56     	; 0x382 <Sabertooth_RightDrive+0x50>
        command = 4;        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
     34a:	81 11       	cpse	r24, r1
     34c:	01 c0       	rjmp	.+2      	; 0x350 <Sabertooth_RightDrive+0x1e>
        command = 5;        //Sabertooth command for driving motor 1 backwards
     34e:	15 e0       	ldi	r17, 0x05	; 5
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     350:	80 e8       	ldi	r24, 0x80	; 128
     352:	69 83       	std	Y+1, r22	; 0x01
     354:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(command);
     358:	81 2f       	mov	r24, r17
     35a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
     35e:	80 2f       	mov	r24, r16
     360:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     364:	69 81       	ldd	r22, Y+1	; 0x01
     366:	86 2f       	mov	r24, r22
     368:	81 0f       	add	r24, r17
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     36a:	8f 77       	andi	r24, 0x7F	; 127
}
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     376:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <SendByteUSART1>

void Sabertooth_RightDrive(unsigned char direction, unsigned char speed){
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     37a:	00 e0       	ldi	r16, 0x00	; 0
        command = 0;
     37c:	10 e0       	ldi	r17, 0x00	; 0
        speed = 0;
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	e7 cf       	rjmp	.-50     	; 0x350 <Sabertooth_RightDrive+0x1e>
    }else if(direction == 1){
        command = 4;        //Sabertooth command for driving motor 1 forward
     382:	14 e0       	ldi	r17, 0x04	; 4
     384:	e5 cf       	rjmp	.-54     	; 0x350 <Sabertooth_RightDrive+0x1e>

00000386 <Sabertooth_Checksum>:
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     386:	68 0f       	add	r22, r24
     388:	64 0f       	add	r22, r20
    uint8_t checksum = (sum & 127);
    return checksum;
}
     38a:	86 2f       	mov	r24, r22
     38c:	8f 77       	andi	r24, 0x7F	; 127
     38e:	08 95       	ret

00000390 <Sabertooth_HardStop>:
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 1;                                                        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     390:	80 e8       	ldi	r24, 0x80	; 128
     392:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(command);
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
        command = 4;        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 5;        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     3a8:	80 e8       	ldi	r24, 0x80	; 128
     3aa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(command);
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <SendByteUSART1>

000003c0 <Sabertooth_DriveTest>:
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	c0 e8       	ldi	r28, 0x80	; 128

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     3d2:	dc 2f       	mov	r29, r28
     3d4:	d0 58       	subi	r29, 0x80	; 128
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     3d6:	8d 2f       	mov	r24, r29
     3d8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     3dc:	8c 2f       	mov	r24, r28
     3de:	8f 77       	andi	r24, 0x7F	; 127
     3e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>

    SendByteUSART1(address);
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightDir);
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     3f0:	8d 2f       	mov	r24, r29
     3f2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     3f6:	8c 2f       	mov	r24, r28
     3f8:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     3fa:	8f 77       	andi	r24, 0x7F	; 127
     3fc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>

void Sabertooth_DriveTest(void){
    int i;
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 ea       	ldi	r24, 0xA0	; 160
     406:	91 e4       	ldi	r25, 0x41	; 65
     408:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     40c:	cf 5f       	subi	r28, 0xFF	; 255
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
    int i;
    for(i = 0 ; i < 128 ; i++){
     40e:	d9 f6       	brne	.-74     	; 0x3c6 <Sabertooth_DriveTest+0x6>

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     41c:	dc 2f       	mov	r29, r28
     41e:	d0 58       	subi	r29, 0x80	; 128
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     420:	8d 2f       	mov	r24, r29
     422:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     426:	8c 2f       	mov	r24, r28
     428:	8f 77       	andi	r24, 0x7F	; 127
     42a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>

    SendByteUSART1(address);
     42e:	80 e8       	ldi	r24, 0x80	; 128
     430:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightDir);
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     43a:	8d 2f       	mov	r24, r29
     43c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     440:	8c 2f       	mov	r24, r28
     442:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     444:	8f 77       	andi	r24, 0x7F	; 127
     446:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 ea       	ldi	r24, 0xA0	; 160
     450:	91 e4       	ldi	r25, 0x41	; 65
     452:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     456:	c1 50       	subi	r28, 0x01	; 1
    int i;
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
     458:	c0 38       	cpi	r28, 0x80	; 128
     45a:	d1 f6       	brne	.-76     	; 0x410 <Sabertooth_DriveTest+0x50>
     45c:	c1 e8       	ldi	r28, 0x81	; 129

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     45e:	80 e8       	ldi	r24, 0x80	; 128
     460:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     46a:	dc 2f       	mov	r29, r28
     46c:	d1 58       	subi	r29, 0x81	; 129
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     46e:	8d 2f       	mov	r24, r29
     470:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     474:	8c 2f       	mov	r24, r28
     476:	8f 77       	andi	r24, 0x7F	; 127
     478:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>

    SendByteUSART1(address);
     47c:	80 e8       	ldi	r24, 0x80	; 128
     47e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightDir);
     482:	85 e0       	ldi	r24, 0x05	; 5
     484:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     488:	8d 2f       	mov	r24, r29
     48a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     48e:	8c 2f       	mov	r24, r28
     490:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     492:	8f 77       	andi	r24, 0x7F	; 127
     494:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 ea       	ldi	r24, 0xA0	; 160
     49e:	91 e4       	ldi	r25, 0x41	; 65
     4a0:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     4a4:	cf 5f       	subi	r28, 0xFF	; 255
    }
    for( ; i > 0 ; i--){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for(i = 0 ; i < 128 ; i++){
     4a6:	c1 30       	cpi	r28, 0x01	; 1
     4a8:	d1 f6       	brne	.-76     	; 0x45e <Sabertooth_DriveTest+0x9e>

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     4aa:	80 e8       	ldi	r24, 0x80	; 128
     4ac:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     4b6:	dc 2f       	mov	r29, r28
     4b8:	d1 58       	subi	r29, 0x81	; 129
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     4ba:	8d 2f       	mov	r24, r29
     4bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     4c0:	8c 2f       	mov	r24, r28
     4c2:	8f 77       	andi	r24, 0x7F	; 127
     4c4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>

    SendByteUSART1(address);
     4c8:	80 e8       	ldi	r24, 0x80	; 128
     4ca:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightDir);
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     4d4:	8d 2f       	mov	r24, r29
     4d6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     4da:	8c 2f       	mov	r24, r28
     4dc:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     4de:	8f 77       	andi	r24, 0x7F	; 127
     4e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SendByteUSART1>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 ea       	ldi	r24, 0xA0	; 160
     4ea:	91 e4       	ldi	r25, 0x41	; 65
     4ec:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     4f0:	c1 50       	subi	r28, 0x01	; 1
    }
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
     4f2:	c1 38       	cpi	r28, 0x81	; 129
     4f4:	d1 f6       	brne	.-76     	; 0x4aa <Sabertooth_DriveTest+0xea>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
    }
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <Initialize_USART0>:
#include <usart.h>
#include <avr/interrupt.h>
#include <main.h>

void Initialize_USART0(double newbaud){
    PRR0 &= ~(1<<PRUSART0);  //Disables power saving mode
     4fc:	e4 e6       	ldi	r30, 0x64	; 100
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	20 81       	ld	r18, Z
     502:	2d 7f       	andi	r18, 0xFD	; 253
     504:	20 83       	st	Z, r18

    int baud_prescaller = ((F_CPU / (newbaud * 16UL)) - 1);
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e8       	ldi	r20, 0x80	; 128
     50c:	51 e4       	ldi	r21, 0x41	; 65
     50e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__mulsf3>
     512:	9b 01       	movw	r18, r22
     514:	ac 01       	movw	r20, r24
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	74 e2       	ldi	r23, 0x24	; 36
     51a:	84 e7       	ldi	r24, 0x74	; 116
     51c:	9b e4       	ldi	r25, 0x4B	; 75
     51e:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e8       	ldi	r20, 0x80	; 128
     528:	5f e3       	ldi	r21, 0x3F	; 63
     52a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__subsf3>
     52e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fixsfsi>
    UBRR0H = (baud_prescaller >> 8);
     532:	87 2f       	mov	r24, r23
     534:	99 27       	eor	r25, r25
     536:	87 fd       	sbrc	r24, 7
     538:	9a 95       	dec	r25
     53a:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = baud_prescaller;
     53e:	60 93 c4 00 	sts	0x00C4, r22

    // Enable transmitter and receiver
    UCSR0B = (1 << TXEN0 | 1 << RXEN0 | 1 << RXCIE0);
     542:	88 e9       	ldi	r24, 0x98	; 152
     544:	80 93 c1 00 	sts	0x00C1, r24
    // Set frame format: 8data, 1stop bit
    UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
     548:	86 e0       	ldi	r24, 0x06	; 6
     54a:	80 93 c2 00 	sts	0x00C2, r24
     54e:	08 95       	ret

00000550 <SendByteUSART0>:


}

void SendByteUSART0(char data){
    while (!( UCSR0A & (1<<UDRE0)));    //BLOCKING!!!!!
     550:	90 91 c0 00 	lds	r25, 0x00C0
     554:	95 ff       	sbrs	r25, 5
     556:	fc cf       	rjmp	.-8      	; 0x550 <SendByteUSART0>
    UDR0 = data;
     558:	80 93 c6 00 	sts	0x00C6, r24
     55c:	08 95       	ret

0000055e <SendStringUSART0>:
}

void SendStringUSART0(unsigned char *data){

	for (int loop = 0 ; data[loop] != '\0'; loop++){
     55e:	fc 01       	movw	r30, r24
     560:	20 81       	ld	r18, Z
     562:	22 23       	and	r18, r18
     564:	51 f0       	breq	.+20     	; 0x57a <SendStringUSART0+0x1c>
void SendByteUSART0(char data){
    while (!( UCSR0A & (1<<UDRE0)));    //BLOCKING!!!!!
    UDR0 = data;
}

void SendStringUSART0(unsigned char *data){
     566:	31 96       	adiw	r30, 0x01	; 1


}

void SendByteUSART0(char data){
    while (!( UCSR0A & (1<<UDRE0)));    //BLOCKING!!!!!
     568:	80 91 c0 00 	lds	r24, 0x00C0
     56c:	85 ff       	sbrs	r24, 5
     56e:	fc cf       	rjmp	.-8      	; 0x568 <SendStringUSART0+0xa>
    UDR0 = data;
     570:	20 93 c6 00 	sts	0x00C6, r18
}

void SendStringUSART0(unsigned char *data){

	for (int loop = 0 ; data[loop] != '\0'; loop++){
     574:	21 91       	ld	r18, Z+
     576:	21 11       	cpse	r18, r1
     578:	f7 cf       	rjmp	.-18     	; 0x568 <SendStringUSART0+0xa>
     57a:	08 95       	ret

0000057c <GetByteUART>:
		/* Stops sending if SendByteUART had an error */
	}
}

unsigned char GetByteUART(void){
	if((UCSR0A & (1 << RXC0))){
     57c:	80 91 c0 00 	lds	r24, 0x00C0
     580:	87 fd       	sbrc	r24, 7
     582:	02 c0       	rjmp	.+4      	; 0x588 <GetByteUART+0xc>
        return(UDR0);
	}else{
        return -1;
     584:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     586:	08 95       	ret
	}
}

unsigned char GetByteUART(void){
	if((UCSR0A & (1 << RXC0))){
        return(UDR0);
     588:	80 91 c6 00 	lds	r24, 0x00C6
     58c:	08 95       	ret

0000058e <Initialize_USART1>:
        return -1;
	}
}

void Initialize_USART1(double newbaud){
    PRR1 &= ~(1<<PRUSART1);
     58e:	e5 e6       	ldi	r30, 0x65	; 101
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	20 81       	ld	r18, Z
     594:	2e 7f       	andi	r18, 0xFE	; 254
     596:	20 83       	st	Z, r18

    int baud_prescaller = ((F_CPU / (newbaud * 16UL)) - 1);
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e8       	ldi	r20, 0x80	; 128
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	0e 94 0a 05 	call	0xa14	; 0xa14 <__mulsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	74 e2       	ldi	r23, 0x24	; 36
     5ac:	84 e7       	ldi	r24, 0x74	; 116
     5ae:	9b e4       	ldi	r25, 0x4B	; 75
     5b0:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e8       	ldi	r20, 0x80	; 128
     5ba:	5f e3       	ldi	r21, 0x3F	; 63
     5bc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__subsf3>
     5c0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fixsfsi>
    UBRR1H = (baud_prescaller >> 8);
     5c4:	87 2f       	mov	r24, r23
     5c6:	99 27       	eor	r25, r25
     5c8:	87 fd       	sbrc	r24, 7
     5ca:	9a 95       	dec	r25
     5cc:	80 93 cd 00 	sts	0x00CD, r24
    UBRR1L = baud_prescaller;
     5d0:	60 93 cc 00 	sts	0x00CC, r22

    // Enable transmitter and receiver
    UCSR1B = (1 << TXEN1 | 1 << RXEN1);
     5d4:	88 e1       	ldi	r24, 0x18	; 24
     5d6:	80 93 c9 00 	sts	0x00C9, r24
    // Set frame format: 8data, 1stop bit
    UCSR1C = ((1<<UCSZ10)|(1<<UCSZ11));
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	80 93 ca 00 	sts	0x00CA, r24
     5e0:	08 95       	ret

000005e2 <SendByteUSART1>:
}

void SendByteUSART1(char data){
    while (!( UCSR1A & (1<<UDRE1)));    //BLOCKING!!!!!
     5e2:	90 91 c8 00 	lds	r25, 0x00C8
     5e6:	95 ff       	sbrs	r25, 5
     5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <SendByteUSART1>
    UDR1 = data;
     5ea:	80 93 ce 00 	sts	0x00CE, r24
     5ee:	08 95       	ret

000005f0 <__vector_25>:
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0b b6       	in	r0, 0x3b	; 59
     5fc:	0f 92       	push	r0
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
     606:	eb e5       	ldi	r30, 0x5B	; 91
     608:	f2 e0       	ldi	r31, 0x02	; 2
     60a:	93 e5       	ldi	r25, 0x53	; 83
     60c:	80 91 c0 00 	lds	r24, 0x00C0
     610:	85 ff       	sbrs	r24, 5
     612:	fc cf       	rjmp	.-8      	; 0x60c <__vector_25+0x1c>
     614:	90 93 c6 00 	sts	0x00C6, r25
     618:	91 91       	ld	r25, Z+
     61a:	91 11       	cpse	r25, r1
     61c:	f7 cf       	rjmp	.-18     	; 0x60c <__vector_25+0x1c>
     61e:	90 91 c6 00 	lds	r25, 0x00C6
     622:	80 91 c0 00 	lds	r24, 0x00C0
     626:	85 ff       	sbrs	r24, 5
     628:	fc cf       	rjmp	.-8      	; 0x622 <__vector_25+0x32>
     62a:	90 93 c6 00 	sts	0x00C6, r25
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 76 02 	sts	0x0276, r24
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	0f 90       	pop	r0
     63e:	0b be       	out	0x3b, r0	; 59
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <__fixunssfsi>:
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	5f e4       	ldi	r21, 0x4F	; 79
     662:	0e 94 c1 06 	call	0xd82	; 0xd82 <__gesf2>
     666:	87 fd       	sbrc	r24, 7
     668:	0e c0       	rjmp	.+28     	; 0x686 <__fixunssfsi+0x3c>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	5f e4       	ldi	r21, 0x4F	; 79
     672:	c7 01       	movw	r24, r14
     674:	b6 01       	movw	r22, r12
     676:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__subsf3>
     67a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fixsfsi>
     67e:	8b 01       	movw	r16, r22
     680:	9c 01       	movw	r18, r24
     682:	30 58       	subi	r19, 0x80	; 128
     684:	06 c0       	rjmp	.+12     	; 0x692 <__fixunssfsi+0x48>
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fixsfsi>
     68e:	8b 01       	movw	r16, r22
     690:	9c 01       	movw	r18, r24
     692:	b8 01       	movw	r22, r16
     694:	c9 01       	movw	r24, r18
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	08 95       	ret

000006a4 <_fpadd_parts>:
     6a4:	a4 e0       	ldi	r26, 0x04	; 4
     6a6:	b0 e0       	ldi	r27, 0x00	; 0
     6a8:	e8 e5       	ldi	r30, 0x58	; 88
     6aa:	f3 e0       	ldi	r31, 0x03	; 3
     6ac:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__prologue_saves__+0x4>
     6b0:	7c 01       	movw	r14, r24
     6b2:	6a 01       	movw	r12, r20
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	08 f4       	brcc	.+2      	; 0x6be <_fpadd_parts+0x1a>
     6bc:	4a c1       	rjmp	.+660    	; 0x952 <_fpadd_parts+0x2ae>
     6be:	fb 01       	movw	r30, r22
     6c0:	90 81       	ld	r25, Z
     6c2:	92 30       	cpi	r25, 0x02	; 2
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <_fpadd_parts+0x24>
     6c6:	42 c1       	rjmp	.+644    	; 0x94c <_fpadd_parts+0x2a8>
     6c8:	84 30       	cpi	r24, 0x04	; 4
     6ca:	79 f4       	brne	.+30     	; 0x6ea <_fpadd_parts+0x46>
     6cc:	94 30       	cpi	r25, 0x04	; 4
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <_fpadd_parts+0x2e>
     6d0:	40 c1       	rjmp	.+640    	; 0x952 <_fpadd_parts+0x2ae>
     6d2:	f7 01       	movw	r30, r14
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	fb 01       	movw	r30, r22
     6d8:	81 81       	ldd	r24, Z+1	; 0x01
     6da:	98 17       	cp	r25, r24
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <_fpadd_parts+0x3c>
     6de:	39 c1       	rjmp	.+626    	; 0x952 <_fpadd_parts+0x2ae>
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	ea 2e       	mov	r14, r26
     6e4:	a2 e0       	ldi	r26, 0x02	; 2
     6e6:	fa 2e       	mov	r15, r26
     6e8:	34 c1       	rjmp	.+616    	; 0x952 <_fpadd_parts+0x2ae>
     6ea:	94 30       	cpi	r25, 0x04	; 4
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <_fpadd_parts+0x4c>
     6ee:	2e c1       	rjmp	.+604    	; 0x94c <_fpadd_parts+0x2a8>
     6f0:	92 30       	cpi	r25, 0x02	; 2
     6f2:	91 f4       	brne	.+36     	; 0x718 <_fpadd_parts+0x74>
     6f4:	82 30       	cpi	r24, 0x02	; 2
     6f6:	09 f0       	breq	.+2      	; 0x6fa <_fpadd_parts+0x56>
     6f8:	2c c1       	rjmp	.+600    	; 0x952 <_fpadd_parts+0x2ae>
     6fa:	88 e0       	ldi	r24, 0x08	; 8
     6fc:	f7 01       	movw	r30, r14
     6fe:	da 01       	movw	r26, r20
     700:	01 90       	ld	r0, Z+
     702:	0d 92       	st	X+, r0
     704:	8a 95       	dec	r24
     706:	e1 f7       	brne	.-8      	; 0x700 <_fpadd_parts+0x5c>
     708:	fb 01       	movw	r30, r22
     70a:	81 81       	ldd	r24, Z+1	; 0x01
     70c:	f7 01       	movw	r30, r14
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	89 23       	and	r24, r25
     712:	fa 01       	movw	r30, r20
     714:	81 83       	std	Z+1, r24	; 0x01
     716:	1c c1       	rjmp	.+568    	; 0x950 <_fpadd_parts+0x2ac>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	09 f4       	brne	.+2      	; 0x71e <_fpadd_parts+0x7a>
     71c:	17 c1       	rjmp	.+558    	; 0x94c <_fpadd_parts+0x2a8>
     71e:	f7 01       	movw	r30, r14
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	93 81       	ldd	r25, Z+3	; 0x03
     724:	fb 01       	movw	r30, r22
     726:	a2 81       	ldd	r26, Z+2	; 0x02
     728:	b3 81       	ldd	r27, Z+3	; 0x03
     72a:	f7 01       	movw	r30, r14
     72c:	04 81       	ldd	r16, Z+4	; 0x04
     72e:	15 81       	ldd	r17, Z+5	; 0x05
     730:	26 81       	ldd	r18, Z+6	; 0x06
     732:	37 81       	ldd	r19, Z+7	; 0x07
     734:	fb 01       	movw	r30, r22
     736:	84 80       	ldd	r8, Z+4	; 0x04
     738:	95 80       	ldd	r9, Z+5	; 0x05
     73a:	a6 80       	ldd	r10, Z+6	; 0x06
     73c:	b7 80       	ldd	r11, Z+7	; 0x07
     73e:	fc 01       	movw	r30, r24
     740:	ea 1b       	sub	r30, r26
     742:	fb 0b       	sbc	r31, r27
     744:	af 01       	movw	r20, r30
     746:	f7 ff       	sbrs	r31, 7
     748:	04 c0       	rjmp	.+8      	; 0x752 <_fpadd_parts+0xae>
     74a:	44 27       	eor	r20, r20
     74c:	55 27       	eor	r21, r21
     74e:	4e 1b       	sub	r20, r30
     750:	5f 0b       	sbc	r21, r31
     752:	40 32       	cpi	r20, 0x20	; 32
     754:	51 05       	cpc	r21, r1
     756:	0c f0       	brlt	.+2      	; 0x75a <_fpadd_parts+0xb6>
     758:	74 c0       	rjmp	.+232    	; 0x842 <_fpadd_parts+0x19e>
     75a:	1e 16       	cp	r1, r30
     75c:	1f 06       	cpc	r1, r31
     75e:	b4 f5       	brge	.+108    	; 0x7cc <_fpadd_parts+0x128>
     760:	24 01       	movw	r4, r8
     762:	35 01       	movw	r6, r10
     764:	04 2e       	mov	r0, r20
     766:	04 c0       	rjmp	.+8      	; 0x770 <_fpadd_parts+0xcc>
     768:	76 94       	lsr	r7
     76a:	67 94       	ror	r6
     76c:	57 94       	ror	r5
     76e:	47 94       	ror	r4
     770:	0a 94       	dec	r0
     772:	d2 f7       	brpl	.-12     	; 0x768 <_fpadd_parts+0xc4>
     774:	49 82       	std	Y+1, r4	; 0x01
     776:	5a 82       	std	Y+2, r5	; 0x02
     778:	6b 82       	std	Y+3, r6	; 0x03
     77a:	7c 82       	std	Y+4, r7	; 0x04
     77c:	41 2c       	mov	r4, r1
     77e:	51 2c       	mov	r5, r1
     780:	32 01       	movw	r6, r4
     782:	43 94       	inc	r4
     784:	04 c0       	rjmp	.+8      	; 0x78e <_fpadd_parts+0xea>
     786:	44 0c       	add	r4, r4
     788:	55 1c       	adc	r5, r5
     78a:	66 1c       	adc	r6, r6
     78c:	77 1c       	adc	r7, r7
     78e:	4a 95       	dec	r20
     790:	d2 f7       	brpl	.-12     	; 0x786 <_fpadd_parts+0xe2>
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	44 1a       	sub	r4, r20
     796:	51 08       	sbc	r5, r1
     798:	61 08       	sbc	r6, r1
     79a:	71 08       	sbc	r7, r1
     79c:	48 20       	and	r4, r8
     79e:	59 20       	and	r5, r9
     7a0:	6a 20       	and	r6, r10
     7a2:	7b 20       	and	r7, r11
     7a4:	81 2c       	mov	r8, r1
     7a6:	91 2c       	mov	r9, r1
     7a8:	54 01       	movw	r10, r8
     7aa:	83 94       	inc	r8
     7ac:	45 28       	or	r4, r5
     7ae:	46 28       	or	r4, r6
     7b0:	47 28       	or	r4, r7
     7b2:	19 f4       	brne	.+6      	; 0x7ba <_fpadd_parts+0x116>
     7b4:	81 2c       	mov	r8, r1
     7b6:	91 2c       	mov	r9, r1
     7b8:	54 01       	movw	r10, r8
     7ba:	49 80       	ldd	r4, Y+1	; 0x01
     7bc:	5a 80       	ldd	r5, Y+2	; 0x02
     7be:	6b 80       	ldd	r6, Y+3	; 0x03
     7c0:	7c 80       	ldd	r7, Y+4	; 0x04
     7c2:	84 28       	or	r8, r4
     7c4:	95 28       	or	r9, r5
     7c6:	a6 28       	or	r10, r6
     7c8:	b7 28       	or	r11, r7
     7ca:	46 c0       	rjmp	.+140    	; 0x858 <_fpadd_parts+0x1b4>
     7cc:	ef 2b       	or	r30, r31
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <_fpadd_parts+0x12e>
     7d0:	43 c0       	rjmp	.+134    	; 0x858 <_fpadd_parts+0x1b4>
     7d2:	84 0f       	add	r24, r20
     7d4:	95 1f       	adc	r25, r21
     7d6:	28 01       	movw	r4, r16
     7d8:	39 01       	movw	r6, r18
     7da:	04 2e       	mov	r0, r20
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <_fpadd_parts+0x142>
     7de:	76 94       	lsr	r7
     7e0:	67 94       	ror	r6
     7e2:	57 94       	ror	r5
     7e4:	47 94       	ror	r4
     7e6:	0a 94       	dec	r0
     7e8:	d2 f7       	brpl	.-12     	; 0x7de <_fpadd_parts+0x13a>
     7ea:	49 82       	std	Y+1, r4	; 0x01
     7ec:	5a 82       	std	Y+2, r5	; 0x02
     7ee:	6b 82       	std	Y+3, r6	; 0x03
     7f0:	7c 82       	std	Y+4, r7	; 0x04
     7f2:	41 2c       	mov	r4, r1
     7f4:	51 2c       	mov	r5, r1
     7f6:	32 01       	movw	r6, r4
     7f8:	43 94       	inc	r4
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <_fpadd_parts+0x160>
     7fc:	44 0c       	add	r4, r4
     7fe:	55 1c       	adc	r5, r5
     800:	66 1c       	adc	r6, r6
     802:	77 1c       	adc	r7, r7
     804:	4a 95       	dec	r20
     806:	d2 f7       	brpl	.-12     	; 0x7fc <_fpadd_parts+0x158>
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	44 1a       	sub	r4, r20
     80c:	51 08       	sbc	r5, r1
     80e:	61 08       	sbc	r6, r1
     810:	71 08       	sbc	r7, r1
     812:	40 22       	and	r4, r16
     814:	51 22       	and	r5, r17
     816:	62 22       	and	r6, r18
     818:	73 22       	and	r7, r19
     81a:	01 e0       	ldi	r16, 0x01	; 1
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	45 28       	or	r4, r5
     824:	46 28       	or	r4, r6
     826:	47 28       	or	r4, r7
     828:	19 f4       	brne	.+6      	; 0x830 <_fpadd_parts+0x18c>
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	98 01       	movw	r18, r16
     830:	49 80       	ldd	r4, Y+1	; 0x01
     832:	5a 80       	ldd	r5, Y+2	; 0x02
     834:	6b 80       	ldd	r6, Y+3	; 0x03
     836:	7c 80       	ldd	r7, Y+4	; 0x04
     838:	04 29       	or	r16, r4
     83a:	15 29       	or	r17, r5
     83c:	26 29       	or	r18, r6
     83e:	37 29       	or	r19, r7
     840:	0b c0       	rjmp	.+22     	; 0x858 <_fpadd_parts+0x1b4>
     842:	a8 17       	cp	r26, r24
     844:	b9 07       	cpc	r27, r25
     846:	24 f4       	brge	.+8      	; 0x850 <_fpadd_parts+0x1ac>
     848:	81 2c       	mov	r8, r1
     84a:	91 2c       	mov	r9, r1
     84c:	54 01       	movw	r10, r8
     84e:	04 c0       	rjmp	.+8      	; 0x858 <_fpadd_parts+0x1b4>
     850:	cd 01       	movw	r24, r26
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	98 01       	movw	r18, r16
     858:	f7 01       	movw	r30, r14
     85a:	41 81       	ldd	r20, Z+1	; 0x01
     85c:	fb 01       	movw	r30, r22
     85e:	51 81       	ldd	r21, Z+1	; 0x01
     860:	45 17       	cp	r20, r21
     862:	09 f4       	brne	.+2      	; 0x866 <_fpadd_parts+0x1c2>
     864:	46 c0       	rjmp	.+140    	; 0x8f2 <_fpadd_parts+0x24e>
     866:	44 23       	and	r20, r20
     868:	49 f0       	breq	.+18     	; 0x87c <_fpadd_parts+0x1d8>
     86a:	24 01       	movw	r4, r8
     86c:	35 01       	movw	r6, r10
     86e:	40 1a       	sub	r4, r16
     870:	51 0a       	sbc	r5, r17
     872:	62 0a       	sbc	r6, r18
     874:	73 0a       	sbc	r7, r19
     876:	93 01       	movw	r18, r6
     878:	82 01       	movw	r16, r4
     87a:	04 c0       	rjmp	.+8      	; 0x884 <_fpadd_parts+0x1e0>
     87c:	08 19       	sub	r16, r8
     87e:	19 09       	sbc	r17, r9
     880:	2a 09       	sbc	r18, r10
     882:	3b 09       	sbc	r19, r11
     884:	37 fd       	sbrc	r19, 7
     886:	05 c0       	rjmp	.+10     	; 0x892 <_fpadd_parts+0x1ee>
     888:	f6 01       	movw	r30, r12
     88a:	11 82       	std	Z+1, r1	; 0x01
     88c:	93 83       	std	Z+3, r25	; 0x03
     88e:	82 83       	std	Z+2, r24	; 0x02
     890:	0c c0       	rjmp	.+24     	; 0x8aa <_fpadd_parts+0x206>
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	f6 01       	movw	r30, r12
     896:	41 83       	std	Z+1, r20	; 0x01
     898:	93 83       	std	Z+3, r25	; 0x03
     89a:	82 83       	std	Z+2, r24	; 0x02
     89c:	30 95       	com	r19
     89e:	20 95       	com	r18
     8a0:	10 95       	com	r17
     8a2:	01 95       	neg	r16
     8a4:	1f 4f       	sbci	r17, 0xFF	; 255
     8a6:	2f 4f       	sbci	r18, 0xFF	; 255
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
     8aa:	04 83       	std	Z+4, r16	; 0x04
     8ac:	15 83       	std	Z+5, r17	; 0x05
     8ae:	26 83       	std	Z+6, r18	; 0x06
     8b0:	37 83       	std	Z+7, r19	; 0x07
     8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <_fpadd_parts+0x22c>
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	aa 1f       	adc	r26, r26
     8ba:	bb 1f       	adc	r27, r27
     8bc:	f6 01       	movw	r30, r12
     8be:	84 83       	std	Z+4, r24	; 0x04
     8c0:	95 83       	std	Z+5, r25	; 0x05
     8c2:	a6 83       	std	Z+6, r26	; 0x06
     8c4:	b7 83       	std	Z+7, r27	; 0x07
     8c6:	82 81       	ldd	r24, Z+2	; 0x02
     8c8:	93 81       	ldd	r25, Z+3	; 0x03
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	93 83       	std	Z+3, r25	; 0x03
     8ce:	82 83       	std	Z+2, r24	; 0x02
     8d0:	f6 01       	movw	r30, r12
     8d2:	84 81       	ldd	r24, Z+4	; 0x04
     8d4:	95 81       	ldd	r25, Z+5	; 0x05
     8d6:	a6 81       	ldd	r26, Z+6	; 0x06
     8d8:	b7 81       	ldd	r27, Z+7	; 0x07
     8da:	ac 01       	movw	r20, r24
     8dc:	bd 01       	movw	r22, r26
     8de:	41 50       	subi	r20, 0x01	; 1
     8e0:	51 09       	sbc	r21, r1
     8e2:	61 09       	sbc	r22, r1
     8e4:	71 09       	sbc	r23, r1
     8e6:	4f 3f       	cpi	r20, 0xFF	; 255
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	6f 4f       	sbci	r22, 0xFF	; 255
     8ec:	7f 43       	sbci	r23, 0x3F	; 63
     8ee:	10 f3       	brcs	.-60     	; 0x8b4 <_fpadd_parts+0x210>
     8f0:	0c c0       	rjmp	.+24     	; 0x90a <_fpadd_parts+0x266>
     8f2:	f6 01       	movw	r30, r12
     8f4:	41 83       	std	Z+1, r20	; 0x01
     8f6:	93 83       	std	Z+3, r25	; 0x03
     8f8:	82 83       	std	Z+2, r24	; 0x02
     8fa:	08 0d       	add	r16, r8
     8fc:	19 1d       	adc	r17, r9
     8fe:	2a 1d       	adc	r18, r10
     900:	3b 1d       	adc	r19, r11
     902:	04 83       	std	Z+4, r16	; 0x04
     904:	15 83       	std	Z+5, r17	; 0x05
     906:	26 83       	std	Z+6, r18	; 0x06
     908:	37 83       	std	Z+7, r19	; 0x07
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	f6 01       	movw	r30, r12
     90e:	80 83       	st	Z, r24
     910:	44 81       	ldd	r20, Z+4	; 0x04
     912:	55 81       	ldd	r21, Z+5	; 0x05
     914:	66 81       	ldd	r22, Z+6	; 0x06
     916:	77 81       	ldd	r23, Z+7	; 0x07
     918:	77 ff       	sbrs	r23, 7
     91a:	1a c0       	rjmp	.+52     	; 0x950 <_fpadd_parts+0x2ac>
     91c:	db 01       	movw	r26, r22
     91e:	ca 01       	movw	r24, r20
     920:	81 70       	andi	r24, 0x01	; 1
     922:	99 27       	eor	r25, r25
     924:	aa 27       	eor	r26, r26
     926:	bb 27       	eor	r27, r27
     928:	76 95       	lsr	r23
     92a:	67 95       	ror	r22
     92c:	57 95       	ror	r21
     92e:	47 95       	ror	r20
     930:	84 2b       	or	r24, r20
     932:	95 2b       	or	r25, r21
     934:	a6 2b       	or	r26, r22
     936:	b7 2b       	or	r27, r23
     938:	84 83       	std	Z+4, r24	; 0x04
     93a:	95 83       	std	Z+5, r25	; 0x05
     93c:	a6 83       	std	Z+6, r26	; 0x06
     93e:	b7 83       	std	Z+7, r27	; 0x07
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	93 83       	std	Z+3, r25	; 0x03
     948:	82 83       	std	Z+2, r24	; 0x02
     94a:	02 c0       	rjmp	.+4      	; 0x950 <_fpadd_parts+0x2ac>
     94c:	7b 01       	movw	r14, r22
     94e:	01 c0       	rjmp	.+2      	; 0x952 <_fpadd_parts+0x2ae>
     950:	76 01       	movw	r14, r12
     952:	c7 01       	movw	r24, r14
     954:	24 96       	adiw	r28, 0x04	; 4
     956:	e0 e1       	ldi	r30, 0x10	; 16
     958:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__epilogue_restores__+0x4>

0000095c <__addsf3>:
     95c:	a0 e2       	ldi	r26, 0x20	; 32
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	e4 eb       	ldi	r30, 0xB4	; 180
     962:	f4 e0       	ldi	r31, 0x04	; 4
     964:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__prologue_saves__+0x20>
     968:	6d 8f       	std	Y+29, r22	; 0x1d
     96a:	7e 8f       	std	Y+30, r23	; 0x1e
     96c:	8f 8f       	std	Y+31, r24	; 0x1f
     96e:	98 a3       	std	Y+32, r25	; 0x20
     970:	29 8f       	std	Y+25, r18	; 0x19
     972:	3a 8f       	std	Y+26, r19	; 0x1a
     974:	4b 8f       	std	Y+27, r20	; 0x1b
     976:	5c 8f       	std	Y+28, r21	; 0x1c
     978:	be 01       	movw	r22, r28
     97a:	6f 5e       	subi	r22, 0xEF	; 239
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	4d 96       	adiw	r24, 0x1d	; 29
     982:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     986:	be 01       	movw	r22, r28
     988:	67 5f       	subi	r22, 0xF7	; 247
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	ce 01       	movw	r24, r28
     98e:	49 96       	adiw	r24, 0x19	; 25
     990:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     994:	ae 01       	movw	r20, r28
     996:	4f 5f       	subi	r20, 0xFF	; 255
     998:	5f 4f       	sbci	r21, 0xFF	; 255
     99a:	be 01       	movw	r22, r28
     99c:	67 5f       	subi	r22, 0xF7	; 247
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	ce 01       	movw	r24, r28
     9a2:	41 96       	adiw	r24, 0x11	; 17
     9a4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_fpadd_parts>
     9a8:	0e 94 6e 07 	call	0xedc	; 0xedc <__pack_f>
     9ac:	a0 96       	adiw	r28, 0x20	; 32
     9ae:	e2 e0       	ldi	r30, 0x02	; 2
     9b0:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__epilogue_restores__+0x20>

000009b4 <__subsf3>:
     9b4:	a0 e2       	ldi	r26, 0x20	; 32
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e0 ee       	ldi	r30, 0xE0	; 224
     9ba:	f4 e0       	ldi	r31, 0x04	; 4
     9bc:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__prologue_saves__+0x20>
     9c0:	6d 8f       	std	Y+29, r22	; 0x1d
     9c2:	7e 8f       	std	Y+30, r23	; 0x1e
     9c4:	8f 8f       	std	Y+31, r24	; 0x1f
     9c6:	98 a3       	std	Y+32, r25	; 0x20
     9c8:	29 8f       	std	Y+25, r18	; 0x19
     9ca:	3a 8f       	std	Y+26, r19	; 0x1a
     9cc:	4b 8f       	std	Y+27, r20	; 0x1b
     9ce:	5c 8f       	std	Y+28, r21	; 0x1c
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5e       	subi	r22, 0xEF	; 239
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	ce 01       	movw	r24, r28
     9d8:	4d 96       	adiw	r24, 0x1d	; 29
     9da:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     9de:	be 01       	movw	r22, r28
     9e0:	67 5f       	subi	r22, 0xF7	; 247
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	ce 01       	movw	r24, r28
     9e6:	49 96       	adiw	r24, 0x19	; 25
     9e8:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     9ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	89 27       	eor	r24, r25
     9f2:	8a 87       	std	Y+10, r24	; 0x0a
     9f4:	ae 01       	movw	r20, r28
     9f6:	4f 5f       	subi	r20, 0xFF	; 255
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	be 01       	movw	r22, r28
     9fc:	67 5f       	subi	r22, 0xF7	; 247
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	41 96       	adiw	r24, 0x11	; 17
     a04:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_fpadd_parts>
     a08:	0e 94 6e 07 	call	0xedc	; 0xedc <__pack_f>
     a0c:	a0 96       	adiw	r28, 0x20	; 32
     a0e:	e2 e0       	ldi	r30, 0x02	; 2
     a10:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__epilogue_restores__+0x20>

00000a14 <__mulsf3>:
     a14:	a0 e2       	ldi	r26, 0x20	; 32
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	e0 e1       	ldi	r30, 0x10	; 16
     a1a:	f5 e0       	ldi	r31, 0x05	; 5
     a1c:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__prologue_saves__+0x4>
     a20:	6d 8f       	std	Y+29, r22	; 0x1d
     a22:	7e 8f       	std	Y+30, r23	; 0x1e
     a24:	8f 8f       	std	Y+31, r24	; 0x1f
     a26:	98 a3       	std	Y+32, r25	; 0x20
     a28:	29 8f       	std	Y+25, r18	; 0x19
     a2a:	3a 8f       	std	Y+26, r19	; 0x1a
     a2c:	4b 8f       	std	Y+27, r20	; 0x1b
     a2e:	5c 8f       	std	Y+28, r21	; 0x1c
     a30:	be 01       	movw	r22, r28
     a32:	6f 5e       	subi	r22, 0xEF	; 239
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	ce 01       	movw	r24, r28
     a38:	4d 96       	adiw	r24, 0x1d	; 29
     a3a:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     a3e:	be 01       	movw	r22, r28
     a40:	67 5f       	subi	r22, 0xF7	; 247
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	ce 01       	movw	r24, r28
     a46:	49 96       	adiw	r24, 0x19	; 25
     a48:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     a4c:	99 89       	ldd	r25, Y+17	; 0x11
     a4e:	92 30       	cpi	r25, 0x02	; 2
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__mulsf3+0x40>
     a52:	12 c0       	rjmp	.+36     	; 0xa78 <__mulsf3+0x64>
     a54:	89 85       	ldd	r24, Y+9	; 0x09
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	08 f4       	brcc	.+2      	; 0xa5c <__mulsf3+0x48>
     a5a:	1a c0       	rjmp	.+52     	; 0xa90 <__mulsf3+0x7c>
     a5c:	94 30       	cpi	r25, 0x04	; 4
     a5e:	21 f4       	brne	.+8      	; 0xa68 <__mulsf3+0x54>
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	09 f4       	brne	.+2      	; 0xa66 <__mulsf3+0x52>
     a64:	b4 c0       	rjmp	.+360    	; 0xbce <__mulsf3+0x1ba>
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <__mulsf3+0x64>
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	21 f4       	brne	.+8      	; 0xa74 <__mulsf3+0x60>
     a6c:	92 30       	cpi	r25, 0x02	; 2
     a6e:	09 f4       	brne	.+2      	; 0xa72 <__mulsf3+0x5e>
     a70:	ae c0       	rjmp	.+348    	; 0xbce <__mulsf3+0x1ba>
     a72:	0e c0       	rjmp	.+28     	; 0xa90 <__mulsf3+0x7c>
     a74:	92 30       	cpi	r25, 0x02	; 2
     a76:	51 f4       	brne	.+20     	; 0xa8c <__mulsf3+0x78>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	2a 89       	ldd	r18, Y+18	; 0x12
     a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7e:	29 13       	cpse	r18, r25
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <__mulsf3+0x70>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	8a 8b       	std	Y+18, r24	; 0x12
     a86:	ce 01       	movw	r24, r28
     a88:	41 96       	adiw	r24, 0x11	; 17
     a8a:	a3 c0       	rjmp	.+326    	; 0xbd2 <__mulsf3+0x1be>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	51 f4       	brne	.+20     	; 0xaa4 <__mulsf3+0x90>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	2a 89       	ldd	r18, Y+18	; 0x12
     a94:	9a 85       	ldd	r25, Y+10	; 0x0a
     a96:	29 13       	cpse	r18, r25
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <__mulsf3+0x88>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	8a 87       	std	Y+10, r24	; 0x0a
     a9e:	ce 01       	movw	r24, r28
     aa0:	09 96       	adiw	r24, 0x09	; 9
     aa2:	97 c0       	rjmp	.+302    	; 0xbd2 <__mulsf3+0x1be>
     aa4:	8d 88       	ldd	r8, Y+21	; 0x15
     aa6:	9e 88       	ldd	r9, Y+22	; 0x16
     aa8:	af 88       	ldd	r10, Y+23	; 0x17
     aaa:	b8 8c       	ldd	r11, Y+24	; 0x18
     aac:	0d 85       	ldd	r16, Y+13	; 0x0d
     aae:	1e 85       	ldd	r17, Y+14	; 0x0e
     ab0:	2f 85       	ldd	r18, Y+15	; 0x0f
     ab2:	38 89       	ldd	r19, Y+16	; 0x10
     ab4:	e0 e2       	ldi	r30, 0x20	; 32
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	dc 01       	movw	r26, r24
     abe:	c1 2c       	mov	r12, r1
     ac0:	d1 2c       	mov	r13, r1
     ac2:	76 01       	movw	r14, r12
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	ba 01       	movw	r22, r20
     aca:	80 fe       	sbrs	r8, 0
     acc:	18 c0       	rjmp	.+48     	; 0xafe <__mulsf3+0xea>
     ace:	40 0f       	add	r20, r16
     ad0:	51 1f       	adc	r21, r17
     ad2:	62 1f       	adc	r22, r18
     ad4:	73 1f       	adc	r23, r19
     ad6:	8c 0d       	add	r24, r12
     ad8:	9d 1d       	adc	r25, r13
     ada:	ae 1d       	adc	r26, r14
     adc:	bf 1d       	adc	r27, r15
     ade:	41 2c       	mov	r4, r1
     ae0:	51 2c       	mov	r5, r1
     ae2:	32 01       	movw	r6, r4
     ae4:	43 94       	inc	r4
     ae6:	40 17       	cp	r20, r16
     ae8:	51 07       	cpc	r21, r17
     aea:	62 07       	cpc	r22, r18
     aec:	73 07       	cpc	r23, r19
     aee:	18 f0       	brcs	.+6      	; 0xaf6 <__mulsf3+0xe2>
     af0:	41 2c       	mov	r4, r1
     af2:	51 2c       	mov	r5, r1
     af4:	32 01       	movw	r6, r4
     af6:	84 0d       	add	r24, r4
     af8:	95 1d       	adc	r25, r5
     afa:	a6 1d       	adc	r26, r6
     afc:	b7 1d       	adc	r27, r7
     afe:	cc 0c       	add	r12, r12
     b00:	dd 1c       	adc	r13, r13
     b02:	ee 1c       	adc	r14, r14
     b04:	ff 1c       	adc	r15, r15
     b06:	37 ff       	sbrs	r19, 7
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <__mulsf3+0xfa>
     b0a:	68 94       	set
     b0c:	c0 f8       	bld	r12, 0
     b0e:	00 0f       	add	r16, r16
     b10:	11 1f       	adc	r17, r17
     b12:	22 1f       	adc	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	b6 94       	lsr	r11
     b18:	a7 94       	ror	r10
     b1a:	97 94       	ror	r9
     b1c:	87 94       	ror	r8
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	a1 f6       	brne	.-88     	; 0xaca <__mulsf3+0xb6>
     b22:	2b 89       	ldd	r18, Y+19	; 0x13
     b24:	3c 89       	ldd	r19, Y+20	; 0x14
     b26:	eb 85       	ldd	r30, Y+11	; 0x0b
     b28:	fc 85       	ldd	r31, Y+12	; 0x0c
     b2a:	2e 0f       	add	r18, r30
     b2c:	3f 1f       	adc	r19, r31
     b2e:	2e 5f       	subi	r18, 0xFE	; 254
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	3c 83       	std	Y+4, r19	; 0x04
     b34:	2b 83       	std	Y+3, r18	; 0x03
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	ea 89       	ldd	r30, Y+18	; 0x12
     b3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b3c:	e3 13       	cpse	r30, r19
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <__mulsf3+0x12e>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	2a 83       	std	Y+2, r18	; 0x02
     b44:	eb 81       	ldd	r30, Y+3	; 0x03
     b46:	fc 81       	ldd	r31, Y+4	; 0x04
     b48:	0c c0       	rjmp	.+24     	; 0xb62 <__mulsf3+0x14e>
     b4a:	80 ff       	sbrs	r24, 0
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <__mulsf3+0x144>
     b4e:	76 95       	lsr	r23
     b50:	67 95       	ror	r22
     b52:	57 95       	ror	r21
     b54:	47 95       	ror	r20
     b56:	70 68       	ori	r23, 0x80	; 128
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	b7 fd       	sbrc	r27, 7
     b64:	f2 cf       	rjmp	.-28     	; 0xb4a <__mulsf3+0x136>
     b66:	9f 01       	movw	r18, r30
     b68:	0c c0       	rjmp	.+24     	; 0xb82 <__mulsf3+0x16e>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	77 fd       	sbrc	r23, 7
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	44 0f       	add	r20, r20
     b78:	55 1f       	adc	r21, r21
     b7a:	66 1f       	adc	r22, r22
     b7c:	77 1f       	adc	r23, r23
     b7e:	21 50       	subi	r18, 0x01	; 1
     b80:	31 09       	sbc	r19, r1
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	a1 05       	cpc	r26, r1
     b86:	e0 e4       	ldi	r30, 0x40	; 64
     b88:	be 07       	cpc	r27, r30
     b8a:	78 f3       	brcs	.-34     	; 0xb6a <__mulsf3+0x156>
     b8c:	2b 83       	std	Y+3, r18	; 0x03
     b8e:	3c 83       	std	Y+4, r19	; 0x04
     b90:	8c 01       	movw	r16, r24
     b92:	9d 01       	movw	r18, r26
     b94:	0f 77       	andi	r16, 0x7F	; 127
     b96:	11 27       	eor	r17, r17
     b98:	22 27       	eor	r18, r18
     b9a:	33 27       	eor	r19, r19
     b9c:	00 34       	cpi	r16, 0x40	; 64
     b9e:	11 05       	cpc	r17, r1
     ba0:	21 05       	cpc	r18, r1
     ba2:	31 05       	cpc	r19, r1
     ba4:	59 f4       	brne	.+22     	; 0xbbc <__mulsf3+0x1a8>
     ba6:	87 fd       	sbrc	r24, 7
     ba8:	09 c0       	rjmp	.+18     	; 0xbbc <__mulsf3+0x1a8>
     baa:	45 2b       	or	r20, r21
     bac:	46 2b       	or	r20, r22
     bae:	47 2b       	or	r20, r23
     bb0:	29 f0       	breq	.+10     	; 0xbbc <__mulsf3+0x1a8>
     bb2:	80 5c       	subi	r24, 0xC0	; 192
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	af 4f       	sbci	r26, 0xFF	; 255
     bb8:	bf 4f       	sbci	r27, 0xFF	; 255
     bba:	80 78       	andi	r24, 0x80	; 128
     bbc:	8d 83       	std	Y+5, r24	; 0x05
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	af 83       	std	Y+7, r26	; 0x07
     bc2:	b8 87       	std	Y+8, r27	; 0x08
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	89 83       	std	Y+1, r24	; 0x01
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <__mulsf3+0x1be>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	0e 94 6e 07 	call	0xedc	; 0xedc <__pack_f>
     bd6:	a0 96       	adiw	r28, 0x20	; 32
     bd8:	e0 e1       	ldi	r30, 0x10	; 16
     bda:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__epilogue_restores__+0x4>

00000bde <__divsf3>:
     bde:	a8 e1       	ldi	r26, 0x18	; 24
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e5 ef       	ldi	r30, 0xF5	; 245
     be4:	f5 e0       	ldi	r31, 0x05	; 5
     be6:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__prologue_saves__+0x14>
     bea:	6d 8b       	std	Y+21, r22	; 0x15
     bec:	7e 8b       	std	Y+22, r23	; 0x16
     bee:	8f 8b       	std	Y+23, r24	; 0x17
     bf0:	98 8f       	std	Y+24, r25	; 0x18
     bf2:	29 8b       	std	Y+17, r18	; 0x11
     bf4:	3a 8b       	std	Y+18, r19	; 0x12
     bf6:	4b 8b       	std	Y+19, r20	; 0x13
     bf8:	5c 8b       	std	Y+20, r21	; 0x14
     bfa:	be 01       	movw	r22, r28
     bfc:	67 5f       	subi	r22, 0xF7	; 247
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	ce 01       	movw	r24, r28
     c02:	45 96       	adiw	r24, 0x15	; 21
     c04:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	ce 01       	movw	r24, r28
     c10:	41 96       	adiw	r24, 0x11	; 17
     c12:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     c16:	99 85       	ldd	r25, Y+9	; 0x09
     c18:	92 30       	cpi	r25, 0x02	; 2
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <__divsf3+0x40>
     c1c:	75 c0       	rjmp	.+234    	; 0xd08 <__divsf3+0x12a>
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	08 f4       	brcc	.+2      	; 0xc26 <__divsf3+0x48>
     c24:	74 c0       	rjmp	.+232    	; 0xd0e <__divsf3+0x130>
     c26:	2a 85       	ldd	r18, Y+10	; 0x0a
     c28:	3a 81       	ldd	r19, Y+2	; 0x02
     c2a:	23 27       	eor	r18, r19
     c2c:	2a 87       	std	Y+10, r18	; 0x0a
     c2e:	94 30       	cpi	r25, 0x04	; 4
     c30:	11 f0       	breq	.+4      	; 0xc36 <__divsf3+0x58>
     c32:	92 30       	cpi	r25, 0x02	; 2
     c34:	19 f4       	brne	.+6      	; 0xc3c <__divsf3+0x5e>
     c36:	98 13       	cpse	r25, r24
     c38:	67 c0       	rjmp	.+206    	; 0xd08 <__divsf3+0x12a>
     c3a:	6c c0       	rjmp	.+216    	; 0xd14 <__divsf3+0x136>
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	39 f4       	brne	.+14     	; 0xc4e <__divsf3+0x70>
     c40:	1d 86       	std	Y+13, r1	; 0x0d
     c42:	1e 86       	std	Y+14, r1	; 0x0e
     c44:	1f 86       	std	Y+15, r1	; 0x0f
     c46:	18 8a       	std	Y+16, r1	; 0x10
     c48:	1c 86       	std	Y+12, r1	; 0x0c
     c4a:	1b 86       	std	Y+11, r1	; 0x0b
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <__divsf3+0x78>
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	29 f4       	brne	.+10     	; 0xc5c <__divsf3+0x7e>
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	89 87       	std	Y+9, r24	; 0x09
     c56:	ce 01       	movw	r24, r28
     c58:	09 96       	adiw	r24, 0x09	; 9
     c5a:	5e c0       	rjmp	.+188    	; 0xd18 <__divsf3+0x13a>
     c5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	82 1b       	sub	r24, r18
     c66:	93 0b       	sbc	r25, r19
     c68:	9c 87       	std	Y+12, r25	; 0x0c
     c6a:	8b 87       	std	Y+11, r24	; 0x0b
     c6c:	4d 85       	ldd	r20, Y+13	; 0x0d
     c6e:	5e 85       	ldd	r21, Y+14	; 0x0e
     c70:	6f 85       	ldd	r22, Y+15	; 0x0f
     c72:	78 89       	ldd	r23, Y+16	; 0x10
     c74:	cd 80       	ldd	r12, Y+5	; 0x05
     c76:	de 80       	ldd	r13, Y+6	; 0x06
     c78:	ef 80       	ldd	r14, Y+7	; 0x07
     c7a:	f8 84       	ldd	r15, Y+8	; 0x08
     c7c:	4c 15       	cp	r20, r12
     c7e:	5d 05       	cpc	r21, r13
     c80:	6e 05       	cpc	r22, r14
     c82:	7f 05       	cpc	r23, r15
     c84:	38 f4       	brcc	.+14     	; 0xc94 <__divsf3+0xb6>
     c86:	44 0f       	add	r20, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	66 1f       	adc	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	9c 87       	std	Y+12, r25	; 0x0c
     c92:	8b 87       	std	Y+11, r24	; 0x0b
     c94:	ef e1       	ldi	r30, 0x1F	; 31
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e4       	ldi	r19, 0x40	; 64
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	dc 01       	movw	r26, r24
     ca6:	4c 15       	cp	r20, r12
     ca8:	5d 05       	cpc	r21, r13
     caa:	6e 05       	cpc	r22, r14
     cac:	7f 05       	cpc	r23, r15
     cae:	40 f0       	brcs	.+16     	; 0xcc0 <__divsf3+0xe2>
     cb0:	80 2b       	or	r24, r16
     cb2:	91 2b       	or	r25, r17
     cb4:	a2 2b       	or	r26, r18
     cb6:	b3 2b       	or	r27, r19
     cb8:	4c 19       	sub	r20, r12
     cba:	5d 09       	sbc	r21, r13
     cbc:	6e 09       	sbc	r22, r14
     cbe:	7f 09       	sbc	r23, r15
     cc0:	36 95       	lsr	r19
     cc2:	27 95       	ror	r18
     cc4:	17 95       	ror	r17
     cc6:	07 95       	ror	r16
     cc8:	44 0f       	add	r20, r20
     cca:	55 1f       	adc	r21, r21
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	49 f7       	brne	.-46     	; 0xca6 <__divsf3+0xc8>
     cd4:	8c 01       	movw	r16, r24
     cd6:	9d 01       	movw	r18, r26
     cd8:	0f 77       	andi	r16, 0x7F	; 127
     cda:	11 27       	eor	r17, r17
     cdc:	22 27       	eor	r18, r18
     cde:	33 27       	eor	r19, r19
     ce0:	00 34       	cpi	r16, 0x40	; 64
     ce2:	11 05       	cpc	r17, r1
     ce4:	21 05       	cpc	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	59 f4       	brne	.+22     	; 0xd00 <__divsf3+0x122>
     cea:	87 fd       	sbrc	r24, 7
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <__divsf3+0x122>
     cee:	45 2b       	or	r20, r21
     cf0:	46 2b       	or	r20, r22
     cf2:	47 2b       	or	r20, r23
     cf4:	29 f0       	breq	.+10     	; 0xd00 <__divsf3+0x122>
     cf6:	80 5c       	subi	r24, 0xC0	; 192
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	af 4f       	sbci	r26, 0xFF	; 255
     cfc:	bf 4f       	sbci	r27, 0xFF	; 255
     cfe:	80 78       	andi	r24, 0x80	; 128
     d00:	8d 87       	std	Y+13, r24	; 0x0d
     d02:	9e 87       	std	Y+14, r25	; 0x0e
     d04:	af 87       	std	Y+15, r26	; 0x0f
     d06:	b8 8b       	std	Y+16, r27	; 0x10
     d08:	ce 01       	movw	r24, r28
     d0a:	09 96       	adiw	r24, 0x09	; 9
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <__divsf3+0x13a>
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <__divsf3+0x13a>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	0e 94 6e 07 	call	0xedc	; 0xedc <__pack_f>
     d1c:	68 96       	adiw	r28, 0x18	; 24
     d1e:	e8 e0       	ldi	r30, 0x08	; 8
     d20:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__epilogue_restores__+0x14>

00000d24 <__gtsf2>:
     d24:	a8 e1       	ldi	r26, 0x18	; 24
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e9       	ldi	r30, 0x98	; 152
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__prologue_saves__+0x20>
     d30:	6d 8b       	std	Y+21, r22	; 0x15
     d32:	7e 8b       	std	Y+22, r23	; 0x16
     d34:	8f 8b       	std	Y+23, r24	; 0x17
     d36:	98 8f       	std	Y+24, r25	; 0x18
     d38:	29 8b       	std	Y+17, r18	; 0x11
     d3a:	3a 8b       	std	Y+18, r19	; 0x12
     d3c:	4b 8b       	std	Y+19, r20	; 0x13
     d3e:	5c 8b       	std	Y+20, r21	; 0x14
     d40:	be 01       	movw	r22, r28
     d42:	67 5f       	subi	r22, 0xF7	; 247
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	ce 01       	movw	r24, r28
     d48:	45 96       	adiw	r24, 0x15	; 21
     d4a:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     d4e:	be 01       	movw	r22, r28
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	ce 01       	movw	r24, r28
     d56:	41 96       	adiw	r24, 0x11	; 17
     d58:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	58 f0       	brcs	.+22     	; 0xd78 <__gtsf2+0x54>
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	40 f0       	brcs	.+16     	; 0xd78 <__gtsf2+0x54>
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	ce 01       	movw	r24, r28
     d70:	09 96       	adiw	r24, 0x09	; 9
     d72:	0e 94 a7 08 	call	0x114e	; 0x114e <__fpcmp_parts_f>
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <__gtsf2+0x56>
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	68 96       	adiw	r28, 0x18	; 24
     d7c:	e2 e0       	ldi	r30, 0x02	; 2
     d7e:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__epilogue_restores__+0x20>

00000d82 <__gesf2>:
     d82:	a8 e1       	ldi	r26, 0x18	; 24
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e7 ec       	ldi	r30, 0xC7	; 199
     d88:	f6 e0       	ldi	r31, 0x06	; 6
     d8a:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__prologue_saves__+0x20>
     d8e:	6d 8b       	std	Y+21, r22	; 0x15
     d90:	7e 8b       	std	Y+22, r23	; 0x16
     d92:	8f 8b       	std	Y+23, r24	; 0x17
     d94:	98 8f       	std	Y+24, r25	; 0x18
     d96:	29 8b       	std	Y+17, r18	; 0x11
     d98:	3a 8b       	std	Y+18, r19	; 0x12
     d9a:	4b 8b       	std	Y+19, r20	; 0x13
     d9c:	5c 8b       	std	Y+20, r21	; 0x14
     d9e:	be 01       	movw	r22, r28
     da0:	67 5f       	subi	r22, 0xF7	; 247
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	ce 01       	movw	r24, r28
     da6:	45 96       	adiw	r24, 0x15	; 21
     da8:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     dac:	be 01       	movw	r22, r28
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	ce 01       	movw	r24, r28
     db4:	41 96       	adiw	r24, 0x11	; 17
     db6:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     dba:	89 85       	ldd	r24, Y+9	; 0x09
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	58 f0       	brcs	.+22     	; 0xdd6 <__gesf2+0x54>
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	40 f0       	brcs	.+16     	; 0xdd6 <__gesf2+0x54>
     dc6:	be 01       	movw	r22, r28
     dc8:	6f 5f       	subi	r22, 0xFF	; 255
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	ce 01       	movw	r24, r28
     dce:	09 96       	adiw	r24, 0x09	; 9
     dd0:	0e 94 a7 08 	call	0x114e	; 0x114e <__fpcmp_parts_f>
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <__gesf2+0x56>
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	68 96       	adiw	r28, 0x18	; 24
     dda:	e2 e0       	ldi	r30, 0x02	; 2
     ddc:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__epilogue_restores__+0x20>

00000de0 <__ltsf2>:
     de0:	a8 e1       	ldi	r26, 0x18	; 24
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e6 ef       	ldi	r30, 0xF6	; 246
     de6:	f6 e0       	ldi	r31, 0x06	; 6
     de8:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__prologue_saves__+0x20>
     dec:	6d 8b       	std	Y+21, r22	; 0x15
     dee:	7e 8b       	std	Y+22, r23	; 0x16
     df0:	8f 8b       	std	Y+23, r24	; 0x17
     df2:	98 8f       	std	Y+24, r25	; 0x18
     df4:	29 8b       	std	Y+17, r18	; 0x11
     df6:	3a 8b       	std	Y+18, r19	; 0x12
     df8:	4b 8b       	std	Y+19, r20	; 0x13
     dfa:	5c 8b       	std	Y+20, r21	; 0x14
     dfc:	be 01       	movw	r22, r28
     dfe:	67 5f       	subi	r22, 0xF7	; 247
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	ce 01       	movw	r24, r28
     e04:	45 96       	adiw	r24, 0x15	; 21
     e06:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	41 96       	adiw	r24, 0x11	; 17
     e14:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	58 f0       	brcs	.+22     	; 0xe34 <__ltsf2+0x54>
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	40 f0       	brcs	.+16     	; 0xe34 <__ltsf2+0x54>
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	ce 01       	movw	r24, r28
     e2c:	09 96       	adiw	r24, 0x09	; 9
     e2e:	0e 94 a7 08 	call	0x114e	; 0x114e <__fpcmp_parts_f>
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <__ltsf2+0x56>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	68 96       	adiw	r28, 0x18	; 24
     e38:	e2 e0       	ldi	r30, 0x02	; 2
     e3a:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__epilogue_restores__+0x20>

00000e3e <__fixsfsi>:
     e3e:	ac e0       	ldi	r26, 0x0C	; 12
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e2       	ldi	r30, 0x25	; 37
     e44:	f7 e0       	ldi	r31, 0x07	; 7
     e46:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__prologue_saves__+0x1c>
     e4a:	69 87       	std	Y+9, r22	; 0x09
     e4c:	7a 87       	std	Y+10, r23	; 0x0a
     e4e:	8b 87       	std	Y+11, r24	; 0x0b
     e50:	9c 87       	std	Y+12, r25	; 0x0c
     e52:	be 01       	movw	r22, r28
     e54:	6f 5f       	subi	r22, 0xFF	; 255
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	ce 01       	movw	r24, r28
     e5a:	09 96       	adiw	r24, 0x09	; 9
     e5c:	0e 94 38 08 	call	0x1070	; 0x1070 <__unpack_f>
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	91 f1       	breq	.+100    	; 0xeca <__fixsfsi+0x8c>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	80 f1       	brcs	.+96     	; 0xeca <__fixsfsi+0x8c>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	41 f4       	brne	.+16     	; 0xe7e <__fixsfsi+0x40>
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	88 23       	and	r24, r24
     e72:	31 f1       	breq	.+76     	; 0xec0 <__fixsfsi+0x82>
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e8       	ldi	r19, 0x80	; 128
     e7c:	29 c0       	rjmp	.+82     	; 0xed0 <__fixsfsi+0x92>
     e7e:	2b 81       	ldd	r18, Y+3	; 0x03
     e80:	3c 81       	ldd	r19, Y+4	; 0x04
     e82:	37 fd       	sbrc	r19, 7
     e84:	22 c0       	rjmp	.+68     	; 0xeca <__fixsfsi+0x8c>
     e86:	2f 31       	cpi	r18, 0x1F	; 31
     e88:	31 05       	cpc	r19, r1
     e8a:	8c f7       	brge	.-30     	; 0xe6e <__fixsfsi+0x30>
     e8c:	8e e1       	ldi	r24, 0x1E	; 30
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	82 1b       	sub	r24, r18
     e92:	93 0b       	sbc	r25, r19
     e94:	0d 81       	ldd	r16, Y+5	; 0x05
     e96:	1e 81       	ldd	r17, Y+6	; 0x06
     e98:	2f 81       	ldd	r18, Y+7	; 0x07
     e9a:	38 85       	ldd	r19, Y+8	; 0x08
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <__fixsfsi+0x68>
     e9e:	36 95       	lsr	r19
     ea0:	27 95       	ror	r18
     ea2:	17 95       	ror	r17
     ea4:	07 95       	ror	r16
     ea6:	8a 95       	dec	r24
     ea8:	d2 f7       	brpl	.-12     	; 0xe9e <__fixsfsi+0x60>
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	88 23       	and	r24, r24
     eae:	81 f0       	breq	.+32     	; 0xed0 <__fixsfsi+0x92>
     eb0:	30 95       	com	r19
     eb2:	20 95       	com	r18
     eb4:	10 95       	com	r17
     eb6:	01 95       	neg	r16
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	2f 4f       	sbci	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <__fixsfsi+0x92>
     ec0:	0f ef       	ldi	r16, 0xFF	; 255
     ec2:	1f ef       	ldi	r17, 0xFF	; 255
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	3f e7       	ldi	r19, 0x7F	; 127
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <__fixsfsi+0x92>
     eca:	00 e0       	ldi	r16, 0x00	; 0
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	98 01       	movw	r18, r16
     ed0:	b8 01       	movw	r22, r16
     ed2:	c9 01       	movw	r24, r18
     ed4:	2c 96       	adiw	r28, 0x0c	; 12
     ed6:	e4 e0       	ldi	r30, 0x04	; 4
     ed8:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__epilogue_restores__+0x1c>

00000edc <__pack_f>:
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	dc 01       	movw	r26, r24
     ee6:	14 96       	adiw	r26, 0x04	; 4
     ee8:	4d 91       	ld	r20, X+
     eea:	5d 91       	ld	r21, X+
     eec:	6d 91       	ld	r22, X+
     eee:	7c 91       	ld	r23, X
     ef0:	17 97       	sbiw	r26, 0x07	; 7
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	ec 91       	ld	r30, X
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	8c 91       	ld	r24, X
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	20 f4       	brcc	.+8      	; 0xf06 <__pack_f+0x2a>
     efe:	60 61       	ori	r22, 0x10	; 16
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a6 c0       	rjmp	.+332    	; 0x1052 <__pack_f+0x176>
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	09 f4       	brne	.+2      	; 0xf0c <__pack_f+0x30>
     f0a:	9e c0       	rjmp	.+316    	; 0x1048 <__pack_f+0x16c>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__pack_f+0x36>
     f10:	95 c0       	rjmp	.+298    	; 0x103c <__pack_f+0x160>
     f12:	41 15       	cp	r20, r1
     f14:	51 05       	cpc	r21, r1
     f16:	61 05       	cpc	r22, r1
     f18:	71 05       	cpc	r23, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <__pack_f+0x42>
     f1c:	92 c0       	rjmp	.+292    	; 0x1042 <__pack_f+0x166>
     f1e:	12 96       	adiw	r26, 0x02	; 2
     f20:	2d 91       	ld	r18, X+
     f22:	3c 91       	ld	r19, X
     f24:	13 97       	sbiw	r26, 0x03	; 3
     f26:	22 38       	cpi	r18, 0x82	; 130
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	38 07       	cpc	r19, r24
     f2c:	0c f0       	brlt	.+2      	; 0xf30 <__pack_f+0x54>
     f2e:	58 c0       	rjmp	.+176    	; 0xfe0 <__pack_f+0x104>
     f30:	c2 e8       	ldi	r28, 0x82	; 130
     f32:	df ef       	ldi	r29, 0xFF	; 255
     f34:	c2 1b       	sub	r28, r18
     f36:	d3 0b       	sbc	r29, r19
     f38:	ca 31       	cpi	r28, 0x1A	; 26
     f3a:	d1 05       	cpc	r29, r1
     f3c:	6c f5       	brge	.+90     	; 0xf98 <__pack_f+0xbc>
     f3e:	8a 01       	movw	r16, r20
     f40:	9b 01       	movw	r18, r22
     f42:	0c 2e       	mov	r0, r28
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <__pack_f+0x72>
     f46:	36 95       	lsr	r19
     f48:	27 95       	ror	r18
     f4a:	17 95       	ror	r17
     f4c:	07 95       	ror	r16
     f4e:	0a 94       	dec	r0
     f50:	d2 f7       	brpl	.-12     	; 0xf46 <__pack_f+0x6a>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	0c 2e       	mov	r0, r28
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <__pack_f+0x8a>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	aa 1f       	adc	r26, r26
     f64:	bb 1f       	adc	r27, r27
     f66:	0a 94       	dec	r0
     f68:	d2 f7       	brpl	.-12     	; 0xf5e <__pack_f+0x82>
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	a1 09       	sbc	r26, r1
     f6e:	b1 09       	sbc	r27, r1
     f70:	84 23       	and	r24, r20
     f72:	95 23       	and	r25, r21
     f74:	a6 23       	and	r26, r22
     f76:	b7 23       	and	r27, r23
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	89 2b       	or	r24, r25
     f82:	8a 2b       	or	r24, r26
     f84:	8b 2b       	or	r24, r27
     f86:	19 f4       	brne	.+6      	; 0xf8e <__pack_f+0xb2>
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	ba 01       	movw	r22, r20
     f8e:	40 2b       	or	r20, r16
     f90:	51 2b       	or	r21, r17
     f92:	62 2b       	or	r22, r18
     f94:	73 2b       	or	r23, r19
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <__pack_f+0xc2>
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	ba 01       	movw	r22, r20
     f9e:	db 01       	movw	r26, r22
     fa0:	ca 01       	movw	r24, r20
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	99 27       	eor	r25, r25
     fa6:	aa 27       	eor	r26, r26
     fa8:	bb 27       	eor	r27, r27
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xe6>
     fb4:	47 ff       	sbrs	r20, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xee>
     fb8:	40 5c       	subi	r20, 0xC0	; 192
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	6f 4f       	sbci	r22, 0xFF	; 255
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xee>
     fc2:	41 5c       	subi	r20, 0xC1	; 193
     fc4:	5f 4f       	sbci	r21, 0xFF	; 255
     fc6:	6f 4f       	sbci	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	41 15       	cp	r20, r1
     fd0:	51 05       	cpc	r21, r1
     fd2:	61 05       	cpc	r22, r1
     fd4:	20 e4       	ldi	r18, 0x40	; 64
     fd6:	72 07       	cpc	r23, r18
     fd8:	48 f5       	brcc	.+82     	; 0x102c <__pack_f+0x150>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	26 c0       	rjmp	.+76     	; 0x102c <__pack_f+0x150>
     fe0:	20 38       	cpi	r18, 0x80	; 128
     fe2:	31 05       	cpc	r19, r1
     fe4:	8c f5       	brge	.+98     	; 0x1048 <__pack_f+0x16c>
     fe6:	db 01       	movw	r26, r22
     fe8:	ca 01       	movw	r24, r20
     fea:	8f 77       	andi	r24, 0x7F	; 127
     fec:	99 27       	eor	r25, r25
     fee:	aa 27       	eor	r26, r26
     ff0:	bb 27       	eor	r27, r27
     ff2:	80 34       	cpi	r24, 0x40	; 64
     ff4:	91 05       	cpc	r25, r1
     ff6:	a1 05       	cpc	r26, r1
     ff8:	b1 05       	cpc	r27, r1
     ffa:	39 f4       	brne	.+14     	; 0x100a <__pack_f+0x12e>
     ffc:	47 ff       	sbrs	r20, 7
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <__pack_f+0x136>
    1000:	40 5c       	subi	r20, 0xC0	; 192
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	6f 4f       	sbci	r22, 0xFF	; 255
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <__pack_f+0x136>
    100a:	41 5c       	subi	r20, 0xC1	; 193
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	6f 4f       	sbci	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	77 fd       	sbrc	r23, 7
    1014:	04 c0       	rjmp	.+8      	; 0x101e <__pack_f+0x142>
    1016:	c9 01       	movw	r24, r18
    1018:	81 58       	subi	r24, 0x81	; 129
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	07 c0       	rjmp	.+14     	; 0x102c <__pack_f+0x150>
    101e:	76 95       	lsr	r23
    1020:	67 95       	ror	r22
    1022:	57 95       	ror	r21
    1024:	47 95       	ror	r20
    1026:	c9 01       	movw	r24, r18
    1028:	80 58       	subi	r24, 0x80	; 128
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	76 95       	lsr	r23
    1030:	67 95       	ror	r22
    1032:	57 95       	ror	r21
    1034:	47 95       	ror	r20
    1036:	9a 95       	dec	r25
    1038:	d1 f7       	brne	.-12     	; 0x102e <__pack_f+0x152>
    103a:	0b c0       	rjmp	.+22     	; 0x1052 <__pack_f+0x176>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	05 c0       	rjmp	.+10     	; 0x104c <__pack_f+0x170>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <__pack_f+0x176>
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	ba 01       	movw	r22, r20
    1052:	98 2f       	mov	r25, r24
    1054:	96 95       	lsr	r25
    1056:	e0 fb       	bst	r30, 0
    1058:	97 f9       	bld	r25, 7
    105a:	36 2f       	mov	r19, r22
    105c:	80 fb       	bst	r24, 0
    105e:	37 f9       	bld	r19, 7
    1060:	64 2f       	mov	r22, r20
    1062:	75 2f       	mov	r23, r21
    1064:	83 2f       	mov	r24, r19
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <__unpack_f>:
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	dc 01       	movw	r26, r24
    1078:	fb 01       	movw	r30, r22
    107a:	cc 90       	ld	r12, X
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	dc 90       	ld	r13, X
    1080:	11 97       	sbiw	r26, 0x01	; 1
    1082:	12 96       	adiw	r26, 0x02	; 2
    1084:	8c 91       	ld	r24, X
    1086:	12 97       	sbiw	r26, 0x02	; 2
    1088:	3f e7       	ldi	r19, 0x7F	; 127
    108a:	e3 2e       	mov	r14, r19
    108c:	e8 22       	and	r14, r24
    108e:	6e 2d       	mov	r22, r14
    1090:	a6 01       	movw	r20, r12
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	98 2f       	mov	r25, r24
    1096:	99 1f       	adc	r25, r25
    1098:	99 27       	eor	r25, r25
    109a:	99 1f       	adc	r25, r25
    109c:	13 96       	adiw	r26, 0x03	; 3
    109e:	2c 91       	ld	r18, X
    10a0:	82 2f       	mov	r24, r18
    10a2:	88 0f       	add	r24, r24
    10a4:	89 2b       	or	r24, r25
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	27 fb       	bst	r18, 7
    10aa:	22 27       	eor	r18, r18
    10ac:	20 f9       	bld	r18, 0
    10ae:	21 83       	std	Z+1, r18	; 0x01
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	29 f5       	brne	.+74     	; 0x10fe <__unpack_f+0x8e>
    10b4:	41 15       	cp	r20, r1
    10b6:	51 05       	cpc	r21, r1
    10b8:	61 05       	cpc	r22, r1
    10ba:	71 05       	cpc	r23, r1
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <__unpack_f+0x52>
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	27 c0       	rjmp	.+78     	; 0x1110 <__unpack_f+0xa0>
    10c2:	82 e8       	ldi	r24, 0x82	; 130
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	93 83       	std	Z+3, r25	; 0x03
    10c8:	82 83       	std	Z+2, r24	; 0x02
    10ca:	27 e0       	ldi	r18, 0x07	; 7
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	66 1f       	adc	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	2a 95       	dec	r18
    10d6:	d1 f7       	brne	.-12     	; 0x10cc <__unpack_f+0x5c>
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	80 83       	st	Z, r24
    10dc:	09 c0       	rjmp	.+18     	; 0x10f0 <__unpack_f+0x80>
    10de:	44 0f       	add	r20, r20
    10e0:	55 1f       	adc	r21, r21
    10e2:	66 1f       	adc	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	93 83       	std	Z+3, r25	; 0x03
    10ee:	82 83       	std	Z+2, r24	; 0x02
    10f0:	41 15       	cp	r20, r1
    10f2:	51 05       	cpc	r21, r1
    10f4:	61 05       	cpc	r22, r1
    10f6:	80 e4       	ldi	r24, 0x40	; 64
    10f8:	78 07       	cpc	r23, r24
    10fa:	88 f3       	brcs	.-30     	; 0x10de <__unpack_f+0x6e>
    10fc:	20 c0       	rjmp	.+64     	; 0x113e <__unpack_f+0xce>
    10fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1100:	91 05       	cpc	r25, r1
    1102:	79 f4       	brne	.+30     	; 0x1122 <__unpack_f+0xb2>
    1104:	41 15       	cp	r20, r1
    1106:	51 05       	cpc	r21, r1
    1108:	61 05       	cpc	r22, r1
    110a:	71 05       	cpc	r23, r1
    110c:	19 f4       	brne	.+6      	; 0x1114 <__unpack_f+0xa4>
    110e:	84 e0       	ldi	r24, 0x04	; 4
    1110:	80 83       	st	Z, r24
    1112:	19 c0       	rjmp	.+50     	; 0x1146 <__unpack_f+0xd6>
    1114:	e4 fe       	sbrs	r14, 4
    1116:	03 c0       	rjmp	.+6      	; 0x111e <__unpack_f+0xae>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 83       	st	Z, r24
    111c:	10 c0       	rjmp	.+32     	; 0x113e <__unpack_f+0xce>
    111e:	10 82       	st	Z, r1
    1120:	0e c0       	rjmp	.+28     	; 0x113e <__unpack_f+0xce>
    1122:	8f 57       	subi	r24, 0x7F	; 127
    1124:	91 09       	sbc	r25, r1
    1126:	93 83       	std	Z+3, r25	; 0x03
    1128:	82 83       	std	Z+2, r24	; 0x02
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	80 83       	st	Z, r24
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	44 0f       	add	r20, r20
    1132:	55 1f       	adc	r21, r21
    1134:	66 1f       	adc	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	8a 95       	dec	r24
    113a:	d1 f7       	brne	.-12     	; 0x1130 <__unpack_f+0xc0>
    113c:	70 64       	ori	r23, 0x40	; 64
    113e:	44 83       	std	Z+4, r20	; 0x04
    1140:	55 83       	std	Z+5, r21	; 0x05
    1142:	66 83       	std	Z+6, r22	; 0x06
    1144:	77 83       	std	Z+7, r23	; 0x07
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <__fpcmp_parts_f>:
    114e:	cf 93       	push	r28
    1150:	fc 01       	movw	r30, r24
    1152:	db 01       	movw	r26, r22
    1154:	90 81       	ld	r25, Z
    1156:	92 30       	cpi	r25, 0x02	; 2
    1158:	08 f4       	brcc	.+2      	; 0x115c <__fpcmp_parts_f+0xe>
    115a:	52 c0       	rjmp	.+164    	; 0x1200 <__fpcmp_parts_f+0xb2>
    115c:	8c 91       	ld	r24, X
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__fpcmp_parts_f+0x16>
    1162:	4e c0       	rjmp	.+156    	; 0x1200 <__fpcmp_parts_f+0xb2>
    1164:	94 30       	cpi	r25, 0x04	; 4
    1166:	71 f4       	brne	.+28     	; 0x1184 <__fpcmp_parts_f+0x36>
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	39 f4       	brne	.+14     	; 0x117a <__fpcmp_parts_f+0x2c>
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	2c 91       	ld	r18, X
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 81       	ldd	r24, Z+1	; 0x01
    1174:	28 1b       	sub	r18, r24
    1176:	31 09       	sbc	r19, r1
    1178:	48 c0       	rjmp	.+144    	; 0x120a <__fpcmp_parts_f+0xbc>
    117a:	81 81       	ldd	r24, Z+1	; 0x01
    117c:	88 23       	and	r24, r24
    117e:	09 f4       	brne	.+2      	; 0x1182 <__fpcmp_parts_f+0x34>
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <__fpcmp_parts_f+0xb2>
    1182:	3b c0       	rjmp	.+118    	; 0x11fa <__fpcmp_parts_f+0xac>
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	29 f4       	brne	.+10     	; 0x1192 <__fpcmp_parts_f+0x44>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	8c 91       	ld	r24, X
    118c:	81 11       	cpse	r24, r1
    118e:	38 c0       	rjmp	.+112    	; 0x1200 <__fpcmp_parts_f+0xb2>
    1190:	34 c0       	rjmp	.+104    	; 0x11fa <__fpcmp_parts_f+0xac>
    1192:	92 30       	cpi	r25, 0x02	; 2
    1194:	19 f4       	brne	.+6      	; 0x119c <__fpcmp_parts_f+0x4e>
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	b9 f7       	brne	.-18     	; 0x1188 <__fpcmp_parts_f+0x3a>
    119a:	35 c0       	rjmp	.+106    	; 0x1206 <__fpcmp_parts_f+0xb8>
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	69 f3       	breq	.-38     	; 0x117a <__fpcmp_parts_f+0x2c>
    11a0:	c1 81       	ldd	r28, Z+1	; 0x01
    11a2:	11 96       	adiw	r26, 0x01	; 1
    11a4:	8c 91       	ld	r24, X
    11a6:	11 97       	sbiw	r26, 0x01	; 1
    11a8:	c8 13       	cpse	r28, r24
    11aa:	1d c0       	rjmp	.+58     	; 0x11e6 <__fpcmp_parts_f+0x98>
    11ac:	22 81       	ldd	r18, Z+2	; 0x02
    11ae:	33 81       	ldd	r19, Z+3	; 0x03
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	13 97       	sbiw	r26, 0x03	; 3
    11b8:	82 17       	cp	r24, r18
    11ba:	93 07       	cpc	r25, r19
    11bc:	0c f4       	brge	.+2      	; 0x11c0 <__fpcmp_parts_f+0x72>
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <__fpcmp_parts_f+0x98>
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	0c f4       	brge	.+2      	; 0x11c8 <__fpcmp_parts_f+0x7a>
    11c6:	17 c0       	rjmp	.+46     	; 0x11f6 <__fpcmp_parts_f+0xa8>
    11c8:	44 81       	ldd	r20, Z+4	; 0x04
    11ca:	55 81       	ldd	r21, Z+5	; 0x05
    11cc:	66 81       	ldd	r22, Z+6	; 0x06
    11ce:	77 81       	ldd	r23, Z+7	; 0x07
    11d0:	14 96       	adiw	r26, 0x04	; 4
    11d2:	8d 91       	ld	r24, X+
    11d4:	9d 91       	ld	r25, X+
    11d6:	0d 90       	ld	r0, X+
    11d8:	bc 91       	ld	r27, X
    11da:	a0 2d       	mov	r26, r0
    11dc:	84 17       	cp	r24, r20
    11de:	95 07       	cpc	r25, r21
    11e0:	a6 07       	cpc	r26, r22
    11e2:	b7 07       	cpc	r27, r23
    11e4:	18 f4       	brcc	.+6      	; 0x11ec <__fpcmp_parts_f+0x9e>
    11e6:	c1 11       	cpse	r28, r1
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <__fpcmp_parts_f+0xac>
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <__fpcmp_parts_f+0xb2>
    11ec:	48 17       	cp	r20, r24
    11ee:	59 07       	cpc	r21, r25
    11f0:	6a 07       	cpc	r22, r26
    11f2:	7b 07       	cpc	r23, r27
    11f4:	40 f4       	brcc	.+16     	; 0x1206 <__fpcmp_parts_f+0xb8>
    11f6:	c1 11       	cpse	r28, r1
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <__fpcmp_parts_f+0xb2>
    11fa:	2f ef       	ldi	r18, 0xFF	; 255
    11fc:	3f ef       	ldi	r19, 0xFF	; 255
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <__fpcmp_parts_f+0xbc>
    1200:	21 e0       	ldi	r18, 0x01	; 1
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__fpcmp_parts_f+0xbc>
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	c9 01       	movw	r24, r18
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <main>:
#include <Sabertooth.h>
#include <Mega2560.h>

int main(void)
{
    nextState = NOINTERRUPT;
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	80 93 76 02 	sts	0x0276, r24
    unsigned char currentState = 0;
    1216:	c0 e0       	ldi	r28, 0x00	; 0

    while(1){
        if(nextState != NOINTERRUPT){
    1218:	80 91 76 02 	lds	r24, 0x0276
    121c:	8f 3f       	cpi	r24, 0xFF	; 255
    121e:	11 f0       	breq	.+4      	; 0x1224 <main+0x14>
            currentState = nextState;
    1220:	c0 91 76 02 	lds	r28, 0x0276
        }
        switch(currentState){
    1224:	c1 30       	cpi	r28, 0x01	; 1
    1226:	c9 f0       	breq	.+50     	; 0x125a <main+0x4a>
    1228:	c1 30       	cpi	r28, 0x01	; 1
    122a:	a8 f5       	brcc	.+106    	; 0x1296 <main+0x86>
            case INITIALIZATION:
                Initialize_Mega2560();
    122c:	0e 94 95 00 	call	0x12a	; 0x12a <Initialize_Mega2560>
                Initialize_USART0(9600);   //Fastest Stable Clock is 38400
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	86 e1       	ldi	r24, 0x16	; 22
    1236:	96 e4       	ldi	r25, 0x46	; 70
    1238:	0e 94 7e 02 	call	0x4fc	; 0x4fc <Initialize_USART0>
                Initialize_USART1(9600);
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	86 e1       	ldi	r24, 0x16	; 22
    1242:	96 e4       	ldi	r25, 0x46	; 70
    1244:	0e 94 c7 02 	call	0x58e	; 0x58e <Initialize_USART1>
                Initialize_Sabertooth();
    1248:	0e 94 ef 00 	call	0x1de	; 0x1de <Initialize_Sabertooth>
                currentState = WAITFORHOST;
    124c:	c1 e0       	ldi	r28, 0x01	; 1
{
    nextState = NOINTERRUPT;
    unsigned char currentState = 0;

    while(1){
        if(nextState != NOINTERRUPT){
    124e:	80 91 76 02 	lds	r24, 0x0276
    1252:	8f 3f       	cpi	r24, 0xFF	; 255
    1254:	29 f7       	brne	.-54     	; 0x1220 <main+0x10>
            currentState = nextState;
        }
        switch(currentState){
    1256:	c1 30       	cpi	r28, 0x01	; 1
    1258:	39 f7       	brne	.-50     	; 0x1228 <main+0x18>
                Initialize_Sabertooth();
                currentState = WAITFORHOST;
                break;

            case WAITFORHOST:
                cli();
    125a:	f8 94       	cli
                SendStringUSART0((unsigned char *)"ID: MainDrive\r\n");
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	0e 94 af 02 	call	0x55e	; 0x55e <SendStringUSART0>
                if(GetByteUART() == 'D'){
    1264:	0e 94 be 02 	call	0x57c	; 0x57c <GetByteUART>
    1268:	84 34       	cpi	r24, 0x44	; 68
    126a:	29 f1       	breq	.+74     	; 0x12b6 <main+0xa6>
                    SendStringUSART0((unsigned char *)"Master Found. Switching to Drive Mode.\r\n");
                    currentState = DRIVING;
                    sei();
                    break;
                }
                Mega2560_delay_ms(500);
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	8a ef       	ldi	r24, 0xFA	; 250
    1272:	93 e4       	ldi	r25, 0x43	; 67
    1274:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
                PORTB |= (1<<PB7);
    1278:	2f 9a       	sbi	0x05, 7	; 5
                Mega2560_delay_ms(100);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	92 e4       	ldi	r25, 0x42	; 66
    1282:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
                PORTB &= ~(1<<PB7);
    1286:	2f 98       	cbi	0x05, 7	; 5
                Mega2560_delay_ms(100);
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	92 e4       	ldi	r25, 0x42	; 66
    1290:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
                break;
    1294:	c1 cf       	rjmp	.-126    	; 0x1218 <main+0x8>

    while(1){
        if(nextState != NOINTERRUPT){
            currentState = nextState;
        }
        switch(currentState){
    1296:	c2 30       	cpi	r28, 0x02	; 2
    1298:	09 f0       	breq	.+2      	; 0x129c <main+0x8c>
    129a:	be cf       	rjmp	.-132    	; 0x1218 <main+0x8>
                PORTB &= ~(1<<PB7);
                Mega2560_delay_ms(100);
                break;

            case DRIVING:
                Sabertooth_DriveTest();
    129c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Sabertooth_DriveTest>
                if(GetByteUART() == 'S'){
    12a0:	0e 94 be 02 	call	0x57c	; 0x57c <GetByteUART>
    12a4:	83 35       	cpi	r24, 0x53	; 83
    12a6:	09 f0       	breq	.+2      	; 0x12aa <main+0x9a>
    12a8:	b7 cf       	rjmp	.-146    	; 0x1218 <main+0x8>
                    SendStringUSART0((unsigned char *)"Stop Command Received.\r\n");
    12aa:	81 e4       	ldi	r24, 0x41	; 65
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	0e 94 af 02 	call	0x55e	; 0x55e <SendStringUSART0>
                    currentState = WAITFORHOST;
    12b2:	c1 e0       	ldi	r28, 0x01	; 1
                    break;
    12b4:	b1 cf       	rjmp	.-158    	; 0x1218 <main+0x8>

            case WAITFORHOST:
                cli();
                SendStringUSART0((unsigned char *)"ID: MainDrive\r\n");
                if(GetByteUART() == 'D'){
                    SendStringUSART0((unsigned char *)"Master Found. Switching to Drive Mode.\r\n");
    12b6:	88 e1       	ldi	r24, 0x18	; 24
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	0e 94 af 02 	call	0x55e	; 0x55e <SendStringUSART0>
                    currentState = DRIVING;
                    sei();
    12be:	78 94       	sei
            case WAITFORHOST:
                cli();
                SendStringUSART0((unsigned char *)"ID: MainDrive\r\n");
                if(GetByteUART() == 'D'){
                    SendStringUSART0((unsigned char *)"Master Found. Switching to Drive Mode.\r\n");
                    currentState = DRIVING;
    12c0:	c2 e0       	ldi	r28, 0x02	; 2
                    sei();
                    break;
    12c2:	aa cf       	rjmp	.-172    	; 0x1218 <main+0x8>

000012c4 <__prologue_saves__>:
    12c4:	2f 92       	push	r2
    12c6:	3f 92       	push	r3
    12c8:	4f 92       	push	r4
    12ca:	5f 92       	push	r5
    12cc:	6f 92       	push	r6
    12ce:	7f 92       	push	r7
    12d0:	8f 92       	push	r8
    12d2:	9f 92       	push	r9
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	ca 1b       	sub	r28, r26
    12ee:	db 0b       	sbc	r29, r27
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	19 94       	eijmp

000012fc <__epilogue_restores__>:
    12fc:	2a 88       	ldd	r2, Y+18	; 0x12
    12fe:	39 88       	ldd	r3, Y+17	; 0x11
    1300:	48 88       	ldd	r4, Y+16	; 0x10
    1302:	5f 84       	ldd	r5, Y+15	; 0x0f
    1304:	6e 84       	ldd	r6, Y+14	; 0x0e
    1306:	7d 84       	ldd	r7, Y+13	; 0x0d
    1308:	8c 84       	ldd	r8, Y+12	; 0x0c
    130a:	9b 84       	ldd	r9, Y+11	; 0x0b
    130c:	aa 84       	ldd	r10, Y+10	; 0x0a
    130e:	b9 84       	ldd	r11, Y+9	; 0x09
    1310:	c8 84       	ldd	r12, Y+8	; 0x08
    1312:	df 80       	ldd	r13, Y+7	; 0x07
    1314:	ee 80       	ldd	r14, Y+6	; 0x06
    1316:	fd 80       	ldd	r15, Y+5	; 0x05
    1318:	0c 81       	ldd	r16, Y+4	; 0x04
    131a:	1b 81       	ldd	r17, Y+3	; 0x03
    131c:	aa 81       	ldd	r26, Y+2	; 0x02
    131e:	b9 81       	ldd	r27, Y+1	; 0x01
    1320:	ce 0f       	add	r28, r30
    1322:	d1 1d       	adc	r29, r1
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	ed 01       	movw	r28, r26
    1330:	08 95       	ret

00001332 <_exit>:
    1332:	f8 94       	cli

00001334 <__stop_program>:
    1334:	ff cf       	rjmp	.-2      	; 0x1334 <__stop_program>
