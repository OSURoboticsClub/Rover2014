
bin/Debug/MainDriveFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  0000144c  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800242  00800242  00001542  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002598  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001a03  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000054e3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e4       	ldi	r30, 0x4C	; 76
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 34       	cpi	r26, 0x42	; 66
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a2 e4       	ldi	r26, 0x42	; 66
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 34       	cpi	r26, 0x4A	; 74
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 09 	call	0x132a	; 0x132a <main>
     122:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Initialize_Mega2560>:
#include <inttypes.h>
#include <util/delay_basic.h>
#include <math.h>

void Initialize_Mega2560(void){
    DDRB |= (1<<PB7);
     12a:	27 9a       	sbi	0x04, 7	; 4
     12c:	08 95       	ret

0000012e <Mega2560_delay_ms>:
}

void Mega2560_delay_ms(double __ms){
     12e:	8f 92       	push	r8
     130:	9f 92       	push	r9
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	4b 01       	movw	r8, r22
     140:	5c 01       	movw	r10, r24
	uint16_t __ticks;
	double __tmp ;

	__tmp = ((F_CPU) / 4e3) * __ms;
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	4a e7       	ldi	r20, 0x7A	; 122
     148:	55 e4       	ldi	r21, 0x45	; 69
     14a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
     14e:	8b 01       	movw	r16, r22
     150:	d8 2f       	mov	r29, r24
     152:	c9 2f       	mov	r28, r25
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	fe 01       	movw	r30, r28
     15e:	71 2f       	mov	r23, r17
     160:	8f 2f       	mov	r24, r31
     162:	9e 2f       	mov	r25, r30
     164:	0e 94 7d 07 	call	0xefa	; 0xefa <__ltsf2>
     168:	87 fd       	sbrc	r24, 7
     16a:	36 c0       	rjmp	.+108    	; 0x1d8 <Mega2560_delay_ms+0xaa>
		__ticks = 1;
	else if (__tmp > 65535)
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	3f ef       	ldi	r19, 0xFF	; 255
     170:	4f e7       	ldi	r20, 0x7F	; 127
     172:	57 e4       	ldi	r21, 0x47	; 71
     174:	fe 01       	movw	r30, r28
     176:	60 2f       	mov	r22, r16
     178:	71 2f       	mov	r23, r17
     17a:	8f 2f       	mov	r24, r31
     17c:	9e 2f       	mov	r25, r30
     17e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__gtsf2>
     182:	18 16       	cp	r1, r24
     184:	b4 f4       	brge	.+44     	; 0x1b2 <Mega2560_delay_ms+0x84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e2       	ldi	r20, 0x20	; 32
     18c:	51 e4       	ldi	r21, 0x41	; 65
     18e:	c5 01       	movw	r24, r10
     190:	b4 01       	movw	r22, r8
     192:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
     196:	0e 94 b2 03 	call	0x764	; 0x764 <__fixunssfsi>
		while(__ticks)
     19a:	61 15       	cp	r22, r1
     19c:	71 05       	cpc	r23, r1
     19e:	99 f0       	breq	.+38     	; 0x1c6 <Mega2560_delay_ms+0x98>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a0:	20 e9       	ldi	r18, 0x90	; 144
     1a2:	31 e0       	ldi	r19, 0x01	; 1
     1a4:	c9 01       	movw	r24, r18
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Mega2560_delay_ms+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1aa:	61 50       	subi	r22, 0x01	; 1
     1ac:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ae:	d1 f7       	brne	.-12     	; 0x1a4 <Mega2560_delay_ms+0x76>
     1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <Mega2560_delay_ms+0x98>
			__ticks --;
		}
		return;
	}
	else
    __ticks = (uint16_t)__tmp;
     1b2:	9e 01       	movw	r18, r28
     1b4:	60 2f       	mov	r22, r16
     1b6:	71 2f       	mov	r23, r17
     1b8:	83 2f       	mov	r24, r19
     1ba:	92 2f       	mov	r25, r18
     1bc:	0e 94 b2 03 	call	0x764	; 0x764 <__fixunssfsi>
     1c0:	cb 01       	movw	r24, r22
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Mega2560_delay_ms+0x94>
	_delay_loop_2(__ticks);
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	bf 90       	pop	r11
     1d0:	af 90       	pop	r10
     1d2:	9f 90       	pop	r9
     1d4:	8f 90       	pop	r8
     1d6:	08 95       	ret
	uint16_t __ticks;
	double __tmp ;

	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	f1 cf       	rjmp	.-30     	; 0x1c0 <Mega2560_delay_ms+0x92>

000001de <Initialize_Sabertooth>:
#include <util/delay.h>
#include <main.h>
#include <Mega2560.h>

void Initialize_Sabertooth(void){
    SendByteUSART1(AUTOBAUD_BYTE);                          //This byte tells the controller to automatically determine the usart communication speed.
     1de:	8a ea       	ldi	r24, 0xAA	; 170
     1e0:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    Sabertooth_HardStop();
}

void Sabertooth_WriteCommand(unsigned char address, unsigned char command, unsigned char value){

    SendByteUSART1(address);
     1e4:	80 e8       	ldi	r24, 0x80	; 128
     1e6:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(value);
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, value));
     1f6:	80 e1       	ldi	r24, 0x10	; 16
     1f8:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 1;                                                        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     1fc:	80 e8       	ldi	r24, 0x80	; 128
     1fe:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
        command = 4;        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 5;        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     214:	80 e8       	ldi	r24, 0x80	; 128
     216:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     21a:	84 e0       	ldi	r24, 0x04	; 4
     21c:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     226:	84 e0       	ldi	r24, 0x04	; 4
     228:	0c 94 14 03 	jmp	0x628	; 0x628 <SendByteUSART1>

0000022c <Sabertooth_WriteCommand>:
    SendByteUSART1(AUTOBAUD_BYTE);                          //This byte tells the controller to automatically determine the usart communication speed.
    Sabertooth_WriteCommand(SABERTOOTHADDRESS, 14, 2);      //This setting enables the sabertooth watchdog, which will stop the motors after a certain period of no control packets.
    Sabertooth_HardStop();
}

void Sabertooth_WriteCommand(unsigned char address, unsigned char command, unsigned char value){
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	18 2f       	mov	r17, r24
     234:	d6 2f       	mov	r29, r22
     236:	c4 2f       	mov	r28, r20

    SendByteUSART1(address);
     238:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     23c:	8d 2f       	mov	r24, r29
     23e:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(value);
     242:	8c 2f       	mov	r24, r28
     244:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     248:	8d 2f       	mov	r24, r29
     24a:	81 0f       	add	r24, r17
     24c:	8c 0f       	add	r24, r28
void Sabertooth_WriteCommand(unsigned char address, unsigned char command, unsigned char value){

    SendByteUSART1(address);
    SendByteUSART1(command);
    SendByteUSART1(value);
    SendByteUSART1(Sabertooth_Checksum(address, command, value));
     24e:	8f 77       	andi	r24, 0x7F	; 127
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
void Sabertooth_WriteCommand(unsigned char address, unsigned char command, unsigned char value){

    SendByteUSART1(address);
    SendByteUSART1(command);
    SendByteUSART1(value);
    SendByteUSART1(Sabertooth_Checksum(address, command, value));
     256:	0c 94 14 03 	jmp	0x628	; 0x628 <SendByteUSART1>

0000025a <Sabertooth_SetMotors>:
}

void Sabertooth_SetMotors(unsigned char address, unsigned char LeftDir, unsigned char LeftSpeed, unsigned char RightDir, unsigned char RightSpeed){
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	1f 92       	push	r1
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	d8 2e       	mov	r13, r24

    if(LeftDir == DRIVE_FORWARD){
     272:	61 30       	cpi	r22, 0x01	; 1
     274:	09 f4       	brne	.+2      	; 0x278 <Sabertooth_SetMotors+0x1e>
     276:	49 c0       	rjmp	.+146    	; 0x30a <Sabertooth_SetMotors+0xb0>
        LeftDir = LEFT_FORWARD;
    }else if(LeftDir == DRIVE_BACKWARD){
     278:	66 23       	and	r22, r22
     27a:	b1 f1       	breq	.+108    	; 0x2e8 <Sabertooth_SetMotors+0x8e>
        LeftDir = LEFT_BACK;
    }else if(LeftDir == DRIVE_STOP){
     27c:	62 30       	cpi	r22, 0x02	; 2
     27e:	09 f4       	brne	.+2      	; 0x282 <Sabertooth_SetMotors+0x28>
     280:	4d c0       	rjmp	.+154    	; 0x31c <Sabertooth_SetMotors+0xc2>
     282:	16 2f       	mov	r17, r22
     284:	f4 2e       	mov	r15, r20
     286:	46 0f       	add	r20, r22
        LeftDir = LEFT_FORWARD;
        LeftSpeed = 0;
    }

    if(RightDir == DRIVE_FORWARD){
     288:	21 30       	cpi	r18, 0x01	; 1
     28a:	99 f1       	breq	.+102    	; 0x2f2 <Sabertooth_SetMotors+0x98>
        RightDir = RIGHT_FORWARD;
    }else if(RightDir == DRIVE_BACKWARD){
     28c:	22 23       	and	r18, r18
     28e:	b9 f1       	breq	.+110    	; 0x2fe <Sabertooth_SetMotors+0xa4>
        RightDir = RIGHT_BACK;
    }else if(RightDir == DRIVE_STOP){
     290:	22 30       	cpi	r18, 0x02	; 2
     292:	f1 f1       	breq	.+124    	; 0x310 <Sabertooth_SetMotors+0xb6>
     294:	c2 2e       	mov	r12, r18
     296:	e0 2e       	mov	r14, r16
     298:	e2 0e       	add	r14, r18

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     29a:	8d 2d       	mov	r24, r13
     29c:	49 83       	std	Y+1, r20	; 0x01
     29e:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     2a2:	81 2f       	mov	r24, r17
     2a4:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftSpeed);
     2a8:	8f 2d       	mov	r24, r15
     2aa:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     2ae:	49 81       	ldd	r20, Y+1	; 0x01
     2b0:	84 2f       	mov	r24, r20
     2b2:	8d 0d       	add	r24, r13


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
    SendByteUSART1(LeftChecksum);
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>

    SendByteUSART1(address);
     2ba:	8d 2d       	mov	r24, r13
     2bc:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightDir);
     2c0:	8c 2d       	mov	r24, r12
     2c2:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     2c6:	80 2f       	mov	r24, r16
     2c8:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     2cc:	8e 2d       	mov	r24, r14
     2ce:	8d 0d       	add	r24, r13
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     2d0:	8f 77       	andi	r24, 0x7F	; 127
}
     2d2:	0f 90       	pop	r0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     2e4:	0c 94 14 03 	jmp	0x628	; 0x628 <SendByteUSART1>
     2e8:	f4 2e       	mov	r15, r20
     2ea:	4f 5f       	subi	r20, 0xFF	; 255

void Sabertooth_SetMotors(unsigned char address, unsigned char LeftDir, unsigned char LeftSpeed, unsigned char RightDir, unsigned char RightSpeed){

    if(LeftDir == DRIVE_FORWARD){
        LeftDir = LEFT_FORWARD;
    }else if(LeftDir == DRIVE_BACKWARD){
     2ec:	11 e0       	ldi	r17, 0x01	; 1
    }else if(LeftDir == DRIVE_STOP){
        LeftDir = LEFT_FORWARD;
        LeftSpeed = 0;
    }

    if(RightDir == DRIVE_FORWARD){
     2ee:	21 30       	cpi	r18, 0x01	; 1
     2f0:	69 f6       	brne	.-102    	; 0x28c <Sabertooth_SetMotors+0x32>
     2f2:	54 e0       	ldi	r21, 0x04	; 4
     2f4:	e5 2e       	mov	r14, r21
     2f6:	e0 0e       	add	r14, r16
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	c6 2e       	mov	r12, r22
     2fc:	ce cf       	rjmp	.-100    	; 0x29a <Sabertooth_SetMotors+0x40>
     2fe:	25 e0       	ldi	r18, 0x05	; 5
     300:	e2 2e       	mov	r14, r18
     302:	e0 0e       	add	r14, r16
        RightDir = RIGHT_FORWARD;
    }else if(RightDir == DRIVE_BACKWARD){
     304:	35 e0       	ldi	r19, 0x05	; 5
     306:	c3 2e       	mov	r12, r19
     308:	c8 cf       	rjmp	.-112    	; 0x29a <Sabertooth_SetMotors+0x40>
     30a:	f4 2e       	mov	r15, r20
    SendByteUSART1(Sabertooth_Checksum(address, command, value));
}

void Sabertooth_SetMotors(unsigned char address, unsigned char LeftDir, unsigned char LeftSpeed, unsigned char RightDir, unsigned char RightSpeed){

    if(LeftDir == DRIVE_FORWARD){
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	bc cf       	rjmp	.-136    	; 0x288 <Sabertooth_SetMotors+0x2e>

    if(RightDir == DRIVE_FORWARD){
        RightDir = RIGHT_FORWARD;
    }else if(RightDir == DRIVE_BACKWARD){
        RightDir = RIGHT_BACK;
    }else if(RightDir == DRIVE_STOP){
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	e8 2e       	mov	r14, r24
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	94 e0       	ldi	r25, 0x04	; 4
     318:	c9 2e       	mov	r12, r25
     31a:	bf cf       	rjmp	.-130    	; 0x29a <Sabertooth_SetMotors+0x40>

    if(LeftDir == DRIVE_FORWARD){
        LeftDir = LEFT_FORWARD;
    }else if(LeftDir == DRIVE_BACKWARD){
        LeftDir = LEFT_BACK;
    }else if(LeftDir == DRIVE_STOP){
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	f1 2c       	mov	r15, r1
     320:	10 e0       	ldi	r17, 0x00	; 0
     322:	b2 cf       	rjmp	.-156    	; 0x288 <Sabertooth_SetMotors+0x2e>

00000324 <Sabertooth_LeftDrive>:
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
}

void Sabertooth_LeftDrive(unsigned char direction, unsigned char speed){
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	1f 92       	push	r1
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	d9 f0       	breq	.+54     	; 0x36c <Sabertooth_LeftDrive+0x48>
     336:	06 2f       	mov	r16, r22
        command = 0;
        speed = 0;
    }else if(direction == 1){
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	e1 f0       	breq	.+56     	; 0x374 <Sabertooth_LeftDrive+0x50>
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
     33c:	81 11       	cpse	r24, r1
     33e:	01 c0       	rjmp	.+2      	; 0x342 <Sabertooth_LeftDrive+0x1e>
        command = 1;                                                        //Sabertooth command for driving motor 1 backwards
     340:	11 e0       	ldi	r17, 0x01	; 1
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     342:	80 e8       	ldi	r24, 0x80	; 128
     344:	69 83       	std	Y+1, r22	; 0x01
     346:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     34a:	81 2f       	mov	r24, r17
     34c:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
     350:	80 2f       	mov	r24, r16
     352:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     356:	69 81       	ldd	r22, Y+1	; 0x01
     358:	86 2f       	mov	r24, r22
     35a:	81 0f       	add	r24, r17
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     35c:	8f 77       	andi	r24, 0x7F	; 127
}
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     368:	0c 94 14 03 	jmp	0x628	; 0x628 <SendByteUSART1>

void Sabertooth_LeftDrive(unsigned char direction, unsigned char speed){
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     36c:	00 e0       	ldi	r16, 0x00	; 0
        command = 0;
     36e:	10 e0       	ldi	r17, 0x00	; 0
        speed = 0;
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	e7 cf       	rjmp	.-50     	; 0x342 <Sabertooth_LeftDrive+0x1e>
    }else if(direction == 1){
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	e5 cf       	rjmp	.-54     	; 0x342 <Sabertooth_LeftDrive+0x1e>

00000378 <Sabertooth_RightDrive>:
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

void Sabertooth_RightDrive(unsigned char direction, unsigned char speed){
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	1f 92       	push	r1
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     386:	82 30       	cpi	r24, 0x02	; 2
     388:	d9 f0       	breq	.+54     	; 0x3c0 <Sabertooth_RightDrive+0x48>
     38a:	06 2f       	mov	r16, r22
        command = 0;
        speed = 0;
    }else if(direction == 1){
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	e1 f0       	breq	.+56     	; 0x3c8 <Sabertooth_RightDrive+0x50>
        command = 4;        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
     390:	81 11       	cpse	r24, r1
     392:	01 c0       	rjmp	.+2      	; 0x396 <Sabertooth_RightDrive+0x1e>
        command = 5;        //Sabertooth command for driving motor 1 backwards
     394:	15 e0       	ldi	r17, 0x05	; 5
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     396:	80 e8       	ldi	r24, 0x80	; 128
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     39e:	81 2f       	mov	r24, r17
     3a0:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
     3a4:	80 2f       	mov	r24, r16
     3a6:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     3aa:	69 81       	ldd	r22, Y+1	; 0x01
     3ac:	86 2f       	mov	r24, r22
     3ae:	81 0f       	add	r24, r17
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     3b0:	8f 77       	andi	r24, 0x7F	; 127
}
     3b2:	0f 90       	pop	r0
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
    }

    SendByteUSART1(SABERTOOTHADDRESS);
    SendByteUSART1(command);
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     3bc:	0c 94 14 03 	jmp	0x628	; 0x628 <SendByteUSART1>

void Sabertooth_RightDrive(unsigned char direction, unsigned char speed){
    unsigned char address = SABERTOOTHADDRESS;                              //Assigns our define to a nice variable so the compiler won't complain
    unsigned char command = command;                                        //Cannot be initialized unassigned due to compiler optimizations

    if(direction == 2){
     3c0:	00 e0       	ldi	r16, 0x00	; 0
        command = 0;
     3c2:	10 e0       	ldi	r17, 0x00	; 0
        speed = 0;
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	e7 cf       	rjmp	.-50     	; 0x396 <Sabertooth_RightDrive+0x1e>
    }else if(direction == 1){
        command = 4;        //Sabertooth command for driving motor 1 forward
     3c8:	14 e0       	ldi	r17, 0x04	; 4
     3ca:	e5 cf       	rjmp	.-54     	; 0x396 <Sabertooth_RightDrive+0x1e>

000003cc <Sabertooth_Checksum>:
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     3cc:	68 0f       	add	r22, r24
     3ce:	64 0f       	add	r22, r20
    uint8_t checksum = (sum & 127);
    return checksum;
}
     3d0:	86 2f       	mov	r24, r22
     3d2:	8f 77       	andi	r24, 0x7F	; 127
     3d4:	08 95       	ret

000003d6 <Sabertooth_HardStop>:
        command = 0;                                                        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 1;                                                        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
        command = 4;        //Sabertooth command for driving motor 1 forward
    }else if(direction == 0){
        command = 5;        //Sabertooth command for driving motor 1 backwards
    }

    SendByteUSART1(SABERTOOTHADDRESS);
     3ee:	80 e8       	ldi	r24, 0x80	; 128
     3f0:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(command);
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	0c 94 14 03 	jmp	0x628	; 0x628 <SendByteUSART1>

00000406 <Sabertooth_DriveTest>:
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	c0 e8       	ldi	r28, 0x80	; 128

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     40c:	80 e8       	ldi	r24, 0x80	; 128
     40e:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     418:	dc 2f       	mov	r29, r28
     41a:	d0 58       	subi	r29, 0x80	; 128
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     41c:	8d 2f       	mov	r24, r29
     41e:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     422:	8c 2f       	mov	r24, r28
     424:	8f 77       	andi	r24, 0x7F	; 127
     426:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>

    SendByteUSART1(address);
     42a:	80 e8       	ldi	r24, 0x80	; 128
     42c:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightDir);
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     436:	8d 2f       	mov	r24, r29
     438:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     43c:	8c 2f       	mov	r24, r28
     43e:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     440:	8f 77       	andi	r24, 0x7F	; 127
     442:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>

void Sabertooth_DriveTest(void){
    int i;
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 ea       	ldi	r24, 0xA0	; 160
     44c:	91 e4       	ldi	r25, 0x41	; 65
     44e:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     452:	cf 5f       	subi	r28, 0xFF	; 255
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
    int i;
    for(i = 0 ; i < 128 ; i++){
     454:	d9 f6       	brne	.-74     	; 0x40c <Sabertooth_DriveTest+0x6>

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     456:	80 e8       	ldi	r24, 0x80	; 128
     458:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     462:	dc 2f       	mov	r29, r28
     464:	d0 58       	subi	r29, 0x80	; 128
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     466:	8d 2f       	mov	r24, r29
     468:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     46c:	8c 2f       	mov	r24, r28
     46e:	8f 77       	andi	r24, 0x7F	; 127
     470:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>

    SendByteUSART1(address);
     474:	80 e8       	ldi	r24, 0x80	; 128
     476:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightDir);
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     480:	8d 2f       	mov	r24, r29
     482:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     486:	8c 2f       	mov	r24, r28
     488:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     48a:	8f 77       	andi	r24, 0x7F	; 127
     48c:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	80 ea       	ldi	r24, 0xA0	; 160
     496:	91 e4       	ldi	r25, 0x41	; 65
     498:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     49c:	c1 50       	subi	r28, 0x01	; 1
    int i;
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
     49e:	c0 38       	cpi	r28, 0x80	; 128
     4a0:	d1 f6       	brne	.-76     	; 0x456 <Sabertooth_DriveTest+0x50>
     4a2:	c1 e8       	ldi	r28, 0x81	; 129

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     4a4:	80 e8       	ldi	r24, 0x80	; 128
     4a6:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     4b0:	dc 2f       	mov	r29, r28
     4b2:	d1 58       	subi	r29, 0x81	; 129
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     4b4:	8d 2f       	mov	r24, r29
     4b6:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	8f 77       	andi	r24, 0x7F	; 127
     4be:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>

    SendByteUSART1(address);
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightDir);
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     4ce:	8d 2f       	mov	r24, r29
     4d0:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     4d4:	8c 2f       	mov	r24, r28
     4d6:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     4d8:	8f 77       	andi	r24, 0x7F	; 127
     4da:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	80 ea       	ldi	r24, 0xA0	; 160
     4e4:	91 e4       	ldi	r25, 0x41	; 65
     4e6:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     4ea:	cf 5f       	subi	r28, 0xFF	; 255
    }
    for( ; i > 0 ; i--){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_FORWARD, i, DRIVE_FORWARD, i);
        Mega2560_delay_ms(20);
    }
    for(i = 0 ; i < 128 ; i++){
     4ec:	c1 30       	cpi	r28, 0x01	; 1
     4ee:	d1 f6       	brne	.-76     	; 0x4a4 <Sabertooth_DriveTest+0x9e>

    unsigned char LeftChecksum = Sabertooth_Checksum(address, LeftDir, LeftSpeed);
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftDir);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
void Sabertooth_HardStop(void){
    Sabertooth_LeftDrive(1, 0);
    Sabertooth_RightDrive(1, 0);
}

void Sabertooth_DriveTest(void){
     4fc:	dc 2f       	mov	r29, r28
     4fe:	d1 58       	subi	r29, 0x81	; 129
    unsigned char RightChecksum = Sabertooth_Checksum(address, RightDir, RightSpeed);


    SendByteUSART1(address);
    SendByteUSART1(LeftDir);
    SendByteUSART1(LeftSpeed);
     500:	8d 2f       	mov	r24, r29
     502:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(LeftChecksum);
     506:	8c 2f       	mov	r24, r28
     508:	8f 77       	andi	r24, 0x7F	; 127
     50a:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>

    SendByteUSART1(address);
     50e:	80 e8       	ldi	r24, 0x80	; 128
     510:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightDir);
     514:	85 e0       	ldi	r24, 0x05	; 5
     516:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(RightSpeed);
     51a:	8d 2f       	mov	r24, r29
     51c:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
    SendByteUSART1(speed);
    SendByteUSART1(Sabertooth_Checksum(address, command, speed));
}

unsigned char Sabertooth_Checksum(unsigned char address, unsigned char command, unsigned char speed){
    uint8_t sum = (address + command + speed);
     520:	8c 2f       	mov	r24, r28
     522:	8c 5f       	subi	r24, 0xFC	; 252
    SendByteUSART1(LeftChecksum);

    SendByteUSART1(address);
    SendByteUSART1(RightDir);
    SendByteUSART1(RightSpeed);
    SendByteUSART1(RightChecksum);
     524:	8f 77       	andi	r24, 0x7F	; 127
     526:	0e 94 14 03 	call	0x628	; 0x628 <SendByteUSART1>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	91 e4       	ldi	r25, 0x41	; 65
     532:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
     536:	c1 50       	subi	r28, 0x01	; 1
    }
    for(i = 0 ; i < 128 ; i++){
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
    }
    for( ; i > 0 ; i--){
     538:	c1 38       	cpi	r28, 0x81	; 129
     53a:	d1 f6       	brne	.-76     	; 0x4f0 <Sabertooth_DriveTest+0xea>
        Sabertooth_SetMotors(SABERTOOTHADDRESS, DRIVE_BACKWARD, i, DRIVE_BACKWARD, i);
        Mega2560_delay_ms(20);
    }
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <Initialize_USART0>:
#include <stdlib.h>
#include <Sabertooth.h>
#include <Mega2560.h>

void Initialize_USART0(double newbaud){
    PRR0 &= ~(1<<PRUSART0);  //Disables power saving mode
     542:	e4 e6       	ldi	r30, 0x64	; 100
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	20 81       	ld	r18, Z
     548:	2d 7f       	andi	r18, 0xFD	; 253
     54a:	20 83       	st	Z, r18

    int baud_prescaller = ((F_CPU / (newbaud * 16UL)) - 1);
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	51 e4       	ldi	r21, 0x41	; 65
     554:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	74 e2       	ldi	r23, 0x24	; 36
     560:	84 e7       	ldi	r24, 0x74	; 116
     562:	9b e4       	ldi	r25, 0x4B	; 75
     564:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divsf3>
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e8       	ldi	r20, 0x80	; 128
     56e:	5f e3       	ldi	r21, 0x3F	; 63
     570:	0e 94 67 05 	call	0xace	; 0xace <__subsf3>
     574:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fixsfsi>
    UBRR0H = (baud_prescaller >> 8);
     578:	87 2f       	mov	r24, r23
     57a:	99 27       	eor	r25, r25
     57c:	87 fd       	sbrc	r24, 7
     57e:	9a 95       	dec	r25
     580:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = baud_prescaller;
     584:	60 93 c4 00 	sts	0x00C4, r22

    // Enable transmitter and receiver
    UCSR0B = (1 << TXEN0 | 1 << RXEN0 | 1 << RXCIE0);
     588:	88 e9       	ldi	r24, 0x98	; 152
     58a:	80 93 c1 00 	sts	0x00C1, r24
    // Set frame format: 8data, 1stop bit
    UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	80 93 c2 00 	sts	0x00C2, r24
     594:	08 95       	ret

00000596 <SendByteUSART0>:


}

void SendByteUSART0(char data){
    while (!( UCSR0A & (1<<UDRE0)));    //BLOCKING!!!!!
     596:	90 91 c0 00 	lds	r25, 0x00C0
     59a:	95 ff       	sbrs	r25, 5
     59c:	fc cf       	rjmp	.-8      	; 0x596 <SendByteUSART0>
    UDR0 = data;
     59e:	80 93 c6 00 	sts	0x00C6, r24
     5a2:	08 95       	ret

000005a4 <SendStringUSART0>:
}

void SendStringUSART0(unsigned char *data){

	for (int loop = 0 ; data[loop] != '\0'; loop++){
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	22 23       	and	r18, r18
     5aa:	51 f0       	breq	.+20     	; 0x5c0 <SendStringUSART0+0x1c>
void SendByteUSART0(char data){
    while (!( UCSR0A & (1<<UDRE0)));    //BLOCKING!!!!!
    UDR0 = data;
}

void SendStringUSART0(unsigned char *data){
     5ac:	31 96       	adiw	r30, 0x01	; 1


}

void SendByteUSART0(char data){
    while (!( UCSR0A & (1<<UDRE0)));    //BLOCKING!!!!!
     5ae:	80 91 c0 00 	lds	r24, 0x00C0
     5b2:	85 ff       	sbrs	r24, 5
     5b4:	fc cf       	rjmp	.-8      	; 0x5ae <SendStringUSART0+0xa>
    UDR0 = data;
     5b6:	20 93 c6 00 	sts	0x00C6, r18
}

void SendStringUSART0(unsigned char *data){

	for (int loop = 0 ; data[loop] != '\0'; loop++){
     5ba:	21 91       	ld	r18, Z+
     5bc:	21 11       	cpse	r18, r1
     5be:	f7 cf       	rjmp	.-18     	; 0x5ae <SendStringUSART0+0xa>
     5c0:	08 95       	ret

000005c2 <GetByteUART>:
		/* Stops sending if SendByteUART had an error */
	}
}

unsigned char GetByteUART(void){
	if((UCSR0A & (1 << RXC0))){
     5c2:	80 91 c0 00 	lds	r24, 0x00C0
     5c6:	87 fd       	sbrc	r24, 7
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <GetByteUART+0xc>
        return(UDR0);
	}else{
        return -1;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     5cc:	08 95       	ret
	}
}

unsigned char GetByteUART(void){
	if((UCSR0A & (1 << RXC0))){
        return(UDR0);
     5ce:	80 91 c6 00 	lds	r24, 0x00C6
     5d2:	08 95       	ret

000005d4 <Initialize_USART1>:
        return -1;
	}
}

void Initialize_USART1(double newbaud){
    PRR1 &= ~(1<<PRUSART1);
     5d4:	e5 e6       	ldi	r30, 0x65	; 101
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	20 81       	ld	r18, Z
     5da:	2e 7f       	andi	r18, 0xFE	; 254
     5dc:	20 83       	st	Z, r18

    int baud_prescaller = ((F_CPU / (newbaud * 16UL)) - 1);
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
     5ea:	9b 01       	movw	r18, r22
     5ec:	ac 01       	movw	r20, r24
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	74 e2       	ldi	r23, 0x24	; 36
     5f2:	84 e7       	ldi	r24, 0x74	; 116
     5f4:	9b e4       	ldi	r25, 0x4B	; 75
     5f6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divsf3>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	0e 94 67 05 	call	0xace	; 0xace <__subsf3>
     606:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fixsfsi>
    UBRR1H = (baud_prescaller >> 8);
     60a:	87 2f       	mov	r24, r23
     60c:	99 27       	eor	r25, r25
     60e:	87 fd       	sbrc	r24, 7
     610:	9a 95       	dec	r25
     612:	80 93 cd 00 	sts	0x00CD, r24
    UBRR1L = baud_prescaller;
     616:	60 93 cc 00 	sts	0x00CC, r22

    // Enable transmitter and receiver
    UCSR1B = (1 << TXEN1 | 1 << RXEN1);
     61a:	88 e1       	ldi	r24, 0x18	; 24
     61c:	80 93 c9 00 	sts	0x00C9, r24
    // Set frame format: 8data, 1stop bit
    UCSR1C = ((1<<UCSZ10)|(1<<UCSZ11));
     620:	86 e0       	ldi	r24, 0x06	; 6
     622:	80 93 ca 00 	sts	0x00CA, r24
     626:	08 95       	ret

00000628 <SendByteUSART1>:
}

void SendByteUSART1(char data){
    while (!( UCSR1A & (1<<UDRE1)));    //BLOCKING!!!!!
     628:	90 91 c8 00 	lds	r25, 0x00C8
     62c:	95 ff       	sbrs	r25, 5
     62e:	fc cf       	rjmp	.-8      	; 0x628 <SendByteUSART1>
    UDR1 = data;
     630:	80 93 ce 00 	sts	0x00CE, r24
     634:	08 95       	ret

00000636 <ChecksumUSART0>:
}

unsigned char ChecksumUSART0(unsigned char estop, unsigned char left, unsigned char right){
    return (estop ^ left ^ right);
     636:	68 27       	eor	r22, r24
}
     638:	86 2f       	mov	r24, r22
     63a:	84 27       	eor	r24, r20
     63c:	08 95       	ret

0000063e <__vector_25>:
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	0b b6       	in	r0, 0x3b	; 59
     64a:	0f 92       	push	r0
     64c:	0f 93       	push	r16
     64e:	2f 93       	push	r18
     650:	3f 93       	push	r19
     652:	4f 93       	push	r20
     654:	5f 93       	push	r21
     656:	6f 93       	push	r22
     658:	7f 93       	push	r23
     65a:	8f 93       	push	r24
     65c:	9f 93       	push	r25
     65e:	af 93       	push	r26
     660:	bf 93       	push	r27
     662:	ef 93       	push	r30
     664:	ff 93       	push	r31
     666:	e0 91 49 02 	lds	r30, 0x0249
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 91 c6 00 	lds	r24, 0x00C6
     670:	ee 5b       	subi	r30, 0xBE	; 190
     672:	fd 4f       	sbci	r31, 0xFD	; 253
     674:	80 83       	st	Z, r24
     676:	80 91 49 02 	lds	r24, 0x0249
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	80 93 49 02 	sts	0x0249, r24
     680:	80 91 49 02 	lds	r24, 0x0249
     684:	86 30       	cpi	r24, 0x06	; 6
     686:	a1 f0       	breq	.+40     	; 0x6b0 <__vector_25+0x72>
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 91       	pop	r16
     6a2:	0f 90       	pop	r0
     6a4:	0b be       	out	0x3b, r0	; 59
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti
     6b0:	10 92 49 02 	sts	0x0249, r1
     6b4:	80 91 43 02 	lds	r24, 0x0243
     6b8:	80 fd       	sbrc	r24, 0
     6ba:	2f c0       	rjmp	.+94     	; 0x71a <__vector_25+0xdc>
     6bc:	90 91 46 02 	lds	r25, 0x0246
     6c0:	40 91 45 02 	lds	r20, 0x0245
     6c4:	80 91 44 02 	lds	r24, 0x0244
     6c8:	30 91 43 02 	lds	r19, 0x0243
     6cc:	84 27       	eor	r24, r20
     6ce:	83 27       	eor	r24, r19
     6d0:	98 13       	cpse	r25, r24
     6d2:	da cf       	rjmp	.-76     	; 0x688 <__vector_25+0x4a>
     6d4:	80 91 44 02 	lds	r24, 0x0244
     6d8:	8f 37       	cpi	r24, 0x7F	; 127
     6da:	a9 f1       	breq	.+106    	; 0x746 <__vector_25+0x108>
     6dc:	80 91 44 02 	lds	r24, 0x0244
     6e0:	8f 37       	cpi	r24, 0x7F	; 127
     6e2:	f0 f0       	brcs	.+60     	; 0x720 <__vector_25+0xe2>
     6e4:	80 91 44 02 	lds	r24, 0x0244
     6e8:	87 fd       	sbrc	r24, 7
     6ea:	35 c0       	rjmp	.+106    	; 0x756 <__vector_25+0x118>
     6ec:	80 91 45 02 	lds	r24, 0x0245
     6f0:	8f 37       	cpi	r24, 0x7F	; 127
     6f2:	69 f1       	breq	.+90     	; 0x74e <__vector_25+0x110>
     6f4:	80 91 45 02 	lds	r24, 0x0245
     6f8:	8f 37       	cpi	r24, 0x7F	; 127
     6fa:	d0 f4       	brcc	.+52     	; 0x730 <__vector_25+0xf2>
     6fc:	90 91 45 02 	lds	r25, 0x0245
     700:	8f e7       	ldi	r24, 0x7F	; 127
     702:	89 1b       	sub	r24, r25
     704:	80 93 45 02 	sts	0x0245, r24
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	00 91 45 02 	lds	r16, 0x0245
     70e:	40 91 44 02 	lds	r20, 0x0244
     712:	80 e8       	ldi	r24, 0x80	; 128
     714:	0e 94 2d 01 	call	0x25a	; 0x25a <Sabertooth_SetMotors>
     718:	b7 cf       	rjmp	.-146    	; 0x688 <__vector_25+0x4a>
     71a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Sabertooth_HardStop>
     71e:	b4 cf       	rjmp	.-152    	; 0x688 <__vector_25+0x4a>
     720:	90 91 44 02 	lds	r25, 0x0244
     724:	8f e7       	ldi	r24, 0x7F	; 127
     726:	89 1b       	sub	r24, r25
     728:	80 93 44 02 	sts	0x0244, r24
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	de cf       	rjmp	.-68     	; 0x6ec <__vector_25+0xae>
     730:	80 91 45 02 	lds	r24, 0x0245
     734:	87 ff       	sbrs	r24, 7
     736:	e9 cf       	rjmp	.-46     	; 0x70a <__vector_25+0xcc>
     738:	80 91 45 02 	lds	r24, 0x0245
     73c:	8f 57       	subi	r24, 0x7F	; 127
     73e:	80 93 45 02 	sts	0x0245, r24
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	e2 cf       	rjmp	.-60     	; 0x70a <__vector_25+0xcc>
     746:	10 92 44 02 	sts	0x0244, r1
     74a:	62 e0       	ldi	r22, 0x02	; 2
     74c:	cf cf       	rjmp	.-98     	; 0x6ec <__vector_25+0xae>
     74e:	10 92 45 02 	sts	0x0245, r1
     752:	22 e0       	ldi	r18, 0x02	; 2
     754:	da cf       	rjmp	.-76     	; 0x70a <__vector_25+0xcc>
     756:	80 91 44 02 	lds	r24, 0x0244
     75a:	8f 57       	subi	r24, 0x7F	; 127
     75c:	80 93 44 02 	sts	0x0244, r24
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	c4 cf       	rjmp	.-120    	; 0x6ec <__vector_25+0xae>

00000764 <__fixunssfsi>:
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	6b 01       	movw	r12, r22
     772:	7c 01       	movw	r14, r24
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	5f e4       	ldi	r21, 0x4F	; 79
     77c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__gesf2>
     780:	87 fd       	sbrc	r24, 7
     782:	0e c0       	rjmp	.+28     	; 0x7a0 <__fixunssfsi+0x3c>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	5f e4       	ldi	r21, 0x4F	; 79
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	0e 94 67 05 	call	0xace	; 0xace <__subsf3>
     794:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fixsfsi>
     798:	8b 01       	movw	r16, r22
     79a:	9c 01       	movw	r18, r24
     79c:	30 58       	subi	r19, 0x80	; 128
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <__fixunssfsi+0x48>
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fixsfsi>
     7a8:	8b 01       	movw	r16, r22
     7aa:	9c 01       	movw	r18, r24
     7ac:	b8 01       	movw	r22, r16
     7ae:	c9 01       	movw	r24, r18
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <_fpadd_parts>:
     7be:	a4 e0       	ldi	r26, 0x04	; 4
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	e5 ee       	ldi	r30, 0xE5	; 229
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__prologue_saves__+0x4>
     7ca:	7c 01       	movw	r14, r24
     7cc:	6a 01       	movw	r12, r20
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	08 f4       	brcc	.+2      	; 0x7d8 <_fpadd_parts+0x1a>
     7d6:	4a c1       	rjmp	.+660    	; 0xa6c <_fpadd_parts+0x2ae>
     7d8:	fb 01       	movw	r30, r22
     7da:	90 81       	ld	r25, Z
     7dc:	92 30       	cpi	r25, 0x02	; 2
     7de:	08 f4       	brcc	.+2      	; 0x7e2 <_fpadd_parts+0x24>
     7e0:	42 c1       	rjmp	.+644    	; 0xa66 <_fpadd_parts+0x2a8>
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	79 f4       	brne	.+30     	; 0x804 <_fpadd_parts+0x46>
     7e6:	94 30       	cpi	r25, 0x04	; 4
     7e8:	09 f0       	breq	.+2      	; 0x7ec <_fpadd_parts+0x2e>
     7ea:	40 c1       	rjmp	.+640    	; 0xa6c <_fpadd_parts+0x2ae>
     7ec:	f7 01       	movw	r30, r14
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	fb 01       	movw	r30, r22
     7f2:	81 81       	ldd	r24, Z+1	; 0x01
     7f4:	98 17       	cp	r25, r24
     7f6:	09 f4       	brne	.+2      	; 0x7fa <_fpadd_parts+0x3c>
     7f8:	39 c1       	rjmp	.+626    	; 0xa6c <_fpadd_parts+0x2ae>
     7fa:	a0 e0       	ldi	r26, 0x00	; 0
     7fc:	ea 2e       	mov	r14, r26
     7fe:	a2 e0       	ldi	r26, 0x02	; 2
     800:	fa 2e       	mov	r15, r26
     802:	34 c1       	rjmp	.+616    	; 0xa6c <_fpadd_parts+0x2ae>
     804:	94 30       	cpi	r25, 0x04	; 4
     806:	09 f4       	brne	.+2      	; 0x80a <_fpadd_parts+0x4c>
     808:	2e c1       	rjmp	.+604    	; 0xa66 <_fpadd_parts+0x2a8>
     80a:	92 30       	cpi	r25, 0x02	; 2
     80c:	91 f4       	brne	.+36     	; 0x832 <_fpadd_parts+0x74>
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	09 f0       	breq	.+2      	; 0x814 <_fpadd_parts+0x56>
     812:	2c c1       	rjmp	.+600    	; 0xa6c <_fpadd_parts+0x2ae>
     814:	88 e0       	ldi	r24, 0x08	; 8
     816:	f7 01       	movw	r30, r14
     818:	da 01       	movw	r26, r20
     81a:	01 90       	ld	r0, Z+
     81c:	0d 92       	st	X+, r0
     81e:	8a 95       	dec	r24
     820:	e1 f7       	brne	.-8      	; 0x81a <_fpadd_parts+0x5c>
     822:	fb 01       	movw	r30, r22
     824:	81 81       	ldd	r24, Z+1	; 0x01
     826:	f7 01       	movw	r30, r14
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	89 23       	and	r24, r25
     82c:	fa 01       	movw	r30, r20
     82e:	81 83       	std	Z+1, r24	; 0x01
     830:	1c c1       	rjmp	.+568    	; 0xa6a <_fpadd_parts+0x2ac>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	09 f4       	brne	.+2      	; 0x838 <_fpadd_parts+0x7a>
     836:	17 c1       	rjmp	.+558    	; 0xa66 <_fpadd_parts+0x2a8>
     838:	f7 01       	movw	r30, r14
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	fb 01       	movw	r30, r22
     840:	a2 81       	ldd	r26, Z+2	; 0x02
     842:	b3 81       	ldd	r27, Z+3	; 0x03
     844:	f7 01       	movw	r30, r14
     846:	04 81       	ldd	r16, Z+4	; 0x04
     848:	15 81       	ldd	r17, Z+5	; 0x05
     84a:	26 81       	ldd	r18, Z+6	; 0x06
     84c:	37 81       	ldd	r19, Z+7	; 0x07
     84e:	fb 01       	movw	r30, r22
     850:	84 80       	ldd	r8, Z+4	; 0x04
     852:	95 80       	ldd	r9, Z+5	; 0x05
     854:	a6 80       	ldd	r10, Z+6	; 0x06
     856:	b7 80       	ldd	r11, Z+7	; 0x07
     858:	fc 01       	movw	r30, r24
     85a:	ea 1b       	sub	r30, r26
     85c:	fb 0b       	sbc	r31, r27
     85e:	af 01       	movw	r20, r30
     860:	f7 ff       	sbrs	r31, 7
     862:	04 c0       	rjmp	.+8      	; 0x86c <_fpadd_parts+0xae>
     864:	44 27       	eor	r20, r20
     866:	55 27       	eor	r21, r21
     868:	4e 1b       	sub	r20, r30
     86a:	5f 0b       	sbc	r21, r31
     86c:	40 32       	cpi	r20, 0x20	; 32
     86e:	51 05       	cpc	r21, r1
     870:	0c f0       	brlt	.+2      	; 0x874 <_fpadd_parts+0xb6>
     872:	74 c0       	rjmp	.+232    	; 0x95c <_fpadd_parts+0x19e>
     874:	1e 16       	cp	r1, r30
     876:	1f 06       	cpc	r1, r31
     878:	b4 f5       	brge	.+108    	; 0x8e6 <_fpadd_parts+0x128>
     87a:	24 01       	movw	r4, r8
     87c:	35 01       	movw	r6, r10
     87e:	04 2e       	mov	r0, r20
     880:	04 c0       	rjmp	.+8      	; 0x88a <_fpadd_parts+0xcc>
     882:	76 94       	lsr	r7
     884:	67 94       	ror	r6
     886:	57 94       	ror	r5
     888:	47 94       	ror	r4
     88a:	0a 94       	dec	r0
     88c:	d2 f7       	brpl	.-12     	; 0x882 <_fpadd_parts+0xc4>
     88e:	49 82       	std	Y+1, r4	; 0x01
     890:	5a 82       	std	Y+2, r5	; 0x02
     892:	6b 82       	std	Y+3, r6	; 0x03
     894:	7c 82       	std	Y+4, r7	; 0x04
     896:	41 2c       	mov	r4, r1
     898:	51 2c       	mov	r5, r1
     89a:	32 01       	movw	r6, r4
     89c:	43 94       	inc	r4
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <_fpadd_parts+0xea>
     8a0:	44 0c       	add	r4, r4
     8a2:	55 1c       	adc	r5, r5
     8a4:	66 1c       	adc	r6, r6
     8a6:	77 1c       	adc	r7, r7
     8a8:	4a 95       	dec	r20
     8aa:	d2 f7       	brpl	.-12     	; 0x8a0 <_fpadd_parts+0xe2>
     8ac:	41 e0       	ldi	r20, 0x01	; 1
     8ae:	44 1a       	sub	r4, r20
     8b0:	51 08       	sbc	r5, r1
     8b2:	61 08       	sbc	r6, r1
     8b4:	71 08       	sbc	r7, r1
     8b6:	48 20       	and	r4, r8
     8b8:	59 20       	and	r5, r9
     8ba:	6a 20       	and	r6, r10
     8bc:	7b 20       	and	r7, r11
     8be:	81 2c       	mov	r8, r1
     8c0:	91 2c       	mov	r9, r1
     8c2:	54 01       	movw	r10, r8
     8c4:	83 94       	inc	r8
     8c6:	45 28       	or	r4, r5
     8c8:	46 28       	or	r4, r6
     8ca:	47 28       	or	r4, r7
     8cc:	19 f4       	brne	.+6      	; 0x8d4 <_fpadd_parts+0x116>
     8ce:	81 2c       	mov	r8, r1
     8d0:	91 2c       	mov	r9, r1
     8d2:	54 01       	movw	r10, r8
     8d4:	49 80       	ldd	r4, Y+1	; 0x01
     8d6:	5a 80       	ldd	r5, Y+2	; 0x02
     8d8:	6b 80       	ldd	r6, Y+3	; 0x03
     8da:	7c 80       	ldd	r7, Y+4	; 0x04
     8dc:	84 28       	or	r8, r4
     8de:	95 28       	or	r9, r5
     8e0:	a6 28       	or	r10, r6
     8e2:	b7 28       	or	r11, r7
     8e4:	46 c0       	rjmp	.+140    	; 0x972 <_fpadd_parts+0x1b4>
     8e6:	ef 2b       	or	r30, r31
     8e8:	09 f4       	brne	.+2      	; 0x8ec <_fpadd_parts+0x12e>
     8ea:	43 c0       	rjmp	.+134    	; 0x972 <_fpadd_parts+0x1b4>
     8ec:	84 0f       	add	r24, r20
     8ee:	95 1f       	adc	r25, r21
     8f0:	28 01       	movw	r4, r16
     8f2:	39 01       	movw	r6, r18
     8f4:	04 2e       	mov	r0, r20
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <_fpadd_parts+0x142>
     8f8:	76 94       	lsr	r7
     8fa:	67 94       	ror	r6
     8fc:	57 94       	ror	r5
     8fe:	47 94       	ror	r4
     900:	0a 94       	dec	r0
     902:	d2 f7       	brpl	.-12     	; 0x8f8 <_fpadd_parts+0x13a>
     904:	49 82       	std	Y+1, r4	; 0x01
     906:	5a 82       	std	Y+2, r5	; 0x02
     908:	6b 82       	std	Y+3, r6	; 0x03
     90a:	7c 82       	std	Y+4, r7	; 0x04
     90c:	41 2c       	mov	r4, r1
     90e:	51 2c       	mov	r5, r1
     910:	32 01       	movw	r6, r4
     912:	43 94       	inc	r4
     914:	04 c0       	rjmp	.+8      	; 0x91e <_fpadd_parts+0x160>
     916:	44 0c       	add	r4, r4
     918:	55 1c       	adc	r5, r5
     91a:	66 1c       	adc	r6, r6
     91c:	77 1c       	adc	r7, r7
     91e:	4a 95       	dec	r20
     920:	d2 f7       	brpl	.-12     	; 0x916 <_fpadd_parts+0x158>
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	44 1a       	sub	r4, r20
     926:	51 08       	sbc	r5, r1
     928:	61 08       	sbc	r6, r1
     92a:	71 08       	sbc	r7, r1
     92c:	40 22       	and	r4, r16
     92e:	51 22       	and	r5, r17
     930:	62 22       	and	r6, r18
     932:	73 22       	and	r7, r19
     934:	01 e0       	ldi	r16, 0x01	; 1
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	45 28       	or	r4, r5
     93e:	46 28       	or	r4, r6
     940:	47 28       	or	r4, r7
     942:	19 f4       	brne	.+6      	; 0x94a <_fpadd_parts+0x18c>
     944:	00 e0       	ldi	r16, 0x00	; 0
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	98 01       	movw	r18, r16
     94a:	49 80       	ldd	r4, Y+1	; 0x01
     94c:	5a 80       	ldd	r5, Y+2	; 0x02
     94e:	6b 80       	ldd	r6, Y+3	; 0x03
     950:	7c 80       	ldd	r7, Y+4	; 0x04
     952:	04 29       	or	r16, r4
     954:	15 29       	or	r17, r5
     956:	26 29       	or	r18, r6
     958:	37 29       	or	r19, r7
     95a:	0b c0       	rjmp	.+22     	; 0x972 <_fpadd_parts+0x1b4>
     95c:	a8 17       	cp	r26, r24
     95e:	b9 07       	cpc	r27, r25
     960:	24 f4       	brge	.+8      	; 0x96a <_fpadd_parts+0x1ac>
     962:	81 2c       	mov	r8, r1
     964:	91 2c       	mov	r9, r1
     966:	54 01       	movw	r10, r8
     968:	04 c0       	rjmp	.+8      	; 0x972 <_fpadd_parts+0x1b4>
     96a:	cd 01       	movw	r24, r26
     96c:	00 e0       	ldi	r16, 0x00	; 0
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	98 01       	movw	r18, r16
     972:	f7 01       	movw	r30, r14
     974:	41 81       	ldd	r20, Z+1	; 0x01
     976:	fb 01       	movw	r30, r22
     978:	51 81       	ldd	r21, Z+1	; 0x01
     97a:	45 17       	cp	r20, r21
     97c:	09 f4       	brne	.+2      	; 0x980 <_fpadd_parts+0x1c2>
     97e:	46 c0       	rjmp	.+140    	; 0xa0c <_fpadd_parts+0x24e>
     980:	44 23       	and	r20, r20
     982:	49 f0       	breq	.+18     	; 0x996 <_fpadd_parts+0x1d8>
     984:	24 01       	movw	r4, r8
     986:	35 01       	movw	r6, r10
     988:	40 1a       	sub	r4, r16
     98a:	51 0a       	sbc	r5, r17
     98c:	62 0a       	sbc	r6, r18
     98e:	73 0a       	sbc	r7, r19
     990:	93 01       	movw	r18, r6
     992:	82 01       	movw	r16, r4
     994:	04 c0       	rjmp	.+8      	; 0x99e <_fpadd_parts+0x1e0>
     996:	08 19       	sub	r16, r8
     998:	19 09       	sbc	r17, r9
     99a:	2a 09       	sbc	r18, r10
     99c:	3b 09       	sbc	r19, r11
     99e:	37 fd       	sbrc	r19, 7
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <_fpadd_parts+0x1ee>
     9a2:	f6 01       	movw	r30, r12
     9a4:	11 82       	std	Z+1, r1	; 0x01
     9a6:	93 83       	std	Z+3, r25	; 0x03
     9a8:	82 83       	std	Z+2, r24	; 0x02
     9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <_fpadd_parts+0x206>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	f6 01       	movw	r30, r12
     9b0:	41 83       	std	Z+1, r20	; 0x01
     9b2:	93 83       	std	Z+3, r25	; 0x03
     9b4:	82 83       	std	Z+2, r24	; 0x02
     9b6:	30 95       	com	r19
     9b8:	20 95       	com	r18
     9ba:	10 95       	com	r17
     9bc:	01 95       	neg	r16
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	2f 4f       	sbci	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	04 83       	std	Z+4, r16	; 0x04
     9c6:	15 83       	std	Z+5, r17	; 0x05
     9c8:	26 83       	std	Z+6, r18	; 0x06
     9ca:	37 83       	std	Z+7, r19	; 0x07
     9cc:	0e c0       	rjmp	.+28     	; 0x9ea <_fpadd_parts+0x22c>
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	aa 1f       	adc	r26, r26
     9d4:	bb 1f       	adc	r27, r27
     9d6:	f6 01       	movw	r30, r12
     9d8:	84 83       	std	Z+4, r24	; 0x04
     9da:	95 83       	std	Z+5, r25	; 0x05
     9dc:	a6 83       	std	Z+6, r26	; 0x06
     9de:	b7 83       	std	Z+7, r27	; 0x07
     9e0:	82 81       	ldd	r24, Z+2	; 0x02
     9e2:	93 81       	ldd	r25, Z+3	; 0x03
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	93 83       	std	Z+3, r25	; 0x03
     9e8:	82 83       	std	Z+2, r24	; 0x02
     9ea:	f6 01       	movw	r30, r12
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	95 81       	ldd	r25, Z+5	; 0x05
     9f0:	a6 81       	ldd	r26, Z+6	; 0x06
     9f2:	b7 81       	ldd	r27, Z+7	; 0x07
     9f4:	ac 01       	movw	r20, r24
     9f6:	bd 01       	movw	r22, r26
     9f8:	41 50       	subi	r20, 0x01	; 1
     9fa:	51 09       	sbc	r21, r1
     9fc:	61 09       	sbc	r22, r1
     9fe:	71 09       	sbc	r23, r1
     a00:	4f 3f       	cpi	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	6f 4f       	sbci	r22, 0xFF	; 255
     a06:	7f 43       	sbci	r23, 0x3F	; 63
     a08:	10 f3       	brcs	.-60     	; 0x9ce <_fpadd_parts+0x210>
     a0a:	0c c0       	rjmp	.+24     	; 0xa24 <_fpadd_parts+0x266>
     a0c:	f6 01       	movw	r30, r12
     a0e:	41 83       	std	Z+1, r20	; 0x01
     a10:	93 83       	std	Z+3, r25	; 0x03
     a12:	82 83       	std	Z+2, r24	; 0x02
     a14:	08 0d       	add	r16, r8
     a16:	19 1d       	adc	r17, r9
     a18:	2a 1d       	adc	r18, r10
     a1a:	3b 1d       	adc	r19, r11
     a1c:	04 83       	std	Z+4, r16	; 0x04
     a1e:	15 83       	std	Z+5, r17	; 0x05
     a20:	26 83       	std	Z+6, r18	; 0x06
     a22:	37 83       	std	Z+7, r19	; 0x07
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	f6 01       	movw	r30, r12
     a28:	80 83       	st	Z, r24
     a2a:	44 81       	ldd	r20, Z+4	; 0x04
     a2c:	55 81       	ldd	r21, Z+5	; 0x05
     a2e:	66 81       	ldd	r22, Z+6	; 0x06
     a30:	77 81       	ldd	r23, Z+7	; 0x07
     a32:	77 ff       	sbrs	r23, 7
     a34:	1a c0       	rjmp	.+52     	; 0xa6a <_fpadd_parts+0x2ac>
     a36:	db 01       	movw	r26, r22
     a38:	ca 01       	movw	r24, r20
     a3a:	81 70       	andi	r24, 0x01	; 1
     a3c:	99 27       	eor	r25, r25
     a3e:	aa 27       	eor	r26, r26
     a40:	bb 27       	eor	r27, r27
     a42:	76 95       	lsr	r23
     a44:	67 95       	ror	r22
     a46:	57 95       	ror	r21
     a48:	47 95       	ror	r20
     a4a:	84 2b       	or	r24, r20
     a4c:	95 2b       	or	r25, r21
     a4e:	a6 2b       	or	r26, r22
     a50:	b7 2b       	or	r27, r23
     a52:	84 83       	std	Z+4, r24	; 0x04
     a54:	95 83       	std	Z+5, r25	; 0x05
     a56:	a6 83       	std	Z+6, r26	; 0x06
     a58:	b7 83       	std	Z+7, r27	; 0x07
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	93 83       	std	Z+3, r25	; 0x03
     a62:	82 83       	std	Z+2, r24	; 0x02
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <_fpadd_parts+0x2ac>
     a66:	7b 01       	movw	r14, r22
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <_fpadd_parts+0x2ae>
     a6a:	76 01       	movw	r14, r12
     a6c:	c7 01       	movw	r24, r14
     a6e:	24 96       	adiw	r28, 0x04	; 4
     a70:	e0 e1       	ldi	r30, 0x10	; 16
     a72:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__epilogue_restores__+0x4>

00000a76 <__addsf3>:
     a76:	a0 e2       	ldi	r26, 0x20	; 32
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e1 e4       	ldi	r30, 0x41	; 65
     a7c:	f5 e0       	ldi	r31, 0x05	; 5
     a7e:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__+0x20>
     a82:	6d 8f       	std	Y+29, r22	; 0x1d
     a84:	7e 8f       	std	Y+30, r23	; 0x1e
     a86:	8f 8f       	std	Y+31, r24	; 0x1f
     a88:	98 a3       	std	Y+32, r25	; 0x20
     a8a:	29 8f       	std	Y+25, r18	; 0x19
     a8c:	3a 8f       	std	Y+26, r19	; 0x1a
     a8e:	4b 8f       	std	Y+27, r20	; 0x1b
     a90:	5c 8f       	std	Y+28, r21	; 0x1c
     a92:	be 01       	movw	r22, r28
     a94:	6f 5e       	subi	r22, 0xEF	; 239
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	ce 01       	movw	r24, r28
     a9a:	4d 96       	adiw	r24, 0x1d	; 29
     a9c:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     aa0:	be 01       	movw	r22, r28
     aa2:	67 5f       	subi	r22, 0xF7	; 247
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	ce 01       	movw	r24, r28
     aa8:	49 96       	adiw	r24, 0x19	; 25
     aaa:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     aae:	ae 01       	movw	r20, r28
     ab0:	4f 5f       	subi	r20, 0xFF	; 255
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	be 01       	movw	r22, r28
     ab6:	67 5f       	subi	r22, 0xF7	; 247
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	ce 01       	movw	r24, r28
     abc:	41 96       	adiw	r24, 0x11	; 17
     abe:	0e 94 df 03 	call	0x7be	; 0x7be <_fpadd_parts>
     ac2:	0e 94 fb 07 	call	0xff6	; 0xff6 <__pack_f>
     ac6:	a0 96       	adiw	r28, 0x20	; 32
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__+0x20>

00000ace <__subsf3>:
     ace:	a0 e2       	ldi	r26, 0x20	; 32
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__+0x20>
     ada:	6d 8f       	std	Y+29, r22	; 0x1d
     adc:	7e 8f       	std	Y+30, r23	; 0x1e
     ade:	8f 8f       	std	Y+31, r24	; 0x1f
     ae0:	98 a3       	std	Y+32, r25	; 0x20
     ae2:	29 8f       	std	Y+25, r18	; 0x19
     ae4:	3a 8f       	std	Y+26, r19	; 0x1a
     ae6:	4b 8f       	std	Y+27, r20	; 0x1b
     ae8:	5c 8f       	std	Y+28, r21	; 0x1c
     aea:	be 01       	movw	r22, r28
     aec:	6f 5e       	subi	r22, 0xEF	; 239
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	ce 01       	movw	r24, r28
     af2:	4d 96       	adiw	r24, 0x1d	; 29
     af4:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     af8:	be 01       	movw	r22, r28
     afa:	67 5f       	subi	r22, 0xF7	; 247
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	ce 01       	movw	r24, r28
     b00:	49 96       	adiw	r24, 0x19	; 25
     b02:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     b06:	8a 85       	ldd	r24, Y+10	; 0x0a
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	89 27       	eor	r24, r25
     b0c:	8a 87       	std	Y+10, r24	; 0x0a
     b0e:	ae 01       	movw	r20, r28
     b10:	4f 5f       	subi	r20, 0xFF	; 255
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	be 01       	movw	r22, r28
     b16:	67 5f       	subi	r22, 0xF7	; 247
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	ce 01       	movw	r24, r28
     b1c:	41 96       	adiw	r24, 0x11	; 17
     b1e:	0e 94 df 03 	call	0x7be	; 0x7be <_fpadd_parts>
     b22:	0e 94 fb 07 	call	0xff6	; 0xff6 <__pack_f>
     b26:	a0 96       	adiw	r28, 0x20	; 32
     b28:	e2 e0       	ldi	r30, 0x02	; 2
     b2a:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__+0x20>

00000b2e <__mulsf3>:
     b2e:	a0 e2       	ldi	r26, 0x20	; 32
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__prologue_saves__+0x4>
     b3a:	6d 8f       	std	Y+29, r22	; 0x1d
     b3c:	7e 8f       	std	Y+30, r23	; 0x1e
     b3e:	8f 8f       	std	Y+31, r24	; 0x1f
     b40:	98 a3       	std	Y+32, r25	; 0x20
     b42:	29 8f       	std	Y+25, r18	; 0x19
     b44:	3a 8f       	std	Y+26, r19	; 0x1a
     b46:	4b 8f       	std	Y+27, r20	; 0x1b
     b48:	5c 8f       	std	Y+28, r21	; 0x1c
     b4a:	be 01       	movw	r22, r28
     b4c:	6f 5e       	subi	r22, 0xEF	; 239
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	4d 96       	adiw	r24, 0x1d	; 29
     b54:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     b58:	be 01       	movw	r22, r28
     b5a:	67 5f       	subi	r22, 0xF7	; 247
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	ce 01       	movw	r24, r28
     b60:	49 96       	adiw	r24, 0x19	; 25
     b62:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     b66:	99 89       	ldd	r25, Y+17	; 0x11
     b68:	92 30       	cpi	r25, 0x02	; 2
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <__mulsf3+0x40>
     b6c:	12 c0       	rjmp	.+36     	; 0xb92 <__mulsf3+0x64>
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	08 f4       	brcc	.+2      	; 0xb76 <__mulsf3+0x48>
     b74:	1a c0       	rjmp	.+52     	; 0xbaa <__mulsf3+0x7c>
     b76:	94 30       	cpi	r25, 0x04	; 4
     b78:	21 f4       	brne	.+8      	; 0xb82 <__mulsf3+0x54>
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	09 f4       	brne	.+2      	; 0xb80 <__mulsf3+0x52>
     b7e:	b4 c0       	rjmp	.+360    	; 0xce8 <__mulsf3+0x1ba>
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <__mulsf3+0x64>
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	21 f4       	brne	.+8      	; 0xb8e <__mulsf3+0x60>
     b86:	92 30       	cpi	r25, 0x02	; 2
     b88:	09 f4       	brne	.+2      	; 0xb8c <__mulsf3+0x5e>
     b8a:	ae c0       	rjmp	.+348    	; 0xce8 <__mulsf3+0x1ba>
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <__mulsf3+0x7c>
     b8e:	92 30       	cpi	r25, 0x02	; 2
     b90:	51 f4       	brne	.+20     	; 0xba6 <__mulsf3+0x78>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	2a 89       	ldd	r18, Y+18	; 0x12
     b96:	9a 85       	ldd	r25, Y+10	; 0x0a
     b98:	29 13       	cpse	r18, r25
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <__mulsf3+0x70>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	8a 8b       	std	Y+18, r24	; 0x12
     ba0:	ce 01       	movw	r24, r28
     ba2:	41 96       	adiw	r24, 0x11	; 17
     ba4:	a3 c0       	rjmp	.+326    	; 0xcec <__mulsf3+0x1be>
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	51 f4       	brne	.+20     	; 0xbbe <__mulsf3+0x90>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	2a 89       	ldd	r18, Y+18	; 0x12
     bae:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb0:	29 13       	cpse	r18, r25
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__mulsf3+0x88>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	8a 87       	std	Y+10, r24	; 0x0a
     bb8:	ce 01       	movw	r24, r28
     bba:	09 96       	adiw	r24, 0x09	; 9
     bbc:	97 c0       	rjmp	.+302    	; 0xcec <__mulsf3+0x1be>
     bbe:	8d 88       	ldd	r8, Y+21	; 0x15
     bc0:	9e 88       	ldd	r9, Y+22	; 0x16
     bc2:	af 88       	ldd	r10, Y+23	; 0x17
     bc4:	b8 8c       	ldd	r11, Y+24	; 0x18
     bc6:	0d 85       	ldd	r16, Y+13	; 0x0d
     bc8:	1e 85       	ldd	r17, Y+14	; 0x0e
     bca:	2f 85       	ldd	r18, Y+15	; 0x0f
     bcc:	38 89       	ldd	r19, Y+16	; 0x10
     bce:	e0 e2       	ldi	r30, 0x20	; 32
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	dc 01       	movw	r26, r24
     bd8:	c1 2c       	mov	r12, r1
     bda:	d1 2c       	mov	r13, r1
     bdc:	76 01       	movw	r14, r12
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	ba 01       	movw	r22, r20
     be4:	80 fe       	sbrs	r8, 0
     be6:	18 c0       	rjmp	.+48     	; 0xc18 <__mulsf3+0xea>
     be8:	40 0f       	add	r20, r16
     bea:	51 1f       	adc	r21, r17
     bec:	62 1f       	adc	r22, r18
     bee:	73 1f       	adc	r23, r19
     bf0:	8c 0d       	add	r24, r12
     bf2:	9d 1d       	adc	r25, r13
     bf4:	ae 1d       	adc	r26, r14
     bf6:	bf 1d       	adc	r27, r15
     bf8:	41 2c       	mov	r4, r1
     bfa:	51 2c       	mov	r5, r1
     bfc:	32 01       	movw	r6, r4
     bfe:	43 94       	inc	r4
     c00:	40 17       	cp	r20, r16
     c02:	51 07       	cpc	r21, r17
     c04:	62 07       	cpc	r22, r18
     c06:	73 07       	cpc	r23, r19
     c08:	18 f0       	brcs	.+6      	; 0xc10 <__mulsf3+0xe2>
     c0a:	41 2c       	mov	r4, r1
     c0c:	51 2c       	mov	r5, r1
     c0e:	32 01       	movw	r6, r4
     c10:	84 0d       	add	r24, r4
     c12:	95 1d       	adc	r25, r5
     c14:	a6 1d       	adc	r26, r6
     c16:	b7 1d       	adc	r27, r7
     c18:	cc 0c       	add	r12, r12
     c1a:	dd 1c       	adc	r13, r13
     c1c:	ee 1c       	adc	r14, r14
     c1e:	ff 1c       	adc	r15, r15
     c20:	37 ff       	sbrs	r19, 7
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <__mulsf3+0xfa>
     c24:	68 94       	set
     c26:	c0 f8       	bld	r12, 0
     c28:	00 0f       	add	r16, r16
     c2a:	11 1f       	adc	r17, r17
     c2c:	22 1f       	adc	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	b6 94       	lsr	r11
     c32:	a7 94       	ror	r10
     c34:	97 94       	ror	r9
     c36:	87 94       	ror	r8
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	a1 f6       	brne	.-88     	; 0xbe4 <__mulsf3+0xb6>
     c3c:	2b 89       	ldd	r18, Y+19	; 0x13
     c3e:	3c 89       	ldd	r19, Y+20	; 0x14
     c40:	eb 85       	ldd	r30, Y+11	; 0x0b
     c42:	fc 85       	ldd	r31, Y+12	; 0x0c
     c44:	2e 0f       	add	r18, r30
     c46:	3f 1f       	adc	r19, r31
     c48:	2e 5f       	subi	r18, 0xFE	; 254
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	3c 83       	std	Y+4, r19	; 0x04
     c4e:	2b 83       	std	Y+3, r18	; 0x03
     c50:	21 e0       	ldi	r18, 0x01	; 1
     c52:	ea 89       	ldd	r30, Y+18	; 0x12
     c54:	3a 85       	ldd	r19, Y+10	; 0x0a
     c56:	e3 13       	cpse	r30, r19
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <__mulsf3+0x12e>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	2a 83       	std	Y+2, r18	; 0x02
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	0c c0       	rjmp	.+24     	; 0xc7c <__mulsf3+0x14e>
     c64:	80 ff       	sbrs	r24, 0
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <__mulsf3+0x144>
     c68:	76 95       	lsr	r23
     c6a:	67 95       	ror	r22
     c6c:	57 95       	ror	r21
     c6e:	47 95       	ror	r20
     c70:	70 68       	ori	r23, 0x80	; 128
     c72:	b6 95       	lsr	r27
     c74:	a7 95       	ror	r26
     c76:	97 95       	ror	r25
     c78:	87 95       	ror	r24
     c7a:	31 96       	adiw	r30, 0x01	; 1
     c7c:	b7 fd       	sbrc	r27, 7
     c7e:	f2 cf       	rjmp	.-28     	; 0xc64 <__mulsf3+0x136>
     c80:	9f 01       	movw	r18, r30
     c82:	0c c0       	rjmp	.+24     	; 0xc9c <__mulsf3+0x16e>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	aa 1f       	adc	r26, r26
     c8a:	bb 1f       	adc	r27, r27
     c8c:	77 fd       	sbrc	r23, 7
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	66 1f       	adc	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	31 09       	sbc	r19, r1
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	a1 05       	cpc	r26, r1
     ca0:	e0 e4       	ldi	r30, 0x40	; 64
     ca2:	be 07       	cpc	r27, r30
     ca4:	78 f3       	brcs	.-34     	; 0xc84 <__mulsf3+0x156>
     ca6:	2b 83       	std	Y+3, r18	; 0x03
     ca8:	3c 83       	std	Y+4, r19	; 0x04
     caa:	8c 01       	movw	r16, r24
     cac:	9d 01       	movw	r18, r26
     cae:	0f 77       	andi	r16, 0x7F	; 127
     cb0:	11 27       	eor	r17, r17
     cb2:	22 27       	eor	r18, r18
     cb4:	33 27       	eor	r19, r19
     cb6:	00 34       	cpi	r16, 0x40	; 64
     cb8:	11 05       	cpc	r17, r1
     cba:	21 05       	cpc	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	59 f4       	brne	.+22     	; 0xcd6 <__mulsf3+0x1a8>
     cc0:	87 fd       	sbrc	r24, 7
     cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <__mulsf3+0x1a8>
     cc4:	45 2b       	or	r20, r21
     cc6:	46 2b       	or	r20, r22
     cc8:	47 2b       	or	r20, r23
     cca:	29 f0       	breq	.+10     	; 0xcd6 <__mulsf3+0x1a8>
     ccc:	80 5c       	subi	r24, 0xC0	; 192
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	af 4f       	sbci	r26, 0xFF	; 255
     cd2:	bf 4f       	sbci	r27, 0xFF	; 255
     cd4:	80 78       	andi	r24, 0x80	; 128
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	9e 83       	std	Y+6, r25	; 0x06
     cda:	af 83       	std	Y+7, r26	; 0x07
     cdc:	b8 87       	std	Y+8, r27	; 0x08
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <__mulsf3+0x1be>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 fb 07 	call	0xff6	; 0xff6 <__pack_f>
     cf0:	a0 96       	adiw	r28, 0x20	; 32
     cf2:	e0 e1       	ldi	r30, 0x10	; 16
     cf4:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__epilogue_restores__+0x4>

00000cf8 <__divsf3>:
     cf8:	a8 e1       	ldi	r26, 0x18	; 24
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e2 e8       	ldi	r30, 0x82	; 130
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__prologue_saves__+0x14>
     d04:	6d 8b       	std	Y+21, r22	; 0x15
     d06:	7e 8b       	std	Y+22, r23	; 0x16
     d08:	8f 8b       	std	Y+23, r24	; 0x17
     d0a:	98 8f       	std	Y+24, r25	; 0x18
     d0c:	29 8b       	std	Y+17, r18	; 0x11
     d0e:	3a 8b       	std	Y+18, r19	; 0x12
     d10:	4b 8b       	std	Y+19, r20	; 0x13
     d12:	5c 8b       	std	Y+20, r21	; 0x14
     d14:	be 01       	movw	r22, r28
     d16:	67 5f       	subi	r22, 0xF7	; 247
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	ce 01       	movw	r24, r28
     d1c:	45 96       	adiw	r24, 0x15	; 21
     d1e:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     d22:	be 01       	movw	r22, r28
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	ce 01       	movw	r24, r28
     d2a:	41 96       	adiw	r24, 0x11	; 17
     d2c:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     d30:	99 85       	ldd	r25, Y+9	; 0x09
     d32:	92 30       	cpi	r25, 0x02	; 2
     d34:	08 f4       	brcc	.+2      	; 0xd38 <__divsf3+0x40>
     d36:	75 c0       	rjmp	.+234    	; 0xe22 <__divsf3+0x12a>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <__divsf3+0x48>
     d3e:	74 c0       	rjmp	.+232    	; 0xe28 <__divsf3+0x130>
     d40:	2a 85       	ldd	r18, Y+10	; 0x0a
     d42:	3a 81       	ldd	r19, Y+2	; 0x02
     d44:	23 27       	eor	r18, r19
     d46:	2a 87       	std	Y+10, r18	; 0x0a
     d48:	94 30       	cpi	r25, 0x04	; 4
     d4a:	11 f0       	breq	.+4      	; 0xd50 <__divsf3+0x58>
     d4c:	92 30       	cpi	r25, 0x02	; 2
     d4e:	19 f4       	brne	.+6      	; 0xd56 <__divsf3+0x5e>
     d50:	98 13       	cpse	r25, r24
     d52:	67 c0       	rjmp	.+206    	; 0xe22 <__divsf3+0x12a>
     d54:	6c c0       	rjmp	.+216    	; 0xe2e <__divsf3+0x136>
     d56:	84 30       	cpi	r24, 0x04	; 4
     d58:	39 f4       	brne	.+14     	; 0xd68 <__divsf3+0x70>
     d5a:	1d 86       	std	Y+13, r1	; 0x0d
     d5c:	1e 86       	std	Y+14, r1	; 0x0e
     d5e:	1f 86       	std	Y+15, r1	; 0x0f
     d60:	18 8a       	std	Y+16, r1	; 0x10
     d62:	1c 86       	std	Y+12, r1	; 0x0c
     d64:	1b 86       	std	Y+11, r1	; 0x0b
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <__divsf3+0x78>
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	29 f4       	brne	.+10     	; 0xd76 <__divsf3+0x7e>
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	89 87       	std	Y+9, r24	; 0x09
     d70:	ce 01       	movw	r24, r28
     d72:	09 96       	adiw	r24, 0x09	; 9
     d74:	5e c0       	rjmp	.+188    	; 0xe32 <__divsf3+0x13a>
     d76:	8b 85       	ldd	r24, Y+11	; 0x0b
     d78:	9c 85       	ldd	r25, Y+12	; 0x0c
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	82 1b       	sub	r24, r18
     d80:	93 0b       	sbc	r25, r19
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	8b 87       	std	Y+11, r24	; 0x0b
     d86:	4d 85       	ldd	r20, Y+13	; 0x0d
     d88:	5e 85       	ldd	r21, Y+14	; 0x0e
     d8a:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8c:	78 89       	ldd	r23, Y+16	; 0x10
     d8e:	cd 80       	ldd	r12, Y+5	; 0x05
     d90:	de 80       	ldd	r13, Y+6	; 0x06
     d92:	ef 80       	ldd	r14, Y+7	; 0x07
     d94:	f8 84       	ldd	r15, Y+8	; 0x08
     d96:	4c 15       	cp	r20, r12
     d98:	5d 05       	cpc	r21, r13
     d9a:	6e 05       	cpc	r22, r14
     d9c:	7f 05       	cpc	r23, r15
     d9e:	38 f4       	brcc	.+14     	; 0xdae <__divsf3+0xb6>
     da0:	44 0f       	add	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	66 1f       	adc	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9c 87       	std	Y+12, r25	; 0x0c
     dac:	8b 87       	std	Y+11, r24	; 0x0b
     dae:	ef e1       	ldi	r30, 0x1F	; 31
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e4       	ldi	r19, 0x40	; 64
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	dc 01       	movw	r26, r24
     dc0:	4c 15       	cp	r20, r12
     dc2:	5d 05       	cpc	r21, r13
     dc4:	6e 05       	cpc	r22, r14
     dc6:	7f 05       	cpc	r23, r15
     dc8:	40 f0       	brcs	.+16     	; 0xdda <__divsf3+0xe2>
     dca:	80 2b       	or	r24, r16
     dcc:	91 2b       	or	r25, r17
     dce:	a2 2b       	or	r26, r18
     dd0:	b3 2b       	or	r27, r19
     dd2:	4c 19       	sub	r20, r12
     dd4:	5d 09       	sbc	r21, r13
     dd6:	6e 09       	sbc	r22, r14
     dd8:	7f 09       	sbc	r23, r15
     dda:	36 95       	lsr	r19
     ddc:	27 95       	ror	r18
     dde:	17 95       	ror	r17
     de0:	07 95       	ror	r16
     de2:	44 0f       	add	r20, r20
     de4:	55 1f       	adc	r21, r21
     de6:	66 1f       	adc	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	49 f7       	brne	.-46     	; 0xdc0 <__divsf3+0xc8>
     dee:	8c 01       	movw	r16, r24
     df0:	9d 01       	movw	r18, r26
     df2:	0f 77       	andi	r16, 0x7F	; 127
     df4:	11 27       	eor	r17, r17
     df6:	22 27       	eor	r18, r18
     df8:	33 27       	eor	r19, r19
     dfa:	00 34       	cpi	r16, 0x40	; 64
     dfc:	11 05       	cpc	r17, r1
     dfe:	21 05       	cpc	r18, r1
     e00:	31 05       	cpc	r19, r1
     e02:	59 f4       	brne	.+22     	; 0xe1a <__divsf3+0x122>
     e04:	87 fd       	sbrc	r24, 7
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <__divsf3+0x122>
     e08:	45 2b       	or	r20, r21
     e0a:	46 2b       	or	r20, r22
     e0c:	47 2b       	or	r20, r23
     e0e:	29 f0       	breq	.+10     	; 0xe1a <__divsf3+0x122>
     e10:	80 5c       	subi	r24, 0xC0	; 192
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	af 4f       	sbci	r26, 0xFF	; 255
     e16:	bf 4f       	sbci	r27, 0xFF	; 255
     e18:	80 78       	andi	r24, 0x80	; 128
     e1a:	8d 87       	std	Y+13, r24	; 0x0d
     e1c:	9e 87       	std	Y+14, r25	; 0x0e
     e1e:	af 87       	std	Y+15, r26	; 0x0f
     e20:	b8 8b       	std	Y+16, r27	; 0x10
     e22:	ce 01       	movw	r24, r28
     e24:	09 96       	adiw	r24, 0x09	; 9
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <__divsf3+0x13a>
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__divsf3+0x13a>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	0e 94 fb 07 	call	0xff6	; 0xff6 <__pack_f>
     e36:	68 96       	adiw	r28, 0x18	; 24
     e38:	e8 e0       	ldi	r30, 0x08	; 8
     e3a:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__epilogue_restores__+0x14>

00000e3e <__gtsf2>:
     e3e:	a8 e1       	ldi	r26, 0x18	; 24
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e2       	ldi	r30, 0x25	; 37
     e44:	f7 e0       	ldi	r31, 0x07	; 7
     e46:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__+0x20>
     e4a:	6d 8b       	std	Y+21, r22	; 0x15
     e4c:	7e 8b       	std	Y+22, r23	; 0x16
     e4e:	8f 8b       	std	Y+23, r24	; 0x17
     e50:	98 8f       	std	Y+24, r25	; 0x18
     e52:	29 8b       	std	Y+17, r18	; 0x11
     e54:	3a 8b       	std	Y+18, r19	; 0x12
     e56:	4b 8b       	std	Y+19, r20	; 0x13
     e58:	5c 8b       	std	Y+20, r21	; 0x14
     e5a:	be 01       	movw	r22, r28
     e5c:	67 5f       	subi	r22, 0xF7	; 247
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	ce 01       	movw	r24, r28
     e62:	45 96       	adiw	r24, 0x15	; 21
     e64:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	ce 01       	movw	r24, r28
     e70:	41 96       	adiw	r24, 0x11	; 17
     e72:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	58 f0       	brcs	.+22     	; 0xe92 <__gtsf2+0x54>
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	40 f0       	brcs	.+16     	; 0xe92 <__gtsf2+0x54>
     e82:	be 01       	movw	r22, r28
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	ce 01       	movw	r24, r28
     e8a:	09 96       	adiw	r24, 0x09	; 9
     e8c:	0e 94 34 09 	call	0x1268	; 0x1268 <__fpcmp_parts_f>
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <__gtsf2+0x56>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	68 96       	adiw	r28, 0x18	; 24
     e96:	e2 e0       	ldi	r30, 0x02	; 2
     e98:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__+0x20>

00000e9c <__gesf2>:
     e9c:	a8 e1       	ldi	r26, 0x18	; 24
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e4 e5       	ldi	r30, 0x54	; 84
     ea2:	f7 e0       	ldi	r31, 0x07	; 7
     ea4:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__+0x20>
     ea8:	6d 8b       	std	Y+21, r22	; 0x15
     eaa:	7e 8b       	std	Y+22, r23	; 0x16
     eac:	8f 8b       	std	Y+23, r24	; 0x17
     eae:	98 8f       	std	Y+24, r25	; 0x18
     eb0:	29 8b       	std	Y+17, r18	; 0x11
     eb2:	3a 8b       	std	Y+18, r19	; 0x12
     eb4:	4b 8b       	std	Y+19, r20	; 0x13
     eb6:	5c 8b       	std	Y+20, r21	; 0x14
     eb8:	be 01       	movw	r22, r28
     eba:	67 5f       	subi	r22, 0xF7	; 247
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	ce 01       	movw	r24, r28
     ec0:	45 96       	adiw	r24, 0x15	; 21
     ec2:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     ec6:	be 01       	movw	r22, r28
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	ce 01       	movw	r24, r28
     ece:	41 96       	adiw	r24, 0x11	; 17
     ed0:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	58 f0       	brcs	.+22     	; 0xef0 <__gesf2+0x54>
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	40 f0       	brcs	.+16     	; 0xef0 <__gesf2+0x54>
     ee0:	be 01       	movw	r22, r28
     ee2:	6f 5f       	subi	r22, 0xFF	; 255
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	ce 01       	movw	r24, r28
     ee8:	09 96       	adiw	r24, 0x09	; 9
     eea:	0e 94 34 09 	call	0x1268	; 0x1268 <__fpcmp_parts_f>
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <__gesf2+0x56>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	68 96       	adiw	r28, 0x18	; 24
     ef4:	e2 e0       	ldi	r30, 0x02	; 2
     ef6:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__+0x20>

00000efa <__ltsf2>:
     efa:	a8 e1       	ldi	r26, 0x18	; 24
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e8       	ldi	r30, 0x83	; 131
     f00:	f7 e0       	ldi	r31, 0x07	; 7
     f02:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__+0x20>
     f06:	6d 8b       	std	Y+21, r22	; 0x15
     f08:	7e 8b       	std	Y+22, r23	; 0x16
     f0a:	8f 8b       	std	Y+23, r24	; 0x17
     f0c:	98 8f       	std	Y+24, r25	; 0x18
     f0e:	29 8b       	std	Y+17, r18	; 0x11
     f10:	3a 8b       	std	Y+18, r19	; 0x12
     f12:	4b 8b       	std	Y+19, r20	; 0x13
     f14:	5c 8b       	std	Y+20, r21	; 0x14
     f16:	be 01       	movw	r22, r28
     f18:	67 5f       	subi	r22, 0xF7	; 247
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	ce 01       	movw	r24, r28
     f1e:	45 96       	adiw	r24, 0x15	; 21
     f20:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     f24:	be 01       	movw	r22, r28
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	ce 01       	movw	r24, r28
     f2c:	41 96       	adiw	r24, 0x11	; 17
     f2e:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	58 f0       	brcs	.+22     	; 0xf4e <__ltsf2+0x54>
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	40 f0       	brcs	.+16     	; 0xf4e <__ltsf2+0x54>
     f3e:	be 01       	movw	r22, r28
     f40:	6f 5f       	subi	r22, 0xFF	; 255
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	ce 01       	movw	r24, r28
     f46:	09 96       	adiw	r24, 0x09	; 9
     f48:	0e 94 34 09 	call	0x1268	; 0x1268 <__fpcmp_parts_f>
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <__ltsf2+0x56>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	68 96       	adiw	r28, 0x18	; 24
     f52:	e2 e0       	ldi	r30, 0x02	; 2
     f54:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__+0x20>

00000f58 <__fixsfsi>:
     f58:	ac e0       	ldi	r26, 0x0C	; 12
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e2 eb       	ldi	r30, 0xB2	; 178
     f5e:	f7 e0       	ldi	r31, 0x07	; 7
     f60:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__prologue_saves__+0x1c>
     f64:	69 87       	std	Y+9, r22	; 0x09
     f66:	7a 87       	std	Y+10, r23	; 0x0a
     f68:	8b 87       	std	Y+11, r24	; 0x0b
     f6a:	9c 87       	std	Y+12, r25	; 0x0c
     f6c:	be 01       	movw	r22, r28
     f6e:	6f 5f       	subi	r22, 0xFF	; 255
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	ce 01       	movw	r24, r28
     f74:	09 96       	adiw	r24, 0x09	; 9
     f76:	0e 94 c5 08 	call	0x118a	; 0x118a <__unpack_f>
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 f1       	breq	.+100    	; 0xfe4 <__fixsfsi+0x8c>
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	80 f1       	brcs	.+96     	; 0xfe4 <__fixsfsi+0x8c>
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	41 f4       	brne	.+16     	; 0xf98 <__fixsfsi+0x40>
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	88 23       	and	r24, r24
     f8c:	31 f1       	breq	.+76     	; 0xfda <__fixsfsi+0x82>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e8       	ldi	r19, 0x80	; 128
     f96:	29 c0       	rjmp	.+82     	; 0xfea <__fixsfsi+0x92>
     f98:	2b 81       	ldd	r18, Y+3	; 0x03
     f9a:	3c 81       	ldd	r19, Y+4	; 0x04
     f9c:	37 fd       	sbrc	r19, 7
     f9e:	22 c0       	rjmp	.+68     	; 0xfe4 <__fixsfsi+0x8c>
     fa0:	2f 31       	cpi	r18, 0x1F	; 31
     fa2:	31 05       	cpc	r19, r1
     fa4:	8c f7       	brge	.-30     	; 0xf88 <__fixsfsi+0x30>
     fa6:	8e e1       	ldi	r24, 0x1E	; 30
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	82 1b       	sub	r24, r18
     fac:	93 0b       	sbc	r25, r19
     fae:	0d 81       	ldd	r16, Y+5	; 0x05
     fb0:	1e 81       	ldd	r17, Y+6	; 0x06
     fb2:	2f 81       	ldd	r18, Y+7	; 0x07
     fb4:	38 85       	ldd	r19, Y+8	; 0x08
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <__fixsfsi+0x68>
     fb8:	36 95       	lsr	r19
     fba:	27 95       	ror	r18
     fbc:	17 95       	ror	r17
     fbe:	07 95       	ror	r16
     fc0:	8a 95       	dec	r24
     fc2:	d2 f7       	brpl	.-12     	; 0xfb8 <__fixsfsi+0x60>
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	88 23       	and	r24, r24
     fc8:	81 f0       	breq	.+32     	; 0xfea <__fixsfsi+0x92>
     fca:	30 95       	com	r19
     fcc:	20 95       	com	r18
     fce:	10 95       	com	r17
     fd0:	01 95       	neg	r16
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	2f 4f       	sbci	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <__fixsfsi+0x92>
     fda:	0f ef       	ldi	r16, 0xFF	; 255
     fdc:	1f ef       	ldi	r17, 0xFF	; 255
     fde:	2f ef       	ldi	r18, 0xFF	; 255
     fe0:	3f e7       	ldi	r19, 0x7F	; 127
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <__fixsfsi+0x92>
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	98 01       	movw	r18, r16
     fea:	b8 01       	movw	r22, r16
     fec:	c9 01       	movw	r24, r18
     fee:	2c 96       	adiw	r28, 0x0c	; 12
     ff0:	e4 e0       	ldi	r30, 0x04	; 4
     ff2:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__epilogue_restores__+0x1c>

00000ff6 <__pack_f>:
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	dc 01       	movw	r26, r24
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	4d 91       	ld	r20, X+
    1004:	5d 91       	ld	r21, X+
    1006:	6d 91       	ld	r22, X+
    1008:	7c 91       	ld	r23, X
    100a:	17 97       	sbiw	r26, 0x07	; 7
    100c:	11 96       	adiw	r26, 0x01	; 1
    100e:	ec 91       	ld	r30, X
    1010:	11 97       	sbiw	r26, 0x01	; 1
    1012:	8c 91       	ld	r24, X
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	20 f4       	brcc	.+8      	; 0x1020 <__pack_f+0x2a>
    1018:	60 61       	ori	r22, 0x10	; 16
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a6 c0       	rjmp	.+332    	; 0x116c <__pack_f+0x176>
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	09 f4       	brne	.+2      	; 0x1026 <__pack_f+0x30>
    1024:	9e c0       	rjmp	.+316    	; 0x1162 <__pack_f+0x16c>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	09 f4       	brne	.+2      	; 0x102c <__pack_f+0x36>
    102a:	95 c0       	rjmp	.+298    	; 0x1156 <__pack_f+0x160>
    102c:	41 15       	cp	r20, r1
    102e:	51 05       	cpc	r21, r1
    1030:	61 05       	cpc	r22, r1
    1032:	71 05       	cpc	r23, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <__pack_f+0x42>
    1036:	92 c0       	rjmp	.+292    	; 0x115c <__pack_f+0x166>
    1038:	12 96       	adiw	r26, 0x02	; 2
    103a:	2d 91       	ld	r18, X+
    103c:	3c 91       	ld	r19, X
    103e:	13 97       	sbiw	r26, 0x03	; 3
    1040:	22 38       	cpi	r18, 0x82	; 130
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	38 07       	cpc	r19, r24
    1046:	0c f0       	brlt	.+2      	; 0x104a <__pack_f+0x54>
    1048:	58 c0       	rjmp	.+176    	; 0x10fa <__pack_f+0x104>
    104a:	c2 e8       	ldi	r28, 0x82	; 130
    104c:	df ef       	ldi	r29, 0xFF	; 255
    104e:	c2 1b       	sub	r28, r18
    1050:	d3 0b       	sbc	r29, r19
    1052:	ca 31       	cpi	r28, 0x1A	; 26
    1054:	d1 05       	cpc	r29, r1
    1056:	6c f5       	brge	.+90     	; 0x10b2 <__pack_f+0xbc>
    1058:	8a 01       	movw	r16, r20
    105a:	9b 01       	movw	r18, r22
    105c:	0c 2e       	mov	r0, r28
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <__pack_f+0x72>
    1060:	36 95       	lsr	r19
    1062:	27 95       	ror	r18
    1064:	17 95       	ror	r17
    1066:	07 95       	ror	r16
    1068:	0a 94       	dec	r0
    106a:	d2 f7       	brpl	.-12     	; 0x1060 <__pack_f+0x6a>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a0 e0       	ldi	r26, 0x00	; 0
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	0c 2e       	mov	r0, r28
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <__pack_f+0x8a>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	aa 1f       	adc	r26, r26
    107e:	bb 1f       	adc	r27, r27
    1080:	0a 94       	dec	r0
    1082:	d2 f7       	brpl	.-12     	; 0x1078 <__pack_f+0x82>
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	a1 09       	sbc	r26, r1
    1088:	b1 09       	sbc	r27, r1
    108a:	84 23       	and	r24, r20
    108c:	95 23       	and	r25, r21
    108e:	a6 23       	and	r26, r22
    1090:	b7 23       	and	r27, r23
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	89 2b       	or	r24, r25
    109c:	8a 2b       	or	r24, r26
    109e:	8b 2b       	or	r24, r27
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <__pack_f+0xb2>
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	ba 01       	movw	r22, r20
    10a8:	40 2b       	or	r20, r16
    10aa:	51 2b       	or	r21, r17
    10ac:	62 2b       	or	r22, r18
    10ae:	73 2b       	or	r23, r19
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <__pack_f+0xc2>
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	ba 01       	movw	r22, r20
    10b8:	db 01       	movw	r26, r22
    10ba:	ca 01       	movw	r24, r20
    10bc:	8f 77       	andi	r24, 0x7F	; 127
    10be:	99 27       	eor	r25, r25
    10c0:	aa 27       	eor	r26, r26
    10c2:	bb 27       	eor	r27, r27
    10c4:	80 34       	cpi	r24, 0x40	; 64
    10c6:	91 05       	cpc	r25, r1
    10c8:	a1 05       	cpc	r26, r1
    10ca:	b1 05       	cpc	r27, r1
    10cc:	39 f4       	brne	.+14     	; 0x10dc <__pack_f+0xe6>
    10ce:	47 ff       	sbrs	r20, 7
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <__pack_f+0xee>
    10d2:	40 5c       	subi	r20, 0xC0	; 192
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	6f 4f       	sbci	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <__pack_f+0xee>
    10dc:	41 5c       	subi	r20, 0xC1	; 193
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	6f 4f       	sbci	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	41 15       	cp	r20, r1
    10ea:	51 05       	cpc	r21, r1
    10ec:	61 05       	cpc	r22, r1
    10ee:	20 e4       	ldi	r18, 0x40	; 64
    10f0:	72 07       	cpc	r23, r18
    10f2:	48 f5       	brcc	.+82     	; 0x1146 <__pack_f+0x150>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	26 c0       	rjmp	.+76     	; 0x1146 <__pack_f+0x150>
    10fa:	20 38       	cpi	r18, 0x80	; 128
    10fc:	31 05       	cpc	r19, r1
    10fe:	8c f5       	brge	.+98     	; 0x1162 <__pack_f+0x16c>
    1100:	db 01       	movw	r26, r22
    1102:	ca 01       	movw	r24, r20
    1104:	8f 77       	andi	r24, 0x7F	; 127
    1106:	99 27       	eor	r25, r25
    1108:	aa 27       	eor	r26, r26
    110a:	bb 27       	eor	r27, r27
    110c:	80 34       	cpi	r24, 0x40	; 64
    110e:	91 05       	cpc	r25, r1
    1110:	a1 05       	cpc	r26, r1
    1112:	b1 05       	cpc	r27, r1
    1114:	39 f4       	brne	.+14     	; 0x1124 <__pack_f+0x12e>
    1116:	47 ff       	sbrs	r20, 7
    1118:	09 c0       	rjmp	.+18     	; 0x112c <__pack_f+0x136>
    111a:	40 5c       	subi	r20, 0xC0	; 192
    111c:	5f 4f       	sbci	r21, 0xFF	; 255
    111e:	6f 4f       	sbci	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__pack_f+0x136>
    1124:	41 5c       	subi	r20, 0xC1	; 193
    1126:	5f 4f       	sbci	r21, 0xFF	; 255
    1128:	6f 4f       	sbci	r22, 0xFF	; 255
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	77 fd       	sbrc	r23, 7
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <__pack_f+0x142>
    1130:	c9 01       	movw	r24, r18
    1132:	81 58       	subi	r24, 0x81	; 129
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <__pack_f+0x150>
    1138:	76 95       	lsr	r23
    113a:	67 95       	ror	r22
    113c:	57 95       	ror	r21
    113e:	47 95       	ror	r20
    1140:	c9 01       	movw	r24, r18
    1142:	80 58       	subi	r24, 0x80	; 128
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	97 e0       	ldi	r25, 0x07	; 7
    1148:	76 95       	lsr	r23
    114a:	67 95       	ror	r22
    114c:	57 95       	ror	r21
    114e:	47 95       	ror	r20
    1150:	9a 95       	dec	r25
    1152:	d1 f7       	brne	.-12     	; 0x1148 <__pack_f+0x152>
    1154:	0b c0       	rjmp	.+22     	; 0x116c <__pack_f+0x176>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <__pack_f+0x170>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	05 c0       	rjmp	.+10     	; 0x116c <__pack_f+0x176>
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	ba 01       	movw	r22, r20
    116c:	98 2f       	mov	r25, r24
    116e:	96 95       	lsr	r25
    1170:	e0 fb       	bst	r30, 0
    1172:	97 f9       	bld	r25, 7
    1174:	36 2f       	mov	r19, r22
    1176:	80 fb       	bst	r24, 0
    1178:	37 f9       	bld	r19, 7
    117a:	64 2f       	mov	r22, r20
    117c:	75 2f       	mov	r23, r21
    117e:	83 2f       	mov	r24, r19
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <__unpack_f>:
    118a:	cf 92       	push	r12
    118c:	df 92       	push	r13
    118e:	ef 92       	push	r14
    1190:	dc 01       	movw	r26, r24
    1192:	fb 01       	movw	r30, r22
    1194:	cc 90       	ld	r12, X
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	dc 90       	ld	r13, X
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	8c 91       	ld	r24, X
    11a0:	12 97       	sbiw	r26, 0x02	; 2
    11a2:	3f e7       	ldi	r19, 0x7F	; 127
    11a4:	e3 2e       	mov	r14, r19
    11a6:	e8 22       	and	r14, r24
    11a8:	6e 2d       	mov	r22, r14
    11aa:	a6 01       	movw	r20, r12
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	98 2f       	mov	r25, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	99 27       	eor	r25, r25
    11b4:	99 1f       	adc	r25, r25
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	2c 91       	ld	r18, X
    11ba:	82 2f       	mov	r24, r18
    11bc:	88 0f       	add	r24, r24
    11be:	89 2b       	or	r24, r25
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	27 fb       	bst	r18, 7
    11c4:	22 27       	eor	r18, r18
    11c6:	20 f9       	bld	r18, 0
    11c8:	21 83       	std	Z+1, r18	; 0x01
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	29 f5       	brne	.+74     	; 0x1218 <__unpack_f+0x8e>
    11ce:	41 15       	cp	r20, r1
    11d0:	51 05       	cpc	r21, r1
    11d2:	61 05       	cpc	r22, r1
    11d4:	71 05       	cpc	r23, r1
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__unpack_f+0x52>
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	27 c0       	rjmp	.+78     	; 0x122a <__unpack_f+0xa0>
    11dc:	82 e8       	ldi	r24, 0x82	; 130
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	93 83       	std	Z+3, r25	; 0x03
    11e2:	82 83       	std	Z+2, r24	; 0x02
    11e4:	27 e0       	ldi	r18, 0x07	; 7
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	2a 95       	dec	r18
    11f0:	d1 f7       	brne	.-12     	; 0x11e6 <__unpack_f+0x5c>
    11f2:	83 e0       	ldi	r24, 0x03	; 3
    11f4:	80 83       	st	Z, r24
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <__unpack_f+0x80>
    11f8:	44 0f       	add	r20, r20
    11fa:	55 1f       	adc	r21, r21
    11fc:	66 1f       	adc	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	93 83       	std	Z+3, r25	; 0x03
    1208:	82 83       	std	Z+2, r24	; 0x02
    120a:	41 15       	cp	r20, r1
    120c:	51 05       	cpc	r21, r1
    120e:	61 05       	cpc	r22, r1
    1210:	80 e4       	ldi	r24, 0x40	; 64
    1212:	78 07       	cpc	r23, r24
    1214:	88 f3       	brcs	.-30     	; 0x11f8 <__unpack_f+0x6e>
    1216:	20 c0       	rjmp	.+64     	; 0x1258 <__unpack_f+0xce>
    1218:	8f 3f       	cpi	r24, 0xFF	; 255
    121a:	91 05       	cpc	r25, r1
    121c:	79 f4       	brne	.+30     	; 0x123c <__unpack_f+0xb2>
    121e:	41 15       	cp	r20, r1
    1220:	51 05       	cpc	r21, r1
    1222:	61 05       	cpc	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	19 f4       	brne	.+6      	; 0x122e <__unpack_f+0xa4>
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	80 83       	st	Z, r24
    122c:	19 c0       	rjmp	.+50     	; 0x1260 <__unpack_f+0xd6>
    122e:	e4 fe       	sbrs	r14, 4
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <__unpack_f+0xae>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 83       	st	Z, r24
    1236:	10 c0       	rjmp	.+32     	; 0x1258 <__unpack_f+0xce>
    1238:	10 82       	st	Z, r1
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <__unpack_f+0xce>
    123c:	8f 57       	subi	r24, 0x7F	; 127
    123e:	91 09       	sbc	r25, r1
    1240:	93 83       	std	Z+3, r25	; 0x03
    1242:	82 83       	std	Z+2, r24	; 0x02
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	80 83       	st	Z, r24
    1248:	87 e0       	ldi	r24, 0x07	; 7
    124a:	44 0f       	add	r20, r20
    124c:	55 1f       	adc	r21, r21
    124e:	66 1f       	adc	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	8a 95       	dec	r24
    1254:	d1 f7       	brne	.-12     	; 0x124a <__unpack_f+0xc0>
    1256:	70 64       	ori	r23, 0x40	; 64
    1258:	44 83       	std	Z+4, r20	; 0x04
    125a:	55 83       	std	Z+5, r21	; 0x05
    125c:	66 83       	std	Z+6, r22	; 0x06
    125e:	77 83       	std	Z+7, r23	; 0x07
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	08 95       	ret

00001268 <__fpcmp_parts_f>:
    1268:	cf 93       	push	r28
    126a:	fc 01       	movw	r30, r24
    126c:	db 01       	movw	r26, r22
    126e:	90 81       	ld	r25, Z
    1270:	92 30       	cpi	r25, 0x02	; 2
    1272:	08 f4       	brcc	.+2      	; 0x1276 <__fpcmp_parts_f+0xe>
    1274:	52 c0       	rjmp	.+164    	; 0x131a <__fpcmp_parts_f+0xb2>
    1276:	8c 91       	ld	r24, X
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	08 f4       	brcc	.+2      	; 0x127e <__fpcmp_parts_f+0x16>
    127c:	4e c0       	rjmp	.+156    	; 0x131a <__fpcmp_parts_f+0xb2>
    127e:	94 30       	cpi	r25, 0x04	; 4
    1280:	71 f4       	brne	.+28     	; 0x129e <__fpcmp_parts_f+0x36>
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	39 f4       	brne	.+14     	; 0x1294 <__fpcmp_parts_f+0x2c>
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	2c 91       	ld	r18, X
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	28 1b       	sub	r18, r24
    1290:	31 09       	sbc	r19, r1
    1292:	48 c0       	rjmp	.+144    	; 0x1324 <__fpcmp_parts_f+0xbc>
    1294:	81 81       	ldd	r24, Z+1	; 0x01
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <__fpcmp_parts_f+0x34>
    129a:	3f c0       	rjmp	.+126    	; 0x131a <__fpcmp_parts_f+0xb2>
    129c:	3b c0       	rjmp	.+118    	; 0x1314 <__fpcmp_parts_f+0xac>
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	29 f4       	brne	.+10     	; 0x12ac <__fpcmp_parts_f+0x44>
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	8c 91       	ld	r24, X
    12a6:	81 11       	cpse	r24, r1
    12a8:	38 c0       	rjmp	.+112    	; 0x131a <__fpcmp_parts_f+0xb2>
    12aa:	34 c0       	rjmp	.+104    	; 0x1314 <__fpcmp_parts_f+0xac>
    12ac:	92 30       	cpi	r25, 0x02	; 2
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <__fpcmp_parts_f+0x4e>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	b9 f7       	brne	.-18     	; 0x12a2 <__fpcmp_parts_f+0x3a>
    12b4:	35 c0       	rjmp	.+106    	; 0x1320 <__fpcmp_parts_f+0xb8>
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	69 f3       	breq	.-38     	; 0x1294 <__fpcmp_parts_f+0x2c>
    12ba:	c1 81       	ldd	r28, Z+1	; 0x01
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	8c 91       	ld	r24, X
    12c0:	11 97       	sbiw	r26, 0x01	; 1
    12c2:	c8 13       	cpse	r28, r24
    12c4:	1d c0       	rjmp	.+58     	; 0x1300 <__fpcmp_parts_f+0x98>
    12c6:	22 81       	ldd	r18, Z+2	; 0x02
    12c8:	33 81       	ldd	r19, Z+3	; 0x03
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	8d 91       	ld	r24, X+
    12ce:	9c 91       	ld	r25, X
    12d0:	13 97       	sbiw	r26, 0x03	; 3
    12d2:	82 17       	cp	r24, r18
    12d4:	93 07       	cpc	r25, r19
    12d6:	0c f4       	brge	.+2      	; 0x12da <__fpcmp_parts_f+0x72>
    12d8:	13 c0       	rjmp	.+38     	; 0x1300 <__fpcmp_parts_f+0x98>
    12da:	28 17       	cp	r18, r24
    12dc:	39 07       	cpc	r19, r25
    12de:	0c f4       	brge	.+2      	; 0x12e2 <__fpcmp_parts_f+0x7a>
    12e0:	17 c0       	rjmp	.+46     	; 0x1310 <__fpcmp_parts_f+0xa8>
    12e2:	44 81       	ldd	r20, Z+4	; 0x04
    12e4:	55 81       	ldd	r21, Z+5	; 0x05
    12e6:	66 81       	ldd	r22, Z+6	; 0x06
    12e8:	77 81       	ldd	r23, Z+7	; 0x07
    12ea:	14 96       	adiw	r26, 0x04	; 4
    12ec:	8d 91       	ld	r24, X+
    12ee:	9d 91       	ld	r25, X+
    12f0:	0d 90       	ld	r0, X+
    12f2:	bc 91       	ld	r27, X
    12f4:	a0 2d       	mov	r26, r0
    12f6:	84 17       	cp	r24, r20
    12f8:	95 07       	cpc	r25, r21
    12fa:	a6 07       	cpc	r26, r22
    12fc:	b7 07       	cpc	r27, r23
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <__fpcmp_parts_f+0x9e>
    1300:	c1 11       	cpse	r28, r1
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <__fpcmp_parts_f+0xac>
    1304:	0a c0       	rjmp	.+20     	; 0x131a <__fpcmp_parts_f+0xb2>
    1306:	48 17       	cp	r20, r24
    1308:	59 07       	cpc	r21, r25
    130a:	6a 07       	cpc	r22, r26
    130c:	7b 07       	cpc	r23, r27
    130e:	40 f4       	brcc	.+16     	; 0x1320 <__fpcmp_parts_f+0xb8>
    1310:	c1 11       	cpse	r28, r1
    1312:	03 c0       	rjmp	.+6      	; 0x131a <__fpcmp_parts_f+0xb2>
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	3f ef       	ldi	r19, 0xFF	; 255
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <__fpcmp_parts_f+0xbc>
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <__fpcmp_parts_f+0xbc>
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	c9 01       	movw	r24, r18
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <main>:
#include <Mega2560.h>

int main(void)
{
    unsigned char currentState = 0;
    nextState = NOINTERRUPT;
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	80 93 48 02 	sts	0x0248, r24

    for(int i = 0 ; i < PACKETSIZE ; i++){
        receive_buffer[i] = 255;
    1330:	80 93 42 02 	sts	0x0242, r24
    1334:	80 93 43 02 	sts	0x0243, r24
    1338:	80 93 44 02 	sts	0x0244, r24
    133c:	80 93 45 02 	sts	0x0245, r24
    1340:	80 93 46 02 	sts	0x0246, r24
    1344:	80 93 47 02 	sts	0x0247, r24
    }

    bufferpos = 0;
    1348:	10 92 49 02 	sts	0x0249, r1
#include <Sabertooth.h>
#include <Mega2560.h>

int main(void)
{
    unsigned char currentState = 0;
    134c:	c0 e0       	ldi	r28, 0x00	; 0
    }

    bufferpos = 0;

    while(1){
        if(nextState != NOINTERRUPT){
    134e:	80 91 48 02 	lds	r24, 0x0248
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	11 f0       	breq	.+4      	; 0x135a <main+0x30>
            currentState = nextState;
    1356:	c0 91 48 02 	lds	r28, 0x0248
        }
        switch(currentState){
    135a:	c1 11       	cpse	r28, r1
    135c:	17 c0       	rjmp	.+46     	; 0x138c <main+0x62>
            case INITIALIZATION:
                Initialize_Mega2560();
    135e:	0e 94 95 00 	call	0x12a	; 0x12a <Initialize_Mega2560>
                Initialize_USART0(9600);   //Fastest Stable Clock is 38400
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	86 e1       	ldi	r24, 0x16	; 22
    1368:	96 e4       	ldi	r25, 0x46	; 70
    136a:	0e 94 a1 02 	call	0x542	; 0x542 <Initialize_USART0>
                Initialize_USART1(9600);
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	86 e1       	ldi	r24, 0x16	; 22
    1374:	96 e4       	ldi	r25, 0x46	; 70
    1376:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Initialize_USART1>
                Initialize_Sabertooth();
    137a:	0e 94 ef 00 	call	0x1de	; 0x1de <Initialize_Sabertooth>
                currentState = WAITFORHOST;
    137e:	c1 e0       	ldi	r28, 0x01	; 1
    }

    bufferpos = 0;

    while(1){
        if(nextState != NOINTERRUPT){
    1380:	80 91 48 02 	lds	r24, 0x0248
    1384:	8f 3f       	cpi	r24, 0xFF	; 255
    1386:	39 f7       	brne	.-50     	; 0x1356 <main+0x2c>
            currentState = nextState;
        }
        switch(currentState){
    1388:	cc 23       	and	r28, r28
    138a:	49 f3       	breq	.-46     	; 0x135e <main+0x34>
    138c:	c1 30       	cpi	r28, 0x01	; 1
    138e:	f9 f6       	brne	.-66     	; 0x134e <main+0x24>
                Initialize_Sabertooth();
                currentState = WAITFORHOST;
                break;

            case WAITFORHOST:
                cli();
    1390:	f8 94       	cli
                SendStringUSART0((unsigned char *)"ID: MainDrive\r\n");
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	92 e0       	ldi	r25, 0x02	; 2
    1396:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SendStringUSART0>
                if(GetByteUART() == 'D'){
    139a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GetByteUART>
    139e:	84 34       	cpi	r24, 0x44	; 68
    13a0:	a9 f0       	breq	.+42     	; 0x13cc <main+0xa2>
                    SendStringUSART0((unsigned char *)"Master Found. Switching to Drive Mode.\r\n");
                    currentState = DRIVING;
                    sei();
                    break;
                }
                Mega2560_delay_ms(500);
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	8a ef       	ldi	r24, 0xFA	; 250
    13a8:	93 e4       	ldi	r25, 0x43	; 67
    13aa:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
                PORTB |= (1<<PB7);
    13ae:	2f 9a       	sbi	0x05, 7	; 5
                Mega2560_delay_ms(100);
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	92 e4       	ldi	r25, 0x42	; 66
    13b8:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
                PORTB &= ~(1<<PB7);
    13bc:	2f 98       	cbi	0x05, 7	; 5
                Mega2560_delay_ms(100);
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	88 ec       	ldi	r24, 0xC8	; 200
    13c4:	92 e4       	ldi	r25, 0x42	; 66
    13c6:	0e 94 97 00 	call	0x12e	; 0x12e <Mega2560_delay_ms>
                break;
    13ca:	c1 cf       	rjmp	.-126    	; 0x134e <main+0x24>

            case WAITFORHOST:
                cli();
                SendStringUSART0((unsigned char *)"ID: MainDrive\r\n");
                if(GetByteUART() == 'D'){
                    SendStringUSART0((unsigned char *)"Master Found. Switching to Drive Mode.\r\n");
    13cc:	88 e1       	ldi	r24, 0x18	; 24
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <SendStringUSART0>
                    currentState = DRIVING;
                    sei();
    13d4:	78 94       	sei
            case WAITFORHOST:
                cli();
                SendStringUSART0((unsigned char *)"ID: MainDrive\r\n");
                if(GetByteUART() == 'D'){
                    SendStringUSART0((unsigned char *)"Master Found. Switching to Drive Mode.\r\n");
                    currentState = DRIVING;
    13d6:	c2 e0       	ldi	r28, 0x02	; 2
                    sei();
                    break;
    13d8:	ba cf       	rjmp	.-140    	; 0x134e <main+0x24>

000013da <__prologue_saves__>:
    13da:	2f 92       	push	r2
    13dc:	3f 92       	push	r3
    13de:	4f 92       	push	r4
    13e0:	5f 92       	push	r5
    13e2:	6f 92       	push	r6
    13e4:	7f 92       	push	r7
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	ca 1b       	sub	r28, r26
    1404:	db 0b       	sbc	r29, r27
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	19 94       	eijmp

00001412 <__epilogue_restores__>:
    1412:	2a 88       	ldd	r2, Y+18	; 0x12
    1414:	39 88       	ldd	r3, Y+17	; 0x11
    1416:	48 88       	ldd	r4, Y+16	; 0x10
    1418:	5f 84       	ldd	r5, Y+15	; 0x0f
    141a:	6e 84       	ldd	r6, Y+14	; 0x0e
    141c:	7d 84       	ldd	r7, Y+13	; 0x0d
    141e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1420:	9b 84       	ldd	r9, Y+11	; 0x0b
    1422:	aa 84       	ldd	r10, Y+10	; 0x0a
    1424:	b9 84       	ldd	r11, Y+9	; 0x09
    1426:	c8 84       	ldd	r12, Y+8	; 0x08
    1428:	df 80       	ldd	r13, Y+7	; 0x07
    142a:	ee 80       	ldd	r14, Y+6	; 0x06
    142c:	fd 80       	ldd	r15, Y+5	; 0x05
    142e:	0c 81       	ldd	r16, Y+4	; 0x04
    1430:	1b 81       	ldd	r17, Y+3	; 0x03
    1432:	aa 81       	ldd	r26, Y+2	; 0x02
    1434:	b9 81       	ldd	r27, Y+1	; 0x01
    1436:	ce 0f       	add	r28, r30
    1438:	d1 1d       	adc	r29, r1
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	ed 01       	movw	r28, r26
    1446:	08 95       	ret

00001448 <_exit>:
    1448:	f8 94       	cli

0000144a <__stop_program>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <__stop_program>
